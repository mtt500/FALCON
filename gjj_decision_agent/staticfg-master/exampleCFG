digraph "clusterdecision_agent_3.0.py" {
	graph [label="decision_agent_3.0.py"]
	1 [label="\"\"\"
这个版本增加 rag 功能。

增加源码的json字段。

tools:
horusec, flawfinder, cppcheck, splint

cppcheck
编程错误，malloc内存未释放，除 0 等

flawfinder
模式匹配和语法检查


动态检查C语言程序安全弱点和编写错误（实际上还是静态分析工具）

horusec
侧重 Web 应用程序安全的漏洞，如 SQL 注入、命令注入、XSS 攻击 和身份验证问题等
\"\"\"
import os
import random
import json
import re
os.environ['OPENAI_API_KEY'
    ] = 'sk-42kUEMoma40GUNhl595bE5D53e994eC59a7a469534564f11'
os.environ['OPENAI_API_BASE'] = 'https://api.gptapi.us/v1/chat/completions'
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.core import Settings, StorageContext
from llama_index.core import SimpleDirectoryReader, VectorStoreIndex, load_index_from_storage
from llama_index.core.tools import QueryEngineTool
llm = OpenAI(model='gpt-3.5-turbo', max_retries=3, temperature=1)
Settings.llm = llm
Settings.embed_model = OpenAIEmbedding(model='text-embedding-3-small')
from llama_index.core.callbacks import CallbackManager
callback_manager = CallbackManager()
Settings.callback_manager = callback_manager
from llama_index.core.tools import FunctionTool
import nest_asyncio
nest_asyncio.apply()
print('正在加载固件漏洞知识库索引..')
kb_storage_context = StorageContext.from_defaults(persist_dir=
    '/home/seed/Desktop/gjj_decision_agent/vector_data')
vuln_kb_index = load_index_from_storage(kb_storage_context)
print('固件漏洞知识库索引加载成功！')
print('固件漏洞知识库索引加载失败，正在构建索引..')
print('loading documents...')
documents = SimpleDirectoryReader(input_dir=
    '/home/seed/Desktop/gjj_decision_agent/storage/testcases').load_data()
print('indexing...')
vuln_kb_index = VectorStoreIndex.from_documents(documents, show_progress=True)
print('persisting...')
vuln_kb_index.storage_context.persist(persist_dir=
    '/home/seed/Desktop/gjj_decision_agent/vector_data')
print('固件漏洞知识库索引构建并持久化完成。')
kb_query_engine = vuln_kb_index.as_query_engine(similarity_top_k=3)
kb_tool = QueryEngineTool.from_defaults(query_engine=kb_query_engine, name=
    'vuln_knowledge_base', description=
    'Provides vulnerable code snippets similar to the target code.')
import subprocess
import tempfile
import uuid
def Horusec_analyze(code_snippet: str):...
def cppcheck_analyze(code_snippet: str):...
def flawfinder_analyze(code_snippet: str):...
horusec_analyze_tool = FunctionTool.from_defaults(fn=Horusec_analyze, name=
    'horusec_analyze_tool', description=
    'the horusec tool for static code snippet analysis.')
cppcheck_analyze_tool = FunctionTool.from_defaults(fn=cppcheck_analyze,
    name='cppcheck_analyze_tool', description=
    'the cppcheck tool for static code snippet analysis.')
flawfinder_analyze_tool = FunctionTool.from_defaults(fn=flawfinder_analyze,
    name='flawfinder_analyze_tool', description=
    'the flawfinder tool for static code snippet analysis.')
from llama_index.agent.openai import OpenAIAgent
from llama_index.core.llms import ChatMessage
system_prompt = \"\"\"
You are a helpful code analysis assistant(agent). You can analyze C code and identify potential vulnerabilities such as buffer overflows, null pointer dereferencing, etc.
\"\"\"
prefix_msgs = [ChatMessage(role='system', content=system_prompt)]
agent = OpenAIAgent.from_tools([horusec_analyze_tool, cppcheck_analyze_tool,
    flawfinder_analyze_tool, kb_tool], prefix_msgs=prefix_msgs, verbose=True)
def analyze_code_agent(code_file: str):...
code_files = []
"]
	"1_calls" [label="OpenAI
OpenAIEmbedding
CallbackManager
nest_asyncio.apply
print
StorageContext.from_defaults
load_index_from_storage
print
print
print
Call.load_data
print
VectorStoreIndex.from_documents
print
vuln_kb_index.storage_context.persist
print
vuln_kb_index.as_query_engine
QueryEngineTool.from_defaults
FunctionTool.from_defaults
FunctionTool.from_defaults
FunctionTool.from_defaults
ChatMessage
OpenAIAgent.from_tools" shape=box]
	1 -> "1_calls" [label=calls style=dashed]
	23 [label="for root, dirs, files in os.walk('/home/seed/Desktop/gjj_decision_agent/c_code'
"]
	24 [label="for file in files:
"]
	26 [label="if file.endswith('.c'):
"]
	28 [label="code_files.append(os.path.join(root, file))
"]
	"28_calls" [label="code_files.append" shape=box]
	28 -> "28_calls" [label=calls style=dashed]
	28 -> 24 [label=""]
	26 -> 28 [label="file.endswith('.c')"]
	26 -> 24 [label="(not file.endswith('.c'))"]
	24 -> 26 [label=files]
	24 -> 23 [label=""]
	23 -> 24 [label="os.walk('/home/seed/Desktop/gjj_decision_agent/c_code')"]
	25 [label="vulnerabilities_report = []
random.shuffle(code_files)
def extract_json_from_content(content, code_snippet, output_file=...
"]
	"25_calls" [label="random.shuffle" shape=box]
	25 -> "25_calls" [label=calls style=dashed]
	45 [label="for code_file in code_files:
"]
	46 [label="if os.path.exists('/home/seed/Desktop/gjj_decision_agent/result.json'):
"]
	48 [label="if code_file in open('/home/seed/Desktop/gjj_decision_agent/result.json',
"]
	48 -> 45 [label="code_file in open('/home/seed/Desktop/gjj_decision_agent/result.json',
    encoding='utf-8').read()"]
	49 [label="resp, code_snippet = analyze_code_agent(code_file)
if resp is None:
"]
	"49_calls" [label=analyze_code_agent shape=box]
	49 -> "49_calls" [label=calls style=dashed]
	53 [label="print(code_file)
extract_json_from_content(resp, code_snippet)
print(e)
"]
	"53_calls" [label="print
extract_json_from_content
print" shape=box]
	53 -> "53_calls" [label=calls style=dashed]
	53 -> 45 [label=""]
	49 -> 53 [label="(resp is not None)"]
	49 -> 45 [label="resp is None"]
	48 -> 49 [label="(code_file not in open('/home/seed/Desktop/gjj_decision_agent/result.json',
    encoding='utf-8').read())"]
	46 -> 48 [label="os.path.exists('/home/seed/Desktop/gjj_decision_agent/result.json')"]
	46 -> 49 [label="(not os.path.exists('/home/seed/Desktop/gjj_decision_agent/result.json'))"]
	45 -> 46 [label=code_files]
	25 -> 45 [label=""]
	23 -> 25 [label=""]
	1 -> 23 [label=""]
	subgraph clusterHorusec_analyze {
		graph [label=Horusec_analyze]
		3 [label="\"\"\"
    使用 Horusec 工具分析 C 语言代码片段并提取漏洞信息。
    :param code_snippet: C 语言代码片段
    :return: Horusec 的 JSON 分析结果
    \"\"\"
file_name = f'{uuid.uuid4().hex}.c'
file_path = os.path.join(tmpdirname, file_name)
f.write(code_snippet)
result = subprocess.run(['horusec', 'start', '-p', tmpdirname, '-i',
    file_name, '--log-level', 'error', '-D'], capture_output=True, text=
    True, encoding='utf-8')
return result.stdout
"]
		"3_calls" [label="tempfile.TemporaryDirectory
uuid.uuid4
os.path.join
open
f.write
subprocess.run" shape=box]
		3 -> "3_calls" [label=calls style=dashed]
	}
	subgraph clustercppcheck_analyze {
		graph [label=cppcheck_analyze]
		8 [label="file_name = f'{uuid.uuid4().hex}.c'
file_path = os.path.join(tmpdirname, file_name)
f.write(code_snippet)
result = subprocess.run(['cppcheck', file_path], capture_output=True, text=
    True, check=True, encoding='utf-8', errors='ignore')
return result.stdout
"]
		"8_calls" [label="tempfile.TemporaryDirectory
uuid.uuid4
os.path.join
open
f.write
subprocess.run" shape=box]
		8 -> "8_calls" [label=calls style=dashed]
	}
	subgraph clusterflawfinder_analyze {
		graph [label=flawfinder_analyze]
		14 [label="file_name = f'{uuid.uuid4().hex}.c'
file_path = os.path.join(tmpdirname, file_name)
f.write(code_snippet)
result = subprocess.run(['flawfinder', file_path], capture_output=True,
    text=True, check=True, encoding='utf-8', errors='ignore')
return result.stdout
"]
		"14_calls" [label="tempfile.TemporaryDirectory
uuid.uuid4
os.path.join
open
f.write
subprocess.run" shape=box]
		14 -> "14_calls" [label=calls style=dashed]
	}
	subgraph clusteranalyze_code_agent {
		graph [label=analyze_code_agent]
		20 [label="\"\"\"
    使用代理分析 C 语言函数片段，并判断是否包含漏洞。
    :param code_file: C 语言代码文件路径
    :return: 分析结果
    \"\"\"
code_snippet = file.read()
analyze_prompt = f\"\"\"
    Analyze the following C code snippet, identify vulnerabilities and output the analysis results in the specified json format. 
    The C code snippet is as follows.
    
    {code_snippet}

    Agent's step:
    1. analyze the C code snippet and extract potential vulnerabilities.
    2. detect common issues like buffer overflow, improper memory management, and others.
    3. return the vulnerabilities found or if the code is safe.

    Your task is to analyze the following C code and return a JSON object with the following fields:
    - function_name: The name of the function being analyzed.
    - is_vulnerable: A boolean indicating whether the code contains a vulnerability.
    - vulnerability_type: The type of vulnerability found (e.g., buffer overflow, command injection).
    - severity: The severity of the vulnerability (e.g., low, medium, high).
    - description: A detailed description of the vulnerability, explaining why it is a vulnerability and how it can be exploited.

    Please return the analysis in the following JSON format:
    {{
        \"function_name\": \"function_name_here\",
        \"is_vulnerable\": true_or_false,
        \"vulnerability_type\": \"vulnerability_type_here\",
        \"severity\": \"severity_level_here\",
        \"description\": \"detailed_description_here\"
    }}

    example output format:
    {{
      \"function_name\": \"authenticate_user\",
      \"is_vulnerable\": true,
      \"vulnerability_type\": \"Buffer Overflow\",
      \"severity\": \"high\",
      \"description\": \"The function uses strcpy without boundary checks, allowing attackers to overwrite memory and potentially execute arbitrary code.\"
    }}

    NOTICE: Return the content in JSON format directly. Please do not include any content other than JSON format in your answer.
    \"\"\"
resp = agent.query(analyze_prompt)
return resp.response, code_snippet
"]
		"20_calls" [label="open
file.read
agent.query" shape=box]
		20 -> "20_calls" [label=calls style=dashed]
	}
	subgraph clusterextract_json_from_content {
		graph [label=extract_json_from_content]
		31 [label="\"\"\"
    从包含 JSON 数据的复杂文本中提取并解析 JSON 数据，然后将解析结果追加到文件。

    :param content: 包含 JSON 数据的字符串
    :param output_file: 目标输出文件的名称（默认是 'output.json'）
    :return: 解析后的 JSON 数据字典，如果没有找到 JSON，则返回 None
    \"\"\"
match = re.search('\\{.*\\}', content, re.DOTALL)
if match:
"]
		"31_calls" [label="re.search" shape=box]
		31 -> "31_calls" [label=calls style=dashed]
		32 [label="json_str = match.group(0)
print('Extracted JSON string:')
print(json_str)
json_data = json.loads(json_str)
json_data['code_snippet'] = code_snippet
if os.path.exists(output_file):
"]
		"32_calls" [label="match.group
print
print
json.loads" shape=box]
		32 -> "32_calls" [label=calls style=dashed]
		36 [label="existing_data = json.load(f)
if isinstance(existing_data, list):
"]
		"36_calls" [label="open
json.load" shape=box]
		36 -> "36_calls" [label=calls style=dashed]
		39 [label="existing_data.append(json_data)
"]
		"39_calls" [label="existing_data.append" shape=box]
		39 -> "39_calls" [label=calls style=dashed]
		37 [label="json.dump(existing_data, f, ensure_ascii=False, indent=4)
print(f'JSON data has been appended to {output_file}')
return json_data
"]
		"37_calls" [label="open
json.dump
print" shape=box]
		37 -> "37_calls" [label=calls style=dashed]
		39 -> 37 [label=""]
		36 -> 39 [label="isinstance(existing_data, list)"]
		41 [label="existing_data = [json_data]
"]
		41 -> 37 [label=""]
		36 -> 41 [label="(not isinstance(existing_data, list))"]
		32 -> 36 [label="os.path.exists(output_file)"]
		38 [label="existing_data = [json_data]
"]
		38 -> 37 [label=""]
		32 -> 38 [label="(not os.path.exists(output_file))"]
		31 -> 32 [label=match]
		34 [label="print('No JSON found in the content.')
return None
"]
		"34_calls" [label=print shape=box]
		34 -> "34_calls" [label=calls style=dashed]
		31 -> 34 [label="(not match)"]
	}
}
