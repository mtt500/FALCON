Function: main

undefined4 main(int param_1,int param_2)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  int iVar4;
  
  iVar3 = 0;
  for (iVar4 = 1; iVar4 < param_1; iVar4 = iVar4 + 1) {
    iVar1 = strcmp(*(char **)(param_2 + iVar4 * 4),"-demo");
    iVar3 = iVar3 + (uint)(iVar1 == 0);
  }
  check_mem();
  bopen(0,0xf000,1);
  signal(0xd,(__sighandler_t)0x1);
  signal(2,sigintHandler);
  signal(0xf,sigintHandler);
  iVar3 = initWebs(iVar3);
  if (iVar3 < 0) {
    uVar2 = 0xffffffff;
  }
  else {
    finished = 0;
    while (finished == 0) {
      iVar3 = socketReady(0xffffffff);
      if ((iVar3 != 0) || (iVar3 = socketSelect(0xffffffff,1000), iVar3 != 0)) {
        socketProcess(0xffffffff);
      }
      websCgiCleanup();
      emfSchedProcess();
    }
    websCloseServer();
    socketClose();
    bclose();
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: deregister_tm_clones

/* WARNING: Removing unreachable block (ram,0x100017ac) */
/* WARNING: Removing unreachable block (ram,0x100017b8) */
/* WARNING: Removing unreachable block (ram,0x100017bc) */

void deregister_tm_clones(void)

{
  return;
}


----------------------------------------
Function: register_tm_clones

/* WARNING: Removing unreachable block (ram,0x100017e8) */
/* WARNING: Removing unreachable block (ram,0x100017f4) */
/* WARNING: Removing unreachable block (ram,0x100017f8) */

void register_tm_clones(void)

{
  return;
}


----------------------------------------
Function: call___do_global_dtors_aux

void call___do_global_dtors_aux(void)

{
  return;
}


----------------------------------------
Function: frame_dummy

/* WARNING: Removing unreachable block (ram,0x100017e8) */
/* WARNING: Removing unreachable block (ram,0x100017f4) */
/* WARNING: Removing unreachable block (ram,0x100017f8) */

void frame_dummy(void)

{
  return;
}


----------------------------------------
Function: call_frame_dummy

void call_frame_dummy(void)

{
  return;
}


----------------------------------------
Function: sigintHandler

void sigintHandler(void)

{
  finished = 1;
  return;
}


----------------------------------------
Function: DeviceManage

void DeviceManage(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/DeviceManage.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_100019c4;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_100019c4:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/DeviceManage.htm");
  return;
}


----------------------------------------
Function: Topfarm

void Topfarm(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/TopFrame.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10001ae8;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10001ae8:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/TopFrame.htm");
  return;
}


----------------------------------------
Function: Syspage

void Syspage(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  if (Login_flag == '\x01') {
    Login_flag = '\0';
  }
  else {
    websWrite(param_1,"<script language=\"javascript\">location=\'/Loginn.htm\'</script>");
  }
  iVar1 = httpPlatformOpen("/Main.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10001c38;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10001c38:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/Main.htm");
  return;
}


----------------------------------------
Function: Netparameter

void Netparameter(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/Netparameter.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10001d54;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10001d54:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/ParameterConf.htm");
  return;
}


----------------------------------------
Function: State_config

void State_config(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/State.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10001e74;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10001e74:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/ParameterConf.htm");
  return;
}


----------------------------------------
Function: ParameterConf

void ParameterConf(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/ParameterConf.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10001f9c;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10001f9c:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/ParameterConf.htm");
  return;
}


----------------------------------------
Function: Leftfarm

void Leftfarm(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/LeftFrame.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_100020c0;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_100020c0:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/LeftFrame.htm");
  return;
}


----------------------------------------
Function: DownLoadCRC

void DownLoadCRC(undefined4 param_1)

{
  char *__nptr;
  int iVar1;
  FILE *__stream;
  void *__ptr;
  int iVar2;
  char acStack_88 [100];
  int local_24 [6];
  
  memset(acStack_88,0,100);
  __nptr = (char *)websGetVar(param_1,"CRCfile",&DAT_10023fc4);
  iVar1 = atoi(__nptr);
  sprintf(acStack_88,"%s%s","/mnt/nandflash/CRC/",CRCfile + iVar1 * 100);
  __stream = fopen(acStack_88,"r");
  if (__stream == (FILE *)0x0) {
    websHeader(param_1);
    websError(param_1,0x194,"Cannot download CRC file");
    websFooter(param_1);
  }
  else {
    fclose(__stream);
    websWrite(param_1,"HTTP/1.0 200 OK\n",&DAT_10023fc4);
    websWrite(param_1,"Content-Type: application/octet-stream\n",&DAT_10023fc4);
    websWrite(param_1,"Content-Disposition: attachment; filename=%s\n\n",CRCfile + iVar1 * 100);
    __ptr = (void *)GetFileString(acStack_88,local_24);
    iVar1 = 0;
    if (0 < local_24[0]) {
      for (; local_24[0] != 0; local_24[0] = local_24[0] - iVar2) {
        iVar2 = websWriteDataNonBlock(param_1,(int)__ptr + iVar1);
        iVar1 = iVar1 + iVar2;
      }
      free(__ptr);
    }
    websDone(param_1,200);
  }
  return;
}


----------------------------------------
Function: DownChannelFile

void DownChannelFile(undefined4 param_1)

{
  char *__nptr;
  int iVar1;
  FILE *__stream;
  void *__ptr;
  int iVar2;
  char acStack_88 [100];
  int local_24 [6];
  
  memset(acStack_88,0,100);
  __nptr = (char *)websGetVar(param_1,"16Channelfile",&DAT_10023fc4);
  iVar1 = atoi(__nptr);
  sprintf(acStack_88,"%s%s","/mnt/nandflash/Data/",Channelfile + iVar1 * 100);
  __stream = fopen(acStack_88,"r");
  if (__stream == (FILE *)0x0) {
    websHeader(param_1);
    websError(param_1,0x194,"Cannot download ChannelData file");
    websFooter(param_1);
  }
  else {
    fclose(__stream);
    websWrite(param_1,"HTTP/1.0 200 OK\n",&DAT_10023fc4);
    websWrite(param_1,"Content-Type: application/octet-stream\n",&DAT_10023fc4);
    websWrite(param_1,"Content-Disposition: attachment; filename=%s\n\n",Channelfile + iVar1 * 100);
    __ptr = (void *)GetFileString(acStack_88,local_24);
    iVar1 = 0;
    if (0 < local_24[0]) {
      for (; local_24[0] != 0; local_24[0] = local_24[0] - iVar2) {
        iVar2 = websWriteDataNonBlock(param_1,(int)__ptr + iVar1);
        iVar1 = iVar1 + iVar2;
      }
      free(__ptr);
    }
    websDone(param_1,200);
  }
  return;
}


----------------------------------------
Function: LogDownLoad

void LogDownLoad(undefined4 param_1)

{
  void *__ptr;
  int iVar1;
  int iVar2;
  int local_28 [7];
  
  system("logread > /var/log/log.txt");
  websWrite(param_1,"HTTP/1.0 200 OK\n",&DAT_10023fc4);
  websWrite(param_1,"Content-Type: application/octet-stream\n",&DAT_10023fc4);
  websWrite(param_1,"Content-Disposition: attachment; filename=log.txt\n\n");
  __ptr = (void *)GetFileString("/var/log/log.txt",local_28);
  if (0 < local_28[0]) {
    iVar2 = 0;
    for (; local_28[0] != 0; local_28[0] = local_28[0] - iVar1) {
      iVar1 = websWriteDataNonBlock(param_1,(int)__ptr + iVar2);
      iVar2 = iVar2 + iVar1;
    }
    free(__ptr);
  }
  websDone(param_1,200);
  return;
}


----------------------------------------
Function: initWebs

void initWebs(int param_1)

{
  in_addr_t iVar1;
  char *pcVar2;
  char acStack_198 [128];
  char acStack_118 [256];
  in_addr_t local_18;
  
  socketOpen();
  iVar1 = inet_addr("192.168.0.18");
  getcwd(acStack_118,0x80);
  pcVar2 = strrchr(acStack_118,0x2f);
  if (pcVar2 != (char *)0x0) {
    *pcVar2 = '\0';
  }
  if (param_1 == 0) {
    strcpy(acStack_198,"/usr/local/www");
  }
  else {
    sprintf(acStack_198,"%s/%s",acStack_118,"/mnt/Nand1/wwwdemo");
  }
  websSetDefaultDir(acStack_198);
  local_18 = iVar1;
  pcVar2 = inet_ntoa((in_addr)&local_18);
                    /* WARNING: Subroutine does not return */
  strlen(pcVar2);
}


----------------------------------------
Function: websHomePageHandler

undefined4 websHomePageHandler(undefined4 param_1)

{
  int iVar1;
  char *in_r7;
  
  if ((*in_r7 != '\0') && (iVar1 = strcmp(in_r7,"/"), iVar1 != 0)) {
    return 0;
  }
  websRedirect(param_1,"Main.htm");
  return 1;
}


----------------------------------------
Function: ws_set_cookie

void ws_set_cookie(undefined4 param_1,char *param_2)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: ws_clear_cookie

void ws_clear_cookie(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  time_t tVar1;
  tm *__tp;
  char acStack_68 [64];
  int local_28 [7];
  
  tVar1 = time((time_t *)0x0);
  local_28[0] = tVar1 + -0x3c;
  __tp = gmtime(local_28);
  strftime(acStack_68,0x40,"%A, %d-%m-%Y %H:%M:%S GMT",__tp);
  websWrite(param_1,"Set-Cookie: %s=0; Expires=%s; Path=%s\r\n",param_2,acStack_68,param_3);
  return;
}


----------------------------------------
Function: ws_get_cookie

undefined4 ws_get_cookie(int param_1)

{
  if ((*(char **)(param_1 + 0xd8) != (char *)0x0) && ((*(uint *)(param_1 + 0x100) & 8) != 0)) {
                    /* WARNING: Subroutine does not return */
    strlen(*(char **)(param_1 + 0xd8));
  }
  return 1;
}


----------------------------------------
Function: lWeb_ChkUser

undefined4 lWeb_ChkUser(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  char *pcVar2;
  undefined4 local_18;
  undefined auStack_14 [16];
  
  iVar1 = ws_get_cookie(param_2,"Username",&local_18,auStack_14);
  if (iVar1 == 0) {
    iVar1 = strcmpci(local_18,g_SysDev_t);
    if (iVar1 == 0) {
      return 0;
    }
    pcVar2 = "<script language=\"javascript\">location=\'/Loginn.htm\'</script>";
  }
  else {
    pcVar2 = "<script language=\"JavaScript\">location=\'/Loginn.htm\'</script>";
  }
  websWrite(param_2,pcVar2);
  return 0xffffffff;
}


----------------------------------------
Function: check_mem

undefined4 check_mem(void)

{
  int __shmid;
  char *__s;
  void *pvVar1;
  
  __shmid = shmget(5999,0x1372,0x3b6);
  if (__shmid == -1) {
    __s = "shmget failed";
  }
  else {
    pvVar1 = shmat(__shmid,(void *)0x0,0);
    if (pvVar1 != (void *)0xffffffff) {
      g_pWrData = pvVar1;
      return 0;
    }
    __s = "shmat failed\n";
  }
  perror(__s);
                    /* WARNING: Subroutine does not return */
  exit(0);
}


----------------------------------------
Function: Rom_show

void Rom_show(int param_1)

{
  undefined8 uVar1;
  
  memset(str_meminformation,0,0x10);
  uVar1 = __extendsfdf2((uint)*(byte *)(param_1 + 0x3c) |
                        (uint)*(byte *)(param_1 + 0x3b) << 8 |
                        (uint)*(byte *)(param_1 + 0x3a) << 0x10 |
                        (uint)*(byte *)(param_1 + 0x39) << 0x18);
  sprintf(str_meminformation,"%3.1f%%",(int)((ulonglong)uVar1 >> 0x20),(int)uVar1);
  return;
}


----------------------------------------
Function: Check_NetConf

void Check_NetConf(void)

{
  int iVar1;
  char acStack_88 [132];
  
  iVar1 = access("/usr/local/webs/network.conf",0);
  if (iVar1 != 0) {
    memset(acStack_88,0,0x80);
    sprintf(acStack_88,"cp %s %s","/etc/config/network","/usr/local/webs/network.conf");
    system(acStack_88);
  }
  return;
}


----------------------------------------
Function: Dram_show

void Dram_show(int param_1)

{
  memset(str_Dram,0,0x10);
  sprintf(str_Dram,"%uKB",
          ((uint)*(byte *)(param_1 + 0x40) |
          (uint)*(byte *)(param_1 + 0x3f) << 8 | (uint)*(byte *)(param_1 + 0x3e) << 0x10) << 10);
  return;
}


----------------------------------------
Function: Flashram_show

void Flashram_show(int param_1)

{
  memset(str_Flashram,0,0x10);
  sprintf(str_Flashram,"%uKB",
          (uint)*(byte *)(param_1 + 0x44) |
          (uint)*(byte *)(param_1 + 0x43) << 8 |
          (uint)*(byte *)(param_1 + 0x42) << 0x10 | (uint)*(byte *)(param_1 + 0x41) << 0x18);
  return;
}


----------------------------------------
Function: Welcome

void Welcome(undefined4 param_1)

{
  byte bVar1;
  byte bVar2;
  byte bVar3;
  byte bVar4;
  int iVar5;
  int iVar6;
  char *pcVar7;
  int iVar8;
  tm *__tp;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  undefined8 uVar9;
  char acStack_108 [64];
  char acStack_c8 [64];
  char acStack_88 [64];
  time_t local_48 [5];
  uint local_34;
  
  local_34 = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
             (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
             (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4
             | (uint)(in_cr7 & 0xf);
  memset(acStack_88,0,0x40);
  memset(acStack_c8,0,0x40);
  memset(acStack_108,0,0x40);
  Check_NetConf();
  Rom_show(g_pWrData);
  Dram_show(g_pWrData);
  Flashram_show(g_pWrData);
  bVar1 = *(byte *)(g_pWrData + 0x35);
  bVar2 = *(byte *)(g_pWrData + 0x36);
  bVar3 = *(byte *)(g_pWrData + 0x37);
  bVar4 = *(byte *)(g_pWrData + 0x38);
  iVar5 = httpPlatformOpen("/Welcome.htm",0);
  if (-1 < iVar5) {
    iVar6 = InitReadString();
    if (-1 < iVar6) {
      iVar6 = websCompareVar(param_1,&DAT_10020f40,&DAT_10020f44);
      if (iVar6 != 0) {
        pcVar7 = (char *)websGetVar(param_1,"writevalue",&DAT_10023fc4);
        iVar6 = g_pWrData;
        iVar8 = atoi(pcVar7);
        *(char *)(iVar6 + 0x30) = (char)iVar8;
        pcVar7 = (char *)websGetVar(param_1,&DAT_10020f58,&DAT_10023fc4);
        iVar6 = g_pWrData;
        iVar8 = atoi(pcVar7);
        *(char *)(iVar6 + 0x34) = (char)iVar8;
        *(char *)(iVar6 + 0x31) = (char)((uint)iVar8 >> 0x18);
        *(char *)(iVar6 + 0x32) = (char)((uint)iVar8 >> 0x10);
        *(char *)(iVar6 + 0x33) = (char)((uint)iVar8 >> 8);
      }
      local_48[0] = time((time_t *)0x0);
      __tp = localtime(local_48);
      memset(acStack_88,0,0x40);
      sprintf(acStack_88," %04d-%02d-%02d %02d:%02d:%02d",__tp->tm_year + 0x76c,__tp->tm_mon + 1,
              __tp->tm_mday,__tp->tm_hour + 8,__tp->tm_min,__tp->tm_sec);
      pcVar7 = asctime(__tp);
      sprintf(acStack_c8,"%s\n",pcVar7);
      while( true ) {
        iVar6 = ReadString(iVar5,buf,0x1000);
        if (iVar6 < 0) break;
        if (iVar6 == 0) goto LAB_1000319c;
        buf[iVar6] = 0;
        iVar8 = strcmp(buf,"<!--DateTime -->");
        if (iVar8 == 0) {
          iVar6 = ReadString(iVar5,buf,0x1000);
          if (-1 < iVar6) {
            if (iVar6 != 0) {
              websWriteDataNonBlock(param_1,buf,iVar6 + -2);
              websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
              strlen(acStack_c8);
            }
            goto LAB_1000319c;
          }
          break;
        }
        websWriteDataNonBlock(param_1,buf,iVar6);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10003758:
    if (iVar5 != 0) {
      httpPlatformClose(iVar5);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/Welcome.htm");
  return;
LAB_1000319c:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_10003220;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Versions -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",g_pWrData + 0x45);
    goto LAB_10003220;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000319c;
LAB_10003220:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_100032a8;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Meminformation -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",str_meminformation);
    goto LAB_100032a8;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_10003220;
LAB_100032a8:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_10003330;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Flashram -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",str_Flashram);
    goto LAB_10003330;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_100032a8;
LAB_10003330:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_100033b4;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Working -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",&DAT_10020ff4);
    goto LAB_100033b4;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_10003330;
LAB_100033b4:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_1000343c;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Dram -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",str_Dram);
    goto LAB_1000343c;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_100033b4;
LAB_1000343c:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) {
LAB_10003484:
    uVar9 = __extendsfdf2((uint)bVar4 | (uint)bVar3 << 8 | (uint)bVar2 << 0x10 | (uint)bVar1 << 0x18
                         );
    sprintf(acStack_108,"%3.1f",(int)((ulonglong)uVar9 >> 0x20),(int)uVar9);
    goto LAB_100034c0;
  }
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--ModelTime -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",acStack_88);
    goto LAB_10003484;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000343c;
LAB_100034c0:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) {
LAB_1000352c:
    if (*(char *)(g_pWrData + 0x30) != '\x01') goto LAB_10003644;
    goto LAB_10003554;
  }
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Temp -->");
  if (iVar8 == 0) {
    websWrite(param_1,"%s\n",acStack_108);
    goto LAB_1000352c;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_100034c0;
LAB_10003554:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_10003644;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--WRTFILE -->");
  if (iVar8 == 0) {
    iVar6 = ReadString(iVar5,buf,0x1000);
    if (-1 < iVar6) {
      if (iVar6 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar6 + -2);
        websWrite(param_1," checked=\"checked\" />\n");
      }
      goto LAB_10003644;
    }
    goto LAB_10003758;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_10003554;
LAB_10003644:
  iVar6 = ReadString(iVar5,buf,0x1000);
  if (iVar6 < 0) goto LAB_10003758;
  if (iVar6 == 0) goto LAB_1000371c;
  buf[iVar6] = 0;
  iVar8 = strcmp(buf,"<!--Cmp -->");
  if (iVar8 == 0) {
    iVar6 = ReadString(iVar5,buf,0x1000);
    if (-1 < iVar6) {
      if (iVar6 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar6 + -2);
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)*(byte *)(g_pWrData + 0x34) |
                  (uint)*(byte *)(g_pWrData + 0x33) << 8 |
                  (uint)*(byte *)(g_pWrData + 0x32) << 0x10 |
                  (uint)*(byte *)(g_pWrData + 0x31) << 0x18);
      }
LAB_1000371c:
      while( true ) {
        iVar6 = ReadString(iVar5,buf,0x1000);
        if (iVar6 < 0) break;
        if (iVar6 == 0) {
          if (iVar5 != 0) {
            httpPlatformClose(iVar5);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar8 = 0;
        do {
          iVar8 = websWriteDataNonBlock(param_1,buf + iVar8,iVar6);
          if (iVar8 < 0) goto LAB_10003758;
          iVar6 = iVar6 - iVar8;
        } while (iVar6 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    goto LAB_10003758;
  }
  websWriteDataNonBlock(param_1,buf,iVar6);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_10003644;
}


----------------------------------------
Function: SetSensorCfg

undefined4 SetSensorCfg(int param_1,undefined2 *param_2)

{
  int iVar1;
  undefined4 local_28;
  undefined2 local_24 [12];
  
  local_24[0] = 0;
  local_28 = 0;
  if ((-1 < _fd_misc) || (_fd_misc = open("/dev/EMISC0",2), -1 < _fd_misc)) {
    if (param_1 == -0x3ffbbae2) {
      local_24[0] = *param_2;
      iVar1 = ioctl(_fd_misc,0x80014502,local_24);
      if (iVar1 == 0) {
        return 0;
      }
    }
    else {
      if (param_1 != -0x3ffbbae1) {
        return 0xfffffffd;
      }
      iVar1 = ioctl(_fd_misc,0x40014503,&local_28);
      if (iVar1 == 0) {
        *param_2 = (short)local_28;
        return 0;
      }
    }
  }
  return 0xfffffffc;
}


----------------------------------------
Function: ReadSensorVal

undefined4 ReadSensorVal(undefined4 *param_1)

{
  int iVar1;
  undefined4 uVar2;
  undefined4 local_18 [4];
  
  local_18[0] = 0;
  if (((_fd_misc < 0) && (_fd_misc = open("/dev/EMISC0",2), _fd_misc < 0)) ||
     (iVar1 = ioctl(_fd_misc,0x40014501,local_18), iVar1 != 0)) {
    uVar2 = 0xfffffffc;
  }
  else {
    *param_1 = local_18[0];
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: get_temperature

/* WARNING: Control flow encountered bad instruction data */

void get_temperature(void)

{
  undefined4 local_18;
  undefined2 local_14 [10];
  
  local_14[0] = 9;
  local_18 = 0;
  SetSensorCfg(0xc004451e,local_14);
  ReadSensorVal(&local_18);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ModifyPwdHandleSubmit

void ModifyPwdHandleSubmit(undefined4 param_1)

{
  char *pcVar1;
  int iVar2;
  char *__s2;
  
  pcVar1 = (char *)websGetVar(param_1,"Oldpwd",&DAT_10023fc4);
  iVar2 = strcmp(pcVar1,g_SysDev_t + 0x10);
  if (iVar2 == 0) {
    pcVar1 = (char *)websGetVar(param_1,"WebNpwd1",&DAT_10023fc4);
    __s2 = (char *)websGetVar(param_1,"WebNpwd2",&DAT_10023fc4);
    iVar2 = strcmp(pcVar1,__s2);
    if (iVar2 == 0) {
      strcpy(g_SysDev_t + 0x10,pcVar1);
      iVar2 = UpdateRtuRunInfo(g_SysDev_t);
      if (iVar2 == 0) {
        web_flag = 2;
        websSetPassword(pcVar1);
        return;
      }
      web_flag = 1;
    }
  }
  else {
    web_flag = 3;
  }
  return;
}


----------------------------------------
Function: ModifyUserHandleSubmit

void ModifyUserHandleSubmit(undefined4 param_1)

{
  char *pcVar1;
  int iVar2;
  
  GetRtuRunInfo(g_SysDev_t);
  pcVar1 = (char *)websGetVar(param_1,"OldUserName",&DAT_10023fc4);
  iVar2 = strcmp(pcVar1,g_SysDev_t);
  if (iVar2 != 0) {
    web_flag = 4;
    return;
  }
  iVar2 = websCompareVar(param_1,"IfModifyUser",&DAT_10023cd4);
  if (iVar2 != 0) {
    pcVar1 = (char *)websGetVar(param_1,"NewUserName",&DAT_10023fc4);
    if (pcVar1 == (char *)0x0) {
      return;
    }
    strcpy(g_SysDev_t,pcVar1);
    websSetUsername(pcVar1);
  }
  ModifyPwdHandleSubmit(param_1);
  return;
}


----------------------------------------
Function: UserManage

void UserManage(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  undefined *puVar4;
  
  iVar1 = websCompareVar(param_1,"ModifyPwd",&DAT_100210dc);
  if (iVar1 != 0) {
    ModifyUserHandleSubmit(param_1);
  }
  iVar1 = httpPlatformOpen("/UserManage.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) goto LAB_10003d4c;
        if (iVar2 == 0) goto LAB_10003d00;
        buf[iVar2] = 0;
        iVar3 = strcmp(buf,"<!--TipWebFlag -->");
        if (iVar3 == 0) break;
        websWriteDataNonBlock(param_1,buf,iVar2);
        websWrite(param_1,&DAT_10022d7c);
      }
      if (web_flag == 0) {
        puVar4 = &DAT_10022d7c;
LAB_10003c88:
        websWrite(param_1,puVar4);
      }
      else {
        if (web_flag == 1) {
          puVar4 = &DAT_10021108;
          goto LAB_10003c88;
        }
        if (web_flag == 2) {
          puVar4 = &DAT_1002111c;
          goto LAB_10003c88;
        }
        if (web_flag == 3) {
          puVar4 = &DAT_10021130;
          goto LAB_10003c88;
        }
        if (web_flag == 4) {
          puVar4 = &DAT_10021144;
          goto LAB_10003c88;
        }
      }
      web_flag = 0;
LAB_10003d00:
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10003d4c;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10003d4c:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/UserManage.htm");
  return;
}


----------------------------------------
Function: getfilename

int getfilename(char *param_1,int param_2)

{
  DIR *__dirp;
  int iVar1;
  int iVar2;
  dirent *pdVar3;
  char *pcVar4;
  
  __dirp = opendir(param_1);
  if (__dirp == (DIR *)0x0) {
    perror("opendir error");
    iVar1 = -1;
  }
  else {
    iVar1 = 0;
    if (param_2 == 1) {
      while (pdVar3 = readdir(__dirp), pdVar3 != (dirent *)0x0) {
        pcVar4 = pdVar3->d_name;
        iVar2 = strcmp(pcVar4,".");
        if ((iVar2 != 0) && (iVar2 = strcmp(pcVar4,".."), iVar2 != 0)) {
          iVar2 = iVar1 * 100;
          iVar1 = iVar1 + 1;
          memcpy(CRCfile + iVar2,pcVar4,0x100);
        }
      }
    }
    else {
      while (pdVar3 = readdir(__dirp), pdVar3 != (dirent *)0x0) {
        pcVar4 = pdVar3->d_name;
        iVar2 = strcmp(pcVar4,".");
        if ((iVar2 != 0) && (iVar2 = strcmp(pcVar4,".."), iVar2 != 0)) {
          iVar2 = iVar1 * 100;
          iVar1 = iVar1 + 1;
          memcpy(Channelfile + iVar2,pcVar4,0x100);
        }
      }
    }
  }
  return iVar1;
}


----------------------------------------
Function: UpgradeFirmware

void UpgradeFirmware(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  iVar1 = getfilename("/mnt/nandflash/CRC/",1);
  iVar2 = getfilename("/mnt/nandflash/Data/",2);
  iVar3 = httpPlatformOpen("/UpgradeFirmware.htm",0);
  if (-1 < iVar3) {
    iVar4 = InitReadString();
    if (-1 < iVar4) {
      websHeader(param_1);
      if (iVar1 < 0) {
        while( true ) {
          iVar1 = ReadString(iVar3,buf,0x1000);
          if (iVar1 < 0) goto LAB_10004354;
          if (iVar1 == 0) goto LAB_100040f8;
          buf[iVar1] = 0;
          iVar4 = strcmp(buf,"<!--CRCMsg -->");
          if (iVar4 == 0) break;
          websWriteDataNonBlock(param_1,buf,iVar1);
          websWrite(param_1,&DAT_10022d7c);
        }
        websWriteDataNonBlock(param_1,&DAT_10021198,0x55);
        websWrite(param_1,&DAT_10022d7c);
LAB_100040f8:
        if (iVar2 < 0) {
          while( true ) {
            iVar1 = ReadString(iVar3,buf,0x1000);
            if (iVar1 < 0) goto LAB_10004354;
            if (iVar1 == 0) goto LAB_10004304;
            buf[iVar1] = 0;
            iVar2 = strcmp(buf,"<!--16ChannelMsg -->");
            if (iVar2 == 0) break;
            websWriteDataNonBlock(param_1,buf,iVar1);
            websWrite(param_1,&DAT_10022d7c);
          }
          websWriteDataNonBlock(param_1,&DAT_10021238,0x56);
          websWrite(param_1,&DAT_10022d7c);
LAB_10004304:
          while( true ) {
            iVar1 = ReadString(iVar3,buf,0x1000);
            if (iVar1 < 0) break;
            if (iVar1 == 0) {
              if (iVar3 != 0) {
                httpPlatformClose(iVar3);
              }
              websDone(param_1,0xc9);
              return;
            }
            iVar2 = 0;
            do {
              iVar2 = websWriteDataNonBlock(param_1,buf + iVar2,iVar1);
              if (iVar2 < 0) goto LAB_10004354;
              iVar1 = iVar1 - iVar2;
            } while (iVar1 != 0);
            websWrite(param_1,&DAT_10022d7c);
          }
        }
        else {
          while( true ) {
            iVar1 = ReadString(iVar3,_wespagebuf,0x1000);
            if (iVar1 < 0) break;
            if (iVar1 == 0) goto LAB_10004304;
            _wespagebuf[iVar1] = 0;
            iVar4 = strcmp(_wespagebuf,"<!--16Channelfile -->");
            if (iVar4 == 0) {
              iVar1 = ReadString(iVar3,_wespagebuf,0x1000);
              if (-1 < iVar1) {
                if (iVar1 != 0) {
                  websWriteBlock(param_1,_wespagebuf);
                  websWrite(param_1,&DAT_10022d7c);
                  if (iVar2 != 0) {
                    websWrite(param_1,"<option value=\"%d\">",0);
                    /* WARNING: Subroutine does not return */
                    strlen(Channelfile);
                  }
                }
                goto LAB_10004304;
              }
              break;
            }
            websWriteBlock(param_1,_wespagebuf,iVar1);
            websWrite(param_1,&DAT_10022d7c);
          }
        }
      }
      else {
        while( true ) {
          iVar4 = ReadString(iVar3,_wespagebuf,0x1000);
          if (iVar4 < 0) break;
          if (iVar4 == 0) goto LAB_100040f8;
          _wespagebuf[iVar4] = 0;
          iVar5 = strcmp(_wespagebuf,"<!--CRCfile -->");
          if (iVar5 == 0) {
            iVar4 = ReadString(iVar3,_wespagebuf,0x1000);
            if (-1 < iVar4) {
              if (iVar4 != 0) {
                websWriteBlock(param_1,_wespagebuf);
                websWrite(param_1,&DAT_10022d7c);
                if (iVar1 != 0) {
                  websWrite(param_1,"<option value=\"%d\">",0);
                    /* WARNING: Subroutine does not return */
                  strlen(CRCfile);
                }
              }
              goto LAB_100040f8;
            }
            break;
          }
          websWriteBlock(param_1,_wespagebuf,iVar4);
          websWrite(param_1,&DAT_10022d7c);
        }
      }
    }
LAB_10004354:
    if (iVar3 != 0) {
      httpPlatformClose(iVar3);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/UpgradeFirmware.htm");
  return;
}


----------------------------------------
Function: CHECK_DATE

/* WARNING: Control flow encountered bad instruction data */

void CHECK_DATE(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: Chang_Mem_Data

undefined4 Chang_Mem_Data(undefined4 param_1,undefined4 param_2)

{
  bool bVar1;
  undefined uVar2;
  undefined uVar3;
  undefined uVar4;
  undefined uVar5;
  int iVar6;
  uint uVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  char acStack_1f8 [204];
  char acStack_12c [128];
  int local_ac;
  char acStack_a8 [64];
  char acStack_68 [16];
  int local_58;
  
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"cmptime",&data);
  puts(&data);
  iVar6 = atoi(&data);
  iVar10 = g_pWrData;
  if (-1 < iVar6) {
    *(char *)(g_pWrData + 0x31) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar10 + 0x32) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar10 + 0x33) = (char)((uint)iVar6 >> 8);
    *(char *)(iVar10 + 0x34) = (char)iVar6;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,&DAT_100212b0,&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0x65) = data;
    *(undefined *)(iVar10 + 0x66) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0x67) = uVar3;
    *(undefined *)(iVar10 + 0x68) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0x69) = uVar2;
    *(undefined *)(iVar10 + 0x6a) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 0x6b) = uVar3;
    *(undefined *)(iVar10 + 0x6c) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0x6d) = uVar2;
    *(undefined *)(iVar10 + 0x6e) = uVar5;
    *(undefined *)(iVar10 + 0x6f) = uVar3;
    *(undefined *)(iVar10 + 0x70) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0x71) = DAT_100b1968;
    *(undefined *)(iVar10 + 0x72) = uVar2;
    *(undefined *)(iVar10 + 0x73) = uVar3;
    *(undefined *)(iVar10 + 0x74) = uVar4;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"MASK1",&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0x75) = data;
    *(undefined *)(iVar10 + 0x76) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0x77) = uVar3;
    *(undefined *)(iVar10 + 0x78) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0x79) = uVar2;
    *(undefined *)(iVar10 + 0x7a) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 0x7b) = uVar3;
    *(undefined *)(iVar10 + 0x7c) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0x7d) = uVar2;
    *(undefined *)(iVar10 + 0x7e) = uVar5;
    *(undefined *)(iVar10 + 0x7f) = uVar3;
    *(undefined *)(iVar10 + 0x80) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0x81) = DAT_100b1968;
    *(undefined *)(iVar10 + 0x82) = uVar2;
    *(undefined *)(iVar10 + 0x83) = uVar3;
    *(undefined *)(iVar10 + 0x84) = uVar4;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"GATEWAY1",&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0x85) = data;
    *(undefined *)(iVar10 + 0x86) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0x87) = uVar3;
    *(undefined *)(iVar10 + 0x88) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0x89) = uVar2;
    *(undefined *)(iVar10 + 0x8a) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 0x8b) = uVar3;
    *(undefined *)(iVar10 + 0x8c) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0x8d) = uVar2;
    *(undefined *)(iVar10 + 0x8e) = uVar5;
    *(undefined *)(iVar10 + 0x8f) = uVar3;
    *(undefined *)(iVar10 + 0x90) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0x91) = DAT_100b1968;
    *(undefined *)(iVar10 + 0x92) = uVar2;
    *(undefined *)(iVar10 + 0x93) = uVar3;
    *(undefined *)(iVar10 + 0x94) = uVar4;
  }
  memset(&data,0,0x10);
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"Control_port.send_port1",&data);
  iVar6 = atoi(&data);
  iVar10 = g_pWrData;
  if (iVar6 == 0) {
    upldFlag = 8;
  }
  else {
    *(char *)(g_pWrData + 0x5d) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar10 + 0x5e) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar10 + 0x5f) = (char)((uint)iVar6 >> 8);
    *(char *)(iVar10 + 0x60) = (char)iVar6;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"Control_port.receive_port1",&data);
  iVar6 = atoi(&data);
  iVar10 = g_pWrData;
  if (iVar6 == 0) {
    upldFlag = 8;
  }
  else {
    *(char *)(g_pWrData + 0x61) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar10 + 0x62) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar10 + 99) = (char)((uint)iVar6 >> 8);
    *(char *)(iVar10 + 100) = (char)iVar6;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,&DAT_100212fc,&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0xa1) = data;
    *(undefined *)(iVar10 + 0xa2) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0xa3) = uVar3;
    *(undefined *)(iVar10 + 0xa4) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0xa5) = uVar2;
    *(undefined *)(iVar10 + 0xa6) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 0xa7) = uVar3;
    *(undefined *)(iVar10 + 0xa8) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0xa9) = uVar2;
    *(undefined *)(iVar10 + 0xaa) = uVar5;
    *(undefined *)(iVar10 + 0xab) = uVar3;
    *(undefined *)(iVar10 + 0xac) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0xad) = DAT_100b1968;
    *(undefined *)(iVar10 + 0xae) = uVar2;
    *(undefined *)(iVar10 + 0xaf) = uVar3;
    *(undefined *)(iVar10 + 0xb0) = uVar4;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"MASK2",&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0xb1) = data;
    *(undefined *)(iVar10 + 0xb2) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0xb3) = uVar3;
    *(undefined *)(iVar10 + 0xb4) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0xb5) = uVar2;
    *(undefined *)(iVar10 + 0xb6) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 0xb7) = uVar3;
    *(undefined *)(iVar10 + 0xb8) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0xb9) = uVar2;
    *(undefined *)(iVar10 + 0xba) = uVar5;
    *(undefined *)(iVar10 + 0xbb) = uVar3;
    *(undefined *)(iVar10 + 0xbc) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0xbd) = DAT_100b1968;
    *(undefined *)(iVar10 + 0xbe) = uVar2;
    *(undefined *)(iVar10 + 0xbf) = uVar3;
    *(undefined *)(iVar10 + 0xc0) = uVar4;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"GATEWAY2",&data);
  StringSplit_Struct(&local_ac,&data,&DAT_10021168);
  if ((local_ac == 3) &&
     (iVar6 = atoi(acStack_a8), uVar4 = DAT_100b195f, uVar3 = DAT_100b195e, uVar2 = DAT_100b195d,
     iVar10 = g_pWrData, 0 < iVar6)) {
    *(undefined *)(g_pWrData + 0xc1) = data;
    *(undefined *)(iVar10 + 0xc2) = uVar2;
    uVar5 = DAT_100b1961;
    uVar2 = DAT_100b1960;
    *(undefined *)(iVar10 + 0xc3) = uVar3;
    *(undefined *)(iVar10 + 0xc4) = uVar4;
    uVar4 = DAT_100b1963;
    uVar3 = DAT_100b1962;
    *(undefined *)(iVar10 + 0xc5) = uVar2;
    *(undefined *)(iVar10 + 0xc6) = uVar5;
    uVar5 = DAT_100b1965;
    uVar2 = DAT_100b1964;
    *(undefined *)(iVar10 + 199) = uVar3;
    *(undefined *)(iVar10 + 200) = uVar4;
    uVar4 = DAT_100b1967;
    uVar3 = DAT_100b1966;
    *(undefined *)(iVar10 + 0xc9) = uVar2;
    *(undefined *)(iVar10 + 0xca) = uVar5;
    *(undefined *)(iVar10 + 0xcb) = uVar3;
    *(undefined *)(iVar10 + 0xcc) = uVar4;
    uVar4 = DAT_100b196b;
    uVar3 = DAT_100b196a;
    uVar2 = DAT_100b1969;
    *(undefined *)(iVar10 + 0xcd) = DAT_100b1968;
    *(undefined *)(iVar10 + 0xce) = uVar2;
    *(undefined *)(iVar10 + 0xcf) = uVar3;
    *(undefined *)(iVar10 + 0xd0) = uVar4;
  }
  memset(&data,0,0x10);
  GetNetProfileString(param_2,"Control_port.send_port2",&data);
  iVar6 = atoi(&data);
  iVar10 = g_pWrData;
  if (iVar6 == 0) {
    upldFlag = 8;
  }
  else {
    *(char *)(g_pWrData + 0x99) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar10 + 0x9a) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar10 + 0x9b) = (char)((uint)iVar6 >> 8);
    *(char *)(iVar10 + 0x9c) = (char)iVar6;
  }
  GetNetProfileString(param_2,"Control_port.receive_port2",&data);
  iVar6 = atoi(&data);
  iVar10 = g_pWrData;
  if (iVar6 == 0) {
    upldFlag = 8;
  }
  else {
    *(char *)(g_pWrData + 0x9d) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar10 + 0x9e) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar10 + 0x9f) = (char)((uint)iVar6 >> 8);
    *(char *)(iVar10 + 0xa0) = (char)iVar6;
  }
  iVar10 = 0;
  do {
    iVar9 = iVar10 * 0x12a;
    sprintf(acStack_68,PTR_s_Port_Name__d__10020a2c,iVar10);
    GetNetProfileString(param_2,acStack_68,acStack_1f8);
    strcpy((char *)(g_pWrData + iVar9 + 0x16f),acStack_1f8);
    memset(&data,0,0x10);
    sprintf(acStack_12c,PTR_s_Data_port__d__castMode_10020a30,iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 - 1U < 3) {
      *(char *)(g_pWrData + iVar9 + 0xd5) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].shujuyuan",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    uVar7 = atoi(&data);
    if (uVar7 < 3) {
      iVar6 = g_pWrData + iVar9;
      *(char *)(iVar6 + 0x1f7) = (char)(uVar7 >> 0x18);
      *(char *)(iVar6 + 0x1f8) = (char)(uVar7 >> 0x10);
      *(char *)(iVar6 + 0x1f9) = (char)(uVar7 >> 8);
      *(char *)(iVar6 + 0x1fa) = (char)uVar7;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].GroupAddr",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    StringSplit_Struct(&local_ac,&data,&DAT_10021168);
    if (local_ac == 3) {
      iVar6 = atoi(acStack_a8);
      uVar4 = DAT_100b195f;
      uVar3 = DAT_100b195e;
      uVar2 = DAT_100b195d;
      if (iVar6 - 0xe0U < 0x10) {
        iVar6 = g_pWrData + iVar9;
        *(undefined *)(iVar6 + 0x10f) = data;
        *(undefined *)(iVar6 + 0x110) = uVar2;
        uVar5 = DAT_100b1961;
        uVar2 = DAT_100b1960;
        *(undefined *)(iVar6 + 0x111) = uVar3;
        *(undefined *)(iVar6 + 0x112) = uVar4;
        uVar4 = DAT_100b1963;
        uVar3 = DAT_100b1962;
        *(undefined *)(iVar6 + 0x113) = uVar2;
        *(undefined *)(iVar6 + 0x114) = uVar5;
        uVar5 = DAT_100b1965;
        uVar2 = DAT_100b1964;
        *(undefined *)(iVar6 + 0x115) = uVar3;
        *(undefined *)(iVar6 + 0x116) = uVar4;
        uVar4 = DAT_100b1967;
        uVar3 = DAT_100b1966;
        *(undefined *)(iVar6 + 0x117) = uVar2;
        *(undefined *)(iVar6 + 0x118) = uVar5;
        *(undefined *)(iVar6 + 0x119) = uVar3;
        *(undefined *)(iVar6 + 0x11a) = uVar4;
        uVar4 = DAT_100b196b;
        uVar3 = DAT_100b196a;
        uVar2 = DAT_100b1969;
        *(undefined *)(iVar6 + 0x11b) = DAT_100b1968;
        *(undefined *)(iVar6 + 0x11c) = uVar2;
        *(undefined *)(iVar6 + 0x11d) = uVar3;
        *(undefined *)(iVar6 + 0x11e) = uVar4;
      }
    }
    else {
      upldFlag = 8;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].addrTo1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    StringSplit_Struct(&local_ac,&data,&DAT_10021168);
    uVar4 = DAT_100b195f;
    uVar3 = DAT_100b195e;
    uVar2 = DAT_100b195d;
    if (local_ac == 3) {
      iVar6 = g_pWrData + iVar9;
      *(undefined *)(iVar6 + 0x12f) = data;
      *(undefined *)(iVar6 + 0x130) = uVar2;
      uVar5 = DAT_100b1961;
      uVar2 = DAT_100b1960;
      *(undefined *)(iVar6 + 0x131) = uVar3;
      *(undefined *)(iVar6 + 0x132) = uVar4;
      uVar4 = DAT_100b1963;
      uVar3 = DAT_100b1962;
      *(undefined *)(iVar6 + 0x133) = uVar2;
      *(undefined *)(iVar6 + 0x134) = uVar5;
      uVar5 = DAT_100b1965;
      uVar2 = DAT_100b1964;
      *(undefined *)(iVar6 + 0x135) = uVar3;
      *(undefined *)(iVar6 + 0x136) = uVar4;
      uVar4 = DAT_100b1967;
      uVar3 = DAT_100b1966;
      *(undefined *)(iVar6 + 0x137) = uVar2;
      *(undefined *)(iVar6 + 0x138) = uVar5;
      *(undefined *)(iVar6 + 0x139) = uVar3;
      *(undefined *)(iVar6 + 0x13a) = uVar4;
      uVar4 = DAT_100b196b;
      uVar3 = DAT_100b196a;
      uVar2 = DAT_100b1969;
      *(undefined *)(iVar6 + 0x13b) = DAT_100b1968;
      *(undefined *)(iVar6 + 0x13c) = uVar2;
      *(undefined *)(iVar6 + 0x13d) = uVar3;
      *(undefined *)(iVar6 + 0x13e) = uVar4;
    }
    else {
      upldFlag = 8;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].send_port_broad",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0xdf) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0xe0) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0xe1) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0xe2) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].receive_port_broad",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0xe7) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0xe8) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0xe9) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0xea) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].send_port_group",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0xef) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0xf0) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0xf1) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0xf2) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].receive_port_group",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0xf7) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0xf8) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0xf9) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0xfa) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].send_port_danbo",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0xff) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0x100) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0x101) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0x102) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].receive_port_danbo",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    else {
      iVar8 = g_pWrData + iVar9;
      *(char *)(iVar8 + 0x107) = (char)((uint)iVar6 >> 0x18);
      *(char *)(iVar8 + 0x108) = (char)((uint)iVar6 >> 0x10);
      *(char *)(iVar8 + 0x109) = (char)((uint)iVar6 >> 8);
      *(char *)(iVar8 + 0x10a) = (char)iVar6;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].GroupAddr1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    StringSplit_Struct(&local_ac,&data,&DAT_10021168);
    if (local_ac == 3) {
      iVar6 = atoi(acStack_a8);
      uVar4 = DAT_100b195f;
      uVar3 = DAT_100b195e;
      uVar2 = DAT_100b195d;
      if (iVar6 - 0xe0U < 0x10) {
        iVar6 = g_pWrData + iVar9;
        *(undefined *)(iVar6 + 0x11f) = data;
        *(undefined *)(iVar6 + 0x120) = uVar2;
        uVar5 = DAT_100b1961;
        uVar2 = DAT_100b1960;
        *(undefined *)(iVar6 + 0x121) = uVar3;
        *(undefined *)(iVar6 + 0x122) = uVar4;
        uVar4 = DAT_100b1963;
        uVar3 = DAT_100b1962;
        *(undefined *)(iVar6 + 0x123) = uVar2;
        *(undefined *)(iVar6 + 0x124) = uVar5;
        uVar5 = DAT_100b1965;
        uVar2 = DAT_100b1964;
        *(undefined *)(iVar6 + 0x125) = uVar3;
        *(undefined *)(iVar6 + 0x126) = uVar4;
        uVar4 = DAT_100b1967;
        uVar3 = DAT_100b1966;
        *(undefined *)(iVar6 + 0x127) = uVar2;
        *(undefined *)(iVar6 + 0x128) = uVar5;
        *(undefined *)(iVar6 + 0x129) = uVar3;
        *(undefined *)(iVar6 + 0x12a) = uVar4;
        uVar4 = DAT_100b196b;
        uVar3 = DAT_100b196a;
        uVar2 = DAT_100b1969;
        *(undefined *)(iVar6 + 299) = DAT_100b1968;
        *(undefined *)(iVar6 + 300) = uVar2;
        *(undefined *)(iVar6 + 0x12d) = uVar3;
        *(undefined *)(iVar6 + 0x12e) = uVar4;
      }
    }
    else {
      upldFlag = 8;
    }
    memset(&data,0,0x10);
    sprintf(acStack_12c,"Data_port[%d].addrTo2",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    StringSplit_Struct(&local_ac,&data,&DAT_10021168);
    uVar4 = DAT_100b195f;
    uVar3 = DAT_100b195e;
    uVar2 = DAT_100b195d;
    if (local_ac == 3) {
      iVar6 = g_pWrData + iVar9;
      *(undefined *)(iVar6 + 0x13f) = data;
      *(undefined *)(iVar6 + 0x140) = uVar2;
      uVar5 = DAT_100b1961;
      uVar2 = DAT_100b1960;
      *(undefined *)(iVar6 + 0x141) = uVar3;
      *(undefined *)(iVar6 + 0x142) = uVar4;
      uVar4 = DAT_100b1963;
      uVar3 = DAT_100b1962;
      *(undefined *)(iVar6 + 0x143) = uVar2;
      *(undefined *)(iVar6 + 0x144) = uVar5;
      uVar5 = DAT_100b1965;
      uVar2 = DAT_100b1964;
      *(undefined *)(iVar6 + 0x145) = uVar3;
      *(undefined *)(iVar6 + 0x146) = uVar4;
      uVar4 = DAT_100b1967;
      uVar3 = DAT_100b1966;
      *(undefined *)(iVar6 + 0x147) = uVar2;
      *(undefined *)(iVar6 + 0x148) = uVar5;
      *(undefined *)(iVar6 + 0x149) = uVar3;
      *(undefined *)(iVar6 + 0x14a) = uVar4;
      uVar4 = DAT_100b196b;
      uVar3 = DAT_100b196a;
      uVar2 = DAT_100b1969;
      *(undefined *)(iVar6 + 0x14b) = DAT_100b1968;
      *(undefined *)(iVar6 + 0x14c) = uVar2;
      *(undefined *)(iVar6 + 0x14d) = uVar3;
      *(undefined *)(iVar6 + 0x14e) = uVar4;
    }
    else {
      upldFlag = 8;
    }
    sprintf(acStack_12c,"Data_port[%d].send_port_broad1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0xe3) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0xe4) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0xe6) = (char)iVar8;
    *(char *)(iVar6 + 0xe5) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].receive_port_broad1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0xeb) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0xec) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0xee) = (char)iVar8;
    *(char *)(iVar6 + 0xed) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].send_port_group1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0xf3) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0xf4) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0xf6) = (char)iVar8;
    *(char *)(iVar6 + 0xf5) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].receive_port_group1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0xfb) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0xfc) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0xfe) = (char)iVar8;
    *(char *)(iVar6 + 0xfd) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].send_port_danbo1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0x103) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0x104) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0x106) = (char)iVar8;
    *(char *)(iVar6 + 0x105) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].receive_port_danbo1",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar8 = atoi(&data);
    iVar6 = g_pWrData;
    if (iVar8 == 0) {
      upldFlag = 8;
    }
    iVar8 = atoi(&data);
    iVar6 = iVar6 + iVar9;
    *(char *)(iVar6 + 0x10b) = (char)((uint)iVar8 >> 0x18);
    *(char *)(iVar6 + 0x10c) = (char)((uint)iVar8 >> 0x10);
    *(char *)(iVar6 + 0x10e) = (char)iVar8;
    *(char *)(iVar6 + 0x10d) = (char)((uint)iVar8 >> 8);
    sprintf(acStack_12c,"Data_port[%d].TongBu",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    *(char *)(local_58 + iVar9 + 0xd6) = (char)iVar6;
    sprintf(acStack_12c,"Data_port[%d].XieYi",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    *(char *)(local_58 + iVar9 + 0xd7) = (char)iVar6;
    sprintf(acStack_12c,"Data_port[%d].SuLv",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    iVar8 = local_58 + iVar9;
    *(char *)(iVar8 + 0xd8) = (char)((uint)iVar6 >> 0x18);
    *(char *)(iVar8 + 0xd9) = (char)((uint)iVar6 >> 0x10);
    *(char *)(iVar8 + 0xdb) = (char)iVar6;
    *(char *)(iVar8 + 0xda) = (char)((uint)iVar6 >> 8);
    sprintf(acStack_12c,"Data_port[%d].ShuJuWei",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    *(char *)(local_58 + iVar9 + 0xdc) = (char)iVar6;
    sprintf(acStack_12c,"Data_port[%d].TingZhiWei",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    *(char *)(local_58 + iVar9 + 0xdd) = (char)iVar6;
    sprintf(acStack_12c,"Data_port[%d].JiaoYanWei",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    *(char *)(local_58 + iVar9 + 0xde) = (char)iVar6;
    sprintf(acStack_12c,"Data_port[%d].Clk_Choice",iVar10);
    GetNetProfileString(param_2,acStack_12c,&data);
    iVar6 = atoi(&data);
    if (iVar6 == 0) {
      upldFlag = 8;
    }
    local_58 = g_pWrData;
    iVar6 = atoi(&data);
    bVar1 = iVar10 != 0xf;
    iVar10 = iVar10 + 1;
    *(char *)(local_58 + iVar9 + 0xd4) = (char)iVar6;
  } while (bVar1);
  return 0;
}


----------------------------------------
Function: LOAD_Data

void LOAD_Data(int param_1)

{
  bool bVar1;
  undefined uVar2;
  undefined uVar3;
  undefined uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  undefined *puVar12;
  undefined *puVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  undefined1 *puVar18;
  undefined auStack_f8 [216];
  
  iVar17 = BtnFlag1;
  if (param_1 == 0) {
    iVar17 = BtnFlag;
  }
  memset(auStack_f8,0,0xc9);
  iVar5 = g_pWrData;
  P_Web_port[101] = *(undefined *)(g_pWrData + 0x65);
  P_Web_port[102] = *(undefined *)(g_pWrData + 0x66);
  P_Web_port[103] = *(undefined *)(g_pWrData + 0x67);
  P_Web_port[104] = *(undefined *)(g_pWrData + 0x68);
  P_Web_port[105] = *(undefined *)(g_pWrData + 0x69);
  P_Web_port[106] = *(undefined *)(g_pWrData + 0x6a);
  P_Web_port[107] = *(undefined *)(g_pWrData + 0x6b);
  P_Web_port[108] = *(undefined *)(g_pWrData + 0x6c);
  P_Web_port[109] = *(undefined *)(g_pWrData + 0x6d);
  P_Web_port[110] = *(undefined *)(g_pWrData + 0x6e);
  P_Web_port[111] = *(undefined *)(g_pWrData + 0x6f);
  P_Web_port[112] = *(undefined *)(g_pWrData + 0x70);
  P_Web_port[113] = *(undefined *)(g_pWrData + 0x71);
  P_Web_port[114] = *(undefined *)(g_pWrData + 0x72);
  P_Web_port[115] = *(undefined *)(g_pWrData + 0x73);
  P_Web_port[116] = *(undefined *)(g_pWrData + 0x74);
  P_Web_port[162] = *(undefined *)(g_pWrData + 0xa2);
  P_Web_port[163] = *(undefined *)(g_pWrData + 0xa3);
  P_Web_port[161] = *(undefined *)(g_pWrData + 0xa1);
  P_Web_port[164] = *(undefined *)(g_pWrData + 0xa4);
  P_Web_port[165] = *(undefined *)(g_pWrData + 0xa5);
  P_Web_port[166] = *(undefined *)(g_pWrData + 0xa6);
  P_Web_port[167] = *(undefined *)(g_pWrData + 0xa7);
  P_Web_port[168] = *(undefined *)(g_pWrData + 0xa8);
  P_Web_port[169] = *(undefined *)(g_pWrData + 0xa9);
  P_Web_port[170] = *(undefined *)(g_pWrData + 0xaa);
  P_Web_port[171] = *(undefined *)(g_pWrData + 0xab);
  P_Web_port[172] = *(undefined *)(g_pWrData + 0xac);
  P_Web_port[173] = *(undefined *)(g_pWrData + 0xad);
  P_Web_port[174] = *(undefined *)(g_pWrData + 0xae);
  P_Web_port[175] = *(undefined *)(g_pWrData + 0xaf);
  P_Web_port[176] = *(undefined *)(g_pWrData + 0xb0);
  if (iVar17 == 0) {
    iVar16 = 0;
    iVar17 = g_pWrData;
    puVar18 = P_Web_port;
    do {
      memcpy(puVar18 + 0x16f,(void *)(iVar17 + 0x16f),100);
      iVar10 = iVar16 * 0x12a;
      puVar18[0xd5] = *(undefined *)(iVar17 + 0xd5);
      iVar11 = iVar5 + iVar10;
      uVar2 = *(undefined *)(iVar11 + 499);
      uVar3 = *(undefined *)(iVar11 + 500);
      uVar4 = *(undefined *)(iVar11 + 0x1f5);
      P_Web_port[iVar10 + 0x1f6] = *(undefined *)(iVar11 + 0x1f6);
      P_Web_port[iVar10 + 499] = uVar2;
      P_Web_port[iVar10 + 500] = uVar3;
      P_Web_port[iVar10 + 0x1f5] = uVar4;
      uVar2 = *(undefined *)(iVar11 + 0x1f7);
      uVar3 = *(undefined *)(iVar11 + 0x1f8);
      uVar4 = *(undefined *)(iVar11 + 0x1f9);
      P_Web_port[iVar10 + 0x1fa] = *(undefined *)(iVar11 + 0x1fa);
      P_Web_port[iVar10 + 0x1f7] = uVar2;
      P_Web_port[iVar10 + 0x1f8] = uVar3;
      P_Web_port[iVar10 + 0x1f9] = uVar4;
      puVar18[0xd4] = *(undefined *)(iVar17 + 0xd4);
      uVar2 = *(undefined *)(iVar11 + 0x1e3);
      uVar3 = *(undefined *)(iVar11 + 0x1e4);
      uVar4 = *(undefined *)(iVar11 + 0x1e5);
      P_Web_port[iVar10 + 0x1e6] = *(undefined *)(iVar11 + 0x1e6);
      P_Web_port[iVar10 + 0x1e3] = uVar2;
      P_Web_port[iVar10 + 0x1e4] = uVar3;
      P_Web_port[iVar10 + 0x1e5] = uVar4;
      uVar2 = *(undefined *)(iVar11 + 0x1f0);
      uVar3 = *(undefined *)(iVar11 + 0x1f1);
      uVar4 = *(undefined *)(iVar11 + 0x1f2);
      P_Web_port[iVar10 + 0x1ef] = *(undefined *)(iVar11 + 0x1ef);
      P_Web_port[iVar10 + 0x1f0] = uVar2;
      P_Web_port[iVar10 + 0x1f1] = uVar3;
      P_Web_port[iVar10 + 0x1f2] = uVar4;
      uVar2 = *(undefined *)(iVar11 + 0x1e7);
      uVar3 = *(undefined *)(iVar11 + 0x1e8);
      uVar4 = *(undefined *)(iVar11 + 0x1e9);
      P_Web_port[iVar10 + 0x1ea] = *(undefined *)(iVar11 + 0x1ea);
      P_Web_port[iVar10 + 0x1e7] = uVar2;
      P_Web_port[iVar10 + 0x1e8] = uVar3;
      P_Web_port[iVar10 + 0x1e9] = uVar4;
      uVar2 = *(undefined *)(iVar11 + 0x1eb);
      uVar3 = *(undefined *)(iVar11 + 0x1ec);
      uVar4 = *(undefined *)(iVar11 + 0x1ed);
      P_Web_port[iVar10 + 0x1ee] = *(undefined *)(iVar11 + 0x1ee);
      P_Web_port[iVar10 + 0x1eb] = uVar2;
      P_Web_port[iVar10 + 0x1ec] = uVar3;
      P_Web_port[iVar10 + 0x1ed] = uVar4;
      iVar11 = 0;
      puVar12 = puVar18 + 0x14f;
      puVar13 = (undefined *)(iVar17 + 0x14f);
      do {
        bVar1 = iVar11 != 1;
        iVar8 = (iVar11 + 0x40) * 4 + iVar10;
        iVar6 = iVar5 + iVar8;
        uVar2 = *(undefined *)(iVar6 + 0xd3);
        uVar3 = *(undefined *)(iVar6 + 0xd4);
        uVar4 = *(undefined *)(iVar6 + 0xd5);
        P_Web_port[iVar8 + 0xd6] = *(undefined *)(iVar6 + 0xd6);
        P_Web_port[iVar8 + 0xd3] = uVar2;
        P_Web_port[iVar8 + 0xd4] = uVar3;
        P_Web_port[iVar8 + 0xd5] = uVar4;
        uVar2 = *(undefined *)(iVar6 + 0xdb);
        uVar3 = *(undefined *)(iVar6 + 0xdc);
        uVar4 = *(undefined *)(iVar6 + 0xdd);
        P_Web_port[iVar8 + 0xde] = *(undefined *)(iVar6 + 0xde);
        P_Web_port[iVar8 + 0xdb] = uVar2;
        P_Web_port[iVar8 + 0xdc] = uVar3;
        P_Web_port[iVar8 + 0xdd] = uVar4;
        uVar2 = puVar13[1];
        uVar3 = puVar13[2];
        uVar4 = puVar13[3];
        *puVar12 = *puVar13;
        puVar12[1] = uVar2;
        puVar12[2] = uVar3;
        puVar12[3] = uVar4;
        uVar2 = puVar13[5];
        uVar3 = puVar13[6];
        uVar4 = puVar13[7];
        puVar12[4] = puVar13[4];
        puVar12[5] = uVar2;
        puVar12[6] = uVar3;
        puVar12[7] = uVar4;
        uVar2 = puVar13[9];
        uVar3 = puVar13[10];
        uVar4 = puVar13[0xb];
        puVar12[8] = puVar13[8];
        puVar12[9] = uVar2;
        puVar12[10] = uVar3;
        puVar12[0xb] = uVar4;
        uVar2 = puVar13[0xd];
        uVar3 = puVar13[0xe];
        uVar4 = puVar13[0xf];
        puVar12[0xc] = puVar13[0xc];
        puVar12[0xd] = uVar2;
        puVar12[0xe] = uVar3;
        puVar12[0xf] = uVar4;
        uVar2 = puVar13[-0x3f];
        uVar3 = puVar13[-0x3e];
        uVar4 = puVar13[-0x3d];
        puVar12[-0x40] = puVar13[-0x40];
        puVar12[-0x3f] = uVar2;
        puVar12[-0x3e] = uVar3;
        puVar12[-0x3d] = uVar4;
        uVar2 = puVar13[-0x3b];
        uVar3 = puVar13[-0x3a];
        uVar4 = puVar13[-0x39];
        puVar12[-0x3c] = puVar13[-0x3c];
        puVar12[-0x3b] = uVar2;
        puVar12[-0x3a] = uVar3;
        puVar12[-0x39] = uVar4;
        uVar2 = puVar13[-0x35];
        uVar3 = puVar13[-0x37];
        uVar4 = puVar13[-0x36];
        puVar12[-0x38] = puVar13[-0x38];
        puVar12[-0x37] = uVar3;
        puVar12[-0x36] = uVar4;
        puVar12[-0x35] = uVar2;
        uVar2 = puVar13[-0x33];
        uVar3 = puVar13[-0x32];
        uVar4 = puVar13[-0x31];
        puVar12[-0x34] = puVar13[-0x34];
        puVar12[-0x33] = uVar2;
        puVar12[-0x32] = uVar3;
        puVar12[-0x31] = uVar4;
        uVar2 = puVar13[-0x1f];
        uVar3 = puVar13[-0x1e];
        uVar4 = puVar13[-0x1d];
        puVar12[-0x20] = puVar13[-0x20];
        puVar12[-0x1f] = uVar2;
        puVar12[-0x1e] = uVar3;
        puVar12[-0x1d] = uVar4;
        uVar2 = puVar13[-0x1b];
        uVar3 = puVar13[-0x1a];
        uVar4 = puVar13[-0x19];
        puVar12[-0x1c] = puVar13[-0x1c];
        puVar12[-0x1b] = uVar2;
        puVar12[-0x1a] = uVar3;
        puVar12[-0x19] = uVar4;
        uVar2 = puVar13[-0x17];
        uVar3 = puVar13[-0x16];
        uVar4 = puVar13[-0x15];
        puVar12[-0x18] = puVar13[-0x18];
        puVar12[-0x17] = uVar2;
        puVar12[-0x16] = uVar3;
        puVar12[-0x15] = uVar4;
        uVar2 = puVar13[-0x12];
        uVar3 = puVar13[-0x13];
        uVar4 = puVar13[-0x11];
        puVar12[-0x14] = puVar13[-0x14];
        puVar12[-0x12] = uVar2;
        puVar12[-0x13] = uVar3;
        puVar12[-0x11] = uVar4;
        iVar8 = (iVar11 + 4) * 4 + iVar10;
        iVar6 = iVar5 + iVar8;
        uVar2 = *(undefined *)(iVar6 + 0xd7);
        uVar3 = *(undefined *)(iVar6 + 0xd8);
        uVar4 = *(undefined *)(iVar6 + 0xd9);
        P_Web_port[iVar8 + 0xda] = *(undefined *)(iVar6 + 0xda);
        P_Web_port[iVar8 + 0xd7] = uVar2;
        P_Web_port[iVar8 + 0xd8] = uVar3;
        P_Web_port[iVar8 + 0xd9] = uVar4;
        iVar9 = (iVar11 + 8) * 4 + iVar10;
        iVar7 = iVar5 + iVar9;
        uVar2 = *(undefined *)(iVar7 + 0xd7);
        uVar3 = *(undefined *)(iVar7 + 0xd8);
        uVar4 = *(undefined *)(iVar7 + 0xd9);
        P_Web_port[iVar9 + 0xda] = *(undefined *)(iVar7 + 0xda);
        P_Web_port[iVar9 + 0xd7] = uVar2;
        P_Web_port[iVar9 + 0xd8] = uVar3;
        P_Web_port[iVar9 + 0xd9] = uVar4;
        iVar14 = (iVar11 + 0xc) * 4 + iVar10;
        iVar15 = iVar5 + iVar14;
        uVar2 = *(undefined *)(iVar15 + 0xd7);
        uVar3 = *(undefined *)(iVar15 + 0xd8);
        uVar4 = *(undefined *)(iVar15 + 0xd9);
        P_Web_port[iVar14 + 0xda] = *(undefined *)(iVar15 + 0xda);
        P_Web_port[iVar14 + 0xd7] = uVar2;
        P_Web_port[iVar14 + 0xd8] = uVar3;
        P_Web_port[iVar14 + 0xd9] = uVar4;
        iVar14 = iVar11 * 4 + iVar10;
        iVar15 = iVar5 + iVar14;
        uVar2 = *(undefined *)(iVar15 + 0xe0);
        uVar3 = *(undefined *)(iVar15 + 0xe1);
        iVar11 = iVar11 + 1;
        uVar4 = *(undefined *)(iVar15 + 0xe2);
        P_Web_port[iVar14 + 0xdf] = *(undefined *)(iVar15 + 0xdf);
        P_Web_port[iVar14 + 0xe0] = uVar2;
        P_Web_port[iVar14 + 0xe1] = uVar3;
        P_Web_port[iVar14 + 0xe2] = uVar4;
        uVar2 = *(undefined *)(iVar6 + 0xdf);
        uVar3 = *(undefined *)(iVar6 + 0xe0);
        uVar4 = *(undefined *)(iVar6 + 0xe1);
        P_Web_port[iVar8 + 0xe2] = *(undefined *)(iVar6 + 0xe2);
        P_Web_port[iVar8 + 0xdf] = uVar2;
        P_Web_port[iVar8 + 0xe0] = uVar3;
        P_Web_port[iVar8 + 0xe1] = uVar4;
        uVar2 = *(undefined *)(iVar7 + 0xdf);
        uVar3 = *(undefined *)(iVar7 + 0xe0);
        uVar4 = *(undefined *)(iVar7 + 0xe1);
        P_Web_port[iVar9 + 0xe2] = *(undefined *)(iVar7 + 0xe2);
        P_Web_port[iVar9 + 0xdf] = uVar2;
        P_Web_port[iVar9 + 0xe0] = uVar3;
        P_Web_port[iVar9 + 0xe1] = uVar4;
        puVar12 = puVar12 + 0x10;
        puVar13 = puVar13 + 0x10;
      } while (bVar1);
      bVar1 = iVar16 != 0xf;
      iVar16 = iVar16 + 1;
      puVar18[0xde] = *(undefined *)(iVar17 + 0xde);
      puVar18[0xdc] = *(undefined *)(iVar17 + 0xdc);
      iVar11 = iVar5 + iVar10;
      uVar2 = *(undefined *)(iVar11 + 0xd8);
      uVar3 = *(undefined *)(iVar11 + 0xd9);
      uVar4 = *(undefined *)(iVar11 + 0xda);
      P_Web_port[iVar10 + 0xdb] = *(undefined *)(iVar11 + 0xdb);
      P_Web_port[iVar10 + 0xd8] = uVar2;
      P_Web_port[iVar10 + 0xd9] = uVar3;
      P_Web_port[iVar10 + 0xda] = uVar4;
      puVar18[0xdd] = *(undefined *)(iVar17 + 0xdd);
      puVar18[0xd6] = *(undefined *)(iVar17 + 0xd6);
      puVar18[0xd7] = *(undefined *)(iVar17 + 0xd7);
      puVar18[0xd1] = *(undefined *)(iVar17 + 0xd1);
      puVar18[0xd2] = *(undefined *)(iVar17 + 0xd2);
      iVar17 = iVar17 + 0x12a;
      puVar18 = puVar18 + 0x12a;
    } while (bVar1);
  }
  return;
}


----------------------------------------
Function: upldForm

/* WARNING: Control flow encountered bad instruction data */

void upldForm(int param_1)

{
  char *pcVar1;
  char *pcVar2;
  char *__s;
  int iVar3;
  FILE *__stream;
  size_t sVar4;
  int iVar5;
  undefined *puVar6;
  int iVar7;
  size_t __n;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  char acStack_4b8 [1024];
  char acStack_b8 [136];
  uint local_30;
  
  local_30 = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
             (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
             (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4
             | (uint)(in_cr7 & 0xf);
  upldFlag = 0;
  pcVar1 = (char *)websGetVar(param_1,"filename",&DAT_10023fc4);
  if ((pcVar1 == (char *)0x0) || (*pcVar1 == '\0')) {
    __s = (char *)0x0;
    upldFlag = 6;
    iVar7 = upldFlag;
  }
  else {
    pcVar2 = strrchr(pcVar1,0x2f);
    __s = pcVar2 + 1;
    if (pcVar2 == (char *)0x0) {
      strrchr(pcVar1,0x5c);
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    sprintf(acStack_4b8,"/usr/local/webs/%s",__s);
    pcVar1 = strchr(__s,0x2e);
    iVar3 = strcmp(pcVar1 + 1,"txt");
    iVar7 = 7;
    if (iVar3 == 0) {
      __stream = fopen(acStack_4b8,"w+b");
      iVar7 = 1;
      if (__stream != (FILE *)0x0) {
        iVar7 = 0;
        for (__n = *(size_t *)(param_1 + 0x110); 0 < (int)__n; __n = __n - sVar4) {
          sVar4 = fwrite((void *)(*(int *)(param_1 + 0xec) + iVar7),1,__n,__stream);
          if ((int)sVar4 < (int)__n) goto LAB_100061c4;
          iVar7 = iVar7 + sVar4;
        }
        if (__n == 0) {
          iVar3 = fclose(__stream);
          iVar7 = 3;
          if (iVar3 == 0) {
            iVar7 = 4;
          }
        }
        else {
LAB_100061c4:
          iVar7 = 5;
        }
      }
    }
  }
  upldFlag = iVar7;
  iVar7 = httpPlatformOpen("/UpgradeFirmware.htm",0);
  if (-1 < iVar7) {
    iVar3 = InitReadString();
    if (-1 < iVar3) {
      if (upldFlag == 4) {
        Chang_Mem_Data(param_1,acStack_4b8);
        BtnFlag = 0;
        if (upldFlag == 8) {
          sprintf(acStack_b8,"rm %s",acStack_4b8);
          system(acStack_b8);
        }
        else {
          LOAD_Data(0);
          LOAD_Data(1);
        }
      }
      while( true ) {
        iVar3 = ReadString(iVar7,buf,0x1000);
        if (iVar3 < 0) goto LAB_10006444;
        if (iVar3 == 0) goto LAB_10006404;
        buf[iVar3] = 0;
        iVar5 = strcmp(buf,"<!--ImportMsg -->");
        if (iVar5 == 0) break;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
      if (upldFlag == 1) {
        puVar6 = &DAT_10022d7c;
      }
      else {
        if (upldFlag == 2) {
          puVar6 = &DAT_10021660;
LAB_100062f8:
          websWrite(param_1,puVar6,__s);
          goto LAB_10006404;
        }
        if (upldFlag == 3) {
          puVar6 = &DAT_10021674;
          goto LAB_100062f8;
        }
        if (upldFlag == 4) {
          puVar6 = &DAT_10021688;
          goto LAB_100062f8;
        }
        if (upldFlag == 5) {
          puVar6 = &DAT_100216a8;
          goto LAB_100062f8;
        }
        if (upldFlag == 6) {
          puVar6 = &DAT_100216bc;
        }
        else {
          if (upldFlag == 7) {
            puVar6 = &DAT_100216d4;
            goto LAB_1000636c;
          }
          if (upldFlag != 8) goto LAB_10006404;
          puVar6 = &DAT_100216e4;
        }
      }
LAB_1000636c:
      websWrite(param_1,puVar6);
LAB_10006404:
      while( true ) {
        iVar3 = ReadString(iVar7,buf,0x1000);
        if (iVar3 < 0) break;
        if (iVar3 == 0) {
          if (iVar7 != 0) {
            httpPlatformClose(iVar7);
          }
          websFooter(param_1);
          websDone(param_1,200);
          return;
        }
        iVar5 = 0;
        do {
          iVar5 = websWriteDataNonBlock(param_1,buf + iVar5,iVar3);
          if (iVar5 < 0) goto LAB_10006444;
          iVar3 = iVar3 - iVar5;
        } while (iVar3 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10006444:
    if (iVar7 != 0) {
      httpPlatformClose(iVar7);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/UpgradeFirmware.htm");
  return;
}


----------------------------------------
Function: Restore_Data

void Restore_Data(void)

{
  system("rm /usr/local/webs -rf");
  system("rm /mnt/nandflash/CRC -rf");
  system("rm /mnt/nandflash/Data -rf");
  system("rm /mnt/nandflash/log.txt -rf");
  system("rm /mnt/nandflash/tempture -rf");
  return;
}


----------------------------------------
Function: restore_NetSave

void restore_NetSave(void)

{
  char acStack_88 [132];
  
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan0.ipaddr=%s","192.168.0.249");
  system(acStack_88);
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan0.netmask=%s","255.255.255.0");
  system(acStack_88);
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan0.gateway=%s","192.168.0.1");
  system(acStack_88);
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan1.ipaddr=%s","192.168.1.249");
  system(acStack_88);
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan1.netmask=%s","255.255.255.0");
  system(acStack_88);
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"uci set network.lan1.gateway=%s","192.168.1.1");
  system(acStack_88);
  system("uci commit network");
  return;
}


----------------------------------------
Function: SysRestoreHandleSubmit

void SysRestoreHandleSubmit(void)

{
  restore_NetSave();
  Restore_Data();
  BtnFlag = 0;
  BtnFlag1 = 0;
  UpdateRtuRunInfo(gSystemInfo);
  sleep(1);
  *(undefined *)(g_pWrData + 0x1371) = 1;
  return;
}


----------------------------------------
Function: SysRestore

void SysRestore(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = websCompareVar(param_1,"SysRestore",&DAT_100218a4);
  if (iVar1 != 0) {
    SysRestoreHandleSubmit(param_1);
  }
  iVar1 = httpPlatformOpen("/SysRestore.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_100067a8;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_100067a8:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/SysRestore.htm");
  return;
}


----------------------------------------
Function: IsUpdateFireWare

void IsUpdateFireWare(void)

{
  int iVar1;
  char acStack_108 [128];
  char acStack_88 [128];
  
  iVar1 = access("/usr/local/PowerApp",0);
  if (iVar1 == 0) {
    iVar1 = detect_process("PowerApp");
    if (iVar1 != 0) {
      memset(acStack_108,0,0x80);
      sprintf(acStack_108,"/usr/bin/killall %s","PowerApp");
      system(acStack_108);
    }
    memset(acStack_88,0,0x80);
    sprintf(acStack_88,"/bin/mv %s %s","/usr/local/PowerApp","/usr/local/test/PowerApp");
    system(acStack_88);
  }
  return;
}


----------------------------------------
Function: Save_All_data

void Save_All_data(void)

{
  bool bVar1;
  undefined uVar2;
  undefined uVar3;
  undefined uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  undefined *puVar11;
  undefined *puVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  undefined *puVar17;
  undefined auStack_108 [220];
  
  puVar17 = P_Web_port + 0x14f;
  iVar13 = 0;
  memset(auStack_108,0,0xc9);
  do {
    iVar15 = g_pWrData;
    iVar16 = iVar13 * 0x12a;
    iVar14 = g_pWrData + iVar16;
    *(undefined *)(iVar14 + 0xd5) = puVar17[-0x7a];
    uVar2 = P_Web_port[iVar16 + 0x1f7];
    uVar3 = P_Web_port[iVar16 + 0x1f8];
    uVar4 = P_Web_port[iVar16 + 0x1f9];
    *(undefined1 *)(iVar14 + 0x1fa) = P_Web_port[iVar16 + 0x1fa];
    *(undefined *)(iVar14 + 0x1f7) = uVar2;
    *(undefined *)(iVar14 + 0x1f8) = uVar3;
    *(undefined *)(iVar14 + 0x1f9) = uVar4;
    uVar2 = P_Web_port[iVar16 + 499];
    uVar3 = P_Web_port[iVar16 + 500];
    uVar4 = P_Web_port[iVar16 + 0x1f5];
    *(undefined1 *)(iVar14 + 0x1f6) = P_Web_port[iVar16 + 0x1f6];
    *(undefined *)(iVar14 + 499) = uVar2;
    *(undefined *)(iVar14 + 500) = uVar3;
    *(undefined *)(iVar14 + 0x1f5) = uVar4;
    *(undefined *)(iVar14 + 0xd4) = puVar17[-0x7b];
    uVar2 = P_Web_port[iVar16 + 0x1e3];
    uVar3 = P_Web_port[iVar16 + 0x1e4];
    uVar4 = P_Web_port[iVar16 + 0x1e5];
    *(undefined1 *)(iVar14 + 0x1e6) = P_Web_port[iVar16 + 0x1e6];
    *(undefined *)(iVar14 + 0x1e3) = uVar2;
    *(undefined *)(iVar14 + 0x1e4) = uVar3;
    *(undefined *)(iVar14 + 0x1e5) = uVar4;
    uVar2 = P_Web_port[iVar16 + 0x1f0];
    uVar3 = P_Web_port[iVar16 + 0x1f1];
    uVar4 = P_Web_port[iVar16 + 0x1f2];
    *(undefined1 *)(iVar14 + 0x1ef) = P_Web_port[iVar16 + 0x1ef];
    *(undefined *)(iVar14 + 0x1f0) = uVar2;
    *(undefined *)(iVar14 + 0x1f1) = uVar3;
    *(undefined *)(iVar14 + 0x1f2) = uVar4;
    uVar2 = P_Web_port[iVar16 + 0x1e7];
    uVar3 = P_Web_port[iVar16 + 0x1e8];
    uVar4 = P_Web_port[iVar16 + 0x1e9];
    *(undefined1 *)(iVar14 + 0x1ea) = P_Web_port[iVar16 + 0x1ea];
    *(undefined *)(iVar14 + 0x1e7) = uVar2;
    *(undefined *)(iVar14 + 0x1e8) = uVar3;
    *(undefined *)(iVar14 + 0x1e9) = uVar4;
    uVar2 = P_Web_port[iVar16 + 0x1eb];
    uVar3 = P_Web_port[iVar16 + 0x1ec];
    uVar4 = P_Web_port[iVar16 + 0x1ed];
    *(undefined1 *)(iVar14 + 0x1ee) = P_Web_port[iVar16 + 0x1ee];
    *(undefined *)(iVar14 + 0x1eb) = uVar2;
    *(undefined *)(iVar14 + 0x1ec) = uVar3;
    *(undefined *)(iVar14 + 0x1ed) = uVar4;
    memcpy((void *)(iVar14 + 0x16f),puVar17 + 0x20,100);
    iVar10 = 0;
    *(undefined *)(iVar14 + 0xd2) = puVar17[-0x7d];
    puVar11 = (undefined *)(iVar14 + 0x14f);
    puVar12 = puVar17;
    do {
      bVar1 = iVar10 != 1;
      uVar2 = puVar12[1];
      uVar3 = puVar12[2];
      uVar4 = puVar12[3];
      *puVar11 = *puVar12;
      puVar11[1] = uVar2;
      puVar11[2] = uVar3;
      puVar11[3] = uVar4;
      uVar2 = puVar12[5];
      uVar3 = puVar12[6];
      uVar4 = puVar12[7];
      puVar11[4] = puVar12[4];
      puVar11[5] = uVar2;
      puVar11[6] = uVar3;
      puVar11[7] = uVar4;
      uVar2 = puVar12[9];
      uVar3 = puVar12[10];
      uVar4 = puVar12[0xb];
      puVar11[8] = puVar12[8];
      puVar11[9] = uVar2;
      puVar11[10] = uVar3;
      puVar11[0xb] = uVar4;
      uVar2 = puVar12[0xd];
      uVar3 = puVar12[0xe];
      uVar4 = puVar12[0xf];
      puVar11[0xc] = puVar12[0xc];
      puVar11[0xd] = uVar2;
      puVar11[0xe] = uVar3;
      puVar11[0xf] = uVar4;
      uVar2 = puVar12[-0x3f];
      uVar3 = puVar12[-0x3e];
      uVar4 = puVar12[-0x3d];
      puVar11[-0x40] = puVar12[-0x40];
      puVar11[-0x3f] = uVar2;
      puVar11[-0x3e] = uVar3;
      puVar11[-0x3d] = uVar4;
      uVar2 = puVar12[-0x3b];
      uVar3 = puVar12[-0x3a];
      uVar4 = puVar12[-0x39];
      puVar11[-0x3c] = puVar12[-0x3c];
      puVar11[-0x3b] = uVar2;
      puVar11[-0x3a] = uVar3;
      puVar11[-0x39] = uVar4;
      uVar2 = puVar12[-0x37];
      uVar3 = puVar12[-0x36];
      uVar4 = puVar12[-0x35];
      puVar11[-0x38] = puVar12[-0x38];
      puVar11[-0x37] = uVar2;
      puVar11[-0x36] = uVar3;
      puVar11[-0x35] = uVar4;
      uVar2 = puVar12[-0x33];
      uVar3 = puVar12[-0x32];
      uVar4 = puVar12[-0x31];
      puVar11[-0x34] = puVar12[-0x34];
      puVar11[-0x33] = uVar2;
      puVar11[-0x32] = uVar3;
      puVar11[-0x31] = uVar4;
      uVar2 = puVar12[-0x1d];
      uVar3 = puVar12[-0x1f];
      uVar4 = puVar12[-0x1e];
      puVar11[-0x20] = puVar12[-0x20];
      puVar11[-0x1f] = uVar3;
      puVar11[-0x1e] = uVar4;
      puVar11[-0x1d] = uVar2;
      uVar2 = puVar12[-0x1b];
      uVar3 = puVar12[-0x1a];
      uVar4 = puVar12[-0x19];
      puVar11[-0x1c] = puVar12[-0x1c];
      puVar11[-0x1b] = uVar2;
      puVar11[-0x1a] = uVar3;
      puVar11[-0x19] = uVar4;
      uVar2 = puVar12[-0x17];
      uVar3 = puVar12[-0x16];
      uVar4 = puVar12[-0x15];
      puVar11[-0x18] = puVar12[-0x18];
      puVar11[-0x17] = uVar2;
      puVar11[-0x16] = uVar3;
      puVar11[-0x15] = uVar4;
      uVar2 = puVar12[-0x14];
      uVar3 = puVar12[-0x13];
      uVar4 = puVar12[-0x11];
      puVar11[-0x12] = puVar12[-0x12];
      puVar11[-0x13] = uVar3;
      puVar11[-0x14] = uVar2;
      iVar6 = (iVar10 + 4) * 4 + iVar16;
      puVar11[-0x11] = uVar4;
      iVar7 = iVar15 + iVar6;
      uVar2 = P_Web_port[iVar6 + 0xd7];
      uVar3 = P_Web_port[iVar6 + 0xd8];
      uVar4 = P_Web_port[iVar6 + 0xd9];
      *(undefined1 *)(iVar7 + 0xda) = P_Web_port[iVar6 + 0xda];
      *(undefined *)(iVar7 + 0xd7) = uVar2;
      *(undefined *)(iVar7 + 0xd8) = uVar3;
      *(undefined *)(iVar7 + 0xd9) = uVar4;
      iVar8 = (iVar10 + 8) * 4 + iVar16;
      iVar9 = iVar15 + iVar8;
      uVar2 = P_Web_port[iVar8 + 0xd8];
      uVar3 = P_Web_port[iVar8 + 0xd9];
      uVar4 = P_Web_port[iVar8 + 0xda];
      *(undefined1 *)(iVar9 + 0xd7) = P_Web_port[iVar8 + 0xd7];
      *(undefined *)(iVar9 + 0xd8) = uVar2;
      *(undefined *)(iVar9 + 0xda) = uVar4;
      *(undefined *)(iVar9 + 0xd9) = uVar3;
      iVar14 = (iVar10 + 0xc) * 4 + iVar16;
      uVar2 = P_Web_port[iVar14 + 0xd7];
      uVar3 = P_Web_port[iVar14 + 0xd8];
      iVar5 = iVar15 + iVar14;
      uVar4 = P_Web_port[iVar14 + 0xd9];
      *(undefined1 *)(iVar5 + 0xda) = P_Web_port[iVar14 + 0xda];
      *(undefined *)(iVar5 + 0xd7) = uVar2;
      *(undefined *)(iVar5 + 0xd8) = uVar3;
      *(undefined *)(iVar5 + 0xd9) = uVar4;
      iVar14 = iVar10 * 4 + iVar16;
      uVar2 = P_Web_port[iVar14 + 0xdf];
      uVar3 = P_Web_port[iVar14 + 0xe0];
      iVar5 = iVar15 + iVar14;
      uVar4 = P_Web_port[iVar14 + 0xe1];
      *(undefined1 *)(iVar5 + 0xe2) = P_Web_port[iVar14 + 0xe2];
      *(undefined *)(iVar5 + 0xdf) = uVar2;
      *(undefined *)(iVar5 + 0xe0) = uVar3;
      *(undefined *)(iVar5 + 0xe1) = uVar4;
      uVar2 = P_Web_port[iVar6 + 0xdf];
      uVar3 = P_Web_port[iVar6 + 0xe0];
      uVar4 = P_Web_port[iVar6 + 0xe1];
      *(undefined1 *)(iVar7 + 0xe2) = P_Web_port[iVar6 + 0xe2];
      *(undefined *)(iVar7 + 0xdf) = uVar2;
      *(undefined *)(iVar7 + 0xe0) = uVar3;
      *(undefined *)(iVar7 + 0xe1) = uVar4;
      uVar2 = P_Web_port[iVar8 + 0xe0];
      uVar3 = P_Web_port[iVar8 + 0xe1];
      uVar4 = P_Web_port[iVar8 + 0xe2];
      *(undefined1 *)(iVar9 + 0xdf) = P_Web_port[iVar8 + 0xdf];
      *(undefined *)(iVar9 + 0xe0) = uVar2;
      *(undefined *)(iVar9 + 0xe1) = uVar3;
      *(undefined *)(iVar9 + 0xe2) = uVar4;
      iVar14 = (iVar10 + 0x40) * 4 + iVar16;
      iVar5 = iVar15 + iVar14;
      uVar2 = P_Web_port[iVar14 + 0xd3];
      uVar3 = P_Web_port[iVar14 + 0xd4];
      iVar10 = iVar10 + 1;
      uVar4 = P_Web_port[iVar14 + 0xd5];
      *(undefined1 *)(iVar5 + 0xd6) = P_Web_port[iVar14 + 0xd6];
      *(undefined *)(iVar5 + 0xd3) = uVar2;
      *(undefined *)(iVar5 + 0xd4) = uVar3;
      *(undefined *)(iVar5 + 0xd5) = uVar4;
      uVar2 = P_Web_port[iVar14 + 0xdb];
      uVar3 = P_Web_port[iVar14 + 0xdc];
      uVar4 = P_Web_port[iVar14 + 0xdd];
      *(undefined1 *)(iVar5 + 0xde) = P_Web_port[iVar14 + 0xde];
      *(undefined *)(iVar5 + 0xdb) = uVar2;
      *(undefined *)(iVar5 + 0xdc) = uVar3;
      *(undefined *)(iVar5 + 0xdd) = uVar4;
      puVar11 = puVar11 + 0x10;
      puVar12 = puVar12 + 0x10;
    } while (bVar1);
    iVar15 = iVar15 + iVar16;
    *(undefined *)(iVar15 + 0xde) = puVar17[-0x71];
    *(undefined *)(iVar15 + 0xdc) = puVar17[-0x73];
    uVar2 = P_Web_port[iVar16 + 0xd8];
    uVar3 = P_Web_port[iVar16 + 0xd9];
    uVar4 = P_Web_port[iVar16 + 0xda];
    *(undefined1 *)(iVar15 + 0xdb) = P_Web_port[iVar16 + 0xdb];
    *(undefined *)(iVar15 + 0xd8) = uVar2;
    *(undefined *)(iVar15 + 0xd9) = uVar3;
    *(undefined *)(iVar15 + 0xda) = uVar4;
    *(undefined *)(iVar15 + 0xdd) = puVar17[-0x72];
    *(undefined *)(iVar15 + 0xd6) = puVar17[-0x79];
    *(undefined *)(iVar15 + 0xd7) = puVar17[-0x78];
    if (Stor_Flag == 0) {
      *(undefined *)(iVar15 + 0xd1) = 1;
    }
    bVar1 = iVar13 != 0xf;
    puVar17 = puVar17 + 0x12a;
    iVar13 = iVar13 + 1;
  } while (bVar1);
  return;
}


----------------------------------------
Function: SaveRebootHandleSubmit

void SaveRebootHandleSubmit(void)

{
  if (Config_flag == '\x01') {
    Save_All_data();
  }
  Sys_Reboot();
  return;
}


----------------------------------------
Function: SysReboot

void SysReboot(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = websCompareVar(param_1,"SysReboot",&DAT_10021918);
  if (iVar1 != 0) {
    SaveRebootHandleSubmit(param_1);
  }
  iVar1 = httpPlatformOpen("/SysReboot.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_100070d8;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_100070d8:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/SysReboot.htm");
  return;
}


----------------------------------------
Function: Rest_All_data

void Rest_All_data(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  iVar1 = g_pWrData;
  iVar2 = 0;
  iVar4 = 0x10;
  do {
    iVar3 = iVar2 * 0x12a;
    iVar2 = iVar2 + 1;
    iVar3 = iVar1 + iVar3;
    *(undefined *)(iVar3 + 0x1d3) = 0;
    *(undefined *)(iVar3 + 0x1d4) = 0;
    *(undefined *)(iVar3 + 0x1d5) = 0;
    *(undefined *)(iVar3 + 0x1d6) = 0;
    *(undefined *)(iVar3 + 0x1d7) = 0;
    *(undefined *)(iVar3 + 0x1d8) = 0;
    *(undefined *)(iVar3 + 0x1d9) = 0;
    *(undefined *)(iVar3 + 0x1da) = 0;
    *(undefined *)(iVar3 + 0x1e3) = 0;
    *(undefined *)(iVar3 + 0x1e4) = 0;
    *(undefined *)(iVar3 + 0x1e5) = 0;
    *(undefined *)(iVar3 + 0x1e6) = 0;
    *(undefined *)(iVar3 + 0x1db) = 0;
    *(undefined *)(iVar3 + 0x1dc) = 0;
    *(undefined *)(iVar3 + 0x1dd) = 0;
    *(undefined *)(iVar3 + 0x1de) = 0;
    *(undefined *)(iVar3 + 0x1df) = 0;
    *(undefined *)(iVar3 + 0x1e0) = 0;
    *(undefined *)(iVar3 + 0x1e1) = 0;
    *(undefined *)(iVar3 + 0x1e2) = 0;
    *(undefined *)(iVar3 + 0x1ef) = 0;
    *(undefined *)(iVar3 + 0x1f0) = 0;
    *(undefined *)(iVar3 + 0x1f1) = 0;
    *(undefined *)(iVar3 + 0x1f2) = 0;
    *(undefined *)(iVar3 + 0x1e7) = 0;
    *(undefined *)(iVar3 + 0x1e8) = 0;
    *(undefined *)(iVar3 + 0x1e9) = 0;
    *(undefined *)(iVar3 + 0x1ea) = 0;
    *(undefined *)(iVar3 + 0x1eb) = 0;
    *(undefined *)(iVar3 + 0x1ec) = 0;
    *(undefined *)(iVar3 + 0x1ed) = 0;
    *(undefined *)(iVar3 + 0x1ee) = 0;
    iVar4 = iVar4 + -1;
  } while (iVar4 != 0);
  return;
}


----------------------------------------
Function: S_Chang_Bg_color

void S_Chang_Bg_color(int param_1,undefined4 param_2,undefined4 param_3)

{
  int iVar1;
  int iVar2;
  
  switch(param_3) {
  case 0:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set1 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 1:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set2 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 2:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set3 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 3:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set4 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 4:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set5 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 5:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set6 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 6:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set7 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 7:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set8 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 8:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set9 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 9:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set10 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 10:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set11 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0xb:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set12 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0xc:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set13 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0xd:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set14 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0xe:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set15 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0xf:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set16 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0x10:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Interface0 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  case 0x11:
    while( true ) {
      iVar1 = ReadString(param_1,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Interface1 -->");
      if (iVar2 == 0) goto LAB_10007a14;
      websWriteDataNonBlock(param_2,buf,iVar1);
      websWrite(param_2,&DAT_10022d7c);
    }
    break;
  default:
    return;
  }
LAB_10007248:
  if (0 < param_1) {
    httpPlatformClose(param_1);
  }
  websError(param_2,0x194,"Cannot open URL:%s","/Port_State8s.htm");
  return;
LAB_10007a14:
  nCount = ReadString(param_1,buf,0x1000);
  if (-1 < nCount) {
    if (nCount != 0) {
      websWriteDataNonBlock(param_2,buf,nCount + -3);
      websWrite(param_2,"background-color:");
      websWriteDataNonBlock(param_2,"#00FFFF",7);
      websWrite(param_2,&DAT_10020f9c);
      return;
    }
    return;
  }
  goto LAB_10007248;
}


----------------------------------------
Function: Rest_data

void Rest_data(int param_1)

{
  int iVar1;
  
  iVar1 = g_pWrData + param_1 * 0x12a;
  *(undefined *)(iVar1 + 0x1d3) = 0;
  *(undefined *)(iVar1 + 0x1d4) = 0;
  *(undefined *)(iVar1 + 0x1d5) = 0;
  *(undefined *)(iVar1 + 0x1d6) = 0;
  *(undefined *)(iVar1 + 0x1d7) = 0;
  *(undefined *)(iVar1 + 0x1d8) = 0;
  *(undefined *)(iVar1 + 0x1d9) = 0;
  *(undefined *)(iVar1 + 0x1da) = 0;
  *(undefined *)(iVar1 + 0x1e3) = 0;
  *(undefined *)(iVar1 + 0x1e4) = 0;
  *(undefined *)(iVar1 + 0x1e5) = 0;
  *(undefined *)(iVar1 + 0x1e6) = 0;
  *(undefined *)(iVar1 + 0x1db) = 0;
  *(undefined *)(iVar1 + 0x1dc) = 0;
  *(undefined *)(iVar1 + 0x1dd) = 0;
  *(undefined *)(iVar1 + 0x1de) = 0;
  *(undefined *)(iVar1 + 0x1df) = 0;
  *(undefined *)(iVar1 + 0x1e0) = 0;
  *(undefined *)(iVar1 + 0x1e1) = 0;
  *(undefined *)(iVar1 + 0x1e2) = 0;
  *(undefined *)(iVar1 + 0x1eb) = 0;
  *(undefined *)(iVar1 + 0x1ec) = 0;
  *(undefined *)(iVar1 + 0x1ed) = 0;
  *(undefined *)(iVar1 + 0x1ee) = 0;
  *(undefined *)(iVar1 + 0x1e7) = 0;
  *(undefined *)(iVar1 + 0x1e8) = 0;
  *(undefined *)(iVar1 + 0x1e9) = 0;
  *(undefined *)(iVar1 + 0x1ea) = 0;
  *(undefined *)(iVar1 + 0x1ef) = 0;
  *(undefined *)(iVar1 + 0x1f0) = 0;
  *(undefined *)(iVar1 + 0x1f1) = 0;
  *(undefined *)(iVar1 + 0x1f2) = 0;
  return;
}


----------------------------------------
Function: Error_data_handle

/* WARNING: Control flow encountered bad instruction data */

void Error_data_handle(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ButtonHandle

void ButtonHandle(undefined4 param_1)

{
  undefined4 uVar1;
  int iVar2;
  
  iVar2 = websCompareVar(param_1,&DAT_10021a8c,&DAT_10021a94);
  if (iVar2 != 0) {
    choice_i = 0;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021a9c,&DAT_10021aa4);
  if (iVar2 != 0) {
    choice_i = 1;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021aac,&DAT_10021ab4);
  if (iVar2 != 0) {
    choice_i = 2;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021abc,&DAT_10021ac4);
  if (iVar2 != 0) {
    choice_i = 3;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021acc,&DAT_10021ad4);
  if (iVar2 != 0) {
    choice_i = 4;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021adc,&DAT_10021ae4);
  if (iVar2 != 0) {
    choice_i = 5;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021aec,&DAT_10021af4);
  if (iVar2 != 0) {
    choice_i = 6;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021afc,&DAT_10021b04);
  if (iVar2 != 0) {
    choice_i = 7;
  }
  iVar2 = websCompareVar(param_1,&DAT_10021b0c,&DAT_10021b14);
  if (iVar2 != 0) {
    choice_i = 8;
  }
  iVar2 = websCompareVar(param_1,"Set10",&DAT_10021b24);
  if (iVar2 != 0) {
    choice_i = 9;
  }
  iVar2 = websCompareVar(param_1,"Set11",&DAT_10021b34);
  if (iVar2 != 0) {
    choice_i = 10;
  }
  iVar2 = websCompareVar(param_1,"Set12",&DAT_10021b44);
  if (iVar2 != 0) {
    choice_i = 0xb;
  }
  iVar2 = websCompareVar(param_1,"Set13",&DAT_10021b54);
  if (iVar2 != 0) {
    choice_i = 0xc;
  }
  iVar2 = websCompareVar(param_1,"Set14",&DAT_10021b64);
  if (iVar2 != 0) {
    choice_i = 0xd;
  }
  iVar2 = websCompareVar(param_1,"Set15",&DAT_10021b74);
  if (iVar2 != 0) {
    choice_i = 0xe;
  }
  iVar2 = websCompareVar(param_1,"Set16",&DAT_10021b84);
  if (iVar2 != 0) {
    choice_i = 0xf;
  }
  uVar1 = choice_i;
  iVar2 = websCompareVar(param_1,&DAT_10021b8c,&DAT_10021b94);
  if (iVar2 != 0) {
    Rest_data(uVar1);
  }
  iVar2 = websCompareVar(param_1,"resetAll",&DAT_10021ba8);
  if (iVar2 != 0) {
    Rest_All_data();
  }
  iVar2 = websCompareVar(param_1,"Start",Butt_name);
  if ((iVar2 != 0) && (Flage = Flage + '\x01', Flage == '\x02')) {
    Flage = '\0';
  }
  return;
}


----------------------------------------
Function: Port_State

/* WARNING: Control flow encountered bad instruction data */

void Port_State(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: Data_judge

void Data_judge(int param_1)

{
  int iVar1;
  int iVar2;
  
  iVar1 = g_pWrData;
  param_1 = param_1 * 0x12a;
  iVar2 = g_pWrData + param_1;
  if (((((((*(char *)(iVar2 + 0xd5) != P_Web_port[param_1 + 0xd5]) ||
          (((uint)*(byte *)(iVar2 + 0xe2) |
           (uint)*(byte *)(iVar2 + 0xe1) << 8 |
           (uint)*(byte *)(iVar2 + 0xe0) << 0x10 | (uint)*(byte *)(iVar2 + 0xdf) << 0x18) !=
           ((uint)(byte)P_Web_port[param_1 + 0xe2] |
           (uint)(byte)P_Web_port[param_1 + 0xe1] << 8 |
           (uint)(byte)P_Web_port[param_1 + 0xe0] << 0x10 |
           (uint)(byte)P_Web_port[param_1 + 0xdf] << 0x18))) ||
         (((uint)*(byte *)(iVar2 + 0xea) |
          (uint)*(byte *)(iVar2 + 0xe9) << 8 |
          (uint)*(byte *)(iVar2 + 0xe8) << 0x10 | (uint)*(byte *)(iVar2 + 0xe7) << 0x18) !=
          ((uint)(byte)P_Web_port[param_1 + 0xea] |
          (uint)(byte)P_Web_port[param_1 + 0xe9] << 8 |
          (uint)(byte)P_Web_port[param_1 + 0xe8] << 0x10 |
          (uint)(byte)P_Web_port[param_1 + 0xe7] << 0x18))) ||
        ((((uint)*(byte *)(iVar2 + 0xf2) |
          (uint)*(byte *)(iVar2 + 0xf1) << 8 |
          (uint)*(byte *)(iVar2 + 0xf0) << 0x10 | (uint)*(byte *)(iVar2 + 0xef) << 0x18) !=
          ((uint)(byte)P_Web_port[param_1 + 0xf2] |
          (uint)(byte)P_Web_port[param_1 + 0xf1] << 8 |
          (uint)(byte)P_Web_port[param_1 + 0xf0] << 0x10 |
          (uint)(byte)P_Web_port[param_1 + 0xef] << 0x18) ||
         (((uint)*(byte *)(iVar2 + 0xfa) |
          (uint)*(byte *)(iVar2 + 0xf9) << 8 |
          (uint)*(byte *)(iVar2 + 0xf8) << 0x10 | (uint)*(byte *)(iVar2 + 0xf7) << 0x18) !=
          ((uint)(byte)P_Web_port[param_1 + 0xfa] |
          (uint)(byte)P_Web_port[param_1 + 0xf9] << 8 |
          (uint)(byte)P_Web_port[param_1 + 0xf8] << 0x10 |
          (uint)(byte)P_Web_port[param_1 + 0xf7] << 0x18))))) ||
       ((((uint)*(byte *)(iVar2 + 0x102) |
         (uint)*(byte *)(iVar2 + 0x101) << 8 |
         (uint)*(byte *)(iVar2 + 0x100) << 0x10 | (uint)*(byte *)(iVar2 + 0xff) << 0x18) !=
         ((uint)(byte)P_Web_port[param_1 + 0x102] |
         (uint)(byte)P_Web_port[param_1 + 0x101] << 8 |
         (uint)(byte)P_Web_port[param_1 + 0x100] << 0x10 |
         (uint)(byte)P_Web_port[param_1 + 0xff] << 0x18) ||
        ((((uint)*(byte *)(iVar2 + 0x10a) |
          (uint)*(byte *)(iVar2 + 0x109) << 8 |
          (uint)*(byte *)(iVar2 + 0x108) << 0x10 | (uint)*(byte *)(iVar2 + 0x107) << 0x18) !=
          ((uint)(byte)P_Web_port[param_1 + 0x10a] |
          (uint)(byte)P_Web_port[param_1 + 0x109] << 8 |
          (uint)(byte)P_Web_port[param_1 + 0x108] << 0x10 |
          (uint)(byte)P_Web_port[param_1 + 0x107] << 0x18) ||
         (((uint)*(byte *)(iVar2 + 0xe6) |
          (uint)*(byte *)(iVar2 + 0xe5) << 8 |
          (uint)*(byte *)(iVar2 + 0xe4) << 0x10 | (uint)*(byte *)(iVar2 + 0xe3) << 0x18) !=
          ((uint)(byte)P_Web_port[param_1 + 0xe6] |
          (uint)(byte)P_Web_port[param_1 + 0xe5] << 8 |
          (uint)(byte)P_Web_port[param_1 + 0xe4] << 0x10 |
          (uint)(byte)P_Web_port[param_1 + 0xe3] << 0x18))))))) ||
      (((uint)*(byte *)(iVar2 + 0xee) |
       (uint)*(byte *)(iVar2 + 0xed) << 8 |
       (uint)*(byte *)(iVar2 + 0xec) << 0x10 | (uint)*(byte *)(iVar2 + 0xeb) << 0x18) !=
       ((uint)(byte)P_Web_port[param_1 + 0xee] |
       (uint)(byte)P_Web_port[param_1 + 0xed] << 8 |
       (uint)(byte)P_Web_port[param_1 + 0xec] << 0x10 |
       (uint)(byte)P_Web_port[param_1 + 0xeb] << 0x18))) ||
     ((((((uint)*(byte *)(iVar2 + 0xf6) |
         (uint)*(byte *)(iVar2 + 0xf5) << 8 |
         (uint)*(byte *)(iVar2 + 0xf4) << 0x10 | (uint)*(byte *)(iVar2 + 0xf3) << 0x18) !=
         ((uint)(byte)P_Web_port[param_1 + 0xf6] |
         (uint)(byte)P_Web_port[param_1 + 0xf5] << 8 |
         (uint)(byte)P_Web_port[param_1 + 0xf4] << 0x10 |
         (uint)(byte)P_Web_port[param_1 + 0xf3] << 0x18) ||
        (iVar2 = g_pWrData + param_1,
        ((uint)*(byte *)(iVar2 + 0xfe) |
        (uint)*(byte *)(iVar2 + 0xfd) << 8 |
        (uint)*(byte *)(iVar2 + 0xfc) << 0x10 | (uint)*(byte *)(iVar2 + 0xfb) << 0x18) !=
        ((uint)(byte)P_Web_port[param_1 + 0xfe] |
        (uint)(byte)P_Web_port[param_1 + 0xfd] << 8 |
        (uint)(byte)P_Web_port[param_1 + 0xfc] << 0x10 |
        (uint)(byte)P_Web_port[param_1 + 0xfb] << 0x18))) ||
       (((uint)*(byte *)(iVar2 + 0x106) |
        (uint)*(byte *)(iVar2 + 0x105) << 8 |
        (uint)*(byte *)(iVar2 + 0x104) << 0x10 | (uint)*(byte *)(iVar2 + 0x103) << 0x18) !=
        ((uint)(byte)P_Web_port[param_1 + 0x106] |
        (uint)(byte)P_Web_port[param_1 + 0x105] << 8 |
        (uint)(byte)P_Web_port[param_1 + 0x104] << 0x10 |
        (uint)(byte)P_Web_port[param_1 + 0x103] << 0x18))) ||
      (((((uint)*(byte *)(iVar2 + 0x10e) |
         (uint)*(byte *)(iVar2 + 0x10d) << 8 |
         (uint)*(byte *)(iVar2 + 0x10c) << 0x10 | (uint)*(byte *)(iVar2 + 0x10b) << 0x18) !=
         ((uint)(byte)P_Web_port[param_1 + 0x10e] |
         (uint)(byte)P_Web_port[param_1 + 0x10d] << 8 |
         (uint)(byte)P_Web_port[param_1 + 0x10c] << 0x10 |
         (uint)(byte)P_Web_port[param_1 + 0x10b] << 0x18) ||
        (iVar2 = memcmp((void *)(g_pWrData + param_1 + 0x10f),P_Web_port + param_1 + 0x10f,0x10),
        iVar2 != 0)) ||
       ((iVar2 = memcmp((void *)(iVar1 + param_1 + 0x11f),P_Web_port + param_1 + 0x11f,0x10),
        iVar2 != 0 ||
        ((iVar2 = memcmp((void *)(iVar1 + param_1 + 0x12f),P_Web_port + param_1 + 0x12f,0x10),
         iVar2 != 0 ||
         (iVar1 = memcmp((void *)(iVar1 + param_1 + 0x13f),P_Web_port + param_1 + 0x13f,0x10),
         iVar1 != 0)))))))))) {
    Stor_Flag = 1;
  }
  return;
}


----------------------------------------
Function: Chang_Bg_color

void Chang_Bg_color(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  int iVar2;
  
  switch(param_2) {
  case 0:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set1 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 1:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set2 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 2:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set3 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 3:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set4 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 4:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set5 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 5:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set6 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 6:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set7 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 7:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set8 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 8:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set9 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 9:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set10 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 10:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set11 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 0xb:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set12 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 0xc:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set13 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 0xd:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set14 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 0xe:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set15 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  case 0xf:
    while( true ) {
      iVar1 = ReadString(fd,buf,0x1000);
      nCount = iVar1;
      if (iVar1 < 0) break;
      if (iVar1 == 0) {
        return;
      }
      buf[iVar1] = 0;
      iVar2 = strcmp(buf,"<!--Set16 -->");
      if (iVar2 == 0) goto LAB_100099b4;
      websWriteDataNonBlock(param_1,buf,iVar1);
      websWrite(param_1,&DAT_10022d7c);
    }
    break;
  default:
    return;
  }
LAB_100092c8:
  if (0 < fd) {
    httpPlatformClose();
  }
  websError(param_1,0x194,"Cannot open URL:%s","/PortConf8s.htm");
  return;
LAB_100099b4:
  nCount = ReadString(fd,buf,0x1000);
  if (-1 < nCount) {
    if (nCount != 0) {
      websWriteDataNonBlock(param_1,buf,nCount + -3);
      websWrite(param_1,"background-color:");
      websWriteDataNonBlock(param_1,"#00FFFF",7);
      websWrite(param_1,&DAT_10020f9c);
      return;
    }
    return;
  }
  goto LAB_100092c8;
}


----------------------------------------
Function: True_Save_data

void True_Save_data(undefined4 param_1,int param_2)

{
  bool bVar1;
  undefined uVar2;
  undefined uVar3;
  undefined uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  undefined *puVar10;
  undefined *puVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  
  iVar14 = g_pWrData;
  param_2 = param_2 * 0x12a;
  iVar5 = g_pWrData + param_2;
  *(undefined1 *)(iVar5 + 0xd5) = P_Web_port[param_2 + 0xd5];
  uVar2 = P_Web_port[param_2 + 499];
  uVar3 = P_Web_port[param_2 + 500];
  uVar4 = P_Web_port[param_2 + 0x1f5];
  *(undefined1 *)(iVar5 + 0x1f6) = P_Web_port[param_2 + 0x1f6];
  *(undefined *)(iVar5 + 499) = uVar2;
  *(undefined *)(iVar5 + 500) = uVar3;
  *(undefined *)(iVar5 + 0x1f5) = uVar4;
  uVar2 = P_Web_port[param_2 + 0x1f7];
  uVar3 = P_Web_port[param_2 + 0x1f8];
  uVar4 = P_Web_port[param_2 + 0x1f9];
  *(undefined1 *)(iVar5 + 0x1fa) = P_Web_port[param_2 + 0x1fa];
  *(undefined *)(iVar5 + 0x1f7) = uVar2;
  *(undefined *)(iVar5 + 0x1f8) = uVar3;
  *(undefined *)(iVar5 + 0x1f9) = uVar4;
  *(undefined1 *)(iVar5 + 0xd4) = P_Web_port[param_2 + 0xd4];
  memcpy((void *)(iVar5 + 0x16f),P_Web_port + param_2 + 0x16f,100);
  iVar5 = 0;
  puVar10 = (undefined *)(iVar14 + param_2 + 0x14f);
  puVar11 = P_Web_port + param_2 + 0x14f;
  do {
    bVar1 = iVar5 != 1;
    uVar2 = puVar11[1];
    uVar3 = puVar11[2];
    uVar4 = puVar11[3];
    *puVar10 = *puVar11;
    puVar10[1] = uVar2;
    puVar10[2] = uVar3;
    puVar10[3] = uVar4;
    uVar2 = puVar11[5];
    uVar3 = puVar11[6];
    uVar4 = puVar11[7];
    puVar10[4] = puVar11[4];
    puVar10[5] = uVar2;
    puVar10[6] = uVar3;
    puVar10[7] = uVar4;
    uVar2 = puVar11[9];
    uVar3 = puVar11[10];
    uVar4 = puVar11[0xb];
    puVar10[8] = puVar11[8];
    puVar10[9] = uVar2;
    puVar10[10] = uVar3;
    puVar10[0xb] = uVar4;
    uVar2 = puVar11[0xd];
    uVar3 = puVar11[0xe];
    uVar4 = puVar11[0xf];
    puVar10[0xc] = puVar11[0xc];
    puVar10[0xd] = uVar2;
    puVar10[0xe] = uVar3;
    puVar10[0xf] = uVar4;
    uVar2 = puVar11[-0x3f];
    uVar3 = puVar11[-0x3e];
    uVar4 = puVar11[-0x3d];
    puVar10[-0x40] = puVar11[-0x40];
    puVar10[-0x3f] = uVar2;
    puVar10[-0x3e] = uVar3;
    puVar10[-0x3d] = uVar4;
    uVar2 = puVar11[-0x3b];
    uVar3 = puVar11[-0x3a];
    uVar4 = puVar11[-0x39];
    puVar10[-0x3c] = puVar11[-0x3c];
    puVar10[-0x3b] = uVar2;
    puVar10[-0x3a] = uVar3;
    puVar10[-0x39] = uVar4;
    uVar2 = puVar11[-0x37];
    uVar3 = puVar11[-0x36];
    uVar4 = puVar11[-0x35];
    puVar10[-0x38] = puVar11[-0x38];
    puVar10[-0x37] = uVar2;
    puVar10[-0x36] = uVar3;
    puVar10[-0x35] = uVar4;
    uVar2 = puVar11[-0x33];
    uVar3 = puVar11[-0x32];
    uVar4 = puVar11[-0x31];
    puVar10[-0x34] = puVar11[-0x34];
    puVar10[-0x33] = uVar2;
    puVar10[-0x32] = uVar3;
    puVar10[-0x31] = uVar4;
    uVar2 = puVar11[-0x1d];
    uVar3 = puVar11[-0x1f];
    uVar4 = puVar11[-0x1e];
    puVar10[-0x20] = puVar11[-0x20];
    puVar10[-0x1f] = uVar3;
    puVar10[-0x1e] = uVar4;
    puVar10[-0x1d] = uVar2;
    uVar2 = puVar11[-0x1b];
    uVar3 = puVar11[-0x1a];
    uVar4 = puVar11[-0x19];
    puVar10[-0x1c] = puVar11[-0x1c];
    puVar10[-0x1b] = uVar2;
    puVar10[-0x1a] = uVar3;
    puVar10[-0x19] = uVar4;
    uVar2 = puVar11[-0x17];
    uVar3 = puVar11[-0x16];
    uVar4 = puVar11[-0x15];
    puVar10[-0x18] = puVar11[-0x18];
    puVar10[-0x17] = uVar2;
    puVar10[-0x16] = uVar3;
    puVar10[-0x15] = uVar4;
    uVar2 = puVar11[-0x14];
    uVar3 = puVar11[-0x13];
    uVar4 = puVar11[-0x11];
    puVar10[-0x12] = puVar11[-0x12];
    puVar10[-0x13] = uVar3;
    puVar10[-0x14] = uVar2;
    iVar6 = (iVar5 + 4) * 4 + param_2;
    puVar10[-0x11] = uVar4;
    iVar7 = iVar14 + iVar6;
    uVar2 = P_Web_port[iVar6 + 0xd7];
    uVar3 = P_Web_port[iVar6 + 0xd8];
    uVar4 = P_Web_port[iVar6 + 0xd9];
    *(undefined1 *)(iVar7 + 0xda) = P_Web_port[iVar6 + 0xda];
    *(undefined *)(iVar7 + 0xd7) = uVar2;
    *(undefined *)(iVar7 + 0xd8) = uVar3;
    *(undefined *)(iVar7 + 0xd9) = uVar4;
    iVar8 = (iVar5 + 8) * 4 + param_2;
    iVar9 = iVar14 + iVar8;
    uVar2 = P_Web_port[iVar8 + 0xd8];
    uVar3 = P_Web_port[iVar8 + 0xd9];
    uVar4 = P_Web_port[iVar8 + 0xda];
    *(undefined1 *)(iVar9 + 0xd7) = P_Web_port[iVar8 + 0xd7];
    *(undefined *)(iVar9 + 0xd8) = uVar2;
    *(undefined *)(iVar9 + 0xda) = uVar4;
    *(undefined *)(iVar9 + 0xd9) = uVar3;
    iVar12 = (iVar5 + 0xc) * 4 + param_2;
    uVar2 = P_Web_port[iVar12 + 0xd7];
    iVar13 = iVar14 + iVar12;
    uVar3 = P_Web_port[iVar12 + 0xd8];
    uVar4 = P_Web_port[iVar12 + 0xd9];
    *(undefined1 *)(iVar13 + 0xda) = P_Web_port[iVar12 + 0xda];
    *(undefined *)(iVar13 + 0xd7) = uVar2;
    *(undefined *)(iVar13 + 0xd8) = uVar3;
    *(undefined *)(iVar13 + 0xd9) = uVar4;
    iVar12 = iVar5 * 4 + param_2;
    uVar2 = P_Web_port[iVar12 + 0xdf];
    iVar13 = iVar14 + iVar12;
    uVar3 = P_Web_port[iVar12 + 0xe0];
    iVar5 = iVar5 + 1;
    uVar4 = P_Web_port[iVar12 + 0xe1];
    *(undefined1 *)(iVar13 + 0xe2) = P_Web_port[iVar12 + 0xe2];
    *(undefined *)(iVar13 + 0xdf) = uVar2;
    *(undefined *)(iVar13 + 0xe0) = uVar3;
    *(undefined *)(iVar13 + 0xe1) = uVar4;
    uVar2 = P_Web_port[iVar6 + 0xdf];
    uVar3 = P_Web_port[iVar6 + 0xe0];
    uVar4 = P_Web_port[iVar6 + 0xe1];
    *(undefined1 *)(iVar7 + 0xe2) = P_Web_port[iVar6 + 0xe2];
    *(undefined *)(iVar7 + 0xdf) = uVar2;
    *(undefined *)(iVar7 + 0xe0) = uVar3;
    *(undefined *)(iVar7 + 0xe1) = uVar4;
    uVar2 = P_Web_port[iVar8 + 0xe0];
    uVar3 = P_Web_port[iVar8 + 0xe1];
    uVar4 = P_Web_port[iVar8 + 0xe2];
    *(undefined1 *)(iVar9 + 0xdf) = P_Web_port[iVar8 + 0xdf];
    *(undefined *)(iVar9 + 0xe0) = uVar2;
    *(undefined *)(iVar9 + 0xe1) = uVar3;
    *(undefined *)(iVar9 + 0xe2) = uVar4;
    puVar10 = puVar10 + 0x10;
    puVar11 = puVar11 + 0x10;
  } while (bVar1);
  iVar14 = iVar14 + param_2;
  *(undefined1 *)(iVar14 + 0xd2) = P_Web_port[param_2 + 0xd2];
  *(undefined1 *)(iVar14 + 0xde) = P_Web_port[param_2 + 0xde];
  *(undefined1 *)(iVar14 + 0xdc) = P_Web_port[param_2 + 0xdc];
  uVar2 = P_Web_port[param_2 + 0xd8];
  uVar3 = P_Web_port[param_2 + 0xd9];
  uVar4 = P_Web_port[param_2 + 0xda];
  *(undefined1 *)(iVar14 + 0xdb) = P_Web_port[param_2 + 0xdb];
  *(undefined *)(iVar14 + 0xd8) = uVar2;
  *(undefined *)(iVar14 + 0xd9) = uVar3;
  *(undefined *)(iVar14 + 0xda) = uVar4;
  *(undefined1 *)(iVar14 + 0xdd) = P_Web_port[param_2 + 0xdd];
  *(undefined1 *)(iVar14 + 0xd6) = P_Web_port[param_2 + 0xd6];
  *(undefined1 *)(iVar14 + 0xd7) = P_Web_port[param_2 + 0xd7];
  if (Stor_Flag == 0) {
    *(undefined *)(iVar14 + 0xd1) = 1;
  }
  return;
}


----------------------------------------
Function: Save_data

bool Save_data(undefined4 param_1,int param_2)

{
  bool bVar1;
  bool bVar2;
  char cVar3;
  char *pcVar4;
  int iVar5;
  uint uVar6;
  undefined *puVar7;
  undefined uVar8;
  undefined uVar9;
  char *__dest;
  bool bVar10;
  
  pcVar4 = (char *)websGetVar(param_1,"channelName",&DAT_10023fc4);
  param_2 = param_2 * 0x12a;
  if (*pcVar4 == '\0') {
    __dest = pcVar4;
    pcVar4 = " ";
  }
  else {
    __dest = P_Web_port + param_2 + 0x16f;
    memset(__dest,0,100);
  }
  strcpy(__dest,pcVar4);
  pcVar4 = (char *)websGetVar(param_1,"G_Bvalue",&DAT_10023fc4);
  iVar5 = atoi(pcVar4);
  if (0 < iVar5) {
    P_Web_port[param_2 + 0xd5] = (char)iVar5;
  }
  cVar3 = P_Web_port[param_2 + 0xd5];
  if (cVar3 == '\x01') {
    pcVar4 = (char *)websGetVar(param_1,"B_sendP",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar1 = iVar5 - 1U < 0xffff;
    if (bVar1) {
      P_Web_port[param_2 + 0xe2] = (char)iVar5;
      P_Web_port[param_2 + 0xdf] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xe0] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xe1] = (char)((uint)iVar5 >> 8);
    }
    pcVar4 = (char *)websGetVar(param_1,"B_revcP",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar2 = iVar5 - 1U < 0xffff;
    if (bVar2) {
      P_Web_port[param_2 + 0xe7] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xe8] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xe9] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xea] = (char)iVar5;
    }
    pcVar4 = (char *)websGetVar(param_1,"B_sendP1",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar10 = iVar5 - 1U < 0xffff;
    if (bVar10) {
      P_Web_port[param_2 + 0xe3] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xe4] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xe5] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xe6] = (char)iVar5;
    }
    bVar10 = bVar10 && (bVar2 && bVar1);
    pcVar4 = (char *)websGetVar(param_1,"B_revcP1",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    if (iVar5 - 1U < 0xffff) {
      P_Web_port[param_2 + 0xeb] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xec] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xed] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xee] = (char)iVar5;
    }
    else {
LAB_1000a13c:
      bVar10 = false;
    }
  }
  else if (cVar3 == '\x02') {
    pcVar4 = (char *)websGetVar(param_1,"ZADDRES",&DAT_10023fc4);
    memset(&str_ZADDR,0,0x44);
    StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
    if ((((((uint)DAT_100b1a07 |
           (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) != 3) ||
         (iVar5 = atoi(&DAT_100b1a08), 0xf < iVar5 - 0xe0U)) ||
        (uVar6 = atoi(&DAT_100b1a18), 0xfe < uVar6)) ||
       ((uVar6 = atoi(&DAT_100b1a28), 0xfe < uVar6 || (uVar6 = atoi(&DAT_100b1a38), 0xfe < uVar6))))
    {
      puVar7 = &DAT_10021cf0;
LAB_1000a37c:
      websWrite(param_1,puVar7);
      return false;
    }
    strcpy(P_Web_port + param_2 + 0x10f,pcVar4);
    pcVar4 = (char *)websGetVar(param_1,"ZADDRES2",&DAT_10023fc4);
    memset(&str_ZADDR,0,0x44);
    StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
    if (((((uint)DAT_100b1a07 |
          (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) != 3) ||
        (iVar5 = atoi(&DAT_100b1a08), 0xf < iVar5 - 0xe0U)) ||
       ((uVar6 = atoi(&DAT_100b1a18), 0xfe < uVar6 ||
        ((uVar6 = atoi(&DAT_100b1a28), 0xfe < uVar6 || (uVar6 = atoi(&DAT_100b1a38), 0xfe < uVar6)))
        ))) {
      puVar7 = &DAT_10021d3c;
      goto LAB_1000a37c;
    }
    strcpy(P_Web_port + param_2 + 0x11f,pcVar4);
    pcVar4 = (char *)websGetVar(param_1,"G_sendP",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar1 = iVar5 - 1U < 0xffff;
    if (bVar1) {
      P_Web_port[param_2 + 0xef] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xf0] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xf1] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xf2] = (char)iVar5;
    }
    pcVar4 = (char *)websGetVar(param_1,"G_revcP",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar2 = iVar5 - 1U < 0xffff;
    if (bVar2) {
      P_Web_port[param_2 + 0xf7] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xf8] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xf9] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xfa] = (char)iVar5;
    }
    pcVar4 = (char *)websGetVar(param_1,"G_sendP1",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    bVar10 = iVar5 - 1U < 0xffff;
    if (bVar10) {
      P_Web_port[param_2 + 0xf3] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0xf4] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0xf5] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0xf6] = (char)iVar5;
    }
    bVar10 = bVar10 && (bVar2 && bVar1);
    pcVar4 = (char *)websGetVar(param_1,"G_revcP1",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    if (0xfffe < iVar5 - 1U) goto LAB_1000a13c;
    P_Web_port[param_2 + 0xfb] = (char)((uint)iVar5 >> 0x18);
    P_Web_port[param_2 + 0xfc] = (char)((uint)iVar5 >> 0x10);
    P_Web_port[param_2 + 0xfd] = (char)((uint)iVar5 >> 8);
    P_Web_port[param_2 + 0xfe] = (char)iVar5;
  }
  else {
    bVar10 = true;
    if (cVar3 == '\x03') {
      pcVar4 = (char *)websGetVar(param_1,"DADDRES",&DAT_10023fc4);
      memset(&str_ZADDR,0,0x44);
      StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
      if ((((uint)DAT_100b1a07 |
           (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) != 3) ||
         (iVar5 = atoi(&DAT_100b1a08), 0xfd < iVar5 - 1U)) {
        puVar7 = &DAT_10021db4;
        goto LAB_1000a37c;
      }
      strcpy(P_Web_port + param_2 + 0x12f,pcVar4);
      pcVar4 = (char *)websGetVar(param_1,"DADDRES2",&DAT_10023fc4);
      memset(&str_ZADDR,0,0x44);
      StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
      if ((((uint)DAT_100b1a07 |
           (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) != 3) ||
         (iVar5 = atoi(&DAT_100b1a08), 0xfd < iVar5 - 1U)) {
        puVar7 = &DAT_10021e00;
        goto LAB_1000a37c;
      }
      strcpy(P_Web_port + param_2 + 0x13f,pcVar4);
      pcVar4 = (char *)websGetVar(param_1,"D_sendP",&DAT_10023fc4);
      iVar5 = atoi(pcVar4);
      bVar1 = iVar5 - 1U < 0xffff;
      if (bVar1) {
        P_Web_port[param_2 + 0x102] = (char)iVar5;
        P_Web_port[param_2 + 0xff] = (char)((uint)iVar5 >> 0x18);
        P_Web_port[param_2 + 0x100] = (char)((uint)iVar5 >> 0x10);
        P_Web_port[param_2 + 0x101] = (char)((uint)iVar5 >> 8);
      }
      pcVar4 = (char *)websGetVar(param_1,"D_revcP",&DAT_10023fc4);
      iVar5 = atoi(pcVar4);
      bVar2 = iVar5 - 1U < 0xffff;
      if (bVar2) {
        P_Web_port[param_2 + 0x107] = (char)((uint)iVar5 >> 0x18);
        P_Web_port[param_2 + 0x108] = (char)((uint)iVar5 >> 0x10);
        P_Web_port[param_2 + 0x109] = (char)((uint)iVar5 >> 8);
        P_Web_port[param_2 + 0x10a] = (char)iVar5;
      }
      pcVar4 = (char *)websGetVar(param_1,"D_sendP1",&DAT_10023fc4);
      iVar5 = atoi(pcVar4);
      bVar10 = iVar5 - 1U < 0xffff;
      if (bVar10) {
        P_Web_port[param_2 + 0x103] = (char)((uint)iVar5 >> 0x18);
        P_Web_port[param_2 + 0x104] = (char)((uint)iVar5 >> 0x10);
        P_Web_port[param_2 + 0x105] = (char)((uint)iVar5 >> 8);
        P_Web_port[param_2 + 0x106] = (char)iVar5;
      }
      bVar10 = bVar10 && (bVar2 && bVar1);
      pcVar4 = (char *)websGetVar(param_1,"D_revcP1",&DAT_10023fc4);
      iVar5 = atoi(pcVar4);
      if (0xfffe < iVar5 - 1U) goto LAB_1000a13c;
      P_Web_port[param_2 + 0x10b] = (char)((uint)iVar5 >> 0x18);
      P_Web_port[param_2 + 0x10c] = (char)((uint)iVar5 >> 0x10);
      P_Web_port[param_2 + 0x10d] = (char)((uint)iVar5 >> 8);
      P_Web_port[param_2 + 0x10e] = (char)iVar5;
    }
  }
  pcVar4 = (char *)websGetVar(param_1,"TongBu",&DAT_10023fc4);
  uVar6 = atoi(pcVar4);
  P_Web_port[param_2 + 0xd6] = (char)uVar6;
  if ((uVar6 & 0xff) == 1) {
    pcVar4 = (char *)websGetVar(param_1,"Xieyi",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    P_Web_port[param_2 + 0xd7] = (char)iVar5;
    pcVar4 = (char *)websGetVar(param_1,"I_Ovalue",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    P_Web_port[param_2 + 0xd4] = (char)iVar5;
  }
  else if ((uVar6 & 0xff) == 2) {
    pcVar4 = (char *)websGetVar(param_1,"Shujuw",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    P_Web_port[param_2 + 0xdc] = (char)iVar5;
    pcVar4 = (char *)websGetVar(param_1,"Tingz",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    P_Web_port[param_2 + 0xdd] = (char)iVar5;
    pcVar4 = (char *)websGetVar(param_1,"Jiaoy",&DAT_10023fc4);
    iVar5 = atoi(pcVar4);
    P_Web_port[param_2 + 0xde] = (char)iVar5;
  }
  pcVar4 = (char *)websGetVar(param_1,"Shulv",&DAT_10023fc4);
  iVar5 = atoi(pcVar4);
  if (0xb < iVar5 - 1U) goto LAB_1000a8c4;
  uVar9 = 0;
  P_Web_port[param_2 + 0xd8] = 0;
  switch(iVar5) {
  case 1:
    P_Web_port[param_2 + 0xd9] = 0;
    P_Web_port[param_2 + 0xda] = 9;
    uVar9 = 0x60;
    goto LAB_1000a8c0;
  case 2:
    P_Web_port[param_2 + 0xd9] = 0;
    uVar9 = 0x12;
    goto LAB_1000a858;
  case 3:
    P_Web_port[param_2 + 0xd9] = 0;
    P_Web_port[param_2 + 0xda] = 0x25;
    uVar9 = 0x80;
    goto LAB_1000a8c0;
  case 4:
    P_Web_port[param_2 + 0xd9] = 0;
    uVar8 = 0x4b;
    break;
  case 5:
    P_Web_port[param_2 + 0xd9] = 0;
    P_Web_port[param_2 + 0xda] = 0x83;
    uVar9 = 0x40;
    goto LAB_1000a8c0;
  case 6:
    P_Web_port[param_2 + 0xd9] = 0;
    uVar9 = 0xda;
LAB_1000a858:
    P_Web_port[param_2 + 0xda] = uVar9;
    uVar9 = 0xc0;
    goto LAB_1000a8c0;
  case 7:
    P_Web_port[param_2 + 0xd9] = 0;
    uVar8 = 0xfa;
    break;
  case 8:
    P_Web_port[param_2 + 0xd9] = 1;
    uVar8 = 0xf4;
    break;
  case 9:
    P_Web_port[param_2 + 0xd9] = 3;
    uVar8 = 0xe8;
    break;
  case 10:
    P_Web_port[param_2 + 0xd9] = 7;
    uVar8 = 0xd0;
    break;
  case 0xb:
    P_Web_port[param_2 + 0xd9] = 0xf;
    uVar8 = 0xa0;
    break;
  case 0xc:
    P_Web_port[param_2 + 0xd9] = 0x1f;
    uVar8 = 0x40;
  }
  P_Web_port[param_2 + 0xda] = uVar8;
LAB_1000a8c0:
  P_Web_port[param_2 + 0xdb] = uVar9;
LAB_1000a8c4:
  pcVar4 = (char *)websGetVar(param_1,"SHUJUYUAN",&DAT_10023fc4);
  iVar5 = atoi(pcVar4);
  P_Web_port[param_2 + 0x1fa] = (char)iVar5;
  P_Web_port[param_2 + 0x1f7] = (char)((uint)iVar5 >> 0x18);
  P_Web_port[param_2 + 0x1f8] = (char)((uint)iVar5 >> 0x10);
  P_Web_port[param_2 + 0x1f9] = (char)((uint)iVar5 >> 8);
  P_Web_port[param_2 + 0xd1] = 1;
  return bVar10;
}


----------------------------------------
Function: SButtonHandle

void SButtonHandle(undefined4 param_1,int param_2)

{
  bool bVar1;
  uint uVar2;
  undefined4 uVar3;
  int iVar4;
  undefined *puVar5;
  undefined4 uVar6;
  uint uVar7;
  uint uVar8;
  
  uVar7 = Ochoice1;
  uVar8 = Nchoice1;
  if (param_2 == 0) {
    uVar7 = Ochoice;
    uVar8 = Nchoice;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021a8c,&DAT_10021a94);
  uVar6 = 0;
  if (iVar4 != 0) {
    uVar8 = 0;
    uVar6 = 1;
    if (uVar7 != 0) {
      Save_data(param_1,uVar7);
    }
  }
  iVar4 = websCompareVar(param_1,&DAT_10021a9c,&DAT_10021aa4);
  if (iVar4 != 0) {
    if (uVar7 != 1) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 1;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021aac,&DAT_10021ab4);
  if (iVar4 != 0) {
    if (uVar7 != 2) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 2;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021abc,&DAT_10021ac4);
  if (iVar4 != 0) {
    if (uVar7 != 3) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 3;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021acc,&DAT_10021ad4);
  if (iVar4 != 0) {
    if (uVar7 != 4) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 4;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021adc,&DAT_10021ae4);
  if (iVar4 != 0) {
    if (uVar7 != 5) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 5;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021aec,&DAT_10021af4);
  if (iVar4 != 0) {
    if (uVar7 != 6) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 6;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021afc,&DAT_10021b04);
  if (iVar4 != 0) {
    if (uVar7 != 7) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 7;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,&DAT_10021b0c,&DAT_10021b14);
  if (iVar4 != 0) {
    if (uVar7 != 8) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 8;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set10",&DAT_10021b24);
  if (iVar4 != 0) {
    if (uVar7 != 9) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 9;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set11",&DAT_10021b34);
  if (iVar4 != 0) {
    if (uVar7 != 10) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 10;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set12",&DAT_10021b44);
  if (iVar4 != 0) {
    if (uVar7 != 0xb) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 0xb;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set13",&DAT_10021b54);
  if (iVar4 != 0) {
    if (uVar7 != 0xc) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 0xc;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set14",&DAT_10021b64);
  if (iVar4 != 0) {
    if (uVar7 != 0xd) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 0xd;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set15",&DAT_10021b74);
  if (iVar4 != 0) {
    if (uVar7 != 0xe) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 0xe;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Set16",&DAT_10021b84);
  if (iVar4 != 0) {
    if (uVar7 != 0xf) {
      Save_data(param_1,uVar7);
    }
    uVar8 = 0xf;
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Store",&DAT_10021eb8);
  if ((iVar4 != 0) && (iVar4 = Save_data(param_1,uVar8), 0 < iVar4)) {
    Data_judge(uVar8 & 0xff);
    True_Save_data(param_1,uVar8);
    if (Stor_Flag == 1) {
      Stor_Flag = 0;
      puVar5 = &DAT_10021ec0;
    }
    else {
      puVar5 = &DAT_10021f04;
    }
    websWrite(param_1,puVar5);
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"StoreAll",&DAT_10021f4c);
  if ((iVar4 != 0) && (iVar4 = Save_data(param_1,uVar8), 0 < iVar4)) {
    uVar7 = 0;
    do {
      Data_judge(uVar7 & 0xff);
      bVar1 = uVar7 != 0xf;
      uVar7 = uVar7 + 1;
    } while (bVar1);
    Save_All_data(param_1);
    if (Stor_Flag == 1) {
      Stor_Flag = 0;
      puVar5 = &DAT_10021ec0;
    }
    else {
      puVar5 = &DAT_10021f04;
    }
    websWrite(param_1,puVar5);
    uVar6 = 1;
  }
  iVar4 = websCompareVar(param_1,"Reboot",&DAT_10021f64);
  if (iVar4 != 0) {
    Sys_Reboot();
  }
  uVar7 = uVar8;
  uVar2 = uVar8;
  uVar3 = uVar6;
  if (param_2 == 0) {
    uVar7 = Ochoice1;
    uVar2 = Nchoice1;
    uVar3 = BtnFlag1;
    BtnFlag = uVar6;
    Ochoice = uVar8;
    Nchoice = uVar8;
  }
  BtnFlag1 = uVar3;
  Nchoice1 = uVar2;
  Ochoice1 = uVar7;
  return;
}


----------------------------------------
Function: PortConf

void PortConf(undefined4 param_1)

{
  char cVar1;
  byte bVar2;
  int iVar3;
  int iVar4;
  uint uVar5;
  
  fd = httpPlatformOpen("/PortConf8s.htm",0);
  if ((-1 < fd) && (iVar3 = InitReadString(), -1 < iVar3)) {
    LOAD_Data(0);
    SButtonHandle(param_1,0);
    while( true ) {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) {
        nCount = 0;
        goto LAB_1000b040;
      }
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--ChannelNum -->");
      if (iVar4 == 0) {
                    /* WARNING: Subroutine does not return */
        strlen(*(char **)(flavors + Nchoice * 4));
      }
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    }
  }
  goto LAB_1000da10;
LAB_1000b040:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) {
LAB_1000b0f4:
    Chang_Bg_color(param_1,Nchoice);
    cVar1 = P_Web_port[Nchoice * 0x12a + 0xd5];
    if (cVar1 == '\x01') goto LAB_1000b13c;
    if (cVar1 == '\x02') goto LAB_1000b1bc;
    if (cVar1 != '\x03') goto LAB_1000b33c;
    goto LAB_1000b23c;
  }
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--channelName -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x16f);
      }
      goto LAB_1000b0f4;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b040;
LAB_1000b13c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b33c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--Readio1 -->");
  if (iVar4 == 0) goto LAB_1000b278;
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b13c;
LAB_1000b1bc:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b33c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--Readio2 -->");
  if (iVar4 == 0) goto LAB_1000b278;
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b1bc;
LAB_1000b23c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b33c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--Readio3 -->");
  if (iVar4 == 0) goto LAB_1000b278;
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b23c;
LAB_1000b278:
  nCount = ReadString(fd,buf,0x1000);
  if (-1 < nCount) {
    if (nCount != 0) {
      websWriteDataNonBlock(param_1,buf,nCount + -2);
      websWrite(param_1," checked=\"checked\" />\n");
    }
LAB_1000b33c:
    do {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) goto LAB_1000b43c;
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--BADDRES -->");
      if (iVar4 == 0) {
        nCount = ReadString(fd,buf,0x1000);
        if (-1 < nCount) {
          if (nCount != 0) {
            websWriteDataNonBlock(param_1,buf,nCount + -2);
            websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
            strlen(P_Web_port + Nchoice * 0x12a + 0x14f);
          }
          goto LAB_1000b43c;
        }
        break;
      }
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    } while( true );
  }
  goto LAB_1000da10;
LAB_1000b43c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b53c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--ZADDRES -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x10f);
      }
      goto LAB_1000b53c;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b43c;
LAB_1000b53c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b63c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--DADDRES -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x12f);
      }
      goto LAB_1000b63c;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b53c;
LAB_1000b63c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b734;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--B_sendP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xe2] |
                  (uint)(byte)P_Web_port[iVar3 + 0xe1] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xe0] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xdf] << 0x18);
      }
      goto LAB_1000b734;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b63c;
LAB_1000b734:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b82c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--G_sendP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xf2] |
                  (uint)(byte)P_Web_port[iVar3 + 0xf1] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xf0] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xef] << 0x18);
      }
      goto LAB_1000b82c;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b734;
LAB_1000b82c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000b924;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--D_sendP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0x102] |
                  (uint)(byte)P_Web_port[iVar3 + 0x101] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0x100] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xff] << 0x18);
      }
      goto LAB_1000b924;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b82c;
LAB_1000b924:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000ba18;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--B_revcP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xea] |
                  (uint)(byte)P_Web_port[iVar3 + 0xe9] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xe8] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xe7] << 0x18);
      }
      goto LAB_1000ba18;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000b924;
LAB_1000ba18:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000bb24;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--G_revcP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xfa] |
                  (uint)(byte)P_Web_port[iVar3 + 0xf9] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xf8] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xf7] << 0x18);
      }
      goto LAB_1000bb24;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000ba18;
LAB_1000bb24:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000bc34;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--D_revcP -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0x10a] |
                  (uint)(byte)P_Web_port[iVar3 + 0x109] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0x108] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0x107] << 0x18);
      }
      goto LAB_1000bc34;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000bb24;
LAB_1000bc34:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000bd40;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--BADDRES2 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x15f);
      }
      goto LAB_1000bd40;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000bc34;
LAB_1000bd40:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000be4c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--ZADDRES2 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x11f);
      }
      goto LAB_1000be4c;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000bd40;
LAB_1000be4c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000bf58;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--DADDRES2 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen(P_Web_port + Nchoice * 0x12a + 0x13f);
      }
      goto LAB_1000bf58;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000be4c;
LAB_1000bf58:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c05c;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--B_sendP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xe6] |
                  (uint)(byte)P_Web_port[iVar3 + 0xe5] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xe4] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xe3] << 0x18);
      }
      goto LAB_1000c05c;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000bf58;
LAB_1000c05c:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c160;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--G_sendP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xf6] |
                  (uint)(byte)P_Web_port[iVar3 + 0xf5] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xf4] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xf3] << 0x18);
      }
      goto LAB_1000c160;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c05c;
LAB_1000c160:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c264;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--D_sendP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0x106] |
                  (uint)(byte)P_Web_port[iVar3 + 0x105] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0x104] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0x103] << 0x18);
      }
      goto LAB_1000c264;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c160;
LAB_1000c264:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c368;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--B_revcP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xee] |
                  (uint)(byte)P_Web_port[iVar3 + 0xed] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xec] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xeb] << 0x18);
      }
      goto LAB_1000c368;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c264;
LAB_1000c368:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c468;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--G_revcP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0xfe] |
                  (uint)(byte)P_Web_port[iVar3 + 0xfd] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0xfc] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0xfb] << 0x18);
      }
      goto LAB_1000c468;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c368;
LAB_1000c468:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) {
LAB_1000c514:
    if (P_Web_port[Nchoice * 0x12a + 0xd6] == '\x01') goto LAB_1000c568;
    goto LAB_1000c5d8;
  }
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--D_revcP1 -->");
  if (iVar4 == 0) {
    nCount = ReadString(fd,buf,0x1000);
    if (-1 < nCount) {
      if (nCount != 0) {
        websWriteDataNonBlock(param_1,buf,nCount + -2);
        iVar3 = Nchoice * 0x12a;
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)(byte)P_Web_port[iVar3 + 0x10e] |
                  (uint)(byte)P_Web_port[iVar3 + 0x10d] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0x10c] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0x10b] << 0x18);
      }
      goto LAB_1000c514;
    }
    goto LAB_1000da10;
  }
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c468;
LAB_1000c5d8:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c684;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--TongBu2 -->");
  if (iVar4 == 0) goto LAB_1000c614;
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c5d8;
LAB_1000c568:
  iVar3 = ReadString(fd,buf,0x1000);
  nCount = iVar3;
  if (iVar3 < 0) goto LAB_1000da10;
  if (iVar3 == 0) goto LAB_1000c684;
  buf[iVar3] = 0;
  iVar4 = strcmp(buf,"<!--TongBu1 -->");
  if (iVar4 == 0) goto LAB_1000c614;
  websWriteDataNonBlock(param_1,buf,iVar3);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000c568;
LAB_1000c614:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
LAB_1000c684:
  bVar2 = P_Web_port[Nchoice * 0x12a + 0xdc];
  if (bVar2 == 2) {
    while( true ) {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) goto LAB_1000c8ec;
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--Shujuw2 -->");
      if (iVar4 == 0) goto LAB_1000c8a4;
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    }
    goto LAB_1000da10;
  }
  if (bVar2 < 3) {
    if (bVar2 == 1) {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000c8ec;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Shujuw1 -->");
        if (iVar4 == 0) goto LAB_1000c8a4;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
      goto LAB_1000da10;
    }
  }
  else {
    if (bVar2 == 3) {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000c8ec;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Shujuw3 -->");
        if (iVar4 == 0) goto LAB_1000c8a4;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
      goto LAB_1000da10;
    }
    if (bVar2 == 4) {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000c8ec;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Shujuw4 -->");
        if (iVar4 == 0) goto LAB_1000c8a4;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
      goto LAB_1000da10;
    }
  }
  goto LAB_1000c8ec;
LAB_1000c8a4:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
LAB_1000c8ec:
  cVar1 = P_Web_port[Nchoice * 0x12a + 0xd7];
  if (cVar1 == '\x02') {
    while( true ) {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) goto LAB_1000cac8;
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--Xieyi2 -->");
      if (iVar4 == 0) goto LAB_1000ca58;
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    }
  }
  else if (cVar1 == '\x03') {
    while( true ) {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) goto LAB_1000cac8;
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--Xieyi3 -->");
      if (iVar4 == 0) goto LAB_1000ca58;
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    }
  }
  else if (cVar1 == '\x01') {
    while( true ) {
      iVar3 = ReadString(fd,buf,0x1000);
      nCount = iVar3;
      if (iVar3 < 0) break;
      if (iVar3 == 0) goto LAB_1000cac8;
      buf[iVar3] = 0;
      iVar4 = strcmp(buf,"<!--Xieyi1 -->");
      if (iVar4 == 0) goto LAB_1000ca58;
      websWriteDataNonBlock(param_1,buf,iVar3);
      websWrite(param_1,&DAT_10022d7c);
    }
  }
  else {
LAB_1000cac8:
    if (P_Web_port[Nchoice * 0x12a + 0xdd] == '\x01') {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000cc24;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Tingz1 -->");
        if (iVar4 == 0) goto LAB_1000cbdc;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    else if (P_Web_port[Nchoice * 0x12a + 0xdd] == '\x02') {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000cc24;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Tingz2 -->");
        if (iVar4 == 0) goto LAB_1000cbdc;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    else {
LAB_1000cc24:
      iVar3 = Nchoice * 0x12a;
      uVar5 = (uint)(byte)P_Web_port[iVar3 + 0xdb] |
              (uint)(byte)P_Web_port[iVar3 + 0xda] << 8 |
              (uint)(byte)P_Web_port[iVar3 + 0xd9] << 0x10 |
              (uint)(byte)P_Web_port[iVar3 + 0xd8] << 0x18;
      if (uVar5 == 56000) {
        while( true ) {
          iVar3 = ReadString(fd,buf,0x1000);
          nCount = iVar3;
          if (iVar3 < 0) break;
          if (iVar3 == 0) goto LAB_1000d2f0;
          buf[iVar3] = 0;
          iVar4 = strcmp(buf,"<!--Shulv6 -->");
          if (iVar4 == 0) goto LAB_1000d280;
          websWriteDataNonBlock(param_1,buf,iVar3);
          websWrite(param_1,&DAT_10022d7c);
        }
      }
      else {
        if (uVar5 < 0xdac1) {
          if (uVar5 == 0x2580) {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d2f0;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--Shulv3 -->");
              if (iVar4 == 0) goto LAB_1000d280;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
            goto LAB_1000da10;
          }
          if (uVar5 < 0x2581) {
            if (uVar5 == 0x960) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv1 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
            if (uVar5 == 0x12c0) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv2 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
          }
          else {
            if (uVar5 == 0x4b00) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv4 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
            if (uVar5 == 0x8340) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv5 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
          }
        }
        else {
          if (uVar5 == 0x3e800) {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d2f0;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--Shulv9 -->");
              if (iVar4 == 0) goto LAB_1000d280;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
            goto LAB_1000da10;
          }
          if (uVar5 < 0x3e801) {
            if (uVar5 == 64000) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv7 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
            if (uVar5 == 0x1f400) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv8 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
          }
          else {
            if (uVar5 == 0xfa000) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv11 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
            if (uVar5 == 0x1f4000) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv12 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
            if (uVar5 == 0x7d000) {
              while( true ) {
                iVar3 = ReadString(fd,buf,0x1000);
                nCount = iVar3;
                if (iVar3 < 0) break;
                if (iVar3 == 0) goto LAB_1000d2f0;
                buf[iVar3] = 0;
                iVar4 = strcmp(buf,"<!--Shulv10 -->");
                if (iVar4 == 0) goto LAB_1000d280;
                websWriteDataNonBlock(param_1,buf,iVar3);
                websWrite(param_1,&DAT_10022d7c);
              }
              goto LAB_1000da10;
            }
          }
        }
LAB_1000d2f0:
        switch(P_Web_port[Nchoice * 0x12a + 0xde] + -1) {
        case '\0':
          while( true ) {
            iVar3 = ReadString(fd,buf,0x1000);
            nCount = iVar3;
            if (iVar3 < 0) break;
            if (iVar3 == 0) goto switchD_1000d330_caseD_5;
            buf[iVar3] = 0;
            iVar4 = strcmp(buf,"<!--Jiaoy1 -->");
            if (iVar4 == 0) goto LAB_1000d540;
            websWriteDataNonBlock(param_1,buf,iVar3);
            websWrite(param_1,&DAT_10022d7c);
          }
          break;
        case '\x01':
          while( true ) {
            iVar3 = ReadString(fd,buf,0x1000);
            nCount = iVar3;
            if (iVar3 < 0) break;
            if (iVar3 == 0) goto switchD_1000d330_caseD_5;
            buf[iVar3] = 0;
            iVar4 = strcmp(buf,"<!--Jiaoy2 -->");
            if (iVar4 == 0) goto LAB_1000d540;
            websWriteDataNonBlock(param_1,buf,iVar3);
            websWrite(param_1,&DAT_10022d7c);
          }
          break;
        case '\x02':
          while( true ) {
            iVar3 = ReadString(fd,buf,0x1000);
            nCount = iVar3;
            if (iVar3 < 0) break;
            if (iVar3 == 0) goto switchD_1000d330_caseD_5;
            buf[iVar3] = 0;
            iVar4 = strcmp(buf,"<!--Jiaoy3 -->");
            if (iVar4 == 0) goto LAB_1000d540;
            websWriteDataNonBlock(param_1,buf,iVar3);
            websWrite(param_1,&DAT_10022d7c);
          }
          break;
        case '\x03':
          while( true ) {
            iVar3 = ReadString(fd,buf,0x1000);
            nCount = iVar3;
            if (iVar3 < 0) break;
            if (iVar3 == 0) goto switchD_1000d330_caseD_5;
            buf[iVar3] = 0;
            iVar4 = strcmp(buf,"<!--Jiaoy4 -->");
            if (iVar4 == 0) goto LAB_1000d540;
            websWriteDataNonBlock(param_1,buf,iVar3);
            websWrite(param_1,&DAT_10022d7c);
          }
          break;
        case '\x04':
          while( true ) {
            iVar3 = ReadString(fd,buf,0x1000);
            nCount = iVar3;
            if (iVar3 < 0) break;
            if (iVar3 == 0) goto switchD_1000d330_caseD_5;
            buf[iVar3] = 0;
            iVar4 = strcmp(buf,"<!--Jiaoy5 -->");
            if (iVar4 == 0) goto LAB_1000d540;
            websWriteDataNonBlock(param_1,buf,iVar3);
            websWrite(param_1,&DAT_10022d7c);
          }
          break;
        default:
switchD_1000d330_caseD_5:
          iVar3 = Nchoice * 0x12a;
          uVar5 = (uint)(byte)P_Web_port[iVar3 + 0x1fa] |
                  (uint)(byte)P_Web_port[iVar3 + 0x1f9] << 8 |
                  (uint)(byte)P_Web_port[iVar3 + 0x1f8] << 0x10 |
                  (uint)(byte)P_Web_port[iVar3 + 0x1f7] << 0x18;
          if (uVar5 == 1) {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d82c;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--SHUJUYUAN2 -->");
              if (iVar4 == 0) goto LAB_1000d7bc;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
          }
          else if (uVar5 == 0) {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d82c;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--SHUJUYUAN1 -->");
              if (iVar4 == 0) goto LAB_1000d7bc;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
          }
          else if (uVar5 == 2) {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d82c;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--SHUJUYUAN3 -->");
              if (iVar4 == 0) goto LAB_1000d7bc;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
          }
          else {
            while( true ) {
              iVar3 = ReadString(fd,buf,0x1000);
              nCount = iVar3;
              if (iVar3 < 0) break;
              if (iVar3 == 0) goto LAB_1000d82c;
              buf[iVar3] = 0;
              iVar4 = strcmp(buf,"<!--SHUJUYUAN3 -->");
              if (iVar4 == 0) goto LAB_1000d7bc;
              websWriteDataNonBlock(param_1,buf,iVar3);
              websWrite(param_1,&DAT_10022d7c);
            }
          }
        }
      }
    }
  }
  goto LAB_1000da10;
LAB_1000ca58:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
  goto LAB_1000cac8;
LAB_1000cbdc:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
  goto LAB_1000cc24;
LAB_1000d280:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
  goto LAB_1000d2f0;
LAB_1000d540:
  nCount = ReadString(fd,buf,0x1000);
  if (nCount < 0) goto LAB_1000da10;
  if (nCount != 0) {
    websWriteDataNonBlock(param_1,buf,nCount + -2);
    websWrite(param_1," selected=\"selected\" >\n");
  }
  goto switchD_1000d330_caseD_5;
LAB_1000d7bc:
  nCount = ReadString(fd,buf,0x1000);
  if (-1 < nCount) {
    if (nCount != 0) {
      websWriteDataNonBlock(param_1,buf,nCount + -2);
      websWrite(param_1," selected=\"selected\" >\n");
    }
LAB_1000d82c:
    if (P_Web_port[Nchoice * 0x12a + 0xd4] == '\x01') {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000d9a4;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Iclock -->");
        if (iVar4 == 0) goto LAB_1000d908;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    else {
      while( true ) {
        iVar3 = ReadString(fd,buf,0x1000);
        nCount = iVar3;
        if (iVar3 < 0) break;
        if (iVar3 == 0) goto LAB_1000d9a4;
        buf[iVar3] = 0;
        iVar4 = strcmp(buf,"<!--Oclock -->");
        if (iVar4 == 0) goto LAB_1000d908;
        websWriteDataNonBlock(param_1,buf,iVar3);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
  }
  goto LAB_1000da10;
LAB_1000d908:
  nCount = ReadString(fd,buf,0x1000);
  if (-1 < nCount) {
    if (nCount != 0) {
      websWriteDataNonBlock(param_1,buf,nCount + -2);
      websWrite(param_1," checked=\"checked\" />\n");
    }
LAB_1000d9a4:
    while( true ) {
      nCount = ReadString(fd,buf,0x1000);
      if (nCount < 0) break;
      if (nCount == 0) {
        if (0 < fd) {
          httpPlatformClose();
        }
        websDone(param_1,0xc9);
        return;
      }
      iVar3 = 0;
      for (; nCount != 0; nCount = nCount - iVar3) {
        iVar3 = websWriteDataNonBlock(param_1,buf + iVar3);
        if (iVar3 < 0) goto LAB_1000da10;
      }
      websWrite(param_1,&DAT_10022d7c);
    }
  }
LAB_1000da10:
  if (0 < fd) {
    httpPlatformClose();
  }
  websError(param_1,0x194,"Cannot open URL:%s","/PortConf8s.htm");
  return;
}


----------------------------------------
Function: Save_time_cgf

void Save_time_cgf(undefined4 param_1,char *param_2,int param_3)

{
  FILE *__stream;
  int iVar1;
  char *__command;
  
  __stream = fopen("/etc/config/system","w+");
  if (__stream == (FILE *)0x0) {
    puts("open cfg error");
  }
  fputc(10,__stream);
  fputs("config system\n",__stream);
  fputs("        option \'hostname\'       \'MPDC-II\'\n",__stream);
  fputs("        option \'timezone\'       \'CST-8\'\n",__stream);
  fputs("        option \'zonename\'       \'Asia/Shanghai\'\n",__stream);
  fputc(10,__stream);
  fputs("config restore\n",__stream);
  iVar1 = atoi(param_2);
  fprintf(__stream,"        option \'filter\'         \'%d\'\n",iVar1);
  fputs("        option \'mode\'           \'minimal\'\n",__stream);
  fputc(10,__stream);
  fputs("config timeserver ntp\n",__stream);
  fprintf(__stream,"        list server     %s\n",param_1);
  fputs("        list server     0.openwrt.pool.ntp.org\n",__stream);
  fputs("        list server     1.openwrt.pool.ntp.org\n",__stream);
  fputs("        list server     2.openwrt.pool.ntp.org\n",__stream);
  fputs("        list server     3.openwrt.pool.ntp.org\n",__stream);
  if (param_3 == 1) {
    fputs("        option enable_server 1\n",__stream);
    fclose(__stream);
    __command = "/etc/init.d/sysntpd restart";
  }
  else {
    fputs("        option enable_server 0\n",__stream);
    fclose(__stream);
    __command = "/etc/init.d/sysntpd stop";
  }
  system(__command);
  return;
}


----------------------------------------
Function: ModifyNet1Time

void ModifyNet1Time(undefined4 param_1)

{
  char *__s;
  char *__nptr;
  
  __s = (char *)websGetVar(param_1,"TimeSerIp",&DAT_10023fc4);
  websGetVar(param_1,"TimeInterval",&DAT_10023fc4);
  __nptr = (char *)websGetVar(param_1,"statntp",&DAT_10023fc4);
  websGetVar(param_1,"stopntp",&DAT_10023fc4);
  atoi(__nptr);
  memset(g_pWrData,0,0x20);
                    /* WARNING: Subroutine does not return */
  strlen(__s);
}


----------------------------------------
Function: ModifyNetTime

void ModifyNetTime(undefined4 param_1)

{
  char *__nptr;
  char *__nptr_00;
  char *__nptr_01;
  char *__nptr_02;
  char *__nptr_03;
  char *__nptr_04;
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  char acStack_120 [128];
  char acStack_a0 [128];
  
  __nptr = (char *)websGetVar(param_1,"SetYear",&DAT_10023fc4);
  __nptr_00 = (char *)websGetVar(param_1,"SetMonth",&DAT_10023fc4);
  __nptr_01 = (char *)websGetVar(param_1,"SetDay",&DAT_10023fc4);
  __nptr_02 = (char *)websGetVar(param_1,"SetHour",&DAT_10023fc4);
  __nptr_03 = (char *)websGetVar(param_1,"SetMinute",&DAT_10023fc4);
  __nptr_04 = (char *)websGetVar(param_1,"SetSecond",&DAT_10023fc4);
  websGetVar(param_1,"TimeSerIp",&DAT_10023fc4);
  websGetVar(param_1,"TimeInterval",&DAT_10023fc4);
  iVar1 = atoi(__nptr);
  iVar2 = atoi(__nptr_00);
  iVar3 = atoi(__nptr_01);
  iVar4 = atoi(__nptr_02);
  iVar5 = atoi(__nptr_03);
  iVar6 = atoi(__nptr_04);
  sprintf(acStack_120,"%c%d-%d-%d %d:%d:%d%c",0x22,iVar1,iVar2,iVar3,iVar4,iVar5,iVar6,0x22);
  sprintf(acStack_a0,"date -s %s",acStack_120);
  system(acStack_a0);
  system("hwclock -w");
  return;
}


----------------------------------------
Function: NtpTime

/* WARNING: Control flow encountered bad instruction data */

void NtpTime(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: NetSave

void NetSave(void)

{
  int iVar1;
  char *pcVar2;
  char *pcVar3;
  char acStack_98 [136];
  
  memset(acStack_98,0,0x80);
  sprintf(acStack_98,"uci set network.lan0.ipaddr=%s",g_pWrData + 0x65);
  system(acStack_98);
  memset(acStack_98,0,0x80);
  sprintf(acStack_98,"uci set network.lan0.netmask=%s",g_pWrData + 0x75);
  system(acStack_98);
  iVar1 = g_pWrData;
  pcVar3 = (char *)(g_pWrData + 0x85);
  pcVar2 = strstr(pcVar3,"0.0.0.0");
  if ((pcVar2 == (char *)0x0) && (*(char *)(iVar1 + 0x85) != '\0')) {
    memset(acStack_98,0,0x80);
    sprintf(acStack_98,"uci set network.lan0.gateway=%s",pcVar3);
    system(acStack_98);
  }
  memset(acStack_98,0,0x80);
  sprintf(acStack_98,"uci set network.lan1.ipaddr=%s",g_pWrData + 0xa1);
  system(acStack_98);
  memset(acStack_98,0,0x80);
  sprintf(acStack_98,"uci set network.lan1.netmask=%s",g_pWrData + 0xb1);
  system(acStack_98);
  iVar1 = g_pWrData;
  pcVar3 = (char *)(g_pWrData + 0xc1);
  pcVar2 = strstr(pcVar3,"0.0.0.0");
  if ((pcVar2 == (char *)0x0) && (*(char *)(iVar1 + 0xc1) != '\0')) {
    memset(acStack_98,0,0x80);
    sprintf(acStack_98,"uci set network.lan1.gateway=%s",pcVar3);
    system(acStack_98);
  }
  system("uci commit network");
  return;
}


----------------------------------------
Function: Read_Netinfo

undefined4 Read_Netinfo(char *param_1,int param_2)

{
  int iVar1;
  char *pcVar2;
  int iVar3;
  uint uVar4;
  char acStack_48 [15];
  undefined local_39;
  undefined4 local_34;
  in_addr local_28;
  in_addr local_24;
  in_addr local_20 [2];
  uint local_18;
  
  iVar1 = socket(2,2,0);
  strncpy(acStack_48,param_1,0x10);
  local_39 = 0;
  iVar1 = ioctl(iVar1,0x8915,acStack_48);
  if (-1 < iVar1) {
    if (param_2 == 0) {
      local_18 = local_34;
      pcVar2 = inet_ntoa((in_addr)&local_18);
      strcpy(NEWstrIPAddress1,pcVar2);
      iVar1 = socket(2,1,0);
      if (iVar1 < 0) {
LAB_1000ee18:
        perror("socket");
        return 2;
      }
      iVar3 = ioctl(iVar1,0x8927,acStack_48);
      if ((-1 < iVar3) && (iVar1 = ioctl(iVar1,0x891b,acStack_48), -1 < iVar1)) {
        local_18 = local_34;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrNetMask1,pcVar2);
        inet_aton(NEWstrIPAddress1,local_20);
        inet_aton(NEWstrNetMask1,&local_24);
        inet_aton("0.0.0.1",&local_28);
        local_18 = local_24.s_addr & local_20[0].s_addr;
        uVar4 = local_18 | local_28.s_addr;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrNetWork1,pcVar2);
        local_18 = local_20[0].s_addr | ~local_24.s_addr;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrBroadcast1,pcVar2);
        local_18 = uVar4;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrGateAddress1,pcVar2);
        return 0;
      }
    }
    else {
      if (param_2 != 1) {
        return 0;
      }
      local_18 = local_34;
      pcVar2 = inet_ntoa((in_addr)&local_18);
      strcpy(NEWstrIPAddress2,pcVar2);
      iVar1 = socket(2,1,0);
      if (iVar1 < 0) goto LAB_1000ee18;
      iVar3 = ioctl(iVar1,0x8927,acStack_48);
      if ((-1 < iVar3) && (iVar1 = ioctl(iVar1,0x891b,acStack_48), -1 < iVar1)) {
        local_18 = local_34;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrNetMask2,pcVar2);
        inet_aton(NEWstrIPAddress2,local_20);
        inet_aton(NEWstrNetMask2,&local_24);
        inet_aton("0.0.0.1",&local_28);
        local_18 = local_24.s_addr & local_20[0].s_addr;
        uVar4 = local_18 | local_28.s_addr;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrNetWork2,pcVar2);
        local_18 = local_20[0].s_addr | ~local_24.s_addr;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrBroadcast2,pcVar2);
        local_18 = uVar4;
        pcVar2 = inet_ntoa((in_addr)&local_18);
        strcpy(NEWstrGateAddress2,pcVar2);
        return 0;
      }
    }
  }
  perror("ioctl");
  return 3;
}


----------------------------------------
Function: Modify_ip_port

undefined4 Modify_ip_port(undefined4 param_1,int param_2)

{
  int iVar1;
  char *pcVar2;
  char *pcVar3;
  char *pcVar4;
  uint uVar5;
  int iVar6;
  undefined *puVar7;
  char *pcVar8;
  int local_78;
  char acStack_74 [64];
  char acStack_34 [20];
  
  if (param_2 == 0) {
    pcVar2 = (char *)websGetVar(param_1,"IpAddr1",&DAT_10023fc4);
    pcVar3 = (char *)websGetVar(param_1,"NETMASK1",&DAT_10023fc4);
    pcVar4 = (char *)websGetVar(param_1,"GATEWAY1",&DAT_10023fc4);
    memset(&str_addr,0,0x44);
    StringSplit_Struct(&str_addr,pcVar2,&DAT_10021168);
    if (((uint)DAT_100b1a6b |
        (uint)DAT_100b1a6a << 8 | (uint)DAT_100b1a69 << 0x10 | (uint)str_addr << 0x18) != 3) {
LAB_1000f148:
      puVar7 = &DAT_100227b8;
      goto LAB_1000f304;
    }
    pcVar8 = &DAT_100b1a6c;
    do {
      uVar5 = atoi(pcVar8);
      iVar1 = g_pWrData;
      if (0xfe < uVar5) goto LAB_1000f148;
      pcVar8 = pcVar8 + 0x10;
    } while (pcVar8 != strNetWork);
    pcVar8 = strstr((char *)(g_pWrData + 0xa1),pcVar2);
    if (pcVar8 == (char *)0x0) {
      strncpy((char *)(iVar1 + 0x65),pcVar2,0x10);
      memset(&local_78,0,0x44);
      StringSplit_Struct(&local_78,pcVar3,&DAT_10021168);
      if (local_78 == 3) {
        pcVar2 = acStack_74;
        do {
          uVar5 = atoi(pcVar2);
          if (0xff < uVar5) goto LAB_1000f2a4;
          pcVar2 = pcVar2 + 0x10;
        } while (pcVar2 != acStack_34);
        strncpy((char *)(g_pWrData + 0x75),pcVar3,0x10);
        memset(&str_ZADDR,0,0x44);
        StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
        if (((uint)DAT_100b1a07 |
            (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) == 3) {
          pcVar2 = &DAT_100b1a08;
          while (uVar5 = atoi(pcVar2), uVar5 < 0xff) {
            pcVar2 = pcVar2 + 0x10;
            if (pcVar2 == g_SysDev_t) {
              strncpy((char *)(g_pWrData + 0x85),pcVar4,0x10);
              pcVar2 = (char *)websGetVar(param_1,&DAT_100229d8,&DAT_10023fc4);
              iVar6 = atoi(pcVar2);
              iVar1 = g_pWrData;
              if (0xfffd < iVar6 - 1U) {
                return 0;
              }
              *(char *)(g_pWrData + 0x5d) = (char)((uint)iVar6 >> 0x18);
              *(char *)(iVar1 + 0x5e) = (char)((uint)iVar6 >> 0x10);
              *(char *)(iVar1 + 0x60) = (char)iVar6;
              *(char *)(iVar1 + 0x5f) = (char)((uint)iVar6 >> 8);
              pcVar2 = (char *)websGetVar(param_1,&DAT_10022898,&DAT_10023fc4);
              iVar6 = atoi(pcVar2);
              iVar1 = g_pWrData;
              if (0xfffd < iVar6 - 1U) {
                return 0;
              }
              *(char *)(g_pWrData + 0x61) = (char)((uint)iVar6 >> 0x18);
              *(char *)(iVar1 + 0x62) = (char)((uint)iVar6 >> 0x10);
              *(char *)(iVar1 + 99) = (char)((uint)iVar6 >> 8);
              *(char *)(iVar1 + 100) = (char)iVar6;
              return 1;
            }
          }
        }
        puVar7 = &DAT_1002284c;
      }
      else {
LAB_1000f2a4:
        puVar7 = &DAT_10022800;
      }
      goto LAB_1000f304;
    }
  }
  else {
    pcVar2 = (char *)websGetVar(param_1,"IpAddr2",&DAT_10023fc4);
    pcVar3 = (char *)websGetVar(param_1,"NETMASK2",&DAT_10023fc4);
    pcVar4 = (char *)websGetVar(param_1,"GATEWAY2",&DAT_10023fc4);
    memset(&str_addr,0,0x44);
    StringSplit_Struct(&str_addr,pcVar2,&DAT_10021168);
    if (((uint)DAT_100b1a6b |
        (uint)DAT_100b1a6a << 8 | (uint)DAT_100b1a69 << 0x10 | (uint)str_addr << 0x18) != 3) {
LAB_1000f214:
      puVar7 = &DAT_100228b4;
      goto LAB_1000f304;
    }
    pcVar8 = &DAT_100b1a6c;
    do {
      uVar5 = atoi(pcVar8);
      iVar1 = g_pWrData;
      if (0xfe < uVar5) goto LAB_1000f214;
      pcVar8 = pcVar8 + 0x10;
    } while (pcVar8 != strNetWork);
    pcVar8 = strstr((char *)(g_pWrData + 0x65),pcVar2);
    if (pcVar8 == (char *)0x0) {
      strncpy((char *)(iVar1 + 0xa1),pcVar2,0x10);
      memset(&local_78,0,0x44);
      StringSplit_Struct(&local_78,pcVar3,&DAT_10021168);
      if (local_78 == 3) {
        pcVar2 = acStack_74;
        do {
          uVar5 = atoi(pcVar2);
          if (0xff < uVar5) goto LAB_1000f5f0;
          pcVar2 = pcVar2 + 0x10;
        } while (pcVar2 != acStack_34);
        strncpy((char *)(g_pWrData + 0xb1),pcVar3,0x10);
        memset(&str_ZADDR,0,0x44);
        StringSplit_Struct(&str_ZADDR,pcVar4,&DAT_10021168);
        if (((uint)DAT_100b1a07 |
            (uint)DAT_100b1a06 << 8 | (uint)DAT_100b1a05 << 0x10 | (uint)str_ZADDR << 0x18) == 3) {
          pcVar2 = &DAT_100b1a08;
          while (uVar5 = atoi(pcVar2), uVar5 < 0xff) {
            pcVar2 = pcVar2 + 0x10;
            if (pcVar2 == g_SysDev_t) {
              strncpy((char *)(g_pWrData + 0xc1),pcVar4,0x10);
              pcVar2 = (char *)websGetVar(param_1,"DNS11",&DAT_10023fc4);
              iVar6 = atoi(pcVar2);
              iVar1 = g_pWrData;
              if (0xfffd < iVar6 - 1U) {
                return 0;
              }
              *(char *)(g_pWrData + 0x99) = (char)((uint)iVar6 >> 0x18);
              *(char *)(iVar1 + 0x9a) = (char)((uint)iVar6 >> 0x10);
              *(char *)(iVar1 + 0x9c) = (char)iVar6;
              *(char *)(iVar1 + 0x9b) = (char)((uint)iVar6 >> 8);
              pcVar2 = (char *)websGetVar(param_1,"DNS22",&DAT_10023fc4);
              iVar6 = atoi(pcVar2);
              iVar1 = g_pWrData;
              if (0xfffd < iVar6 - 1U) {
                return 0;
              }
              *(char *)(g_pWrData + 0x9d) = (char)((uint)iVar6 >> 0x18);
              *(char *)(iVar1 + 0x9e) = (char)((uint)iVar6 >> 0x10);
              *(char *)(iVar1 + 0x9f) = (char)((uint)iVar6 >> 8);
              *(char *)(iVar1 + 0xa0) = (char)iVar6;
              return 1;
            }
          }
        }
        puVar7 = &DAT_10022948;
      }
      else {
LAB_1000f5f0:
        puVar7 = &DAT_100228fc;
      }
      goto LAB_1000f304;
    }
  }
  puVar7 = &DAT_1002299c;
LAB_1000f304:
  websWrite(param_1,puVar7);
  return 0;
}


----------------------------------------
Function: GetModifyAddrSegment

void GetModifyAddrSegment(char *param_1,char *param_2,char *param_3)

{
  char *__src;
  int iVar1;
  in_addr local_24;
  in_addr local_20 [2];
  uint local_18;
  
  local_20[0].s_addr = 0;
  local_24.s_addr = 0;
  inet_aton(param_2,local_20);
  inet_aton(param_3,&local_24);
  local_18 = local_24.s_addr & local_20[0].s_addr;
  __src = inet_ntoa((in_addr)&local_18);
  strcpy(strNetWork,__src);
  iVar1 = strcmp(param_1,"eth0");
  if (iVar1 == 0) {
    AddOrAltNetConfig("/etc/sysconfig/networking/ifcfg-eth0","NETWORK",__src);
  }
  return;
}


----------------------------------------
Function: NetConfHandleSubmit

undefined4 NetConfHandleSubmit(undefined4 param_1)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = Modify_ip_port();
  if (iVar1 < 1) {
    uVar2 = 0xffffffff;
  }
  else {
    websWrite(param_1,&DAT_10021ec0);
    NetSave();
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: NetConf1

void NetConf1(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/NEW_NetConf1.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      iVar2 = websCompareVar(param_1,"Submit",&DAT_10022a34);
      if (iVar2 != 0) {
        NetConfHandleSubmit(param_1,1);
      }
      iVar2 = websCompareVar(param_1,"RESTART",&DAT_10022a44);
      if (iVar2 != 0) {
        Sys_Reboot();
      }
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) goto LAB_1000f90c;
        buf[iVar2] = 0;
        iVar3 = strcmp(buf,"<!--IpAddr2 -->");
        if (iVar3 == 0) {
          iVar2 = ReadString(iVar1,buf,0x1000);
          if (-1 < iVar2) {
            if (iVar2 != 0) {
              websWriteDataNonBlock(param_1,buf,iVar2 + -2);
              websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
              strlen((char *)(g_pWrData + 0xa1));
            }
            goto LAB_1000f90c;
          }
          break;
        }
        websWriteDataNonBlock(param_1,buf,iVar2);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_1000fcf0:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/NEW_NetConf.htm");
  return;
LAB_1000f90c:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_1000fcf0;
  if (iVar2 == 0) goto LAB_1000f9f8;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--NETMASK2 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen((char *)(g_pWrData + 0xb1));
      }
      goto LAB_1000f9f8;
    }
    goto LAB_1000fcf0;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000f90c;
LAB_1000f9f8:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_1000fcf0;
  if (iVar2 == 0) goto LAB_1000fae4;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--GATEWAY2 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen((char *)(g_pWrData + 0xc1));
      }
      goto LAB_1000fae4;
    }
    goto LAB_1000fcf0;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000f9f8;
LAB_1000fae4:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_1000fcf0;
  if (iVar2 == 0) goto LAB_1000fbc8;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--DNS11 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)*(byte *)(g_pWrData + 0x9c) |
                  (uint)*(byte *)(g_pWrData + 0x9b) << 8 |
                  (uint)*(byte *)(g_pWrData + 0x9a) << 0x10 |
                  (uint)*(byte *)(g_pWrData + 0x99) << 0x18);
      }
      goto LAB_1000fbc8;
    }
    goto LAB_1000fcf0;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000fae4;
LAB_1000fbc8:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (-1 < iVar2) {
    if (iVar2 == 0) {
LAB_1000fc54:
      Old_Inchoice1 = Inchoice1;
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_1000fcf0;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    else {
      buf[iVar2] = 0;
      iVar3 = strcmp(buf,"<!--DNS22 -->");
      if (iVar3 != 0) goto code_r0x1000fba8;
      iVar2 = ReadString(iVar1,buf,0x1000);
      if (-1 < iVar2) {
        if (iVar2 != 0) {
          websWriteDataNonBlock(param_1,buf,iVar2 + -2);
          websWrite(param_1," value=\"%d\"/>\n",
                    (uint)*(byte *)(g_pWrData + 0xa0) |
                    (uint)*(byte *)(g_pWrData + 0x9f) << 8 |
                    (uint)*(byte *)(g_pWrData + 0x9e) << 0x10 |
                    (uint)*(byte *)(g_pWrData + 0x9d) << 0x18);
        }
        goto LAB_1000fc54;
      }
    }
  }
  goto LAB_1000fcf0;
code_r0x1000fba8:
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000fbc8;
}


----------------------------------------
Function: NetConf

void NetConf(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = httpPlatformOpen("/NEW_NetConf.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      iVar2 = websCompareVar(param_1,"Submit",&DAT_10022a34);
      if (iVar2 != 0) {
        NetConfHandleSubmit(param_1,0);
      }
      iVar2 = websCompareVar(param_1,"RESTART",&DAT_10022a44);
      if (iVar2 != 0) {
        Sys_Reboot();
      }
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) goto LAB_1000ff14;
        buf[iVar2] = 0;
        iVar3 = strcmp(buf,"<!--IpAddr1 -->");
        if (iVar3 == 0) {
          iVar2 = ReadString(iVar1,buf,0x1000);
          if (-1 < iVar2) {
            if (iVar2 != 0) {
              websWriteDataNonBlock(param_1,buf,iVar2 + -2);
              websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
              strlen((char *)(g_pWrData + 0x65));
            }
            goto LAB_1000ff14;
          }
          break;
        }
        websWriteDataNonBlock(param_1,buf,iVar2);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_100102f8:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/NEW_NetConf.htm");
  return;
LAB_1000ff14:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_100102f8;
  if (iVar2 == 0) goto LAB_10010000;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--NETMASK1 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen((char *)(g_pWrData + 0x75));
      }
      goto LAB_10010000;
    }
    goto LAB_100102f8;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_1000ff14;
LAB_10010000:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_100102f8;
  if (iVar2 == 0) goto LAB_100100ec;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--GATEWAY1 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"");
                    /* WARNING: Subroutine does not return */
        strlen((char *)(g_pWrData + 0x85));
      }
      goto LAB_100100ec;
    }
    goto LAB_100102f8;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_10010000;
LAB_100100ec:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (iVar2 < 0) goto LAB_100102f8;
  if (iVar2 == 0) goto LAB_100101d0;
  buf[iVar2] = 0;
  iVar3 = strcmp(buf,"<!--DNS1 -->");
  if (iVar3 == 0) {
    iVar2 = ReadString(iVar1,buf,0x1000);
    if (-1 < iVar2) {
      if (iVar2 != 0) {
        websWriteDataNonBlock(param_1,buf,iVar2 + -2);
        websWrite(param_1," value=\"%d\"/>\n",
                  (uint)*(byte *)(g_pWrData + 0x60) |
                  (uint)*(byte *)(g_pWrData + 0x5f) << 8 |
                  (uint)*(byte *)(g_pWrData + 0x5e) << 0x10 |
                  (uint)*(byte *)(g_pWrData + 0x5d) << 0x18);
      }
      goto LAB_100101d0;
    }
    goto LAB_100102f8;
  }
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_100100ec;
LAB_100101d0:
  iVar2 = ReadString(iVar1,buf,0x1000);
  if (-1 < iVar2) {
    if (iVar2 == 0) {
LAB_1001025c:
      Old_Inchoice = Inchoice;
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_100102f8;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
    else {
      buf[iVar2] = 0;
      iVar3 = strcmp(buf,"<!--DNS2 -->");
      if (iVar3 != 0) goto code_r0x100101b0;
      iVar2 = ReadString(iVar1,buf,0x1000);
      if (-1 < iVar2) {
        if (iVar2 != 0) {
          websWriteDataNonBlock(param_1,buf,iVar2 + -2);
          websWrite(param_1," value=\"%d\"/>\n",
                    (uint)*(byte *)(g_pWrData + 100) |
                    (uint)*(byte *)(g_pWrData + 99) << 8 |
                    (uint)*(byte *)(g_pWrData + 0x62) << 0x10 |
                    (uint)*(byte *)(g_pWrData + 0x61) << 0x18);
        }
        goto LAB_1001025c;
      }
    }
  }
  goto LAB_100102f8;
code_r0x100101b0:
  websWriteDataNonBlock(param_1,buf,iVar2);
  websWrite(param_1,&DAT_10022d7c);
  goto LAB_100101d0;
}


----------------------------------------
Function: SecuritySelfHandler

void SecuritySelfHandler(undefined4 param_1)

{
  char cVar1;
  char cVar2;
  undefined uVar3;
  char *__s1;
  char *__s1_00;
  int iVar4;
  
  GetRtuRunInfo(g_SysDev_t);
  __s1 = (char *)websGetVar(param_1,"Username",&DAT_10023fc4);
  __s1_00 = (char *)websGetVar(param_1,"Passwrd",&DAT_10023fc4);
  ws_set_cookie(param_1,"Username",__s1,0,&DAT_10020dec,0);
  printf("%s %s\n",__s1,__s1_00);
  iVar4 = strcmp(__s1,g_SysDev_t);
  if ((iVar4 == 0) && (iVar4 = strcmp(__s1_00,g_SysDev_t + 0x10), iVar4 == 0)) {
    Login_flag = 1;
    websWrite(param_1,
              "<script language=\"javascript\">location.replace(\"/goform/Syspage\");</script>",
              &DAT_10023fc4);
  }
  iVar4 = strcmp(__s1,g_SysDev_t);
  cVar1 = *__s1;
  if ((iVar4 == 0) || (cVar1 == '\0')) {
    cVar2 = *__s1_00;
    if ((cVar1 != '\0') || (uVar3 = 2, cVar2 == '\0')) {
      iVar4 = strcmp(__s1_00,g_SysDev_t + 0x10);
      if ((iVar4 == 0) || (cVar2 == '\0')) {
        uVar3 = Flag_mes;
        if (cVar2 == '\0') {
          if (cVar1 == '\0') {
            uVar3 = 5;
          }
          else {
            uVar3 = 4;
          }
        }
      }
      else {
        uVar3 = 3;
      }
    }
  }
  else {
    uVar3 = 1;
  }
  Flag_mes = uVar3;
  return;
}


----------------------------------------
Function: Loginn

void Loginn(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = access("/usr/local/webs/CdatcUserInfo",0);
  if (iVar1 != 0) {
    system("mkdir /usr/local/webs");
    websSetUsername("cdatc");
    websSetPassword("111111");
    UpdateRtuRunInfo(gSystemInfo);
  }
  iVar1 = websCompareVar(param_1,"Submit",&DAT_10022bb4);
  if (iVar1 != 0) {
    SecuritySelfHandler(param_1);
  }
  iVar1 = httpPlatformOpen("/Loginn.htm",0);
  if (-1 < iVar1) {
    iVar2 = InitReadString();
    if (-1 < iVar2) {
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) goto LAB_10010768;
        if (iVar2 == 0) goto LAB_1001071c;
        buf[iVar2] = 0;
        iVar3 = strcmp(buf,"<!--User_msg -->");
        if (iVar3 == 0) break;
        websWriteDataNonBlock(param_1,buf,iVar2);
        websWrite(param_1,&DAT_10022d7c);
      }
      if (Flag_mes == '\0') {
        websWrite(param_1,&DAT_10022d7c);
      }
      if (Flag_mes == '\x01') {
        websWrite(param_1,&DAT_10022bdc);
      }
      if (Flag_mes == '\x02') {
        websWrite(param_1,&DAT_10022c1c);
      }
      if (Flag_mes == '\x03') {
        websWrite(param_1,&DAT_10022c5c);
      }
      if (Flag_mes == '\x04') {
        websWrite(param_1,&DAT_10022c9c);
      }
      if (Flag_mes == '\x05') {
        websWrite(param_1,&DAT_10022cdc);
      }
      Flag_mes = '\0';
LAB_1001071c:
      while( true ) {
        iVar2 = ReadString(iVar1,buf,0x1000);
        if (iVar2 < 0) break;
        if (iVar2 == 0) {
          if (iVar1 != 0) {
            httpPlatformClose(iVar1);
          }
          websDone(param_1,0xc9);
          return;
        }
        iVar3 = 0;
        do {
          iVar3 = websWriteDataNonBlock(param_1,buf + iVar3,iVar2);
          if (iVar3 < 0) goto LAB_10010768;
          iVar2 = iVar2 - iVar3;
        } while (iVar2 != 0);
        websWrite(param_1,&DAT_10022d7c);
      }
    }
LAB_10010768:
    if (iVar1 != 0) {
      httpPlatformClose(iVar1);
    }
  }
  websError(param_1,0x194,"Cannot open URL:%s","/Loginn.htm");
  return;
}


----------------------------------------
Function: SaveUserCfgtoFile

void SaveUserCfgtoFile(void)

{
  FILE *__stream;
  char acStack_b8 [116];
  
  __stream = fopen(cfgfilepath,"w+");
  sprintf(acStack_b8,"%s.cfg","CdatcGateway");
  fputs("----------------------------------------------------------\r\n",__stream);
  fputs("-------",__stream);
                    /* WARNING: Subroutine does not return */
  strlen(acStack_b8);
}


----------------------------------------
Function: DownCfgFile

void DownCfgFile(undefined4 param_1)

{
  void *__ptr;
  int iVar1;
  int iVar2;
  int local_28 [7];
  
  SaveUserCfgtoFile();
  websWrite(param_1,"HTTP/1.0 200 OK\n",&DAT_10023fc4);
  websWrite(param_1,"Content-Type: application/octet-stream\n",&DAT_10023fc4);
  websWrite(param_1,"Content-Disposition: attachment; filename=%s.txt\n\n","CdatcGateway");
  __ptr = (void *)GetFileString(cfgfilepath,local_28);
  if (0 < local_28[0]) {
    iVar2 = 0;
    for (; local_28[0] != 0; local_28[0] = local_28[0] - iVar1) {
      iVar1 = websWriteDataNonBlock(param_1,(int)__ptr + iVar2);
      iVar2 = iVar2 + iVar1;
    }
    free(__ptr);
  }
  websDone(param_1,200);
  return;
}


----------------------------------------
Function: FillBufferFile

uint FillBufferFile(undefined4 param_1)

{
  int iVar1;
  uint uVar2;
  
  for (ubufferActualSize._0_2_ = 0; uVar2 = (uint)ubufferActualSize._0_2_, uVar2 < 0x1000;
      ubufferActualSize._0_2_ = (short)iVar1 + ubufferActualSize._0_2_) {
    iVar1 = SimpleRomPageReadData(param_1,&bufferFile + uVar2,0x1000 - uVar2);
    if (iVar1 == 0) break;
    if (iVar1 < 0) {
      return 0xffffffff;
    }
  }
  return (uint)ubufferActualSize._0_2_;
}


----------------------------------------
Function: ReadString

uint ReadString(int param_1,void *param_2,uint param_3)

{
  char *pcVar1;
  size_t __n;
  uint uVar2;
  int iVar3;
  size_t sVar4;
  uint uVar5;
  
  if (((-1 < param_1) && (param_2 != (void *)0x0)) && (param_3 != 0)) {
    if (nEOB == 1) {
      return 0;
    }
    uStrHead = uStrTail + 1;
    if ((&DAT_100b07d5)[uStrTail] == '\n') {
      uStrHead = uStrTail + 2;
    }
    uVar5 = (uint)ubufferActualSize._0_2_;
    uVar2 = uStrTail + 1;
    iVar3 = uVar5 - uStrTail;
    if ((uVar5 < uVar2) || (uVar5 == 0)) {
      iVar3 = 1;
    }
    do {
      uStrTail = uVar2;
      iVar3 = iVar3 + -1;
      if (iVar3 == 0) {
        uVar5 = uVar5 - uStrHead;
        if (param_3 < uVar5) {
          return 0xffffffff;
        }
        memcpy(param_2,&bufferFile + uStrHead,uVar5);
        do {
          __n = FillBufferFile(param_1);
          if (__n == 0) {
            nEOB = 1;
            return uVar5;
          }
          uStrHead = 0;
          iVar3 = __n + 1;
          sVar4 = 0xffffffff;
          while( true ) {
            uStrTail = sVar4 + 1;
            iVar3 = iVar3 + -1;
            if (iVar3 == 0) break;
            pcVar1 = &DAT_100b07d5 + sVar4;
            sVar4 = uStrTail;
            if (*pcVar1 == '\r') {
              uVar2 = uVar5 + uStrTail;
              if (param_3 < uVar2) {
                uStrHead = 0;
                return 0xffffffff;
              }
              memcpy((void *)((int)param_2 + uVar5),&bufferFile,uStrTail);
              return uVar2;
            }
          }
          if (param_3 < __n + uVar5) {
            uStrHead = 0;
            return 0xffffffff;
          }
          memcpy((void *)((int)param_2 + uVar5),&bufferFile,__n);
          uVar5 = __n + uVar5;
        } while( true );
      }
      uVar2 = uStrTail + 1;
    } while ((&bufferFile)[uStrTail] != '\r');
    uVar2 = uStrTail - uStrHead;
    if (uVar2 <= param_3) {
      memcpy(param_2,&bufferFile + uStrHead,uVar2);
      return uVar2;
    }
  }
  return 0xffffffff;
}


----------------------------------------
Function: InitReadString

int InitReadString(int param_1)

{
  int iVar1;
  
  if (-1 < param_1) {
    uStrTail = 0xffffffff;
    uStrHead = 0;
    nEOB = 0;
    iVar1 = FillBufferFile();
    return iVar1 >> 0x1f;
  }
  return -1;
}


----------------------------------------
Function: gogetenv

char * gogetenv(char *param_1)

{
  char *pcVar1;
  
  pcVar1 = getenv(param_1);
  if (pcVar1 == (char *)0x0) {
    pcVar1 = "(NULL)";
  }
  return pcVar1;
}


----------------------------------------
Function: httpPlatformOpen

void httpPlatformOpen(void)

{
  SimpleRomPageOpen();
  return;
}


----------------------------------------
Function: httpPlatformClose

void httpPlatformClose(void)

{
  websRomPageClose();
  return;
}


----------------------------------------
Function: GetFileString

void * GetFileString(char *param_1,size_t *param_2)

{
  FILE *__stream;
  int __fd;
  void *__s;
  stat sStack_78;
  
  __stream = fopen(param_1,"rb");
  *param_2 = 0;
  if (__stream == (FILE *)0x0) {
    __s = (void *)0x0;
  }
  else {
    __fd = fileno(__stream);
    fstat(__fd,&sStack_78);
    *param_2 = sStack_78.st_size;
    __s = malloc(sStack_78.st_size + 1);
    memset(__s,0,*param_2 + 1);
    fread(__s,*param_2,1,__stream);
    fclose(__stream);
  }
  return __s;
}


----------------------------------------
Function: GetRtuRunInfo

undefined4 GetRtuRunInfo(void *param_1)

{
  int __fd;
  ssize_t sVar1;
  
  __fd = open("/usr/local/webs/CdatcUserInfo",0);
  if (-1 < __fd) {
    sVar1 = read(__fd,param_1,0x20);
    if (sVar1 == 0x20) {
      close(__fd);
      return 0;
    }
    close(__fd);
  }
  return 0xffffffff;
}


----------------------------------------
Function: UpdateRtuRunInfo

undefined4 UpdateRtuRunInfo(void *param_1)

{
  int __fd;
  ssize_t sVar1;
  
  __fd = open("/usr/local/webs/CdatcUserInfo",0x41);
  if (-1 < __fd) {
    flock(__fd,2);
    sVar1 = write(__fd,param_1,0x20);
    if (sVar1 == 0x20) {
      flock(__fd,8);
      close(__fd);
      return 0;
    }
    flock(__fd,8);
    close(__fd);
  }
  return 0xffffffff;
}


----------------------------------------
Function: AddOrAltNPortConfig

undefined4 AddOrAltNPortConfig(char *param_1,char *param_2,char *param_3,char *param_4)

{
  bool bVar1;
  FILE *pFVar2;
  int iVar3;
  char *pcVar4;
  char acStack_568 [1024];
  char local_168 [296];
  char acStack_40 [28];
  
  pFVar2 = fopen(param_1,"r+");
  if ((pFVar2 == (FILE *)0x0) && (pFVar2 = fopen(param_1,"w+"), pFVar2 == (FILE *)0x0)) {
    puts("CRETE CONFIG FALID");
  }
  else {
    fseek(pFVar2,0,2);
    ftell(pFVar2);
    memset(acStack_568,0,0x400);
    strcpy(acStack_40,param_2);
    bVar1 = false;
    fseek(pFVar2,0,0);
    while ((iVar3 = feof(pFVar2), iVar3 == 0 &&
           (pcVar4 = fgets(local_168,0x100,pFVar2), pcVar4 != (char *)0x0))) {
      if (bVar1) {
        if (local_168[0] != '#') {
                    /* WARNING: Subroutine does not return */
          strlen(local_168);
        }
        strcat(acStack_568,local_168);
        bVar1 = true;
      }
      else {
        if (local_168[0] == '[') {
                    /* WARNING: Subroutine does not return */
          strlen(acStack_40);
        }
        strcat(acStack_568,local_168);
      }
    }
    if (bVar1) {
      strcat(acStack_568,param_3);
      strcat(acStack_568,"=");
      strcat(acStack_568,param_4);
    }
    else {
      strcat(acStack_568,acStack_40);
      strcat(acStack_568,"\r\n");
      strcat(acStack_568,param_3);
      strcat(acStack_568,"=");
      strcat(acStack_568,param_4);
    }
    strcat(acStack_568,"\r\n");
    remove(param_1);
    fclose(pFVar2);
    pFVar2 = fopen(param_1,"w+");
    if (pFVar2 == (FILE *)0x0) {
      return 2;
    }
    fseek(pFVar2,0,0);
    fputs(acStack_568,pFVar2);
    fclose(pFVar2);
  }
  return 0;
}


----------------------------------------
Function: GetRtuCfgString

/* WARNING: Control flow encountered bad instruction data */

void GetRtuCfgString(char *param_1,char *param_2)

{
  FILE *__stream;
  int *piVar1;
  char *pcVar2;
  undefined in_vs32 [16];
  undefined in_vs33 [16];
  undefined in_vs34 [16];
  undefined in_vs35 [16];
  undefined in_vs36 [16];
  undefined in_vs37 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs43 [16];
  undefined in_vs44 [16];
  char acStack_64 [100];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs33,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs34,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs36,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs38,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs32,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs35,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs37,in_vs44);
  __stream = fopen(param_1,"r");
  if (__stream == (FILE *)0x0) {
    piVar1 = __errno_location();
    pcVar2 = strerror(*piVar1);
    printf("openfile [%s] error [%s]\n",param_1,pcVar2);
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  fseek(__stream,0,0);
  strcpy(acStack_64,param_2);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: AddOrAltRtuConfig

undefined4 AddOrAltRtuConfig(char *param_1,char *param_2,char *param_3,char *param_4)

{
  bool bVar1;
  FILE *pFVar2;
  int iVar3;
  char *pcVar4;
  char acStack_568 [1024];
  char local_168 [296];
  char acStack_40 [28];
  
  pFVar2 = fopen(param_1,"r+");
  if ((pFVar2 == (FILE *)0x0) && (pFVar2 = fopen(param_1,"w+"), pFVar2 == (FILE *)0x0)) {
    puts("CRETE CONFIG FALID");
  }
  else {
    fseek(pFVar2,0,2);
    ftell(pFVar2);
    memset(acStack_568,0,0x400);
    strcpy(acStack_40,param_2);
    bVar1 = false;
    fseek(pFVar2,0,0);
    while ((iVar3 = feof(pFVar2), iVar3 == 0 &&
           (pcVar4 = fgets(local_168,0x100,pFVar2), pcVar4 != (char *)0x0))) {
      if (bVar1) {
        if (local_168[0] != '#') {
                    /* WARNING: Subroutine does not return */
          strlen(local_168);
        }
        strcat(acStack_568,local_168);
        bVar1 = true;
      }
      else {
        if (local_168[0] == '[') {
                    /* WARNING: Subroutine does not return */
          strlen(acStack_40);
        }
        strcat(acStack_568,local_168);
      }
    }
    if (bVar1) {
      strcat(acStack_568,param_3);
      strcat(acStack_568,"=");
      strcat(acStack_568,param_4);
    }
    else {
      strcat(acStack_568,acStack_40);
      strcat(acStack_568,"\r\n");
      strcat(acStack_568,param_3);
      strcat(acStack_568,"=");
      strcat(acStack_568,param_4);
    }
    strcat(acStack_568,"\r\n");
    remove(param_1);
    fclose(pFVar2);
    pFVar2 = fopen(param_1,"w+");
    if (pFVar2 == (FILE *)0x0) {
      puts("OPEN CONFIG FALID");
      return 2;
    }
    fseek(pFVar2,0,0);
    fputs(acStack_568,pFVar2);
    fclose(pFVar2);
  }
  return 0;
}


----------------------------------------
Function: DeleteRtuCfgField

undefined4 DeleteRtuCfgField(char *param_1)

{
  FILE *pFVar1;
  undefined4 uVar2;
  char *pcVar3;
  char acStack_548 [1024];
  char acStack_148 [304];
  
  pFVar1 = fopen(param_1,"r+");
  if (pFVar1 == (FILE *)0x0) {
    puts("OPEN CONFIG FALID");
    uVar2 = 0;
  }
  else {
    fseek(pFVar1,0,2);
    ftell(pFVar1);
    memset(acStack_548,0,0x400);
    fseek(pFVar1,0,0);
    pcVar3 = fgets(acStack_148,0x100,pFVar1);
    if (pcVar3 != (char *)0x0) {
                    /* WARNING: Subroutine does not return */
      strlen(acStack_148);
    }
    remove(param_1);
    fclose(pFVar1);
    pFVar1 = fopen(param_1,"w+");
    if (pFVar1 == (FILE *)0x0) {
      puts("OPEN CONFIG FALID");
      uVar2 = 2;
    }
    else {
      fseek(pFVar1,0,0);
      fputs(acStack_548,pFVar1);
      fclose(pFVar1);
      uVar2 = 0;
    }
  }
  return uVar2;
}


----------------------------------------
Function: StringSplit_Struct

void StringSplit_Struct(undefined *param_1,char *param_2,char *param_3)

{
  char *pcVar1;
  char *pcVar2;
  undefined uVar3;
  
  if (param_2 != (char *)0x0) {
    pcVar1 = strstr(param_2,param_3);
    if (pcVar1 == (char *)0x0) {
      *param_1 = 0;
      param_1[1] = 0;
      param_1[2] = 0;
      param_1[3] = 0;
    }
    else {
      strncpy(param_1 + 4,param_2,(int)pcVar1 - (int)param_2);
      param_1[((int)pcVar1 - (int)param_2) + 4] = 0;
      pcVar1 = pcVar1 + 1;
      pcVar2 = strstr(pcVar1,param_3);
      if (pcVar2 == (char *)0x0) {
        *param_1 = 0;
        uVar3 = 1;
        param_1[1] = 0;
        param_1[2] = 0;
      }
      else {
        strncpy(param_1 + 0x14,pcVar1,(int)pcVar2 - (int)pcVar1);
        param_1[((int)pcVar2 - (int)pcVar1) + 0x14] = 0;
        pcVar2 = pcVar2 + 1;
        pcVar1 = strstr(pcVar2,param_3);
        if (pcVar1 != (char *)0x0) {
          strncpy(param_1 + 0x24,pcVar2,(int)pcVar1 - (int)pcVar2);
          param_1[((int)pcVar1 - (int)pcVar2) + 0x24] = 0;
          if (pcVar1 + 1 == (char *)0x0) {
            return;
          }
          *param_1 = 0;
          param_1[1] = 0;
          param_1[2] = 0;
          param_1[3] = 3;
          strcpy(param_1 + 0x34,pcVar1 + 1);
          return;
        }
        *param_1 = 0;
        uVar3 = 2;
        param_1[1] = 0;
        param_1[2] = 0;
      }
      param_1[3] = uVar3;
    }
  }
  return;
}


----------------------------------------
Function: GetNetProfileString

undefined4 GetNetProfileString(char *param_1,char *param_2)

{
  bool bVar1;
  FILE *__stream;
  int *piVar2;
  char *pcVar3;
  undefined4 uVar4;
  int iVar5;
  char local_158 [256];
  char acStack_58 [68];
  
  __stream = fopen(param_1,"r");
  if (__stream == (FILE *)0x0) {
    piVar2 = __errno_location();
    pcVar3 = strerror(*piVar2);
    printf("openfile [%s] error [%s]\n",param_1,pcVar3);
    uVar4 = 0xffffffff;
  }
  else {
    fseek(__stream,0,0);
    memset(acStack_58,0,0x40);
    strcpy(acStack_58,param_2);
    bVar1 = false;
    while ((iVar5 = feof(__stream), iVar5 == 0 &&
           (pcVar3 = fgets(local_158,0x100,__stream), pcVar3 != (char *)0x0))) {
      if (bVar1) {
        bVar1 = true;
      }
      else if ((local_158[0] != '#') && (local_158[0] != '[')) {
                    /* WARNING: Subroutine does not return */
        strlen(acStack_58);
      }
    }
    fclose(__stream);
    uVar4 = 0;
  }
  return uVar4;
}


----------------------------------------
Function: AddOrAltNetConfig

undefined4 AddOrAltNetConfig(char *param_1,char *param_2,char *param_3)

{
  FILE *pFVar1;
  char *pcVar2;
  char acStack_558 [1024];
  char acStack_158 [308];
  
  pFVar1 = fopen(param_1,"r+");
  if (pFVar1 == (FILE *)0x0) {
    puts("OPEN CONFIG FALID");
  }
  else {
    fseek(pFVar1,0,2);
    ftell(pFVar1);
    memset(acStack_558,0,0x400);
    fseek(pFVar1,0,0);
    pcVar2 = fgets(acStack_158,0x100,pFVar1);
    if (pcVar2 != (char *)0x0) {
                    /* WARNING: Subroutine does not return */
      strlen(acStack_158);
    }
    strcat(acStack_558,param_2);
    strcat(acStack_558,"=");
    strcat(acStack_558,param_3);
    strcat(acStack_558,"\n");
    remove(param_1);
    fclose(pFVar1);
    pFVar1 = fopen(param_1,"w+");
    if (pFVar1 == (FILE *)0x0) {
      puts("OPEN CONFIG FALID");
      return 2;
    }
    fseek(pFVar1,0,0);
    fputs(acStack_558,pFVar1);
    fclose(pFVar1);
  }
  return 0;
}


----------------------------------------
Function: Modify_Ip

/* WARNING: Control flow encountered bad instruction data */

void Modify_Ip(char *param_1)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs44 [16];
  char acStack_48 [72];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  memset(acStack_48,0,0x20);
  iVar1 = socket(2,1,0);
  if (iVar1 == -1) {
    perror("Not create network  socket connection\n ");
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  strncpy(acStack_48,param_1,0x10);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: Modify_Submask

undefined4 Modify_Submask(char *param_1,undefined4 param_2,char *param_3)

{
  int __fd;
  int iVar1;
  char acStack_38 [16];
  undefined2 local_28;
  undefined auStack_24 [24];
  
  __fd = socket(2,1,0);
  if (__fd == -1) {
    perror("Not create network socket connect\n");
  }
  else {
    memset(acStack_38,0,0x20);
    strncpy(acStack_38,param_1,0xf);
    local_28 = 2;
    inet_pton(2,param_3,auStack_24);
    iVar1 = ioctl(__fd,0x891c,acStack_38);
    if (-1 < iVar1) {
      close(__fd);
      return 0;
    }
    puts("sock_netmask ioctl error");
  }
  return 0xffffffff;
}


----------------------------------------
Function: Modify_Gateway

int Modify_Gateway(undefined4 param_1,char *param_2)

{
  int iVar1;
  char acStack_88 [128];
  
  memset(acStack_88,0,0x80);
  iVar1 = 0;
  if (*param_2 != '\0') {
    sprintf(acStack_88,"/sbin/route del default dev %s",param_1);
    system("/sbin/route del default dev eth0");
    memset(acStack_88,0,0x80);
    sprintf(acStack_88,"/sbin/route add default gw %s dev %s",param_2,param_1);
    iVar1 = system(acStack_88);
  }
  return iVar1;
}


----------------------------------------
Function: detect_process

int detect_process(undefined4 param_1)

{
  FILE *__stream;
  char *__nptr;
  int iVar1;
  char acStack_288 [512];
  char acStack_88 [128];
  
  memset(acStack_88,0,0x80);
  sprintf(acStack_88,"ps -ef|grep %s",param_1);
  __stream = popen(acStack_88,"r");
  if (__stream != (FILE *)0x0) {
    memset(acStack_288,0,0x200);
    fgets(acStack_288,0x200,__stream);
    __nptr = strtok(acStack_288," ");
    pclose(__stream);
    if (((__nptr != (char *)0x0) && (*__nptr != '\0')) && (iVar1 = atoi(__nptr), iVar1 != 0)) {
      iVar1 = kill(iVar1,0);
      return iVar1;
    }
  }
  return 1;
}


----------------------------------------
Function: a16toi

void a16toi(char *param_1)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_1);
}


----------------------------------------
Function: GetCorrespondChanBit

uint GetCorrespondChanBit(int param_1,uint param_2)

{
  int iVar1;
  
  iVar1 = ((int)param_2 >> 3) + (uint)((int)param_2 < 0 && (param_2 & 7) != 0);
  return (int)(uint)*(byte *)(param_1 + iVar1) >> (param_2 + iVar1 * -8 & 0x3f) & 1;
}


----------------------------------------
Function: Sys_Reboot

undefined4 Sys_Reboot(void)

{
  NetSave();
  usleep(100000);
  *(undefined *)(g_pWrData + 0x1371) = 1;
  return 0;
}


----------------------------------------
Function: ballocGetSize

int ballocGetSize(int param_1,int *param_2)

{
  int iVar1;
  
  iVar1 = 0;
  if (param_1 != 0) {
    iVar1 = param_1 + -1 >> 4;
  }
  *param_2 = 0;
  for (; iVar1 != 0; iVar1 = iVar1 >> 1) {
    *param_2 = *param_2 + 1;
  }
  return (1 << (*param_2 + 4U & 0x3f)) + 8;
}


----------------------------------------
Function: bopen

/* WARNING: Control flow encountered bad instruction data */

undefined4 bopen(int param_1,undefined4 param_2,uint param_3)

{
  bFlags = param_3;
  bopenCount = bopenCount + 1;
  if (bopenCount < 2) {
    if (param_1 == 0) {
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    bFlags = param_3 | 2;
    bFreeLeft = param_2;
    bFreeSize = param_2;
    bFreeNext = param_1;
    bFreeBuf = param_1;
    memset(bQhead,0,0x34);
  }
  return 0;
}


----------------------------------------
Function: bclose

void bclose(void)

{
  bopenCount = bopenCount + -1;
  if ((bopenCount < 1) && ((bFlags & 2) == 0)) {
    free(bFreeBuf);
    bopenCount = 0;
  }
  return;
}


----------------------------------------
Function: balloc

int * balloc(int param_1)

{
  size_t __size;
  int *piVar1;
  undefined *puVar2;
  int iVar3;
  int local_18 [4];
  
  if ((bFreeBuf == 0) && (iVar3 = bopen(0,0x10000,0), iVar3 < 0)) {
    return (int *)0x0;
  }
  if (param_1 < 0) {
    return (int *)0x0;
  }
  __size = ballocGetSize(param_1,local_18);
  if (local_18[0] < 0xd) {
    piVar1 = *(int **)(bQhead + local_18[0] * 4);
    if (piVar1 == (int *)0x0) {
      if (bFreeLeft <= (int)__size) {
        if ((bFlags & 1) == 0) {
          puVar2 = &DAT_10023518;
          goto LAB_10012f94;
        }
        piVar1 = (int *)malloc(__size);
        if (piVar1 == (int *)0x0) {
          puVar2 = &DAT_10023510;
          goto LAB_10012f94;
        }
        goto LAB_10012f64;
      }
      bFreeLeft = bFreeLeft - __size;
      piVar1 = bFreeNext;
      bFreeNext = (int *)((int)bFreeNext + __size);
    }
    else {
      *(int *)(bQhead + local_18[0] * 4) = *piVar1;
    }
    *piVar1 = __size - 8;
    iVar3 = 0;
  }
  else {
    if ((bFlags & 1) == 0) {
      puVar2 = &DAT_10023508;
LAB_10012f94:
      traceRaw(puVar2);
      traceRaw("B: malloc failed\n");
      return (int *)0x0;
    }
    piVar1 = (int *)malloc(__size);
    if (piVar1 == (int *)0x0) {
      puVar2 = &DAT_100234ec;
      goto LAB_10012f94;
    }
LAB_10012f64:
    iVar3 = -0x80000000;
    *piVar1 = __size - 8;
  }
  piVar1[1] = iVar3;
  piVar1[1] = piVar1[1] | 0x8124000;
  return piVar1 + 2;
}


----------------------------------------
Function: bfree

void bfree(int param_1)

{
  int local_18 [4];
  
  if ((*(uint *)(param_1 + -4) & 0xffff000) == 0x8124000) {
    ballocGetSize(*(undefined4 *)(param_1 + -8),local_18);
    if (*(int *)(param_1 + -4) < 0) {
      free((void *)(param_1 + -8));
    }
    else {
      *(undefined4 *)(param_1 + -8) = *(undefined4 *)(bQhead + local_18[0] * 4);
      *(void **)(bQhead + local_18[0] * 4) = (void *)(param_1 + -8);
      *(undefined4 *)(param_1 + -4) = 0x77777777;
    }
  }
  return;
}


----------------------------------------
Function: bfreeSafe

void bfreeSafe(int param_1)

{
  if (param_1 == 0) {
    return;
  }
  bfree();
  return;
}


----------------------------------------
Function: bstrdup

void bstrdup(char *param_1)

{
  if (param_1 == (char *)0x0) {
    param_1 = "";
  }
                    /* WARNING: Subroutine does not return */
  strlen(param_1);
}


----------------------------------------
Function: bmemdup

void * bmemdup(void *param_1,size_t param_2)

{
  void *__dest;
  
  __dest = (void *)balloc(param_2);
  if (__dest != (void *)0x0) {
    if (param_1 == (void *)0x0) {
      memset(__dest,0,param_2);
    }
    else {
      memcpy(__dest,param_1,param_2);
    }
  }
  return __dest;
}


----------------------------------------
Function: brealloc

void * brealloc(void *param_1,int param_2)

{
  void *pvVar1;
  void *__dest;
  
  if (param_1 == (void *)0x0) {
    pvVar1 = (void *)balloc(param_2);
    return pvVar1;
  }
  pvVar1 = param_1;
  if (*(int *)((int)param_1 + -8) < param_2) {
    __dest = (void *)balloc(param_2);
    pvVar1 = (void *)0x0;
    if (__dest != (void *)0x0) {
      memcpy(__dest,param_1,*(size_t *)((int)param_1 + -8));
      bfree(param_1);
      pvVar1 = __dest;
    }
  }
  return pvVar1;
}


----------------------------------------
Function: bstats

void bstats(void)

{
  return;
}


----------------------------------------
Function: websCgiGatherOutput

void websCgiGatherOutput(undefined4 *param_1)

{
  int iVar1;
  ssize_t sVar2;
  undefined4 uVar3;
  undefined auStack_178 [256];
  stat sStack_78;
  
  iVar1 = stat((char *)param_1[2],&sStack_78);
  if (iVar1 == 0) {
    if ((int)param_1[7] < sStack_78.st_size) {
      iVar1 = open((char *)param_1[2],0,0x124);
      if (-1 < iVar1) {
        uVar3 = *param_1;
        if (param_1[7] == 0) {
          websWrite(uVar3,"HTTP/1.0 200 OK\r\n");
        }
        lseek(iVar1,param_1[7],0);
        while( true ) {
          sVar2 = read(iVar1,auStack_178,0xfe);
          if (sVar2 < 1) break;
          websWriteBlock(uVar3,auStack_178,sVar2);
          param_1[7] = param_1[7] + sVar2;
        }
        close(iVar1);
      }
    }
  }
  return;
}


----------------------------------------
Function: websGetCgiCommName

undefined4 websGetCgiCommName(void)

{
  char *__ptr;
  undefined4 uVar1;
  
  __ptr = tempnam((char *)0x0,"cgi");
  uVar1 = bstrdup();
  free(__ptr);
  return uVar1;
}


----------------------------------------
Function: websLaunchCgiProc

__pid_t websLaunchCgiProc(char *param_1,char **param_2,char **param_3,char *param_4,char *param_5)

{
  int iVar1;
  int __fd;
  int __fd_00;
  int __fd_01;
  int iVar2;
  __pid_t _Var3;
  
  iVar1 = open(param_4,0x42,0x1b6);
  if (iVar1 < 0) {
    __fd_00 = -1;
    __fd = -1;
  }
  else {
    __fd = open(param_5,0x42,0x1b6);
    if (__fd < 0) {
      __fd_00 = -1;
    }
    else {
      __fd_00 = dup(0);
      if ((__fd_00 != -1) && (__fd_01 = dup(1), __fd_01 != -1)) {
        iVar2 = dup2(iVar1,0);
        if ((iVar2 == -1) || (iVar2 = dup2(__fd,1), iVar2 == -1)) {
          _Var3 = -1;
        }
        else {
          _Var3 = fork();
          if (_Var3 == 0) {
            iVar1 = execve(param_1,param_2,param_3);
            if (iVar1 == -1) {
              puts("content-type: text/html\n\nExecution of cgi process failed");
            }
                    /* WARNING: Subroutine does not return */
            exit(0);
          }
        }
        if (-1 < __fd_01) {
          dup2(__fd_01,1);
          close(__fd_01);
        }
        goto LAB_100133d4;
      }
    }
  }
  _Var3 = -1;
LAB_100133d4:
  if (-1 < __fd_00) {
    dup2(__fd_00,0);
    close(__fd_00);
  }
  if (-1 < __fd) {
    close(__fd);
  }
  if (iVar1 >= 0) {
    close(iVar1);
  }
  return _Var3;
}


----------------------------------------
Function: websCgiHandler

/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */

undefined4 websCgiHandler(int param_1)

{
  char *pcVar1;
  char *pcVar2;
  undefined4 uVar3;
  int iVar4;
  char **ppcVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  char *in_r8;
  char *in_r9;
  int iVar10;
  int *piVar11;
  stat asStack_238 [2];
  char cStack_138;
  char acStack_137 [255];
  char *local_38 [4];
  
  _DAT_100b3f48 = _DAT_100b3f48 + 1;
  strncpy(&cStack_138,in_r8,0xfe);
  pcVar1 = strchr(acStack_137,0x2f);
  if (pcVar1 == (char *)0x0) {
    websError(param_1,200,"Missing CGI name");
  }
  else {
    pcVar1 = pcVar1 + 1;
    pcVar2 = strchr(pcVar1,0x2f);
    if (pcVar2 != (char *)0x0) {
      *pcVar2 = '\0';
    }
    uVar3 = websGetDefaultDir();
    fmtAlloc(local_38,0xfe,"%s/%s/%s",uVar3,"cgi-bin",pcVar1);
    iVar4 = stat(local_38[0],asStack_238);
    if ((iVar4 == 0) && ((asStack_238[0].st_mode & 0x8000) != 0)) {
      iVar4 = access(local_38[0],1);
      if (iVar4 == 0) {
        getcwd((char *)asStack_238,0xfe);
        pcVar2 = strrchr(local_38[0],0x2f);
        if (pcVar2 != (char *)0x0) {
          *pcVar2 = '\0';
          chdir(local_38[0]);
          *pcVar2 = '/';
        }
        ppcVar5 = (char **)balloc(0x28);
        *ppcVar5 = local_38[0];
        pcVar2 = strchr(in_r9,0x3d);
        if (pcVar2 != (char *)0x0) {
          ppcVar5[1] = (char *)0x0;
          iVar6 = balloc(0x100);
          fmtAlloc(iVar6,0xfe,"%s=%s","PATH_TRANSLATED",local_38[0]);
          fmtAlloc(iVar6 + 4,0xfe,"%s=%s/%s","SCRIPT_NAME","cgi-bin",pcVar1);
          fmtAlloc(iVar6 + 8,0xfe,"%s=%s","REMOTE_USER",*(undefined4 *)(param_1 + 0xd4));
          iVar10 = 4;
          fmtAlloc(iVar6 + 0xc,0xfe,"%s=%s","AUTH_TYPE",*(undefined4 *)(param_1 + 0xcc));
          iVar7 = symFirst(*(undefined4 *)(param_1 + 0x20));
          iVar4 = 0x40;
          while (iVar7 != 0) {
            iVar9 = iVar4;
            if ((*(char *)(iVar7 + 0x1e) != '\0') && (*(int *)(iVar7 + 0x1a) == 10)) {
              pcVar1 = *(char **)(iVar7 + 4);
              iVar8 = strcmp(pcVar1,"REMOTE_HOST");
              if ((iVar8 != 0) && (iVar8 = strcmp(pcVar1,"HTTP_AUTHORIZATION"), iVar8 != 0)) {
                iVar8 = iVar10 * 4;
                iVar10 = iVar10 + 1;
                fmtAlloc(iVar6 + iVar8,0xfe,"%s=%s",pcVar1,*(undefined4 *)(iVar7 + 0x12));
                if (iVar4 <= iVar10) {
                  iVar9 = iVar4 << 1;
                  iVar6 = brealloc(iVar6,iVar4 << 3);
                }
              }
            }
            iVar7 = symNext(*(undefined4 *)(param_1 + 0x20));
            iVar4 = iVar9;
          }
          *(undefined4 *)(iVar6 + iVar10 * 4) = 0;
          if (*(int *)(param_1 + 0x114) == 0) {
            uVar3 = websGetCgiCommName();
            *(undefined4 *)(param_1 + 0x114) = uVar3;
          }
          iVar10 = *(int *)(param_1 + 0x114);
          iVar4 = websGetCgiCommName();
          iVar7 = websLaunchCgiProc(local_38[0],ppcVar5,iVar6,iVar10,iVar4);
          if (iVar7 == -1) {
            websError(param_1,200,"failed to spawn CGI task");
            piVar11 = (int *)(iVar6 + -4);
            while (piVar11 = piVar11 + 1, *piVar11 != 0) {
              bfreeSafe();
            }
            bfreeSafe(local_38[0]);
            bfreeSafe(ppcVar5);
            bfreeSafe(iVar6);
            bfreeSafe(iVar4);
          }
          else {
            iVar9 = hAllocEntry(&cgiList,&cgiMax,0x20);
            piVar11 = *(int **)(cgiList + iVar9 * 4);
            piVar11[3] = (int)local_38[0];
            piVar11[6] = iVar7;
            piVar11[1] = iVar10;
            piVar11[2] = iVar4;
            piVar11[4] = (int)ppcVar5;
            piVar11[5] = iVar6;
            *piVar11 = param_1;
            piVar11[7] = 0;
            websTimeoutCancel(param_1);
          }
          chdir((char *)asStack_238);
          return 1;
        }
                    /* WARNING: Subroutine does not return */
        strlen(in_r9);
      }
      uVar3 = 200;
      pcVar1 = "CGI process file is not executable";
    }
    else {
      uVar3 = 0x194;
      pcVar1 = "CGI process file does not exist";
    }
    websError(param_1,uVar3,pcVar1);
    bfree(local_38[0]);
  }
  return 1;
}


----------------------------------------
Function: websCheckCgiProc

bool websCheckCgiProc(__pid_t param_1)

{
  __pid_t _Var1;
  
  _Var1 = waitpid(param_1,(int *)0x0,1);
  return _Var1 != param_1;
}


----------------------------------------
Function: websCgiCleanup

void websCgiCleanup(void)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  int *piVar4;
  int iVar5;
  undefined4 *puVar6;
  
  iVar5 = 0;
  do {
    if (cgiMax <= iVar5) {
      return;
    }
    puVar6 = *(undefined4 **)(cgiList + iVar5 * 4);
    if (puVar6 != (undefined4 *)0x0) {
      uVar2 = *puVar6;
      websCgiGatherOutput(puVar6);
      iVar3 = 0x65;
      iVar1 = websCheckCgiProc(puVar6[6]);
      if (iVar1 == 0) {
        while (puVar6[7] == 0) {
          iVar3 = iVar3 + -1;
          if (iVar3 == 0) {
            websError(uVar2,200,"CGI generated no output");
            goto LAB_100139b0;
          }
          websCgiGatherOutput(puVar6);
        }
        websDone(uVar2,200);
LAB_100139b0:
        unlink((char *)puVar6[1]);
        unlink((char *)puVar6[2]);
        cgiMax = hFree(&cgiList,iVar5);
        for (piVar4 = (int *)puVar6[5]; (piVar4 != (int *)0x0 && (*piVar4 != 0));
            piVar4 = piVar4 + 1) {
          bfreeSafe();
        }
        bfreeSafe(puVar6[3]);
        bfreeSafe(puVar6[4]);
        bfreeSafe(puVar6[5]);
        bfreeSafe(puVar6[2]);
        bfreeSafe(puVar6);
      }
    }
    iVar5 = iVar5 + 1;
  } while( true );
}


----------------------------------------
Function: websDefaultWriteEvent

void websDefaultWriteEvent(undefined4 param_1)

{
  uint uVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  
  uVar1 = websGetRequestFlags();
  iVar5 = 0;
  websSetTimeMark(param_1);
  iVar2 = websGetRequestWritten(param_1);
  iVar6 = 0;
  if ((uVar1 & 0x100) == 0) {
    iVar5 = websGetRequestBytes(param_1);
    iVar3 = balloc(0x200);
    if (iVar3 == 0) {
      websError(param_1,200,"Can\'t get memory");
    }
    else {
      do {
        iVar4 = websPageReadData(param_1,iVar3,0x200);
        if (iVar4 < 1) {
          if (iVar4 == 0) {
            iVar2 = iVar5;
          }
          goto LAB_10013b14;
        }
        iVar6 = websWriteDataNonBlock(param_1,iVar3,iVar4);
        if (iVar6 < 0) goto LAB_10013b14;
        iVar2 = iVar2 + iVar6;
      } while (iVar6 == iVar4);
      websPageSeek(param_1,iVar6 - iVar4);
LAB_10013b14:
      bfree(iVar3);
    }
  }
  websSetRequestWritten(param_1,iVar2);
  if ((-1 < iVar6) && (iVar2 < iVar5)) {
    return;
  }
  websDone(param_1,200);
  return;
}


----------------------------------------
Function: websValidateUrl

undefined4 websValidateUrl(undefined4 param_1,undefined4 param_2)

{
  char *pcVar1;
  
  pcVar1 = (char *)websGetRequestDir();
  if ((pcVar1 != (char *)0x0) && (*pcVar1 != '\0')) {
    pcVar1 = (char *)bstrdup(param_2);
                    /* WARNING: Subroutine does not return */
    strlen(pcVar1);
  }
  return 0xffffffff;
}


----------------------------------------
Function: websDefaultHandler

undefined4 websDefaultHandler(undefined4 param_1)

{
  int iVar1;
  char *__s;
  undefined4 in_r8;
  
  websGetRequestFlags();
  iVar1 = websValidateUrl(param_1,in_r8);
  if (iVar1 < 0) {
    websError(param_1,500,"Invalid URL");
    return 1;
  }
  __s = (char *)websGetRequestLpath(param_1);
                    /* WARNING: Subroutine does not return */
  strlen(__s);
}


----------------------------------------
Function: websDefaultOpen

void websDefaultOpen(void)

{
  return;
}


----------------------------------------
Function: websDefaultClose

void websDefaultClose(void)

{
  if (websDefaultPage != 0) {
    bfree();
    websDefaultPage = 0;
  }
  if (websDefaultDir != 0) {
    bfree();
    websDefaultDir = 0;
  }
  return;
}


----------------------------------------
Function: websGetDefaultPage

undefined4 websGetDefaultPage(void)

{
  return websDefaultPage;
}


----------------------------------------
Function: websGetDefaultDir

undefined4 websGetDefaultDir(void)

{
  return websDefaultDir;
}


----------------------------------------
Function: websSetDefaultPage

void websSetDefaultPage(undefined4 param_1)

{
  if (websDefaultPage != 0) {
    bfree();
  }
  websDefaultPage = bstrdup(param_1);
  return;
}


----------------------------------------
Function: websSetDefaultDir

void websSetDefaultDir(undefined4 param_1)

{
  if (websDefaultDir != 0) {
    bfree();
  }
  websDefaultDir = bstrdup(param_1);
  return;
}


----------------------------------------
Function: websFormHandler

/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */

undefined4 websFormHandler(undefined4 param_1)

{
  char *pcVar1;
  char *pcVar2;
  int iVar3;
  char *in_r8;
  undefined4 in_r9;
  char cStack_118;
  char acStack_117 [267];
  
  _DAT_100b3f44 = _DAT_100b3f44 + 1;
  strncpy(&cStack_118,in_r8,0xfe);
  pcVar1 = strchr(acStack_117,0x2f);
  if (pcVar1 == (char *)0x0) {
    websError(param_1,200,"Missing form name");
  }
  else {
    pcVar1 = pcVar1 + 1;
    pcVar2 = strchr(pcVar1,0x2f);
    if (pcVar2 != (char *)0x0) {
      *pcVar2 = '\0';
    }
    iVar3 = symLookup(formSymtab,pcVar1);
    if (iVar3 == 0) {
      websError(param_1,0x194,"Form %s is not defined",pcVar1);
    }
    else if (*(code **)(iVar3 + 0x12) != (code *)0x0) {
      (**(code **)(iVar3 + 0x12))(param_1,pcVar1,in_r9);
    }
  }
  return 1;
}


----------------------------------------
Function: websFormDefine

/* WARNING: Control flow encountered bad instruction data */

undefined4 websFormDefine(undefined4 param_1,int param_2)

{
  undefined in_vs33 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs44 [16];
  undefined auStack_38 [56];
  
  if (param_2 != 0) {
    vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
    vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs38,in_vs44);
    valueInteger(auStack_38);
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  return 0xffffffff;
}


----------------------------------------
Function: websFormOpen

void websFormOpen(void)

{
  formSymtab = symOpen(0x40);
  return;
}


----------------------------------------
Function: websFormClose

void websFormClose(void)

{
  if (formSymtab != -1) {
    symClose();
    formSymtab = -1;
  }
  return;
}


----------------------------------------
Function: websHeader

void websHeader(undefined4 param_1)

{
  websWrite(param_1,"HTTP/1.0 200 OK\n");
  websWrite(param_1,"Server: %s/%s\r\n","GoAhead-Webs","2.5.0");
  websWrite(param_1,"Pragma: no-cache\n");
  websWrite(param_1,"Cache-control: no-cache\n");
  websWrite(param_1,"Content-Type: text/html\n");
  websWrite(param_1,&DAT_10022d7c);
  websWrite(param_1,"<html>\n");
  return;
}


----------------------------------------
Function: websFooter

void websFooter(undefined4 param_1)

{
  websWrite(param_1,"</html>\n");
  return;
}


----------------------------------------
Function: hAlloc

/* WARNING: Control flow encountered bad instruction data */

int hAlloc(int **param_1)

{
  int *piVar1;
  int iVar2;
  
  piVar1 = *param_1 + -2;
  if (*param_1 == (int *)0x0) {
    piVar1 = (int *)balloc(0x48);
    if (piVar1 == (int *)0x0) {
      return -1;
    }
    memset(piVar1,0,0x48);
    *piVar1 = 0x10;
    piVar1[1] = 0;
    *param_1 = piVar1 + 2;
  }
  iVar2 = *piVar1;
  if (iVar2 <= piVar1[1]) {
    piVar1 = (int *)brealloc(piVar1,(iVar2 + 0x12) * 4);
    if (piVar1 == (int *)0x0) {
      return -1;
    }
    *param_1 = piVar1 + 2;
    *piVar1 = iVar2 + 0x10;
    memset(piVar1 + iVar2 + 2,0,0x40);
    piVar1[1] = piVar1[1] + 1;
    return iVar2;
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: hFree

/* WARNING: Control flow encountered bad instruction data */

int hFree(int *param_1,int param_2)

{
  int iVar1;
  int iVar2;
  
  iVar2 = *param_1;
  *(undefined4 *)(iVar2 + -8 + (param_2 + 2) * 4) = 0;
  iVar1 = *(int *)(iVar2 + -4) + -1;
  *(int *)(iVar2 + -4) = iVar1;
  if (iVar1 == 0) {
    bfree();
    *param_1 = 0;
  }
  if (*param_1 == 0) {
    iVar1 = -1;
  }
  else {
    iVar1 = *(int *)(iVar2 + -8);
    if (*(int *)(iVar2 + -4) < iVar1) {
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
  }
  return iVar1 + 1;
}


----------------------------------------
Function: hAllocEntry

int hAllocEntry(int *param_1,int *param_2,size_t param_3)

{
  int iVar1;
  void *__s;
  
  iVar1 = hAlloc();
  if (iVar1 < 0) {
LAB_1001468c:
    iVar1 = -1;
  }
  else {
    if (0 < (int)param_3) {
      __s = (void *)balloc(param_3);
      if (__s == (void *)0x0) {
        hFree(param_1,iVar1);
        goto LAB_1001468c;
      }
      memset(__s,0,param_3);
      *(void **)(*param_1 + iVar1 * 4) = __s;
    }
    if (*param_2 <= iVar1) {
      *param_2 = iVar1 + 1;
    }
  }
  return iVar1;
}


----------------------------------------
Function: websPublishHandler

void websPublishHandler(undefined4 param_1,char *param_2)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: websUrlHandlerSort

int websUrlHandlerSort(int param_1,int param_2)

{
  int iVar1;
  
  if (((*(uint *)(param_1 + 0x14) & 1) != 0) || ((*(uint *)(param_2 + 0x14) & 2) != 0)) {
    return -1;
  }
  if ((*(uint *)(param_2 + 0x14) & 1) != 0) {
    return 1;
  }
  if ((*(uint *)(param_1 + 0x14) & 2) == 0) {
    iVar1 = strcmp(*(char **)(param_1 + 8),*(char **)(param_2 + 8));
    if (iVar1 == 0) {
      if (*(int *)(param_1 + 0xc) < *(int *)(param_2 + 0xc)) {
        return 1;
      }
      if (*(int *)(param_2 + 0xc) < *(int *)(param_1 + 0xc)) {
        return -1;
      }
    }
    return -iVar1;
  }
  return 1;
}


----------------------------------------
Function: websCondenseMultipleChars.constprop.1

void websCondenseMultipleChars_constprop_1(char *param_1)

{
  char *pcVar1;
  char *pcVar2;
  
  pcVar2 = param_1;
  if (param_1 == (char *)0x0) {
    return;
  }
  do {
    if ((*param_1 == '\0') || (*pcVar2 == '\0')) {
      if (pcVar2 != param_1) {
        *pcVar2 = '\0';
        return;
      }
      return;
    }
    do {
      pcVar1 = param_1;
      param_1 = pcVar1 + 1;
      if (*pcVar1 != '/') break;
    } while (pcVar1[1] == '/');
    if (pcVar2 != pcVar1) {
      *pcVar2 = *pcVar1;
    }
    pcVar2 = pcVar2 + 1;
  } while( true );
}


----------------------------------------
Function: websUrlHandlerOpen

undefined4 websUrlHandlerOpen(void)

{
  urlHandlerOpenCount = urlHandlerOpenCount + 1;
  if (urlHandlerOpenCount == 1) {
    websAspOpen();
    websUrlHandler = 0;
    websUrlHandlerMax = 0;
  }
  return 0;
}


----------------------------------------
Function: websUrlHandlerClose

void websUrlHandlerClose(void)

{
  uint uVar1;
  
  urlHandlerOpenCount = urlHandlerOpenCount + -1;
  if (urlHandlerOpenCount < 1) {
    websAspClose();
    uVar1 = websUrlHandler;
    while( true ) {
      if (websUrlHandler + websUrlHandlerMax * 0x18 <= uVar1) break;
      bfree(*(undefined4 *)(uVar1 + 8));
      if (*(int *)(uVar1 + 4) != 0) {
        bfree();
      }
      uVar1 = uVar1 + 0x18;
    }
    bfree();
    websUrlHandlerMax = 0;
  }
  return;
}


----------------------------------------
Function: websUrlHandlerDefine

undefined4 websUrlHandlerDefine(undefined4 param_1)

{
  char *__s;
  void *__s_00;
  
  websUrlHandler = brealloc(websUrlHandler,(websUrlHandlerMax + 1) * 0x18);
  if (websUrlHandler != 0) {
    __s_00 = (void *)(websUrlHandler + websUrlHandlerMax * 0x18);
    websUrlHandlerMax = websUrlHandlerMax + 1;
    memset(__s_00,0,0x18);
    __s = (char *)bstrdup(param_1);
    *(char **)((int)__s_00 + 8) = __s;
                    /* WARNING: Subroutine does not return */
    strlen(__s);
  }
  return 0xffffffff;
}


----------------------------------------
Function: websUrlHandlerDelete

/* WARNING: Control flow encountered bad instruction data */

void websUrlHandlerDelete(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websPublish

void websPublish(undefined4 param_1,undefined4 param_2)

{
  websUrlHandlerDefine(param_1,param_2,0,websPublishHandler,0);
  return;
}


----------------------------------------
Function: websGetPublishDir

int websGetPublishDir(char *param_1,char **param_2)

{
  int iVar1;
  int iVar2;
  char *__s1;
  int iVar3;
  int *piVar4;
  
  iVar1 = websUrlHandlerMax;
  iVar3 = 0;
  piVar4 = websUrlHandler;
  while( true ) {
    if (iVar1 <= iVar3) {
      return 0;
    }
    __s1 = (char *)piVar4[2];
    if (((*__s1 != '\0') && (*piVar4 != 0)) && (iVar2 = strncmp(__s1,param_1,piVar4[3]), iVar2 == 0)
       ) break;
    iVar3 = iVar3 + 1;
    piVar4 = piVar4 + 6;
  }
  if (param_2 != (char **)0x0) {
    *param_2 = __s1;
  }
  return piVar4[1];
}


----------------------------------------
Function: websUrlHandlerRequest

undefined4 websUrlHandlerRequest(int param_1)

{
  bool bVar1;
  undefined4 uVar2;
  char *pcVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  
  socketDeleteHandler(*(undefined4 *)(param_1 + 0xf0));
  *(undefined4 *)(param_1 + 0xfc) = 0x10;
  DAT_100b3f4c = DAT_100b3f4c + 1;
  uVar2 = websGetDefaultDir();
  websSetRequestPath(param_1,uVar2,0);
  websCondenseMultipleChars_constprop_1(*(undefined4 *)(param_1 + 0xb4));
  websCondenseMultipleChars_constprop_1(*(undefined4 *)(param_1 + 0xb8));
  if ((**(char **)(param_1 + 0xb4) == '/') &&
     (pcVar3 = strchr(*(char **)(param_1 + 0xb4),0x5c), pcVar3 == (char *)0x0)) {
    bVar1 = true;
    for (iVar7 = 0; iVar5 = websUrlHandler, iVar7 < websUrlHandlerMax; iVar7 = iVar7 + 1) {
      iVar6 = iVar7 * 0x18;
      iVar8 = websUrlHandler + iVar6;
      if ((*(int *)(websUrlHandler + iVar6) != 0) &&
         (iVar4 = strncmp(*(char **)(iVar8 + 8),*(char **)(param_1 + 0xb4),*(size_t *)(iVar8 + 0xc))
         , iVar4 == 0)) {
        if (bVar1) {
          websSetEnv(param_1);
        }
        iVar5 = (**(code **)(iVar5 + iVar6))
                          (param_1,*(undefined4 *)(iVar8 + 8),*(undefined4 *)(iVar8 + 4),
                           *(undefined4 *)(iVar8 + 0x10),*(undefined4 *)(param_1 + 0xb8),
                           *(undefined4 *)(param_1 + 0xb4),*(undefined4 *)(param_1 + 0xc4));
        if (iVar5 != 0) {
          return 1;
        }
        iVar5 = websValid(param_1);
        if (iVar5 == 0) {
          trace(0,"webs: handler %s called websDone, but didn\'t return 1\n",
                *(undefined4 *)(iVar8 + 8));
          return 1;
        }
        bVar1 = false;
      }
    }
    uVar2 = 200;
    pcVar3 = "No handler for this URL";
  }
  else {
    uVar2 = 400;
    pcVar3 = "Bad request";
  }
  websError(param_1,uVar2,pcVar3);
  return 0;
}


----------------------------------------
Function: put_char

void put_char(int *param_1,int param_2)

{
  int iVar1;
  int iVar2;
  
  iVar2 = param_1[1];
  if (iVar2 + -1 <= param_1[3]) {
    if ((param_1[4] & 1U) == 0) {
      return;
    }
    iVar1 = iVar2 + 0x40;
    param_1[1] = iVar1;
    if ((param_1[2] < iVar1) && (0x40 < iVar1)) {
      param_1[1] = iVar2;
      return;
    }
    if (*param_1 == 0) {
      iVar2 = balloc(iVar1);
    }
    else {
      iVar2 = brealloc();
    }
    *param_1 = iVar2;
  }
  *(char *)(*param_1 + param_1[3]) = (char)param_2;
  if (param_2 != 0) {
    param_1[3] = param_1[3] + 1;
  }
  return;
}


----------------------------------------
Function: put_string

/* WARNING: Control flow encountered bad instruction data */

void put_string(undefined4 param_1,char *param_2,int param_3,int param_4,int param_5,uint param_6)

{
  int iVar1;
  
  if (param_3 < 0) {
                    /* WARNING: Subroutine does not return */
    strlen(param_2);
  }
  if (-1 < param_5) {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  if ((param_3 < param_4) && (iVar1 = param_3, (param_6 & 1) == 0)) {
    do {
      iVar1 = iVar1 + 1;
      put_char(param_1,0x20);
    } while (iVar1 != param_4);
  }
  for (iVar1 = 0; iVar1 < param_3; iVar1 = iVar1 + 1) {
    put_char(param_1,param_2[iVar1]);
  }
  if ((param_3 < param_4) && ((param_6 & 1) != 0)) {
    do {
      param_3 = param_3 + 1;
      put_char(param_1,0x20);
    } while (param_3 != param_4);
  }
  return;
}


----------------------------------------
Function: put_ulong

/* WARNING: Control flow encountered bad instruction data */

void put_ulong(undefined4 param_1,uint param_2,uint param_3)

{
  uint uVar1;
  
  uVar1 = 1;
  do {
    if (0xffffffff / param_3 <= uVar1) {
      return;
    }
    uVar1 = uVar1 * param_3;
  } while (uVar1 <= param_2);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: dsnprintf

/* WARNING: Control flow encountered bad instruction data */

void dsnprintf(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: dirname

char * dirname(char *__path)

{
  char *pcVar1;
  char *in_r4;
  int in_r5;
  size_t __n;
  
  pcVar1 = strrchr(in_r4,0x2f);
  if (pcVar1 != (char *)0x0) {
    if ((pcVar1[1] != '\0') || (pcVar1 != in_r4)) {
      __n = (int)pcVar1 - (int)in_r4;
      if ((int)__n < in_r5) {
        strncpy(__path,in_r4,__n);
        __path[__n] = '\0';
        return __path;
      }
      strncpy(__path,in_r4,4);
      __path[in_r5 + -1] = '\0';
      return __path;
    }
    strncpy(__path,".",4);
  }
  strcpy(__path,".");
  return __path;
}


----------------------------------------
Function: fmtAlloc

void fmtAlloc(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
             undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  undefined4 ***local_20 [3];
  undefined4 local_14;
  undefined4 local_10;
  undefined4 local_c;
  undefined4 local_8;
  undefined4 local_4;
  
  *param_1 = 0;
  local_20[0] = local_20;
  local_14 = param_4;
  local_10 = param_5;
  local_c = param_6;
  local_8 = param_7;
  local_4 = param_8;
  dsnprintf();
  return;
}


----------------------------------------
Function: fmtStatic

undefined4 fmtStatic(undefined4 param_1,int param_2)

{
  undefined4 uVar1;
  
  if (param_2 < 1) {
    uVar1 = 0xffffffff;
  }
  else {
    uVar1 = dsnprintf();
  }
  return uVar1;
}


----------------------------------------
Function: fmtRealloc

void fmtRealloc(undefined4 *param_1,undefined4 param_2,int param_3,undefined4 param_4,
               undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  undefined local_28;
  undefined local_27;
  undefined *local_24;
  undefined *local_20;
  undefined4 local_18;
  undefined4 local_14;
  undefined4 local_10;
  undefined4 local_c;
  
  if (param_3 == -1) {
    *param_1 = 0;
  }
  local_28 = 4;
  local_27 = 0;
  local_24 = &stack0x00000008;
  local_20 = &local_28;
  local_18 = param_5;
  local_14 = param_6;
  local_10 = param_7;
  local_c = param_8;
  dsnprintf(param_1,param_2,param_4,local_20,param_3);
  return;
}


----------------------------------------
Function: fmtValloc

void fmtValloc(undefined4 *param_1)

{
  *param_1 = 0;
  dsnprintf();
  return;
}


----------------------------------------
Function: ascToUni

void ascToUni(void *param_1,void *param_2,size_t param_3)

{
  memcpy(param_1,param_2,param_3);
  return;
}


----------------------------------------
Function: uniToAsc

void uniToAsc(void *param_1,void *param_2,size_t param_3)

{
  memcpy(param_1,param_2,param_3);
  return;
}


----------------------------------------
Function: ballocAscToUni

void * ballocAscToUni(void *param_1,int param_2)

{
  void *__dest;
  
  __dest = (void *)balloc(param_2 + 1U);
  if (__dest != (void *)0x0) {
    memcpy(__dest,param_1,param_2 + 1U);
    *(undefined *)((int)__dest + param_2) = 0;
  }
  return __dest;
}


----------------------------------------
Function: ballocUniToAsc

void * ballocUniToAsc(void *param_1,size_t param_2)

{
  void *__dest;
  
  __dest = (void *)balloc(param_2 + 1);
  if (__dest != (void *)0x0) {
    memcpy(__dest,param_1,param_2);
    *(undefined *)((int)__dest + param_2) = 0;
  }
  return __dest;
}


----------------------------------------
Function: hextoi

/* WARNING: Control flow encountered bad instruction data */

int hextoi(char *param_1)

{
  int iVar1;
  byte *pbVar2;
  uint uVar3;
  uint uVar4;
  
  if (*param_1 == '0') {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  pbVar2 = (byte *)(param_1 + -1);
  iVar1 = 0;
  do {
    pbVar2 = pbVar2 + 1;
    uVar3 = (uint)*pbVar2;
    if (uVar3 == 0) {
      return iVar1;
    }
    uVar4 = uVar3 - 0x30;
    if (9 < uVar4) {
      if (uVar3 - 0x61 < 6) {
        uVar4 = uVar3 - 0x57;
      }
      else {
        if (5 < uVar3 - 0x41) {
          return iVar1;
        }
        uVar4 = uVar3 - 0x37;
      }
    }
    iVar1 = uVar4 + iVar1 * 0x10;
  } while( true );
}


----------------------------------------
Function: gstrtoi

void gstrtoi(char *param_1)

{
  if ((*param_1 == '0') && ((param_1[1] & 0xdfU) == 0x58)) {
    hextoi(param_1 + 2);
    return;
  }
  atoi(param_1);
  return;
}


----------------------------------------
Function: websPageOpen

void websPageOpen(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
                 undefined4 param_5)

{
  websRomPageOpen(param_1,param_3,param_4,param_5);
  return;
}


----------------------------------------
Function: websPageClose

void websPageClose(int param_1)

{
  websRomPageClose(*(undefined4 *)(param_1 + 0x118));
  return;
}


----------------------------------------
Function: websPageStat

void websPageStat(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  websRomPageStat(param_3,param_4);
  return;
}


----------------------------------------
Function: websPageIsDirectory

/* WARNING: Control flow encountered bad instruction data */

void websPageIsDirectory(undefined4 param_1)

{
  undefined auStack_18 [24];
  
  websRomPageStat(param_1,auStack_18);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websPageReadData

/* WARNING: Control flow encountered bad instruction data */

void websPageReadData(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websPageSeek

void websPageSeek(undefined4 param_1,undefined4 param_2)

{
  websRomPageSeek(param_1,param_2,1);
  return;
}


----------------------------------------
Function: websRomOpen

/* WARNING: Control flow encountered bad instruction data */

void websRomOpen(void)

{
  undefined in_vs32 [16];
  undefined in_vs33 [16];
  undefined in_vs34 [16];
  undefined in_vs35 [16];
  undefined in_vs36 [16];
  undefined in_vs37 [16];
  undefined in_vs43 [16];
  undefined in_vs44 [16];
  char acStack_258 [600];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs33,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs34,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs35,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs36,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs37,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs32,in_vs44);
  romTab = symOpen(0x40);
  if (websRomPageIndex != (undefined *)0x0) {
    strncpy(acStack_258,websRomPageIndex,0x200);
                    /* WARNING: Subroutine does not return */
    strlen(acStack_258);
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websRomClose

void websRomClose(void)

{
  symClose(romTab);
  return;
}


----------------------------------------
Function: websRomPageOpen

int websRomPageOpen(int param_1,int param_2)

{
  int iVar1;
  undefined **ppuVar2;
  
  switch(*(char *)(param_2 + 1) + -0x30) {
  case '\0':
    ppuVar2 = &websRomPageIndex;
    break;
  case '\x01':
    ppuVar2 = (undefined **)0x10035290;
    break;
  case '\x02':
    ppuVar2 = (undefined **)0x100352a0;
    break;
  case '\x03':
    ppuVar2 = (undefined **)0x100352b0;
    break;
  case '\x04':
    ppuVar2 = (undefined **)0x100352c0;
    break;
  case '\x05':
    ppuVar2 = (undefined **)0x100352d0;
    break;
  case '\x06':
    ppuVar2 = (undefined **)0x100352e0;
    break;
  case '\a':
    ppuVar2 = (undefined **)0x100352f0;
    break;
  case '\b':
    ppuVar2 = (undefined **)0x10035300;
    break;
  default:
    iVar1 = symLookup(romTab);
    if (iVar1 == 0) {
      return -1;
    }
    ppuVar2 = *(undefined ***)(iVar1 + 0x12);
  }
  ppuVar2[3] = (undefined *)0x0;
  *(int *)(param_1 + 0x118) = (int)(ppuVar2 + -0x400d4a0) >> 4;
  return (int)(ppuVar2 + -0x400d4a0) >> 4;
}


----------------------------------------
Function: SimpleRomPageOpen

int SimpleRomPageOpen(undefined4 param_1)

{
  int iVar1;
  
  iVar1 = symLookup(romTab,param_1);
  if (iVar1 == 0) {
    iVar1 = -1;
  }
  else {
    iVar1 = *(int *)(iVar1 + 0x12);
    *(undefined4 *)(iVar1 + 0xc) = 0;
    iVar1 = iVar1 + -0x10035280 >> 4;
  }
  return iVar1;
}


----------------------------------------
Function: websRomPageClose

void websRomPageClose(void)

{
  return;
}


----------------------------------------
Function: websRomPageStat

undefined4 websRomPageStat(undefined4 param_1,undefined4 *param_2)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = symLookup(romTab,param_1);
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    iVar1 = *(int *)(iVar1 + 0x12);
    uVar2 = 0;
    *(undefined *)param_2 = 0;
    *(undefined *)((int)param_2 + 1) = 0;
    *(undefined *)((int)param_2 + 2) = 0;
    *(undefined *)((int)param_2 + 3) = 0;
    *(undefined *)(param_2 + 1) = 0;
    *(undefined *)((int)param_2 + 5) = 0;
    *(undefined *)((int)param_2 + 6) = 0;
    *(undefined *)((int)param_2 + 7) = 0;
    *(undefined *)(param_2 + 2) = 0;
    *(undefined *)((int)param_2 + 9) = 0;
    *(undefined *)((int)param_2 + 10) = 0;
    *(undefined *)((int)param_2 + 0xb) = 0;
    *param_2 = *(undefined4 *)(iVar1 + 8);
    if (*(int *)(iVar1 + 4) == 0) {
      param_2[1] = 1;
    }
  }
  return uVar2;
}


----------------------------------------
Function: websRomPageReadData

/* WARNING: Control flow encountered bad instruction data */

void websRomPageReadData(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: SimpleRomPageReadData

/* WARNING: Control flow encountered bad instruction data */

void SimpleRomPageReadData(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websRomPageSeek

int websRomPageSeek(int param_1,int param_2,uint param_3)

{
  int *piVar1;
  int iVar2;
  int iVar3;
  
  iVar2 = *(int *)(param_1 + 0x118) * 0x10;
  if (2 < param_3) {
    piVar1 = __errno_location();
    iVar2 = 0x16;
    goto LAB_10015f54;
  }
  if (-1 < *(int *)(param_1 + 0x118)) {
    if (param_3 == 1) {
      iVar3 = *(int *)(&DAT_1003528c + iVar2);
LAB_10015f7c:
      param_2 = param_2 + iVar3;
    }
    else if (param_3 == 2) {
      iVar3 = *(int *)(&DAT_10035288 + iVar2);
      goto LAB_10015f7c;
    }
    if (-1 < param_2) {
      *(int *)(&DAT_1003528c + iVar2) = param_2;
      return param_2;
    }
  }
  piVar1 = __errno_location();
  iVar2 = 9;
LAB_10015f54:
  *piVar1 = iVar2;
  return -1;
}


----------------------------------------
Function: socketAlloc

int socketAlloc(char *param_1,undefined4 param_2,undefined4 param_3,uint param_4)

{
  int iVar1;
  char *__dest;
  
  iVar1 = hAllocEntry(&socketList,&socketMax,0xcc);
  if (iVar1 < 0) {
    iVar1 = -1;
  }
  else {
    __dest = *(char **)(socketList + iVar1 * 4);
    *(int *)(__dest + 0xa4) = iVar1;
    *(undefined4 *)(__dest + 0x94) = param_3;
    *(undefined4 *)(__dest + 0xa8) = param_2;
    *(undefined4 *)(__dest + 0xb4) = 0xffffffff;
    *(undefined4 *)(__dest + 0xc4) = 0xffffffff;
    if (param_1 != (char *)0x0) {
      strncpy(__dest,param_1,0x40);
    }
    *(uint *)(__dest + 0xac) = param_4 & 0x9a4;
    if ((param_4 & 0x800) == 0) {
      ringqOpen(__dest + 0x40,0x400,0x400);
      ringqOpen(__dest + 0x5c,0x401,0x401);
    }
    else {
      memset(__dest + 0x40,0,0x1c);
      memset(__dest + 0x5c,0,0x1c);
    }
    ringqOpen(__dest + 0x78,0x400,0xffffffff);
  }
  return iVar1;
}


----------------------------------------
Function: socketPtr

int socketPtr(int param_1)

{
  int iVar1;
  int *piVar2;
  
  if (((param_1 < 0) || (socketMax <= param_1)) ||
     (iVar1 = *(int *)(socketList + param_1 * 4), iVar1 == 0)) {
    piVar2 = __errno_location();
    *piVar2 = 9;
    iVar1 = 0;
  }
  return iVar1;
}


----------------------------------------
Function: socketRead

/* WARNING: Control flow encountered bad instruction data */

int socketRead(undefined4 param_1,int param_2,size_t param_3)

{
  int iVar1;
  int iVar2;
  size_t __n;
  undefined4 uVar3;
  void *__dest;
  int iVar4;
  int iVar5;
  int local_38 [5];
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
LAB_10016124:
    iVar5 = -1;
  }
  else if ((*(uint *)(iVar1 + 0xac) & 1) == 0) {
    iVar4 = iVar1 + 0x40;
    iVar5 = 0;
    while (0 < (int)param_3) {
      iVar2 = ringqLen(iVar4);
      __n = param_3;
      if ((iVar2 < (int)param_3) && (__n = ringqLen(iVar4), (int)__n < 1)) {
        if (((*(uint *)(iVar1 + 0xac) & 0x80) != 0) && (iVar5 != 0)) {
          return iVar5;
        }
        ringqFlush(iVar4);
        uVar3 = ringqPutBlkMax(iVar4);
        iVar2 = socketGetInput(param_1,*(undefined4 *)(iVar1 + 0x48),uVar3,local_38);
        if (-1 < iVar2) {
          if (iVar2 != 0) {
            ringqPutBlkAdj(iVar4,iVar2);
                    /* WARNING: Bad instruction - Truncating control flow here */
            halt_baddata();
          }
          if (iVar5 != 0) {
            return iVar5;
          }
          *(uint *)(iVar1 + 0xac) = *(uint *)(iVar1 + 0xac) | 1;
          return 0;
        }
        if (local_38[0] != 0xb) goto LAB_10016124;
        if ((*(uint *)(iVar1 + 0xac) & 0x80) == 0) {
          return iVar5;
        }
        if (iVar5 != 0) {
          return iVar5;
        }
      }
      else {
        __dest = (void *)(param_2 + iVar5);
        param_3 = param_3 - __n;
        iVar5 = iVar5 + __n;
        memcpy(__dest,*(void **)(iVar1 + 0x44),__n);
        ringqGetBlkAdj(iVar4,__n);
      }
    }
  }
  else {
    iVar5 = 0;
  }
  return iVar5;
}


----------------------------------------
Function: socketGets

int socketGets(undefined4 param_1,undefined4 *param_2)

{
  int iVar1;
  int iVar2;
  undefined4 uVar3;
  int iVar4;
  char local_28 [20];
  
  *param_2 = 0;
  iVar1 = socketPtr();
  if (iVar1 == 0) {
LAB_1001632c:
    iVar2 = -1;
  }
  else {
    iVar4 = iVar1 + 0x78;
    while( true ) {
      iVar2 = socketRead(param_1,local_28,1);
      if (iVar2 < 0) break;
      if (iVar2 == 0) {
        iVar2 = ringqLen(iVar4);
        if ((iVar2 < 1) || ((*(uint *)(iVar1 + 0xac) & 1) == 0)) goto LAB_1001632c;
        local_28[0] = '\n';
      }
      iVar2 = ringqLen(iVar4);
      if (0x800 < iVar2) {
        local_28[0] = '\n';
      }
      if (local_28[0] == '\n') {
        iVar2 = ringqLen(iVar4);
        if (iVar2 < 1) {
          *param_2 = 0;
        }
        else {
          uVar3 = ballocAscToUni(*(undefined4 *)(iVar1 + 0x7c),iVar2);
          *param_2 = uVar3;
        }
        ringqFlush(iVar4);
        return iVar2;
      }
      if (local_28[0] != '\r') {
        ringqPutc(iVar4);
      }
    }
  }
  return iVar2;
}


----------------------------------------
Function: socketEof

uint socketEof(void)

{
  int iVar1;
  uint uVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = *(uint *)(iVar1 + 0xac) & 1;
  }
  return uVar2;
}


----------------------------------------
Function: socketInputBuffered

undefined4 socketInputBuffered(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  undefined4 uVar3;
  
  iVar1 = socketPtr();
  if ((iVar1 != 0) && (iVar2 = socketEof(param_1), iVar2 == 0)) {
    uVar3 = ringqLen(iVar1 + 0x40);
    return uVar3;
  }
  return 0xffffffff;
}


----------------------------------------
Function: socketCanWrite

int socketCanWrite(void)

{
  int iVar1;
  int iVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    iVar1 = -1;
  }
  else {
    iVar2 = *(int *)(iVar1 + 0x6c);
    iVar1 = ringqLen(iVar1 + 0x5c);
    iVar1 = (iVar2 - iVar1) + -1;
  }
  return iVar1;
}


----------------------------------------
Function: socketSetBufferSize

void socketSetBufferSize(undefined4 param_1,int param_2,int param_3,int param_4)

{
  int iVar1;
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    if (-1 < param_2) {
      ringqClose(iVar1 + 0x40);
      ringqOpen(iVar1 + 0x40,param_2 + 1,param_2 + 1);
    }
    if (-1 < param_3) {
      ringqClose(iVar1 + 0x78);
      ringqOpen(iVar1 + 0x78,param_3 + 1,param_3 + 1);
    }
    if (-1 < param_4) {
      ringqClose(iVar1 + 0x5c);
      ringqOpen(iVar1 + 0x5c,param_4 + 1,param_4 + 1);
      return;
    }
  }
  return;
}


----------------------------------------
Function: socketCreateHandler

void socketCreateHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4
                        )

{
  int iVar1;
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    *(undefined4 *)(iVar1 + 0x98) = param_3;
    *(undefined4 *)(iVar1 + 0x9c) = param_4;
    socketRegisterInterest(iVar1,param_2);
    return;
  }
  return;
}


----------------------------------------
Function: socketDeleteHandler

void socketDeleteHandler(void)

{
  int iVar1;
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    *(undefined4 *)(iVar1 + 0x98) = 0;
    socketRegisterInterest(iVar1,0);
    return;
  }
  return;
}


----------------------------------------
Function: socketFree

/* WARNING: Control flow encountered bad instruction data */

void socketFree(undefined4 param_1)

{
  int iVar1;
  int iVar2;
  undefined auStack_108 [256];
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    socketRegisterInterest(iVar1,0);
    if (-1 < *(int *)(iVar1 + 0xb0)) {
      socketSetBlock(param_1,0);
      iVar2 = shutdown(*(int *)(iVar1 + 0xb0),1);
      if (-1 < iVar2) {
        recv(*(int *)(iVar1 + 0xb0),auStack_108,0x100,0);
      }
      close(*(int *)(iVar1 + 0xb0));
    }
    if ((*(uint *)(iVar1 + 0xac) & 0x800) == 0) {
      ringqClose(iVar1 + 0x40);
      ringqClose(iVar1 + 0x5c);
    }
    ringqClose(iVar1 + 0x78);
    bfree(iVar1);
    socketMax = hFree(&socketList,param_1);
    socketHighestFd = 0xffffffff;
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  return;
}


----------------------------------------
Function: socketGetError

int socketGetError(void)

{
  int *piVar1;
  
  piVar1 = __errno_location();
  return *piVar1;
}


----------------------------------------
Function: socketFlush

undefined4 socketFlush(void)

{
  char *__cp;
  int iVar1;
  size_t __n;
  void *__buf;
  char *pcVar2;
  sockaddr local_38;
  void *local_28;
  
  __cp = (char *)socketPtr();
  if (__cp != (char *)0x0) {
    pcVar2 = __cp + 0x5c;
    if ((*(uint *)(__cp + 0xac) & 0x80) == 0) {
      *(uint *)(__cp + 0xac) = *(uint *)(__cp + 0xac) | 0x10;
    }
    do {
      while( true ) {
        iVar1 = ringqLen(pcVar2);
        if (iVar1 < 1) {
          iVar1 = ringqLen(pcVar2);
          if (iVar1 == 0) {
            ringqFlush(pcVar2);
          }
          if (-1 < *(int *)(__cp + 0xc4)) {
            socketRegisterInterest(__cp);
            *(undefined4 *)(__cp + 0xc4) = 0xffffffff;
          }
          *(uint *)(__cp + 0xac) = *(uint *)(__cp + 0xac) & 0xffffffef;
          return 0;
        }
        __n = ringqGetBlkMax();
        __buf = *(void **)(__cp + 0x60);
        if ((*(uint *)(__cp + 0xac) & 4) != 0) break;
        if ((*(uint *)(__cp + 0xac) & 0x20) == 0) {
          iVar1 = send(*(int *)(__cp + 0xb0),__buf,__n,0);
        }
        else {
          local_38.sa_family = 2;
          local_28 = __buf;
          local_38.sa_data._2_4_ = inet_addr(__cp);
          local_38.sa_data._0_2_ = (undefined2)*(undefined4 *)(__cp + 0xa8);
          iVar1 = sendto(*(int *)(__cp + 0xb0),local_28,__n,0,&local_38,0x10);
        }
        if (iVar1 < 0) goto LAB_10016764;
LAB_100167d0:
        if (iVar1 == 0) {
          if (__n != 0) goto LAB_10016800;
          iVar1 = 0;
        }
        else if (iVar1 == -1) {
          return 0xffffffff;
        }
        ringqGetBlkAdj(pcVar2,iVar1);
      }
      local_38.sa_family = 2;
      local_38.sa_data._2_4_ = 0xffffffff;
      local_38.sa_data._0_2_ = (undefined2)*(undefined4 *)(__cp + 0xa8);
      iVar1 = sendto(*(int *)(__cp + 0xb0),__buf,__n,0,&local_38,0x10);
      if (-1 < iVar1) goto LAB_100167d0;
LAB_10016764:
      iVar1 = socketGetError();
    } while (iVar1 == 4);
    if (iVar1 == 0xb) {
LAB_10016800:
      if (*(int *)(__cp + 0xc4) < 0) {
        *(uint *)(__cp + 0xc4) = *(uint *)(__cp + 0xa0);
        socketRegisterInterest(__cp,*(uint *)(__cp + 0xa0) | 4);
        return 0;
      }
      return 0;
    }
  }
  return 0xffffffff;
}


----------------------------------------
Function: socketWrite

/* WARNING: Control flow encountered bad instruction data */

undefined4 socketWrite(undefined4 param_1,undefined4 param_2,int param_3)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
LAB_100168c0:
    uVar2 = 0xffffffff;
  }
  else {
    do {
      if (param_3 < 1) break;
      iVar3 = ringqPutBlkMax(iVar1 + 0x5c);
      if (iVar3 != 0) {
                    /* WARNING: Bad instruction - Truncating control flow here */
        halt_baddata();
      }
      iVar3 = socketFlush(param_1);
      if (iVar3 < 0) goto LAB_100168c0;
      iVar3 = ringqPutBlkMax(iVar1 + 0x5c);
    } while ((iVar3 != 0) || ((*(uint *)(iVar1 + 0xac) & 0x80) != 0));
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: socketWriteString

void socketWriteString(undefined4 param_1,char *param_2)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: socketGetHandle

undefined4 socketGetHandle(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0xb0);
  }
  return uVar2;
}


----------------------------------------
Function: socketGetBlock

uint socketGetBlock(void)

{
  int iVar1;
  uint uVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(uint *)(iVar1 + 0xac) & 0x80;
  }
  return uVar2;
}


----------------------------------------
Function: socketGetMode

undefined4 socketGetMode(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0xac);
  }
  return uVar2;
}


----------------------------------------
Function: socketSetMode

void socketSetMode(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    *(undefined4 *)(iVar1 + 0xac) = param_2;
  }
  return;
}


----------------------------------------
Function: socketGetPort

undefined4 socketGetPort(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0xa8);
  }
  return uVar2;
}


----------------------------------------
Function: socketOpen

undefined4 socketOpen(void)

{
  socketOpenCount = socketOpenCount + 1;
  if (socketOpenCount < 2) {
    socketList = 0;
    socketMax = 0;
    socketHighestFd = 0xffffffff;
  }
  return 0;
}


----------------------------------------
Function: socketCloseConnection

void socketCloseConnection(undefined4 param_1)

{
  int iVar1;
  
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    socketFree(param_1);
    return;
  }
  return;
}


----------------------------------------
Function: socketClose

void socketClose(void)

{
  int iVar1;
  int iVar2;
  
  socketOpenCount = socketOpenCount + -1;
  if (0 < socketOpenCount) {
    return;
  }
  iVar1 = socketMax << 2;
  for (iVar2 = socketMax; -1 < iVar2; iVar2 = iVar2 + -1) {
    if ((socketList != 0) && (*(int *)(socketList + iVar1) != 0)) {
      socketCloseConnection(iVar2);
    }
    iVar1 = iVar1 + -4;
  }
  socketOpenCount = 0;
  return;
}


----------------------------------------
Function: socketGetInput

int socketGetInput(undefined4 param_1,void *param_2,size_t param_3,int *param_4)

{
  int iVar1;
  int iVar2;
  sockaddr sStack_38;
  socklen_t local_28 [4];
  void *local_18;
  size_t local_14;
  
  *param_4 = 0;
  local_18 = param_2;
  local_14 = param_3;
  iVar1 = socketPtr();
  if (iVar1 != 0) {
    if ((*(uint *)(iVar1 + 0xac) & 1) != 0) {
      return 0;
    }
    if ((*(uint *)(iVar1 + 0xac) & 0x20) == 0) {
      iVar2 = recv(*(int *)(iVar1 + 0xb0),local_18,local_14,0);
    }
    else {
      local_28[0] = 0x10;
      iVar2 = recvfrom(*(int *)(iVar1 + 0xb0),local_18,local_14,0,&sStack_38,local_28);
    }
    if (-1 < iVar2) {
      return iVar2;
    }
    iVar2 = socketGetError();
    *param_4 = iVar2;
    if (iVar2 == 0x68) {
      *(uint *)(iVar1 + 0xac) = *(uint *)(iVar1 + 0xac) | 0x400;
      return 0;
    }
  }
  return -1;
}


----------------------------------------
Function: socketRegisterInterest

void socketRegisterInterest(int param_1,undefined4 param_2)

{
  *(undefined4 *)(param_1 + 0xa0) = param_2;
  return;
}


----------------------------------------
Function: socketSelect

/* WARNING: Control flow encountered bad instruction data */

int socketSelect(int param_1,int param_2)

{
  bool bVar1;
  size_t __n;
  fd_set *__readfds;
  fd_set *__writefds;
  fd_set *__exceptfds;
  int iVar2;
  int iVar3;
  uint uVar4;
  uint uVar5;
  int iVar6;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  timeval local_58 [3];
  uint local_40;
  
  local_40 = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
             (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
             (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4
             | (uint)(in_cr7 & 0xf);
  uVar5 = socketHighestFd + 0x20;
  __n = (((int)uVar5 >> 5) + (uint)((int)uVar5 < 0 && (uVar5 & 0x1f) != 0)) * 4;
  __readfds = (fd_set *)balloc(__n);
  memset(__readfds,0,__n);
  __writefds = (fd_set *)balloc(__n);
  memset(__writefds,0,__n);
  __exceptfds = (fd_set *)balloc(__n);
  memset(__exceptfds,0,__n);
  local_58[0].tv_sec = param_2 / 1000;
  bVar1 = param_1 < 0;
  local_58[0].tv_usec = (param_2 % 1000) * 1000;
  if (bVar1) {
    param_1 = 0;
  }
  iVar2 = param_1 << 2;
  for (; param_1 < socketMax; param_1 = param_1 + 1) {
    iVar6 = *(int *)(socketList + iVar2);
    if (iVar6 != 0) {
      uVar5 = *(uint *)(iVar6 + 0xb0) >> 5;
      uVar4 = 1 << (*(uint *)(iVar6 + 0xb0) & 0x1f);
      if ((*(uint *)(iVar6 + 0xa0) & 2) != 0) {
        __readfds->fds_bits[uVar5] = __readfds->fds_bits[uVar5] | uVar4;
        iVar3 = socketInputBuffered(param_1);
        if (0 < iVar3) {
          local_58[0].tv_sec = 0;
          local_58[0].tv_usec = 0;
        }
      }
      if ((*(uint *)(iVar6 + 0xa0) & 4) != 0) {
        __writefds->fds_bits[uVar5] = __writefds->fds_bits[uVar5] | uVar4;
      }
      if ((*(uint *)(iVar6 + 0xa0) & 8) != 0) {
        __exceptfds->fds_bits[uVar5] = __exceptfds->fds_bits[uVar5] | uVar4;
      }
    }
    if (!bVar1) break;
    iVar2 = iVar2 + 4;
  }
  iVar2 = select(socketHighestFd + 1,__readfds,__writefds,__exceptfds,local_58);
  if (iVar2 < 1) {
    bfree(__readfds);
    bfree(__writefds);
    bfree(__exceptfds);
    return iVar2;
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: socketWaitForEvent

undefined4 socketWaitForEvent(int param_1,uint param_2,undefined4 *param_3)

{
  int iVar1;
  int *piVar2;
  uint uVar3;
  uint uVar4;
  undefined4 uVar5;
  
  uVar4 = *(uint *)(param_1 + 0xa0);
  *(uint *)(param_1 + 0xa0) = param_2 | uVar4;
  do {
    iVar1 = socketSelect(*(undefined4 *)(param_1 + 0xa4),1000);
    uVar3 = *(uint *)(param_1 + 0xbc);
    if (iVar1 == 0) break;
  } while (((param_2 | 8) & uVar3) == 0);
  *(uint *)(param_1 + 0xa0) = uVar4;
  if ((uVar3 & 8) == 0) {
    if ((param_2 & uVar3) == 0) {
      uVar5 = 0;
      if (param_3 != (undefined4 *)0x0) {
        piVar2 = __errno_location();
        *piVar2 = 0xb;
        *param_3 = 0xb;
      }
    }
    else {
      uVar5 = 1;
    }
  }
  else {
    uVar5 = 0xffffffff;
  }
  return uVar5;
}


----------------------------------------
Function: socketReady

/* WARNING: Control flow encountered bad instruction data */

void socketReady(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: socketSetBlock

uint socketSetBlock(undefined4 param_1,int param_2)

{
  int iVar1;
  uint uVar2;
  uint uVar3;
  int __fd;
  
  iVar1 = socketPtr();
  if (iVar1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(uint *)(iVar1 + 0xac) & 0x80;
    uVar3 = *(uint *)(iVar1 + 0xac) & 0xffffff7f;
    if (param_2 != 0) {
      uVar3 = uVar3 | 0x80;
    }
    *(uint *)(iVar1 + 0xac) = uVar3;
    __fd = *(int *)(iVar1 + 0xb0);
    if ((*(uint *)(iVar1 + 0xac) & 0x80) == 0) {
      uVar3 = fcntl(__fd,3);
      uVar3 = uVar3 | 0x800;
    }
    else {
      uVar3 = fcntl(__fd,3);
      uVar3 = uVar3 & 0xfffff7ff;
    }
    fcntl(__fd,4,uVar3);
  }
  return uVar2;
}


----------------------------------------
Function: socketOpenConnection

/* WARNING: Control flow encountered bad instruction data */

void socketOpenConnection(undefined4 param_1,int param_2)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs42 [16];
  undefined in_vs44 [16];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs38,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs42,in_vs44);
  if ((param_2 < 0x10000) && (iVar1 = socketAlloc(), -1 < iVar1)) {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: socketProcess

/* WARNING: Control flow encountered bad instruction data */

void socketProcess(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: socketDontBlock

undefined4 socketDontBlock(void)

{
  int iVar1;
  int iVar2;
  
  iVar2 = 0;
  while( true ) {
    if (socketMax <= iVar2) {
      return 0;
    }
    iVar1 = *(int *)(socketList + iVar2 * 4);
    if (((iVar1 != 0) && ((*(uint *)(iVar1 + 0xa0) & 2) != 0)) &&
       (iVar1 = socketInputBuffered(iVar2), 0 < iVar1)) break;
    iVar2 = iVar2 + 1;
  }
  return 1;
}


----------------------------------------
Function: socketSockBuffered

/* WARNING: Control flow encountered bad instruction data */

void socketSockBuffered(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websSecurityHandler

undefined4 websSecurityHandler(undefined4 param_1)

{
  websGetRequestType();
  websGetRequestPassword(param_1);
  websGetRequestUserName(param_1);
  websGetRequestFlags(param_1);
  return 0;
}


----------------------------------------
Function: websSecurityDelete

void websSecurityDelete(void)

{
  websUrlHandlerDelete(websSecurityHandler);
  return;
}


----------------------------------------
Function: websSetPassword

void websSetPassword(char *param_1)

{
  strncpy(websPassword,param_1,0x20);
  return;
}


----------------------------------------
Function: websSetUsername

void websSetUsername(char *param_1)

{
  strncpy(websUsername,param_1,0x20);
  return;
}


----------------------------------------
Function: websGetUsername

void websGetUsername(void)

{
  bstrdup(websUsername);
  return;
}


----------------------------------------
Function: websGetPassword

void websGetPassword(void)

{
  bstrdup(websPassword);
  return;
}


----------------------------------------
Function: hashIndex.isra.0

int hashIndex_isra_0(uint *param_1,int param_2)

{
  byte *pbVar1;
  uint uVar2;
  uint uVar3;
  
  pbVar1 = (byte *)(param_2 + -1);
  uVar3 = 0;
  uVar2 = 0;
  while( true ) {
    pbVar1 = pbVar1 + 1;
    if (*pbVar1 == 0) break;
    uVar2 = uVar2 + ((uint)*pbVar1 << (uVar3 & 0x3f));
    uVar3 = (int)(uVar3 + 7) % 0x18;
  }
  return uVar2 - (uVar2 / *param_1) * *param_1;
}


----------------------------------------
Function: symSubOpen

undefined4 symSubOpen(void)

{
  symOpenCount = symOpenCount + 1;
  if (symOpenCount == 1) {
    symMax = 0;
    sym = 0;
  }
  return 0;
}


----------------------------------------
Function: symSubClose

void symSubClose(void)

{
  if (0 < symOpenCount + -1) {
    symOpenCount = symOpenCount + -1;
    return;
  }
  symOpenCount = 0;
  return;
}


----------------------------------------
Function: symOpen

/* WARNING: Control flow encountered bad instruction data */

int symOpen(int param_1)

{
  int iVar1;
  undefined *puVar2;
  void *__s;
  
  iVar1 = hAlloc(&sym);
  if (-1 < iVar1) {
    puVar2 = (undefined *)balloc(0xc);
    if (puVar2 != (undefined *)0x0) {
      *puVar2 = 0;
      puVar2[1] = 0;
      puVar2[2] = 0;
      puVar2[3] = 0;
      puVar2[4] = 0;
      puVar2[5] = 0;
      puVar2[6] = 0;
      puVar2[7] = 0;
      puVar2[8] = 0;
      puVar2[9] = 0;
      puVar2[10] = 0;
      puVar2[0xb] = 0;
      if (symMax <= iVar1) {
        symMax = iVar1 + 1;
      }
      *(undefined **)(sym + iVar1 * 4) = puVar2;
      if (param_1 < 1) {
        *(undefined4 *)(puVar2 + 4) = 1;
        __s = (void *)balloc(4);
        *(void **)(puVar2 + 8) = __s;
        memset(__s,0,*(int *)(puVar2 + 4) << 2);
        return iVar1;
      }
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    symMax = hFree(&sym,iVar1);
  }
  return -1;
}


----------------------------------------
Function: symClose

void symClose(int param_1)

{
  undefined4 *puVar1;
  int iVar2;
  int iVar3;
  undefined4 *puVar4;
  
  iVar3 = 0;
  iVar2 = *(int *)(sym + param_1 * 4);
  while( true ) {
    if (*(int *)(iVar2 + 4) <= iVar3) break;
    puVar4 = *(undefined4 **)(*(int *)(iVar2 + 8) + iVar3 * 4);
    while (puVar4 != (undefined4 *)0x0) {
      puVar1 = (undefined4 *)*puVar4;
      valueFree(puVar4 + 1);
      valueFree((int)puVar4 + 0x12);
      bfree(puVar4);
      puVar4 = puVar1;
    }
    iVar3 = iVar3 + 1;
  }
  bfree();
  symMax = hFree(&sym,param_1);
  bfree(iVar2);
  return;
}


----------------------------------------
Function: symFirst

/* WARNING: Control flow encountered bad instruction data */

void symFirst(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: symNext

int * symNext(int param_1)

{
  int *piVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  
  iVar4 = *(int *)(sym + param_1 * 4);
  iVar2 = *(int *)(iVar4 + 4);
  iVar3 = htIndex << 2;
  iVar5 = (iVar2 - htIndex) + 1;
  piVar1 = next;
  iVar6 = htIndex;
  if ((iVar2 < htIndex) || (iVar2 == -0x80000000)) {
    iVar5 = 1;
  }
  while( true ) {
    iVar5 = iVar5 + -1;
    if (iVar5 == 0) {
      next = piVar1;
      return (int *)0x0;
    }
    iVar3 = iVar3 + 4;
    if (piVar1 != (int *)0x0) break;
    iVar6 = iVar6 + 1;
    piVar1 = *(int **)(*(int *)(iVar4 + 8) + iVar3);
  }
  if (*piVar1 == 0) {
    htIndex = iVar6 + 1;
    next = (int *)*(undefined4 *)(*(int *)(iVar4 + 8) + (iVar6 + 1) * 4);
    return piVar1;
  }
  htIndex = iVar6;
  next = (int *)*piVar1;
  return piVar1;
}


----------------------------------------
Function: symLookup

int symLookup(int param_1,char *param_2)

{
  char cVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  
  iVar3 = *(int *)(sym + param_1 * 4);
  if ((iVar3 != 0) && (param_2 != (char *)0x0)) {
    cVar1 = *param_2;
    if (cVar1 == '\0') {
      return 0;
    }
    iVar2 = hashIndex_isra_0(iVar3 + 4);
    for (piVar4 = *(int **)(*(int *)(iVar3 + 8) + iVar2 * 4); piVar4 != (int *)0x0;
        piVar4 = (int *)*piVar4) {
      if ((*(char *)piVar4[1] == cVar1) && (iVar3 = strcmp((char *)piVar4[1],param_2), iVar3 == 0))
      {
        return (int)piVar4;
      }
    }
  }
  return 0;
}


----------------------------------------
Function: symEnter

int * symEnter(int param_1,char *param_2,undefined2 *param_3,int param_4)

{
  char cVar1;
  undefined2 uVar2;
  undefined2 uVar3;
  undefined2 uVar4;
  undefined2 uVar5;
  int iVar6;
  undefined4 *puVar7;
  int iVar8;
  int *piVar9;
  undefined auStack_30 [16];
  
  iVar8 = *(int *)(sym + param_1 * 4);
  iVar6 = hashIndex_isra_0(iVar8 + 4);
  piVar9 = *(int **)(*(int *)(iVar8 + 8) + iVar6 * 4);
  if (piVar9 == (int *)0x0) {
    puVar7 = (undefined4 *)balloc(0x24);
    if (puVar7 != (undefined4 *)0x0) {
      *(undefined4 **)(*(int *)(iVar8 + 8) + iVar6 * 4) = puVar7;
      iVar6 = hashIndex_isra_0(iVar8 + 4,param_2);
      uVar2 = param_3[1];
      uVar3 = param_3[2];
      *(undefined4 **)(*(int *)(iVar8 + 8) + iVar6 * 4) = puVar7;
      uVar4 = param_3[3];
      uVar5 = *param_3;
      *(undefined2 *)(puVar7 + 5) = uVar2;
      *(undefined2 *)((int)puVar7 + 0x16) = uVar3;
      uVar2 = param_3[4];
      uVar3 = param_3[5];
      *(undefined2 *)(puVar7 + 6) = uVar4;
      uVar4 = param_3[6];
      *(undefined2 *)((int)puVar7 + 0x12) = uVar5;
      *(undefined2 *)((int)puVar7 + 0x1a) = uVar2;
      *(undefined2 *)(puVar7 + 7) = uVar3;
      *(undefined2 *)((int)puVar7 + 0x1e) = uVar4;
      *puVar7 = 0;
      puVar7[8] = param_4;
                    /* WARNING: Subroutine does not return */
      valueString(auStack_30,param_2,1);
    }
  }
  else {
    cVar1 = *param_2;
    do {
      if ((*(char *)piVar9[1] == cVar1) && (iVar6 = strcmp((char *)piVar9[1],param_2), iVar6 == 0))
      {
        if (*(char *)((int)piVar9 + 0x1e) != '\0') {
          valueFree((int)piVar9 + 0x12);
        }
        uVar2 = param_3[2];
        uVar3 = param_3[3];
        uVar4 = *param_3;
        *(undefined2 *)(piVar9 + 5) = param_3[1];
        *(undefined2 *)((int)piVar9 + 0x16) = uVar2;
        *(undefined2 *)(piVar9 + 6) = uVar3;
        uVar2 = param_3[4];
        uVar3 = param_3[5];
        uVar5 = param_3[6];
        *(undefined2 *)((int)piVar9 + 0x12) = uVar4;
        *(undefined2 *)((int)piVar9 + 0x1a) = uVar2;
        *(undefined2 *)(piVar9 + 7) = uVar3;
        *(undefined2 *)((int)piVar9 + 0x1e) = uVar5;
        piVar9[8] = param_4;
        return piVar9;
      }
      piVar9 = (int *)*piVar9;
    } while (piVar9 != (int *)0x0);
    iVar6 = balloc(0x24);
    if (iVar6 != 0) {
                    /* WARNING: Subroutine does not return */
      valueString(auStack_30,param_2,1);
    }
  }
  return (int *)0x0;
}


----------------------------------------
Function: symDelete

undefined4 symDelete(int param_1,char *param_2)

{
  char cVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  int *piVar5;
  int iVar6;
  int *piVar7;
  
  iVar6 = *(int *)(sym + param_1 * 4);
  iVar2 = hashIndex_isra_0(iVar6 + 4);
  iVar6 = *(int *)(iVar6 + 8);
  piVar7 = *(int **)(iVar6 + iVar2 * 4);
  if (piVar7 != (int *)0x0) {
    cVar1 = *param_2;
    piVar5 = (int *)0x0;
    do {
      if ((*(char *)piVar7[1] == cVar1) && (iVar3 = strcmp((char *)piVar7[1],param_2), iVar3 == 0))
      {
        if (piVar5 == (int *)0x0) {
          *(int *)(iVar6 + iVar2 * 4) = *piVar7;
        }
        else {
          *piVar5 = *piVar7;
        }
        valueFree(piVar7 + 1);
        valueFree((int)piVar7 + 0x12);
        bfree(piVar7);
        return 0;
      }
      piVar4 = (int *)*piVar7;
      piVar5 = piVar7;
      piVar7 = piVar4;
    } while (piVar4 != (int *)0x0);
  }
  return 0xffffffff;
}


----------------------------------------
Function: defaultErrorHandler

void defaultErrorHandler(void)

{
  return;
}


----------------------------------------
Function: defaultTraceHandler

void defaultTraceHandler(void)

{
  return;
}


----------------------------------------
Function: error

void error(undefined4 param_1,undefined4 param_2,int param_3,undefined4 param_4,undefined4 param_5,
          undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  undefined local_48;
  undefined local_47;
  undefined *local_44;
  undefined4 *local_40;
  undefined4 local_3c;
  undefined4 local_38 [4];
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  
  local_48 = 4;
  local_47 = 0;
  local_44 = &stack0x00000008;
  local_40 = local_38;
  local_28 = param_5;
  local_24 = param_6;
  local_20 = param_7;
  local_1c = param_8;
  fmtValloc(local_40,0x1000,param_4,&local_48);
  if (param_3 != 2) {
    if (param_3 == 1) {
      fmtAlloc(&local_3c,0x1000,"Assertion %s, failed at %s %d\n",local_38[0],param_1,param_2);
      goto LAB_10018014;
    }
    if (param_3 != 3) {
      fmtAlloc(&local_3c,0x1000,"Unknown error");
      goto LAB_10018014;
    }
  }
  fmtAlloc(&local_3c,0x1000,"%s\n",local_38[0]);
LAB_10018014:
  bfree(local_38[0]);
  if (errorHandler != (undefined *)0x0) {
    (*(code *)errorHandler)(param_3,local_3c);
  }
  bfreeSafe(local_3c);
  return;
}


----------------------------------------
Function: errorSetHandler

undefined * errorSetHandler(undefined *param_1)

{
  undefined *puVar1;
  
  puVar1 = errorHandler;
  errorHandler = param_1;
  return puVar1;
}


----------------------------------------
Function: trace

void trace(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  undefined local_38;
  undefined local_37;
  undefined *local_34;
  undefined4 ***local_30;
  undefined4 local_2c;
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined4 local_18;
  undefined4 local_14;
  
  local_38 = 2;
  local_37 = 0;
  local_34 = &stack0x00000008;
  local_30 = &local_30;
  local_28 = param_3;
  local_24 = param_4;
  local_20 = param_5;
  local_1c = param_6;
  local_18 = param_7;
  local_14 = param_8;
  fmtValloc(&local_2c,0xfd0,param_2,&local_38);
  if (traceHandler != (undefined *)0x0) {
    (*(code *)traceHandler)(param_1,local_2c);
  }
  bfreeSafe(local_2c);
  return;
}


----------------------------------------
Function: traceRaw

void traceRaw(undefined4 param_1)

{
  if (traceHandler == (undefined *)0x0) {
    return;
  }
                    /* WARNING: Could not recover jumptable at 0x10018124. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  (*(code *)traceHandler)(0,param_1);
  return;
}


----------------------------------------
Function: traceSetHandler

undefined * traceSetHandler(undefined *param_1)

{
  undefined *puVar1;
  
  puVar1 = traceHandler;
  if (param_1 != (undefined *)0x0) {
    traceHandler = param_1;
  }
  return puVar1;
}


----------------------------------------
Function: emfInstSet

void emfInstSet(undefined4 param_1)

{
  emfInst = param_1;
  return;
}


----------------------------------------
Function: emfInstGet

undefined4 emfInstGet(void)

{
  return emfInst;
}


----------------------------------------
Function: strlower

byte * strlower(byte *param_1)

{
  ushort **ppuVar1;
  __int32_t **pp_Var2;
  uint uVar3;
  byte *pbVar4;
  
  pbVar4 = param_1;
  if (param_1 == (byte *)0x0) {
    param_1 = (byte *)0x0;
  }
  else {
    while( true ) {
      uVar3 = (uint)*pbVar4;
      if (uVar3 == 0) break;
      ppuVar1 = __ctype_b_loc();
      if (((*ppuVar1)[uVar3] & 1) != 0) {
        pp_Var2 = __ctype_tolower_loc();
        *pbVar4 = (byte)(*pp_Var2)[uVar3];
      }
      pbVar4 = pbVar4 + 1;
    }
    *pbVar4 = *pbVar4;
  }
  return param_1;
}


----------------------------------------
Function: strupper

byte * strupper(byte *param_1)

{
  ushort **ppuVar1;
  __int32_t **pp_Var2;
  uint uVar3;
  byte *pbVar4;
  
  pbVar4 = param_1;
  if (param_1 == (byte *)0x0) {
    param_1 = (byte *)0x0;
  }
  else {
    while( true ) {
      uVar3 = (uint)*pbVar4;
      if (uVar3 == 0) break;
      ppuVar1 = __ctype_b_loc();
      if (((*ppuVar1)[uVar3] & 2) != 0) {
        pp_Var2 = __ctype_toupper_loc();
        *pbVar4 = (byte)(*pp_Var2)[uVar3];
      }
      pbVar4 = pbVar4 + 1;
    }
    *pbVar4 = *pbVar4;
  }
  return param_1;
}


----------------------------------------
Function: stritoa

/* WARNING: Control flow encountered bad instruction data */

void stritoa(int param_1,char *param_2,int param_3)

{
  bool bVar1;
  char cVar2;
  char *pcVar3;
  char *pcVar4;
  int iVar5;
  char *pcVar6;
  char acStack_19 [17];
  
  if (param_2 == (char *)0x0) {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  bVar1 = param_1 < 0;
  if (bVar1) {
    param_1 = -param_1;
    param_3 = param_3 + -1;
  }
  iVar5 = param_3 + -1;
  pcVar3 = acStack_19 + 1;
  pcVar4 = pcVar3;
  if ((acStack_19 + param_3 < pcVar3) || (&stack0xffffffe0 + param_3 == (undefined *)0xfffffff9)) {
    param_3 = 1;
  }
  while (cVar2 = (char)param_1, 9 < param_1) {
    param_3 = param_3 + -1;
    if (param_3 == 0) goto LAB_10018330;
    param_1 = param_1 / 10;
    *pcVar4 = cVar2 + '0' + (char)param_1 * -10;
    pcVar4 = pcVar4 + 1;
  }
  if (pcVar4 < pcVar3 + iVar5) {
    *pcVar4 = cVar2 + '0';
    pcVar4 = pcVar4 + 1;
  }
LAB_10018330:
  pcVar6 = param_2;
  if (bVar1) {
    pcVar6 = param_2 + 1;
    *param_2 = '-';
  }
  pcVar3 = pcVar4 + (1 - (int)pcVar3);
  if ((pcVar4 < acStack_19 + 1) || (&stack0xffffffe0 == (undefined *)0xfffffff7)) {
    pcVar3 = (char *)0x1;
  }
  while( true ) {
    pcVar3 = pcVar3 + -1;
    if (pcVar3 == (char *)0x0) break;
    pcVar4 = pcVar4 + -1;
    *pcVar6 = *pcVar4;
    pcVar6 = pcVar6 + 1;
  }
  *pcVar6 = '\0';
  return;
}


----------------------------------------
Function: xmemstr

char * xmemstr(char *param_1,char *param_2,int param_3)

{
  int iVar1;
  char *pcVar2;
  int iVar3;
  int iVar4;
  
  if (*param_2 == '\0') {
    return param_1;
  }
  do {
    do {
      iVar4 = param_3;
      pcVar2 = param_1;
      param_3 = iVar4 + -1;
      if (iVar4 < 1) {
        return (char *)0x0;
      }
      param_1 = pcVar2 + 1;
    } while (*pcVar2 != *param_2);
    iVar3 = 0;
    do {
      iVar1 = iVar3 + 1;
      if (param_2[iVar1] == '\0') {
        return pcVar2;
      }
      iVar4 = iVar4 + -1;
      if (iVar4 == 0) {
        return (char *)0x0;
      }
      iVar3 = iVar3 + 1;
    } while (pcVar2[iVar3] == param_2[iVar1]);
  } while( true );
}


----------------------------------------
Function: basicGetProduct

undefined * basicGetProduct(void)

{
  return &DAT_100238e8;
}


----------------------------------------
Function: basicGetAddress

char * basicGetAddress(void)

{
  return "localhost";
}


----------------------------------------
Function: errorOpen

undefined4 errorOpen(void)

{
  return 0;
}


----------------------------------------
Function: errorClose

void errorClose(void)

{
  return;
}


----------------------------------------
Function: valueInteger

void valueInteger(undefined2 *param_1,undefined4 param_2)

{
  param_1[1] = (short)param_2;
  *param_1 = (short)((uint)param_2 >> 0x10);
  param_1[2] = 0;
  param_1[3] = 0;
  param_1[4] = 0;
  param_1[5] = 3;
  param_1[6] = 0x100;
  return;
}


----------------------------------------
Function: valueString

/* WARNING: Control flow encountered bad instruction data */

void valueString(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: valueFree

void valueFree(int *param_1)

{
  if (((*(char *)(param_1 + 3) != '\0') && (*(char *)((int)param_1 + 0xd) != '\0')) &&
     (param_1[2] == 10)) {
    if (*param_1 != 0) {
      bfree();
    }
  }
  *(undefined2 *)(param_1 + 2) = 0;
  *(undefined2 *)((int)param_1 + 10) = 0;
  *(undefined *)(param_1 + 3) = 0;
  *(undefined *)((int)param_1 + 0xd) = 0;
  return;
}


----------------------------------------
Function: extractUploadedFileContent

/* WARNING: Control flow encountered bad instruction data */

undefined4 extractUploadedFileContent(int param_1)

{
  void *__dest;
  char *pcVar1;
  char *pcVar2;
  char *__haystack;
  
  pcVar1 = *(char **)(param_1 + 0xec);
  if (*(int *)(param_1 + 0xe0) == 0) {
    if (*(char **)(param_1 + 0xec) != (char *)0x0) {
      pcVar1 = *(char **)(param_1 + 0xc4);
      if (pcVar1 != (char *)0x0) {
        if (*pcVar1 == '\0') {
                    /* WARNING: Subroutine does not return */
          strlen(pcVar1);
        }
                    /* WARNING: Subroutine does not return */
        strlen(pcVar1);
      }
      __dest = (void *)balloc(*(int *)(param_1 + 0x110) + 1);
      *(void **)(param_1 + 0xc4) = __dest;
      if (__dest != (void *)0x0) {
        memcpy(__dest,*(void **)(param_1 + 0xec),*(size_t *)(param_1 + 0x110));
        *(undefined *)(*(int *)(param_1 + 0xc4) + *(int *)(param_1 + 0x110)) = 0;
      }
    }
  }
  else {
    while (((__haystack = pcVar1, __haystack != (char *)0x0 &&
            (pcVar1 = strstr(__haystack,*(char **)(param_1 + 0xe0)), pcVar1 != (char *)0x0)) &&
           (pcVar1 = strchr(pcVar1,10), pcVar1 != (char *)0x0))) {
      pcVar1 = pcVar1 + 1;
      pcVar2 = strstr(pcVar1,"Content-Disposition");
      if ((pcVar2 != (char *)0x0) &&
         (pcVar2 = strchr(pcVar1,10), pcVar1 = __haystack, pcVar2 != (char *)0x0)) {
                    /* WARNING: Bad instruction - Truncating control flow here */
        halt_baddata();
      }
    }
  }
  return 0;
}


----------------------------------------
Function: traceHandler

void traceHandler(int param_1,char *param_2)

{
  if (3 < param_1) {
    return;
  }
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: websSafeUrl

undefined4 websSafeUrl(char *param_1)

{
  char *pcVar1;
  char *__s;
  
  pcVar1 = param_1;
  if (param_1 != (char *)0x0) {
    while (pcVar1 = strchr(pcVar1,0x3c), __s = param_1, pcVar1 != (char *)0x0) {
      pcVar1 = pcVar1 + 1;
    }
    while (pcVar1 = strchr(__s,0x3e), pcVar1 != (char *)0x0) {
      __s = pcVar1 + 1;
    }
                    /* WARNING: Subroutine does not return */
    strlen(param_1);
  }
  return 0;
}


----------------------------------------
Function: websOpenListen

int websOpenListen(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  
  iVar1 = 0;
  while( true ) {
    iVar2 = iVar1 + param_1;
    if (param_2 < iVar1) {
      error("../Libs/webs.c",0xf8,3,"Couldn\'t open a socket on ports %d - %d",param_1,iVar2 + -1);
      return -1;
    }
    websListenSock = socketOpenConnection(0,iVar2,websAccept,0);
    if (-1 < websListenSock) break;
    iVar1 = iVar1 + 1;
  }
  websPort = iVar2;
  bfreeSafe(websHostUrl);
  bfreeSafe(websIpaddrUrl);
  websHostUrl = 0;
  websIpaddrUrl = 0;
  if (iVar2 == 0x50) {
    websHostUrl = bstrdup(websHost);
    websIpaddrUrl = bstrdup(websIpaddr);
  }
  else {
    fmtAlloc(&websHostUrl,0x1050,"%s:%d",websHost,iVar2);
    fmtAlloc(&websIpaddrUrl,0x1050,"%s:%d",websIpaddr,iVar2);
  }
  trace(0,"webs: Listening for HTTP requests at address %s\n",websIpaddrUrl);
  return iVar2;
}


----------------------------------------
Function: websOpenServer

/* WARNING: Control flow encountered bad instruction data */

undefined4 websOpenServer(void)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs42 [16];
  undefined in_vs43 [16];
  undefined in_vs44 [16];
  undefined in_vs45 [16];
  undefined auStack_68 [104];
  
  websOpenCount = websOpenCount + 1;
  if (websOpenCount != 1) {
    return websPort;
  }
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs42,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs43,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs44,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs45,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs38,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  websDefaultOpen();
  websRomOpen();
  webs = 0;
  websMax = 0;
  websMime = symOpen(0x100);
  if (websMimeList != (undefined *)0x0) {
                    /* WARNING: Subroutine does not return */
    valueString(auStack_68,websMimeList,0);
  }
  iVar1 = websUrlHandlerOpen();
  if (-1 < iVar1) {
    websFormOpen();
    websLogFd = open(websLogname,0x641,0x1b6);
    websTraceFd = open(websTracename,0x641,0x1b6);
    traceSetHandler(traceHandler);
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websCloseListen

void websCloseListen(void)

{
  if (-1 < websListenSock) {
    socketCloseConnection();
    websListenSock = -1;
  }
  bfreeSafe(websHostUrl);
  bfreeSafe(websIpaddrUrl);
  websHostUrl = 0;
  websIpaddrUrl = 0;
  return;
}


----------------------------------------
Function: websSetVar

void websSetVar(undefined4 param_1,undefined4 param_2,undefined *param_3)

{
  undefined in_vs33 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs44 [16];
  undefined auStack_38 [56];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs38,in_vs44);
  if (param_3 == (undefined *)0x0) {
    param_3 = &DAT_10023fc4;
  }
                    /* WARNING: Subroutine does not return */
  valueString(auStack_38,param_3,1);
}


----------------------------------------
Function: websTestVar

bool websTestVar(int param_1,char *param_2)

{
  int iVar1;
  
  if (param_2 == (char *)0x0) {
    return false;
  }
  if (*param_2 == '\0') {
    return false;
  }
  iVar1 = symLookup(*(undefined4 *)(param_1 + 0x20));
  return iVar1 != 0;
}


----------------------------------------
Function: websGetVar

undefined * websGetVar(int param_1,undefined4 param_2,undefined *param_3)

{
  int iVar1;
  
  iVar1 = symLookup(*(undefined4 *)(param_1 + 0x20));
  if ((iVar1 != 0) && (param_3 = *(undefined **)(iVar1 + 0x12), param_3 == (undefined *)0x0)) {
    param_3 = &DAT_10023fc4;
  }
  return param_3;
}


----------------------------------------
Function: websCompareVar

/* WARNING: Control flow encountered bad instruction data */

void websCompareVar(undefined4 param_1,undefined4 param_2,char *param_3)

{
  char *__s2;
  
  __s2 = (char *)websGetVar(param_1,param_2," __UNDEF__ ");
  strcmp(param_3,__s2);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websTimeoutCancel

void websTimeoutCancel(int param_1)

{
  if (-1 < *(int *)(param_1 + 0x2c)) {
    emfUnschedCallback();
    *(undefined4 *)(param_1 + 0x2c) = 0xffffffff;
  }
  return;
}


----------------------------------------
Function: websErrorMsg

undefined * websErrorMsg(int param_1)

{
  int *piVar1;
  
  piVar1 = &websErrors;
  while( true ) {
    if (*piVar1 == 0) {
      return &DAT_10023fc4;
    }
    if (param_1 == *piVar1) break;
    piVar1 = piVar1 + 2;
  }
  return (undefined *)piVar1[1];
}


----------------------------------------
Function: websWriteBlock

int websWriteBlock(int param_1,undefined4 param_2,int param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  iVar1 = ballocUniToAsc(param_2,param_3);
  iVar4 = 0;
  iVar3 = iVar1;
  while( true ) {
    if (param_3 < 1) {
      bfree(iVar1);
      return iVar4;
    }
    iVar2 = socketWrite(*(undefined4 *)(param_1 + 0xf0),iVar3,param_3);
    if (iVar2 < 0) break;
    param_3 = param_3 - iVar2;
    iVar3 = iVar3 + iVar2;
    iVar4 = iVar4 + iVar2;
    socketFlush(*(undefined4 *)(param_1 + 0xf0));
  }
  bfree(iVar1);
  return -1;
}


----------------------------------------
Function: websWrite

undefined4
websWrite(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  int iVar1;
  undefined local_38;
  undefined local_37;
  undefined *local_34;
  undefined4 ***local_30;
  char *local_2c;
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined4 local_18;
  undefined4 local_14;
  
  local_38 = 2;
  local_2c = (char *)0x0;
  local_37 = 0;
  local_34 = &stack0x00000008;
  local_30 = &local_30;
  local_28 = param_3;
  local_24 = param_4;
  local_20 = param_5;
  local_1c = param_6;
  local_18 = param_7;
  local_14 = param_8;
  iVar1 = fmtValloc(&local_2c,1000,param_2,&local_38);
  if (999 < iVar1) {
    trace(0,"webs: websWrite lost data, buffer overflow\n");
  }
  if (local_2c != (char *)0x0) {
                    /* WARNING: Subroutine does not return */
    strlen(local_2c);
  }
  return 0;
}


----------------------------------------
Function: websWriteDataNonBlock

undefined4 websWriteDataNonBlock(int param_1)

{
  undefined4 uVar1;
  
  uVar1 = socketWrite(*(undefined4 *)(param_1 + 0xf0));
  socketFlush(*(undefined4 *)(param_1 + 0xf0));
  return uVar1;
}


----------------------------------------
Function: websDecodeUrl

void websDecodeUrl(byte *param_1,byte *param_2,int param_3)

{
  byte bVar1;
  ushort **ppuVar2;
  __int32_t **pp_Var3;
  byte *pbVar4;
  int iVar5;
  byte *pbVar6;
  
  pbVar6 = param_1;
  do {
    bVar1 = *param_2;
    if ((bVar1 == 0) || ((int)(param_1 + (param_3 - (int)pbVar6)) < 1)) {
      *pbVar6 = 0;
      return;
    }
    if (bVar1 == 0x2b) {
      *pbVar6 = 0x20;
    }
    else {
      if (bVar1 == 0x25) {
        ppuVar2 = __ctype_b_loc();
        if ((((*ppuVar2)[param_2[1]] & 0x10) != 0) && (((*ppuVar2)[param_2[2]] & 0x10) != 0)) {
          pp_Var3 = __ctype_tolower_loc();
          pbVar4 = param_2 + 2;
          iVar5 = 0;
          do {
            param_2 = param_2 + 1;
            iVar5 = (*pp_Var3)[*param_2] + iVar5 * 0x10;
            if ((*pp_Var3)[*param_2] - 0x61U < 6) {
              iVar5 = iVar5 + -0x57;
            }
            else {
              iVar5 = iVar5 + -0x30;
            }
          } while (param_2 != pbVar4);
          *pbVar6 = (byte)iVar5;
          goto LAB_10019410;
        }
      }
      *pbVar6 = bVar1;
    }
LAB_10019410:
    param_2 = param_2 + 1;
    pbVar6 = pbVar6 + 1;
  } while( true );
}


----------------------------------------
Function: websSetEnv

void websSetEnv(int param_1)

{
  int iVar1;
  void *__dest;
  char *pcVar2;
  char *pcVar3;
  undefined auStack_38 [8];
  undefined4 local_30;
  char *local_2c [4];
  
  websSetVar(param_1,"QUERY_STRING",*(undefined4 *)(param_1 + 0xc4));
  websSetVar(param_1,"GATEWAY_INTERFACE","CGI/1.1");
  websSetVar(param_1,"SERVER_HOST",websHost);
  websSetVar(param_1,"SERVER_NAME",websHost);
  websSetVar(param_1,"SERVER_URL",websHostUrl);
  websSetVar(param_1,"REMOTE_HOST",param_1 + 0x30);
  websSetVar(param_1,"REMOTE_ADDR",param_1 + 0x30);
  websSetVar(param_1,"PATH_INFO",*(undefined4 *)(param_1 + 0xb4));
  stritoa(websPort,auStack_38,8);
  websSetVar(param_1,"SERVER_PORT",auStack_38);
  websSetVar(param_1,"SERVER_ADDR",param_1 + 0x50);
  fmtAlloc(local_2c,0xfe,"%s/%s","GoAhead-Webs","2.5.0");
  websSetVar(param_1,"SERVER_SOFTWARE",local_2c[0]);
  bfreeSafe(local_2c[0]);
  websSetVar(param_1,"SERVER_PROTOCOL",*(undefined4 *)(param_1 + 0xe8));
  if ((*(uint *)(param_1 + 0x100) & 0x80000) == 0) {
    if (*(int *)(param_1 + 0xec) != 0) {
      pcVar2 = *(char **)(param_1 + 0xc4);
      if (pcVar2 != (char *)0x0) {
        if (*pcVar2 != '\0') {
                    /* WARNING: Subroutine does not return */
          strlen(pcVar2);
        }
                    /* WARNING: Subroutine does not return */
        strlen(pcVar2);
      }
      __dest = (void *)balloc(*(int *)(param_1 + 0x110) + 1);
      *(void **)(param_1 + 0xc4) = __dest;
      if (__dest != (void *)0x0) {
        memcpy(__dest,*(void **)(param_1 + 0xec),*(size_t *)(param_1 + 0x110));
        *(undefined *)(*(int *)(param_1 + 0xc4) + *(int *)(param_1 + 0x110)) = 0;
      }
    }
  }
  else {
    iVar1 = extractUploadedFileContent(param_1,&local_30);
    if (iVar1 != 0) {
      bfree(*(undefined4 *)(param_1 + 0xec));
      *(int *)(param_1 + 0xec) = iVar1;
      *(undefined4 *)(param_1 + 0x110) = local_30;
    }
  }
  pcVar2 = (char *)bstrdup(*(undefined4 *)(param_1 + 0xc4));
  *(char **)(param_1 + 200) = pcVar2;
  pcVar2 = strtok(pcVar2,"&");
  while( true ) {
    if (pcVar2 == (char *)0x0) {
      return;
    }
    pcVar3 = strchr(pcVar2,0x3d);
    if (pcVar3 != (char *)0x0) break;
    local_2c[0] = "";
    if (*pcVar2 != '\0') {
      iVar1 = websGetVar(param_1,pcVar2,0);
      if (iVar1 == 0) {
        websSetVar(param_1,pcVar2,local_2c[0]);
      }
      else {
        fmtAlloc(&local_30,0x100,"%s %s");
        websSetVar(param_1,pcVar2,local_30);
        bfreeSafe(local_30);
      }
    }
    pcVar2 = strtok((char *)0x0,"&");
  }
  local_2c[0] = pcVar3 + 1;
  *pcVar3 = '\0';
                    /* WARNING: Subroutine does not return */
  strlen(pcVar2);
}


----------------------------------------
Function: websAlloc

int websAlloc(undefined4 param_1)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  
  iVar1 = hAllocEntry(&webs,&websMax,0x148);
  if (iVar1 < 0) {
    iVar1 = -1;
  }
  else {
    iVar3 = *(int *)(webs + iVar1 * 4);
    *(undefined4 *)(iVar3 + 0xfc) = 1;
    *(undefined4 *)(iVar3 + 0x118) = 0xffffffff;
    *(undefined4 *)(iVar3 + 0x2c) = 0xffffffff;
    *(undefined4 *)(iVar3 + 0xb0) = 0;
    *(undefined4 *)(iVar3 + 0xcc) = 0;
    *(undefined4 *)(iVar3 + 0xe4) = 0;
    *(undefined4 *)(iVar3 + 0xe8) = 0;
    *(undefined4 *)(iVar3 + 0xd0) = 0;
    *(undefined4 *)(iVar3 + 0xd4) = 0;
    *(undefined4 *)(iVar3 + 0x128) = 0;
    *(undefined4 *)(iVar3 + 300) = 0;
    *(undefined4 *)(iVar3 + 0x130) = 0;
    *(undefined4 *)(iVar3 + 0x134) = 0;
    *(undefined4 *)(iVar3 + 0x138) = 0;
    *(undefined4 *)(iVar3 + 0x13c) = 0;
    *(undefined4 *)(iVar3 + 0x140) = 0;
    *(undefined4 *)(iVar3 + 0x144) = 0;
    *(undefined4 *)(iVar3 + 0xe0) = 0;
    *(int *)(iVar3 + 0x10c) = iVar1;
    *(undefined4 *)(iVar3 + 0xf0) = param_1;
    ringqOpen(iVar3,0x200,0x1400);
    uVar2 = symOpen(0x40);
    *(undefined4 *)(iVar3 + 0x20) = uVar2;
  }
  return iVar1;
}


----------------------------------------
Function: websAccept

undefined4 websAccept(undefined4 param_1,char *param_2,undefined4 param_3,undefined4 param_4)

{
  int iVar1;
  
  iVar1 = websAlloc();
  if (iVar1 < 0) {
    return 0xffffffff;
  }
  *(undefined4 *)(*(int *)(webs + iVar1 * 4) + 0xf4) = param_4;
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: websFree

void websFree(int *param_1)

{
  if (param_1[0x2d] != 0) {
    bfree();
  }
  if (param_1[0x2e] != 0) {
    bfree();
  }
  if (param_1[0x2f] != 0) {
    bfree();
  }
  if (param_1[0x30] != 0) {
    bfree();
  }
  if (param_1[0x31] != 0) {
    bfree();
  }
  if (param_1[0x3b] != 0) {
    bfree();
  }
  if (param_1[0x32] != 0) {
    bfree();
  }
  if (param_1[0x33] != 0) {
    bfree();
  }
  if (param_1[0x34] != 0) {
    bfree();
  }
  if (param_1[0x35] != 0) {
    bfree();
  }
  if (param_1[0x36] != 0) {
    bfree();
  }
  if (param_1[0x37] != 0) {
    bfree();
  }
  if (param_1[0x2c] != 0) {
    bfree();
  }
  if (param_1[0x39] != 0) {
    bfree();
  }
  if (param_1[0x3a] != 0) {
    bfree();
  }
  if (param_1[0x45] != 0) {
    bfree();
  }
  if (param_1[0x38] != 0) {
    bfree();
  }
  if (param_1[0x4a] != 0) {
    bfree();
  }
  if (param_1[0x4d] != 0) {
    bfree();
  }
  if (param_1[0x4c] != 0) {
    bfree();
  }
  if (param_1[0x4e] != 0) {
    bfree();
  }
  if (param_1[0x4b] != 0) {
    bfree();
  }
  if (param_1[0x4f] != 0) {
    bfree();
  }
  if (param_1[0x50] != 0) {
    bfree();
  }
  if (param_1[0x51] != 0) {
    bfree();
  }
  symClose(param_1[8]);
  if (*param_1 != 0) {
    ringqClose(param_1);
  }
  websMax = hFree(&webs,param_1[0x43]);
  bfree(param_1);
  return;
}


----------------------------------------
Function: websCloseServer

void websCloseServer(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  websOpenCount = websOpenCount + -1;
  if (0 < websOpenCount) {
    return;
  }
  websCloseListen();
  iVar2 = websMax << 2;
  for (iVar3 = websMax; (webs != 0 && (-1 < iVar3)); iVar3 = iVar3 + -1) {
    iVar1 = *(int *)(webs + iVar2);
    if (iVar1 != 0) {
      socketCloseConnection(*(undefined4 *)(iVar1 + 0xf0));
      websFree(iVar1);
    }
    iVar2 = iVar2 + -4;
  }
  if (-1 < websLogFd) {
    close(websLogFd);
    websLogFd = -1;
  }
  if (-1 < websTraceFd) {
    close(websTraceFd);
    websTraceFd = -1;
  }
  websRomClose();
  websDefaultClose();
  symClose(websMime);
  websFormClose();
  websUrlHandlerClose();
  return;
}


----------------------------------------
Function: websDone

void websDone(int *param_1,int param_2)

{
  int iVar1;
  undefined *puVar2;
  undefined *puVar3;
  tm tStack_88;
  char acStack_5c [27];
  undefined local_41;
  char local_40;
  undefined local_3f;
  undefined local_31;
  char acStack_30 [5];
  undefined local_2b;
  time_t tStack_28;
  char *local_24 [5];
  
  socketDeleteHandler(param_1[0x3c]);
  if (param_2 != 200) {
    param_1[0x40] = param_1[0x40] & 0xfffffffd;
  }
  local_24[0] = (char *)(param_1[0x40] & 0x1000);
  if (local_24[0] != (char *)0x0) {
    websPageClose(param_1);
    if ((param_1[0x40] & 2U) == 0) {
      websTimeoutCancel(param_1);
      socketSetBlock(param_1[0x3c],1);
      socketFlush(param_1[0x3c]);
      socketCloseConnection(param_1[0x3c]);
    }
    else {
      iVar1 = socketFlush(param_1[0x3c]);
      if (iVar1 == 0) {
        param_1[0x3f] = 1;
        param_1[0x40] = param_1[0x40] | 0x1000;
        if (*param_1 != 0) {
          ringqFlush(param_1);
        }
        socketCreateHandler(param_1[0x3c],2,websSocketEvent,param_1);
        websTimeoutCancel(param_1);
        iVar1 = emfSchedCallback(60000,websTimeout,param_1);
        param_1[0xb] = iVar1;
        return;
      }
    }
    websFree(param_1);
    return;
  }
  time(&tStack_28);
  localtime_r(&tStack_28,&tStack_88);
  strftime(acStack_5c,0x1c,"%d/%b/%Y:%H:%M:%S",&tStack_88);
  local_41 = 0;
  snprintf(acStack_30,6,"%+03d00",tStack_88.tm_gmtoff / 0xe10);
  local_2b = 0;
  if (param_1[0x48] == 0) {
    local_3f = 0;
    local_40 = '-';
  }
  else {
    snprintf(&local_40,0x10,"%d");
    local_31 = 0;
  }
  puVar2 = (undefined *)param_1[0x35];
  if (puVar2 == (undefined *)0x0) {
    puVar2 = &DAT_10023880;
  }
  if ((param_1[0x40] & 0x20U) == 0) {
    if ((param_1[0x40] & 0x200U) == 0) {
      puVar3 = &DAT_10023cf8;
    }
    else {
      puVar3 = &DAT_10023cfc;
    }
  }
  else {
    puVar3 = &DAT_10023cf0;
  }
  fmtAlloc(local_24,0x1050,"%s - %s [%s %s] \"%s %s %s\" %d %s\n",param_1 + 0xc,puVar2,acStack_5c,
           acStack_30,puVar3,param_1[0x2d],param_1[0x3a],param_2,&local_40);
                    /* WARNING: Subroutine does not return */
  strlen(local_24[0]);
}


----------------------------------------
Function: websTimeout

void websTimeout(int param_1,undefined4 param_2)

{
  time_t tVar1;
  int iVar2;
  
  tVar1 = time((time_t *)0x0);
  iVar2 = tVar1 - *(int *)(param_1 + 0x28);
  if (59999 < iVar2 * 1000) {
    DAT_100b3f34 = DAT_100b3f34 + 1;
    emfUnschedCallback(param_2);
    *(undefined4 *)(param_1 + 0x2c) = 0xffffffff;
    websDone(param_1,0x194);
    return;
  }
  emfReschedCallback(param_2,iVar2 * -1000 + 60000);
  return;
}


----------------------------------------
Function: websGetHost

undefined1 * websGetHost(void)

{
  return websHost;
}


----------------------------------------
Function: websGetIpaddrUrl

undefined4 websGetIpaddrUrl(void)

{
  return websIpaddrUrl;
}


----------------------------------------
Function: websGetHostUrl

undefined4 websGetHostUrl(void)

{
  return websHostUrl;
}


----------------------------------------
Function: websGetPort

undefined4 websGetPort(void)

{
  return websPort;
}


----------------------------------------
Function: websGetRequestBytes

undefined4 websGetRequestBytes(int param_1)

{
  return *(undefined4 *)(param_1 + 0x11c);
}


----------------------------------------
Function: websGetRequestDir

undefined * websGetRequestDir(int param_1)

{
  if (*(undefined **)(param_1 + 0xb0) != (undefined *)0x0) {
    return *(undefined **)(param_1 + 0xb0);
  }
  return &DAT_10023fc4;
}


----------------------------------------
Function: websGetRequestFlags

undefined4 websGetRequestFlags(int param_1)

{
  return *(undefined4 *)(param_1 + 0x100);
}


----------------------------------------
Function: websGetRequestIpaddr

int websGetRequestIpaddr(int param_1)

{
  return param_1 + 0x30;
}


----------------------------------------
Function: websGetRequestLpath

undefined4 websGetRequestLpath(int param_1)

{
  return *(undefined4 *)(param_1 + 0xb4);
}


----------------------------------------
Function: websGetRequestPath

undefined * websGetRequestPath(int param_1)

{
  if (*(undefined **)(param_1 + 0xb4) != (undefined *)0x0) {
    return *(undefined **)(param_1 + 0xb4);
  }
  return &DAT_10023fc4;
}


----------------------------------------
Function: websGetRequestPassword

undefined4 websGetRequestPassword(int param_1)

{
  return *(undefined4 *)(param_1 + 0xd0);
}


----------------------------------------
Function: websGetRequestType

int websGetRequestType(int param_1)

{
  return param_1 + 0x70;
}


----------------------------------------
Function: websGetRequestUserName

undefined4 websGetRequestUserName(int param_1)

{
  return *(undefined4 *)(param_1 + 0xd4);
}


----------------------------------------
Function: websGetRequestWritten

undefined4 websGetRequestWritten(int param_1)

{
  return *(undefined4 *)(param_1 + 0x120);
}


----------------------------------------
Function: websSetHost

void websSetHost(char *param_1)

{
  strncpy(websHost,param_1,0x40);
  return;
}


----------------------------------------
Function: websSetHostUrl

void websSetHostUrl(undefined4 param_1)

{
  bfreeSafe(websHostUrl);
  websHostUrl = bstrdup(param_1);
  return;
}


----------------------------------------
Function: websSetIpaddr

void websSetIpaddr(char *param_1)

{
  strncpy(websIpaddr,param_1,0x40);
  return;
}


----------------------------------------
Function: websSetRequestBytes

void websSetRequestBytes(int param_1,undefined4 param_2)

{
  *(undefined4 *)(param_1 + 0x11c) = param_2;
  return;
}


----------------------------------------
Function: websSetRequestFlags

void websSetRequestFlags(int param_1,undefined4 param_2)

{
  *(undefined4 *)(param_1 + 0x100) = param_2;
  return;
}


----------------------------------------
Function: websSetRequestLpath

void websSetRequestLpath(int param_1,undefined4 param_2)

{
  undefined4 uVar1;
  
  if (*(int *)(param_1 + 0xc0) != 0) {
    bfree();
  }
  uVar1 = bstrdup(param_2);
  *(undefined4 *)(param_1 + 0xc0) = uVar1;
  websSetVar(param_1,"PATH_TRANSLATED",uVar1);
  return;
}


----------------------------------------
Function: websSetRequestPath

void websSetRequestPath(int param_1,int param_2,int param_3)

{
  undefined4 uVar1;
  int iVar2;
  
  if (param_2 != 0) {
    iVar2 = *(int *)(param_1 + 0xb0);
    uVar1 = bstrdup();
    *(undefined4 *)(param_1 + 0xb0) = uVar1;
    if (iVar2 != 0) {
      bfree(iVar2);
    }
  }
  if (param_3 != 0) {
    iVar2 = *(int *)(param_1 + 0xb4);
    uVar1 = bstrdup(param_3);
    *(undefined4 *)(param_1 + 0xb4) = uVar1;
    websSetVar(param_1,"PATH_INFO",uVar1);
    if (iVar2 != 0) {
      bfree(iVar2);
      return;
    }
  }
  return;
}


----------------------------------------
Function: websSetRequestSocketHandler

void websSetRequestSocketHandler(int param_1,undefined4 param_2,undefined4 param_3)

{
  *(undefined4 *)(param_1 + 0x124) = param_3;
  socketCreateHandler(*(undefined4 *)(param_1 + 0xf0),4,websSocketEvent,param_1);
  return;
}


----------------------------------------
Function: websSetRequestWritten

void websSetRequestWritten(int param_1,undefined4 param_2)

{
  *(undefined4 *)(param_1 + 0x120) = param_2;
  return;
}


----------------------------------------
Function: websValid

/* WARNING: Control flow encountered bad instruction data */

void websValid(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: websGetDateString

undefined4 websGetDateString(int param_1)

{
  char *__s;
  time_t local_18 [5];
  
  if (param_1 == 0) {
    time(local_18);
  }
  else {
    local_18[0] = *(time_t *)(param_1 + 8);
  }
  __s = ctime(local_18);
  if (__s != (char *)0x0) {
                    /* WARNING: Subroutine does not return */
    strlen(__s);
  }
  return 0;
}


----------------------------------------
Function: websResponse

void websResponse(int param_1,int param_2,char *param_3,int param_4)

{
  uint uVar1;
  undefined4 uVar2;
  int iVar3;
  undefined4 uVar4;
  char *pcVar5;
  
  uVar1 = *(uint *)(param_1 + 0x100) & 0xfffffffd;
  if ((*(uint *)(param_1 + 0x100) & 0x40000) == 0) {
    *(uint *)(param_1 + 0x100) = uVar1 | 0x40000;
    if (param_4 == 0) {
      uVar2 = websErrorMsg(param_2);
      pcVar5 = "HTTP/1.1 %d %s\r\n";
    }
    else {
      uVar2 = websErrorMsg(param_2);
      pcVar5 = "HTTP/1.0 %d %s\r\n";
    }
    websWrite(param_1,pcVar5,param_2,uVar2);
    websWrite(param_1,"Server: %s/%s\r\n","GoAhead-Webs","2.5.0");
    iVar3 = websGetDateString(0);
    if (iVar3 != 0) {
      websWrite(param_1,"Date: %s\r\n",iVar3);
      bfree(iVar3);
    }
    if (param_2 == 0x191) {
      if ((*(uint *)(param_1 + 0x100) & 0x20000) == 0) {
        websWrite(param_1,"WWW-Authenticate: Basic realm=\"%s\"\r\n");
      }
      else {
        uVar2 = websCalcNonce(param_1);
        uVar4 = websCalcOpaque(param_1);
        websWrite(param_1,
                  "WWW-Authenticate: Digest realm=\"%s\", domain=\"%s\",qop=\"%s\", nonce=\"%s\", opaque=\"%s\",algorithm=\"%s\", stale=\"%s\"\r\n"
                  ,websRealm,websHostUrl,&DAT_10023e10,uVar2,uVar4,&DAT_10023e18,"FALSE");
        bfree(uVar2);
        bfree(uVar4);
      }
    }
    if ((*(uint *)(param_1 + 0x100) & 2) != 0) {
      websWrite(param_1,"Connection: keep-alive\r\n");
    }
    websWrite(param_1,"Pragma: no-cache\r\nCache-Control: no-cache\r\n");
    websWrite(param_1,"Content-Type: text/html\r\n");
    if (param_4 != 0) {
      websWrite(param_1,"Location: %s\r\n",param_4);
    }
    websWrite(param_1,"\r\n");
  }
  else {
    *(uint *)(param_1 + 0x100) = uVar1;
  }
  if ((((*(uint *)(param_1 + 0x100) & 0x200) == 0) && (param_3 != (char *)0x0)) &&
     (*param_3 != '\0')) {
    websWrite(param_1,"%s\r\n",param_3);
  }
  if ((*(uint *)(param_1 + 0x100) & 8) != 0) {
    websWrite(param_1,"Set-Cookie: %s\r\n",*(undefined4 *)(param_1 + 0xd8));
  }
  websDone(param_1,param_2);
  return;
}


----------------------------------------
Function: websRedirect

/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */

void websRedirect(undefined4 param_1,char *param_2)

{
  char cVar1;
  char *pcVar2;
  undefined4 uVar3;
  char *local_18;
  undefined4 local_14 [3];
  
  _DAT_100b3f24 = _DAT_100b3f24 + 1;
  local_18 = (char *)0x0;
  local_14[0] = 0;
  pcVar2 = strstr(param_2,"http://");
  if (pcVar2 == (char *)0x0) {
    cVar1 = *param_2;
    uVar3 = websGetVar(param_1,"HTTP_HOST",websHostUrl);
    fmtAlloc(&local_18,0x1050,"http://%s/%s",uVar3,param_2 + (cVar1 == '/'));
    param_2 = local_18;
  }
  fmtAlloc(local_14,0x1050,
           "<html><head></head><body>\r\n\t\tThis document has moved to a new <a href=\"%s\">location</a>.\r\n\t\tPlease update your documents to reflect the new location.\r\n\t\t</body></html>\r\n"
           ,param_2);
  websResponse(param_1,0x12e,local_14[0],param_2);
  bfreeSafe(local_14[0]);
  bfreeSafe(local_18);
  return;
}


----------------------------------------
Function: websError

void websError(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
              undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  undefined4 uVar1;
  undefined4 uVar2;
  undefined local_58;
  undefined local_57;
  undefined *local_54;
  undefined *local_50;
  undefined4 local_4c;
  undefined4 local_48 [2];
  undefined auStack_40 [12];
  undefined4 local_34;
  undefined4 local_30;
  undefined4 local_2c;
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  
  websStats = websStats + 1;
  local_34 = param_4;
  local_30 = param_5;
  local_2c = param_6;
  local_28 = param_7;
  local_24 = param_8;
  local_20 = param_3;
  uVar1 = websSafeUrl(*(undefined4 *)(param_1 + 0xb8));
  bfreeSafe(*(undefined4 *)(param_1 + 0xb8));
  *(undefined4 *)(param_1 + 0xb8) = uVar1;
  local_48[0] = 0;
  local_58 = 3;
  local_57 = 0;
  local_54 = &stack0x00000008;
  local_50 = auStack_40;
  fmtValloc(local_48,1000,local_20,&local_58);
  uVar1 = websSafeUrl(local_48[0]);
  bfreeSafe(local_48[0]);
  local_4c = 0;
  local_48[0] = uVar1;
  uVar2 = websErrorMsg(param_2);
  fmtAlloc(&local_4c,1000,
           "<html><head><title>Document Error: %s</title></head>\r\n\t\t<body><h2>Access Error: %s</h2>\r\n\t\t<p>%s</p></body></html>\r\n"
           ,uVar2,uVar2,uVar1);
  websResponse(param_1,param_2,local_4c,0);
  bfreeSafe(local_4c);
  bfreeSafe(local_48[0]);
  return;
}


----------------------------------------
Function: websGetInput

/* WARNING: Control flow encountered bad instruction data */

uint websGetInput(int param_1,undefined4 *param_2,int *param_3)

{
  int iVar1;
  char *__s;
  undefined4 local_50 [3];
  
  *param_2 = 0;
  *param_3 = 0;
  local_50[0] = 0;
  if (*(int *)(param_1 + 0xfc) == 8) {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  iVar1 = socketGets(*(undefined4 *)(param_1 + 0xf0),local_50);
  if (iVar1 < 0) {
    iVar1 = socketEof(*(undefined4 *)(param_1 + 0xf0));
    if (iVar1 == 0) {
      return 0xffffffff;
    }
    if (*(int *)(param_1 + 0xfc) != 4) {
      websDone(param_1,0);
      return 0xffffffff;
    }
  }
  else {
    if (iVar1 != 0) {
      *param_2 = local_50[0];
      *param_3 = iVar1;
      return 1;
    }
    if (*(int *)(param_1 + 0xfc) != 2) {
      return 0xffffffff;
    }
    websSetVar(param_1,"HTTP_AUTHORIZATION",&DAT_10023fc4);
    __s = *(char **)(param_1 + 4);
    if ((__s != (char *)0x0) && (*__s != '\0')) {
      strchr(__s,10);
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    if ((*(uint *)(param_1 + 0x100) & 0x20) != 0) {
      if ((*(uint *)(param_1 + 0x100) & 0x400) == 0) {
        *(undefined4 *)(param_1 + 0xfc) = 4;
        return 0;
      }
      *(undefined4 *)(param_1 + 0xfc) = 8;
      return (*(uint *)(param_1 + 0x108) - 1 | *(uint *)(param_1 + 0x108)) >> 0x1f;
    }
  }
  websUrlHandlerRequest(param_1);
  return 0xffffffff;
}


----------------------------------------
Function: websSetTimeMark

void websSetTimeMark(int param_1)

{
  time_t tVar1;
  
  tVar1 = time((time_t *)0x0);
  *(time_t *)(param_1 + 0x28) = tVar1;
  return;
}


----------------------------------------
Function: websReadEvent

void websReadEvent(int param_1)

{
  int iVar1;
  char *pcVar2;
  char *pcVar3;
  undefined4 uVar4;
  char *pcVar5;
  uint uVar6;
  size_t sVar7;
  int __fd;
  undefined4 local_60;
  char *local_5c;
  char *local_58;
  undefined4 local_54;
  undefined4 local_50;
  undefined4 local_4c;
  undefined4 local_48;
  size_t local_44;
  char *local_40 [6];
  
  websSetTimeMark();
  local_40[0] = (char *)0x0;
  __fd = -1;
LAB_1001b050:
  while( true ) {
    while( true ) {
      if (local_40[0] != (char *)0x0) {
        bfree();
        local_40[0] = (char *)0x0;
      }
      do {
        iVar1 = websGetInput(param_1,local_40,&local_44);
      } while (iVar1 == 0);
      if (iVar1 < 0) goto LAB_1001b504;
      iVar1 = *(int *)(param_1 + 0xfc);
      if (iVar1 != 2) break;
      iVar1 = ringqLen(param_1);
      if (0 < iVar1) {
        ringqPutStr(param_1,&DAT_10022d7c);
      }
      ringqPutStr(param_1,local_40[0]);
    }
    if (iVar1 < 3) break;
    if (iVar1 == 4) {
      if ((*(uint *)(param_1 + 0x100) & 0x4000) == 0) {
        pcVar5 = *(char **)(param_1 + 0xc4);
        if (((pcVar5 != (char *)0x0) && (*pcVar5 != '\0')) &&
           ((*(uint *)(param_1 + 0x100) & 0x2000) == 0)) {
                    /* WARNING: Subroutine does not return */
          strlen(pcVar5);
        }
        uVar4 = bstrdup(local_40[0]);
        *(undefined4 *)(param_1 + 0xc4) = uVar4;
      }
      else {
        if (__fd == -1) {
          __fd = open(*(char **)(param_1 + 0x114),0x41,0x1b6);
        }
        write(__fd,local_40[0],local_44);
        write(__fd,&DAT_10022d7c,1);
      }
      *(uint *)(param_1 + 0x100) = *(uint *)(param_1 + 0x100) | 0x2000;
      goto LAB_1001b504;
    }
    if (iVar1 != 8) goto LAB_1001b4ec;
    if ((*(uint *)(param_1 + 0x100) & 0x4000) == 0) {
      if (*(int *)(param_1 + 0xec) == 0) {
        uVar4 = bmemdup(local_40[0]);
        *(undefined4 *)(param_1 + 0xec) = uVar4;
        sVar7 = local_44;
      }
      else {
        iVar1 = brealloc(*(int *)(param_1 + 0xec),*(int *)(param_1 + 0x110) + local_44 + 1);
        *(int *)(param_1 + 0xec) = iVar1;
        if (iVar1 == 0) goto LAB_1001b3bc;
        memcpy((void *)(iVar1 + *(int *)(param_1 + 0x110)),local_40[0],local_44);
        sVar7 = *(int *)(param_1 + 0x110) + local_44;
      }
      *(size_t *)(param_1 + 0x110) = sVar7;
    }
    else {
      if (__fd == -1) {
        __fd = open(*(char **)(param_1 + 0x114),0x41,0x1b6);
      }
      write(__fd,local_40[0],local_44);
    }
LAB_1001b3bc:
    *(uint *)(param_1 + 0x100) = *(uint *)(param_1 + 0x100) | 0x2000;
    iVar1 = *(int *)(param_1 + 0x108) - local_44;
    *(int *)(param_1 + 0x108) = iVar1;
    if (iVar1 < 1) {
      if (__fd != -1) {
        close(__fd);
      }
      websUrlHandlerRequest(param_1);
      goto LAB_1001b514;
    }
    if ((int)local_44 < 1) {
LAB_1001b504:
      if (__fd != -1) {
        close(__fd);
      }
LAB_1001b514:
      if (local_40[0] != (char *)0x0) {
        bfree();
      }
      return;
    }
  }
  if (iVar1 == 1) {
    pcVar5 = strtok(local_40[0]," \t");
    if ((pcVar5 != (char *)0x0) && (*pcVar5 != '\0')) {
      iVar1 = strcmp(pcVar5,"GET");
      if (iVar1 != 0) {
        iVar1 = strcmp(pcVar5,"POST");
        if (iVar1 == 0) {
          uVar6 = *(uint *)(param_1 + 0x100) | 0x20;
        }
        else {
          iVar1 = strcmp(pcVar5,"HEAD");
          if (iVar1 != 0) {
            uVar4 = 400;
            pcVar5 = "Bad request type";
            goto LAB_1001b4fc;
          }
          uVar6 = *(uint *)(param_1 + 0x100) | 0x200;
        }
        *(uint *)(param_1 + 0x100) = uVar6;
      }
      websSetVar(param_1,"REQUEST_METHOD",pcVar5);
      pcVar5 = strtok((char *)0x0," \t\n");
      if ((pcVar5 != (char *)0x0) && (*pcVar5 != '\0')) {
        pcVar2 = strtok((char *)0x0," \t\n");
        local_5c = (char *)0x0;
        local_4c = 0;
        local_50 = 0;
        local_48 = 0;
        local_58 = (char *)0x0;
        local_54 = 0;
        iVar1 = websUrlParse(pcVar5,&local_60,&local_4c,&local_54,&local_58,&local_50,&local_48,0,
                             &local_5c);
        if (iVar1 < 0) {
          uVar4 = 400;
          pcVar5 = "Bad URL format";
          goto LAB_1001b4fc;
        }
        uVar4 = bstrdup(pcVar5);
        *(undefined4 *)(param_1 + 0xb8) = uVar4;
        pcVar3 = strstr(pcVar5,"cgi-bin");
        if ((pcVar3 != (char *)0x0) &&
           (uVar6 = *(uint *)(param_1 + 0x100), *(uint *)(param_1 + 0x100) = uVar6 | 0x4000,
           (uVar6 & 0x20) != 0)) {
          uVar4 = websGetCgiCommName();
          *(undefined4 *)(param_1 + 0x114) = uVar4;
        }
        uVar4 = bstrdup(local_50);
        *(undefined4 *)(param_1 + 0xc4) = uVar4;
        uVar4 = bstrdup(local_4c);
        *(undefined4 *)(param_1 + 0xbc) = uVar4;
        uVar4 = bstrdup(local_54);
        *(undefined4 *)(param_1 + 0xb4) = uVar4;
        uVar4 = bstrdup(local_48);
        *(undefined4 *)(param_1 + 0xe4) = uVar4;
        uVar4 = bstrdup(pcVar2);
        *(undefined4 *)(param_1 + 0xe8) = uVar4;
        *(undefined4 *)(param_1 + 0xec) = 0;
        *(undefined4 *)(param_1 + 0x110) = 0;
        iVar1 = socketGetPort(*(undefined4 *)(param_1 + 0xf4));
        if (iVar1 < 0) {
          iVar1 = atoi(local_58);
        }
        *(int *)(param_1 + 0xf8) = iVar1;
        iVar1 = strcmp(local_5c,".asp");
        if (iVar1 == 0) {
          *(uint *)(param_1 + 0x100) = *(uint *)(param_1 + 0x100) | 0x100;
        }
        bfree(local_60);
        websUrlType(pcVar5,param_1 + 0x70,0x40);
        ringqFlush(param_1);
        *(undefined4 *)(param_1 + 0xfc) = 2;
        goto LAB_1001b050;
      }
    }
    uVar4 = 400;
    pcVar5 = "Bad HTTP request";
  }
  else {
LAB_1001b4ec:
    uVar4 = 0x194;
    pcVar5 = "Bad state";
  }
LAB_1001b4fc:
  websError(param_1,uVar4,pcVar5);
  goto LAB_1001b504;
}


----------------------------------------
Function: websSocketEvent

void websSocketEvent(undefined4 param_1,uint param_2,int param_3)

{
  int iVar1;
  
  iVar1 = websValid(param_3);
  if (iVar1 != 0) {
    if ((param_2 & 2) != 0) {
      websReadEvent(param_3);
    }
    if ((((param_2 & 4) != 0) && (iVar1 = websValid(param_3), iVar1 != 0)) &&
       (*(code **)(param_3 + 0x124) != (code *)0x0)) {
                    /* WARNING: Could not recover jumptable at 0x1001b5ac. Too many branches */
                    /* WARNING: Treating indirect jump as call */
      (**(code **)(param_3 + 0x124))(param_3);
      return;
    }
  }
  return;
}


----------------------------------------
Function: websSetRealm

void websSetRealm(char *param_1)

{
  strncpy(websRealm,param_1,0x40);
  return;
}


----------------------------------------
Function: websGetRealm

char * websGetRealm(void)

{
  return websRealm;
}


----------------------------------------
Function: scriptEval

int scriptEval(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  int iVar1;
  
  if (param_1 == 2) {
    iVar1 = ejEval(param_4);
    return -(uint)(iVar1 == 0);
  }
  return -1;
}


----------------------------------------
Function: strcmpci

int strcmpci(int param_1,int param_2)

{
  __int32_t **pp_Var1;
  int iVar2;
  byte *pbVar3;
  byte *pbVar4;
  
  if (((param_1 == 0) || (param_2 == 0)) || (param_1 == param_2)) {
    iVar2 = 0;
  }
  else {
    pp_Var1 = __ctype_tolower_loc();
    pbVar3 = (byte *)(param_1 + -1);
    pbVar4 = (byte *)(param_2 + -1);
    do {
      pbVar3 = pbVar3 + 1;
      pbVar4 = pbVar4 + 1;
      iVar2 = (*pp_Var1)[*pbVar3] - (*pp_Var1)[*pbVar4];
      if (*pbVar3 == 0) {
        return iVar2;
      }
    } while (iVar2 == 0);
  }
  return iVar2;
}


----------------------------------------
Function: TimerProc

void TimerProc(int param_1)

{
  code **ppcVar1;
  
  ppcVar1 = *(code ***)(sched + param_1 * 4);
                    /* WARNING: Could not recover jumptable at 0x1001b6cc. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  (**ppcVar1)(ppcVar1[1],ppcVar1[3]);
  return;
}


----------------------------------------
Function: emfSchedCallback

int emfSchedCallback(int param_1,undefined4 param_2,undefined4 param_3)

{
  int iVar1;
  time_t tVar2;
  undefined4 *puVar3;
  
  iVar1 = hAllocEntry(&sched,&schedMax,0x10);
  if (iVar1 < 0) {
    iVar1 = -1;
  }
  else {
    puVar3 = *(undefined4 **)(sched + iVar1 * 4);
    *puVar3 = param_2;
    puVar3[1] = param_3;
    puVar3[3] = iVar1;
    tVar2 = time((time_t *)0x0);
    puVar3[2] = (param_1 + 500) / 1000 + tVar2;
  }
  return iVar1;
}


----------------------------------------
Function: emfReschedCallback

void emfReschedCallback(int param_1,int param_2)

{
  time_t tVar1;
  int iVar2;
  
  if (sched == 0) {
    return;
  }
  if (param_1 == -1) {
    return;
  }
  if (schedMax <= param_1) {
    return;
  }
  iVar2 = *(int *)(sched + param_1 * 4);
  if (iVar2 != 0) {
    tVar1 = time((time_t *)0x0);
    *(int *)(iVar2 + 8) = (param_2 + 500) / 1000 + tVar1;
  }
  return;
}


----------------------------------------
Function: emfUnschedCallback

void emfUnschedCallback(int param_1)

{
  if (((sched != 0) && (param_1 != -1)) && (param_1 < schedMax)) {
    if (*(int *)(sched + param_1 * 4) != 0) {
      bfree();
      schedMax = hFree(&sched,param_1);
    }
  }
  return;
}


----------------------------------------
Function: emfSchedProcess

/* WARNING: Control flow encountered bad instruction data */

void emfSchedProcess(void)

{
  int iVar1;
  time_t tVar2;
  int iVar3;
  int iVar4;
  
  if (0 < schedMax) {
    if (schedMax <= next_5477) {
      next_5477 = 0;
    }
    iVar1 = next_5477;
    iVar4 = next_5477 + 1;
    iVar3 = *(int *)(sched + next_5477 * 4);
    if ((iVar3 == 0) || (iVar3 = *(int *)(iVar3 + 8), tVar2 = time((time_t *)0x0), tVar2 < iVar3)) {
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    TimerProc(iVar1);
    next_5477 = iVar4;
  }
  return;
}


----------------------------------------
Function: websAspWrite

undefined4 websAspWrite(undefined4 param_1,undefined4 param_2,int param_3,char **param_4)

{
  if (0 < param_3) {
                    /* WARNING: Subroutine does not return */
    strlen(*param_4);
  }
  return 0;
}


----------------------------------------
Function: skipWhite

byte * skipWhite(byte *param_1)

{
  byte bVar1;
  ushort **ppuVar2;
  
  if (param_1 != (byte *)0x0) {
    for (; bVar1 = *param_1, bVar1 != 0; param_1 = param_1 + 1) {
      ppuVar2 = __ctype_b_loc();
      if (((*ppuVar2)[bVar1] & 0x20) == 0) {
        return param_1;
      }
    }
  }
  return param_1;
}


----------------------------------------
Function: strtokcmp

void strtokcmp(undefined4 param_1,char *param_2)

{
  skipWhite();
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: websAspClose

void websAspClose(void)

{
  aspOpenCount = aspOpenCount + -1;
  if (0 < aspOpenCount) {
    return;
  }
  if (websAspFunctions != -1) {
    symClose();
    websAspFunctions = -1;
  }
  return;
}


----------------------------------------
Function: websAspRequest

/* WARNING: Control flow encountered bad instruction data */

int websAspRequest(int param_1,undefined4 param_2)

{
  undefined4 uVar1;
  int iVar2;
  char *pcVar3;
  char *pcVar4;
  byte *pbVar5;
  int iVar6;
  byte *pbVar7;
  byte *pbVar8;
  uint uVar9;
  char *pcVar10;
  int iVar11;
  int iVar12;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  int local_58 [3];
  uint local_4c [4];
  uint local_3c;
  
  local_3c = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
             (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
             (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4
             | (uint)(in_cr7 & 0xf);
  *(uint *)(param_1 + 0x100) = *(uint *)(param_1 + 0x100) | 0x40000;
  uVar1 = websGetRequestPath();
  iVar2 = ejOpenEngine(*(undefined4 *)(param_1 + 0x20),websAspFunctions);
  if (-1 < iVar2) {
    ejSetUserHandle(iVar2,param_1);
    iVar11 = websPageStat(param_1,param_2,uVar1,local_58);
    if (-1 < iVar11) {
      iVar11 = balloc(local_58[0] + 1);
      if (iVar11 == 0) {
        websError(param_1,200,"Can\'t get memory");
      }
      else {
        *(undefined *)(iVar11 + local_58[0]) = 0;
        iVar12 = websPageReadData(param_1,iVar11,local_58[0]);
        if (iVar12 == local_58[0]) {
          websPageClose(param_1);
          pcVar10 = (char *)ballocAscToUni(iVar11,iVar12);
          pcVar4 = pcVar10;
          if (pcVar10 == (char *)0x0) {
            websError(param_1,200,"Can\'t get memory");
LAB_1001bc94:
            iVar12 = -1;
          }
          else {
            do {
              do {
                if ((*pcVar4 == '\0') || (pcVar3 = strstr(pcVar4,"<%"), pcVar3 == (char *)0x0)) {
                  iVar12 = 0;
                  goto LAB_1001be48;
                }
                websWriteBlock(param_1,pcVar4,(int)pcVar3 - (int)pcVar4);
                pcVar3 = (char *)skipWhite(pcVar3 + 2);
                iVar12 = strtokcmp(pcVar3,"language");
                if (iVar12 != 0) {
                  strtokcmp(iVar12,"=javascript");
                    /* WARNING: Bad instruction - Truncating control flow here */
                  halt_baddata();
                }
                pcVar4 = strstr(pcVar3,"%>");
                if (pcVar4 == (char *)0x0) {
                  websError(param_1,200,"Unterminated script in %s: \n",param_2);
                  goto LAB_1001bc94;
                }
                *pcVar4 = '\0';
                pcVar4 = pcVar4 + 2;
                pbVar5 = (byte *)skipWhite(pcVar3);
                pbVar7 = pbVar5;
                while (pbVar8 = pbVar7, uVar9 = (uint)*pbVar8, uVar9 != 0) {
                  pbVar7 = pbVar8 + 1;
                  if ((uVar9 == 0x5c) && ((pbVar8[1] == 0xd || (pbVar8[1] == 10)))) {
                    *pbVar8 = 0x20;
                    for (; (*pbVar7 == 0xd || (*pbVar7 == 10)); pbVar7 = pbVar7 + 1) {
                      *pbVar7 = 0x20;
                    }
                  }
                }
              } while (*pbVar5 == 0);
              local_4c[0] = uVar9;
              iVar12 = scriptEval(2,pbVar5,local_4c,iVar2);
              if (iVar12 < 0) {
                iVar6 = websValid(param_1);
                if (iVar6 == 0) goto LAB_1001be7c;
                if (local_4c[0] == 0) {
                  websWrite(param_1,"<h2><b>ASP Error</b></h2>\n%s\n",pbVar5);
                }
                else {
                  websWrite(param_1,"<h2><b>ASP Error: %s</b></h2>\n");
                  websWrite(param_1,"<pre>%s</pre>",pbVar5);
                  bfree(local_4c[0]);
                }
                websWrite(param_1,"</body></html>\n");
                goto LAB_1001be78;
              }
            } while (iVar12 == 0);
            if (pcVar4 != (char *)0x0) {
LAB_1001be48:
              if ((*pcVar4 != '\0') && (iVar12 == 0)) {
                    /* WARNING: Subroutine does not return */
                strlen(pcVar4);
              }
            }
LAB_1001be78:
            iVar12 = 0;
          }
          goto LAB_1001be7c;
        }
        websError(param_1,200,"Cant read %s",param_2);
      }
      iVar12 = -1;
      pcVar10 = (char *)0x0;
      goto LAB_1001be7c;
    }
    websError(param_1,0x194,"Can\'t stat %s",param_2);
  }
  else {
    websError(param_1,200,"Can\'t create Ejscript engine");
  }
  iVar12 = -1;
  pcVar10 = (char *)0x0;
  iVar11 = 0;
LAB_1001be7c:
  iVar6 = websValid(param_1);
  if ((iVar6 != 0) && (websPageClose(param_1), -1 < iVar2)) {
    ejCloseEngine(iVar2);
  }
  bfreeSafe(pcVar10);
  bfreeSafe(iVar11);
  return iVar12;
}


----------------------------------------
Function: websAspDefine

void websAspDefine(undefined4 param_1,undefined4 param_2)

{
  ejSetGlobalFunctionDirect(websAspFunctions,param_1,param_2);
  return;
}


----------------------------------------
Function: websAspOpen

undefined4 websAspOpen(void)

{
  aspOpenCount = aspOpenCount + 1;
  if (aspOpenCount == 1) {
    websAspFunctions = symOpen(0x80);
    websAspDefine("write",websAspWrite);
    return 0;
  }
  return 0;
}


----------------------------------------
Function: websDecode64

/* WARNING: Control flow encountered bad instruction data */

undefined4 websDecode64(char *param_1,char *param_2,int param_3)

{
  undefined4 uVar1;
  int iVar2;
  char *pcVar3;
  int iVar4;
  
  *param_1 = '\0';
  if ((*param_2 == '\0') || (*param_2 == '=')) {
    uVar1 = 0;
  }
  else {
    iVar4 = 4;
    pcVar3 = param_2;
    do {
      iVar2 = (int)pcVar3 - (int)param_2;
      if ((*pcVar3 == '\0') || (*pcVar3 == '=')) goto LAB_1001bfd4;
      pcVar3 = pcVar3 + 1;
      iVar4 = iVar4 + -1;
    } while (iVar4 != 0);
    iVar2 = 4;
LAB_1001bfd4:
    if (param_1 + iVar2 + -1 < param_1 + param_3) {
                    /* WARNING: Bad instruction - Truncating control flow here */
      halt_baddata();
    }
    strcpy(param_1,"String too big");
    uVar1 = 0xffffffff;
  }
  return uVar1;
}


----------------------------------------
Function: clearString

void clearString(int *param_1)

{
  if (*param_1 != 0) {
    bfree();
  }
  *param_1 = 0;
  return;
}


----------------------------------------
Function: freeFunc

void freeFunc(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar2 = param_1[2];
  iVar3 = iVar2 << 2;
  while( true ) {
    iVar2 = iVar2 + -1;
    iVar3 = iVar3 + -4;
    if (iVar2 < 0) break;
    bfree(*(undefined4 *)(param_1[1] + iVar3));
    iVar1 = hFree(param_1 + 1,iVar2);
    param_1[2] = iVar1;
  }
  if (*param_1 != 0) {
    bfree();
    *param_1 = 0;
  }
  return;
}


----------------------------------------
Function: setstring

void setstring(int *param_1,undefined4 param_2)

{
  int iVar1;
  
  if (*param_1 != 0) {
    bfree();
  }
  iVar1 = bstrdup(param_2);
  *param_1 = iVar1;
  return;
}


----------------------------------------
Function: ejRemoveNewlines

void ejRemoveNewlines(int param_1,undefined4 param_2)

{
  int iVar1;
  
  do {
    iVar1 = ejLexGetToken(param_1,param_2);
  } while (iVar1 == 0xc);
  ejLexPutbackToken(param_1,iVar1,*(undefined4 *)(param_1 + 0x1c));
  return;
}


----------------------------------------
Function: appendString

void appendString(int *param_1,char *param_2)

{
  int iVar1;
  
  if (*param_1 != 0) {
                    /* WARNING: Subroutine does not return */
    strlen(param_2);
  }
  iVar1 = bstrdup();
  *param_1 = iVar1;
  return;
}


----------------------------------------
Function: ejError

void ejError(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
            undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  int iVar1;
  undefined local_48;
  undefined local_47;
  undefined *local_44;
  undefined *local_40;
  undefined4 local_3c;
  int local_38 [2];
  undefined auStack_30 [8];
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined4 local_18;
  undefined4 local_14;
  
  local_48 = 2;
  local_47 = 0;
  local_44 = &stack0x00000008;
  local_40 = auStack_30;
  iVar1 = *param_1;
  local_3c = 0;
  local_28 = param_3;
  local_24 = param_4;
  local_20 = param_5;
  local_1c = param_6;
  local_18 = param_7;
  local_14 = param_8;
  fmtValloc(&local_3c,0x1000,param_2,&local_48);
  if (iVar1 != 0) {
    fmtAlloc(local_38,0x1000,"%s\n At line %d, line => \n\n%s\n",local_3c,
             *(undefined4 *)(iVar1 + 0x48),*(undefined4 *)(iVar1 + 0x40));
    bfreeSafe(param_1[6]);
    param_1[6] = local_38[0];
  }
  bfreeSafe(local_3c);
  return;
}


----------------------------------------
Function: ejPtr

int ejPtr(int param_1)

{
  int iVar1;
  
  if (((-1 < param_1) && (param_1 < ejMax)) &&
     (iVar1 = *(int *)(ejHandles + param_1 * 4), iVar1 != 0)) {
    return iVar1;
  }
  ejError(0,"Bad handle %d");
  return 0;
}


----------------------------------------
Function: ejCloseEngine

void ejCloseEngine(void)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  int iVar4;
  
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    bfreeSafe(*(undefined4 *)(iVar1 + 0x18));
    *(undefined4 *)(iVar1 + 0x18) = 0;
    bfreeSafe(*(undefined4 *)(iVar1 + 0x14));
    *(undefined4 *)(iVar1 + 0x14) = 0;
    ejLexClose(iVar1);
    iVar4 = *(int *)(iVar1 + 0xc) + -1;
    iVar3 = iVar4 * 4;
    for (; -1 < iVar4; iVar4 = iVar4 + -1) {
      if ((*(uint *)(iVar1 + 0x28) & 2) != 0) {
        symClose(*(int *)(*(int *)(iVar1 + 8) + iVar3) + -1);
      }
      uVar2 = hFree(iVar1 + 8,iVar4);
      *(undefined4 *)(iVar1 + 0xc) = uVar2;
      iVar3 = iVar3 + -4;
    }
    if ((*(uint *)(iVar1 + 0x28) & 4) != 0) {
      symClose(*(undefined4 *)(iVar1 + 4));
    }
    ejMax = hFree(&ejHandles,*(undefined4 *)(iVar1 + 0x24));
    bfree(iVar1);
    return;
  }
  return;
}


----------------------------------------
Function: ejOpenBlock

int ejOpenBlock(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = ejPtr();
  if ((iVar1 == 0) || (iVar2 = hAlloc(iVar1 + 8), iVar2 < 0)) {
    iVar2 = -1;
  }
  else {
    if (*(int *)(iVar1 + 0xc) <= iVar2) {
      *(int *)(iVar1 + 0xc) = iVar2 + 1;
    }
    iVar3 = *(int *)(iVar1 + 8);
    iVar1 = symOpen(0x40);
    *(int *)(iVar3 + iVar2 * 4) = iVar1 + 1;
  }
  return iVar2;
}


----------------------------------------
Function: ejCloseBlock

undefined4 ejCloseBlock(undefined4 param_1,int param_2)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    symClose(*(int *)(*(int *)(iVar1 + 8) + param_2 * 4) + -1);
    uVar2 = hFree((int *)(iVar1 + 8),param_2);
    *(undefined4 *)(iVar1 + 0xc) = uVar2;
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: evalExpr

/* WARNING: Control flow encountered bad instruction data */

undefined4 evalExpr(int param_1,char *param_2,undefined4 param_3,char *param_4)

{
  byte bVar1;
  ushort **ppuVar2;
  int iVar3;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  byte *pbVar7;
  undefined auStack_28 [16];
  
  pbVar7 = (byte *)(param_2 + -1);
  do {
    pbVar7 = pbVar7 + 1;
    bVar1 = *pbVar7;
    if (bVar1 == 0) {
      pbVar7 = (byte *)(param_4 + -1);
      goto LAB_1001c570;
    }
    ppuVar2 = __ctype_b_loc();
  } while (((*ppuVar2)[bVar1] & 8) != 0);
  goto LAB_1001c5bc;
  while (ppuVar2 = __ctype_b_loc(), ((*ppuVar2)[bVar1] & 8) != 0) {
LAB_1001c570:
    pbVar7 = pbVar7 + 1;
    bVar1 = *pbVar7;
    if (bVar1 == 0) {
      uVar4 = atoi(param_2);
      uVar5 = atoi(param_4);
      switch(param_3) {
      case 1:
        uVar6 = (uint)((int)uVar4 < (int)uVar5);
        break;
      case 2:
                    /* WARNING: Bad instruction - Truncating control flow here */
        halt_baddata();
      case 3:
        uVar6 = (uint)((int)uVar5 < (int)uVar4);
        break;
      case 4:
                    /* WARNING: Bad instruction - Truncating control flow here */
        halt_baddata();
      case 5:
        uVar5 = uVar4 ^ uVar5;
        goto LAB_1001c668;
      case 6:
        uVar6 = uVar4 == uVar5 ^ 1;
        break;
      case 7:
        uVar6 = uVar4 + uVar5;
        break;
      case 8:
        uVar6 = uVar4 - uVar5;
        break;
      case 9:
        uVar6 = 0;
        if (uVar5 != 0) {
          uVar6 = (int)uVar4 / (int)uVar5;
        }
        break;
      case 10:
        uVar6 = 0;
        if (uVar5 != 0) {
          uVar6 = uVar4 - ((int)uVar4 / (int)uVar5) * uVar5;
        }
        break;
      case 0xb:
        uVar6 = uVar4 << (uVar5 & 0x3f);
        break;
      case 0xc:
        uVar6 = (int)uVar4 >> (uVar5 & 0x3f);
        break;
      case 0xd:
        uVar6 = uVar4 * uVar5;
        break;
      default:
        ejError(param_1,"Bad operator %d",param_3);
        return 0xffffffff;
      case 0xf:
        uVar6 = uVar4 + 1;
        break;
      case 0x10:
        uVar6 = uVar4 - 1;
        break;
      case 0x11:
        goto LAB_1001c668;
      }
      goto LAB_1001c690;
    }
  }
LAB_1001c5bc:
  switch(param_3) {
  case 1:
    uVar6 = strcmp(param_2,param_4);
    break;
  case 2:
    uVar6 = strcmp(param_2,param_4);
    uVar6 = uVar6 - 1 | uVar6;
    break;
  case 3:
    iVar3 = strcmp(param_2,param_4);
    uVar6 = (iVar3 >> 0x1f) - iVar3;
    break;
  case 4:
    uVar6 = strcmp(param_2,param_4);
    uVar6 = ~uVar6;
    break;
  case 5:
    uVar5 = strcmp(param_2,param_4);
LAB_1001c668:
    uVar6 = (uint)(uVar5 == 0);
    goto LAB_1001c690;
  case 6:
    iVar3 = strcmp(param_2,param_4);
    uVar6 = iVar3 == 0 ^ 1;
    goto LAB_1001c690;
  case 7:
    param_1 = param_1 + 0x14;
    clearString(param_1);
    appendString(param_1,param_2);
    appendString(param_1,param_4);
    return 0;
  default:
    ejError(param_1,"Bad operator");
    return 0xffffffff;
  }
  uVar6 = uVar6 >> 0x1f;
LAB_1001c690:
  stritoa(uVar6,auStack_28,0x10);
  setstring(param_1 + 0x14,auStack_28);
  return 0;
}


----------------------------------------
Function: evalCond

undefined4 evalCond(int param_1,byte *param_2,int param_3,byte *param_4)

{
  ushort **ppuVar1;
  uint uVar2;
  uint uVar3;
  byte *pbVar4;
  uint uVar5;
  undefined auStack_28 [24];
  
  ppuVar1 = __ctype_b_loc();
  pbVar4 = param_2;
  if ((((*ppuVar1)[*param_2] & 8) == 0) || (pbVar4 = param_4, ((*ppuVar1)[*param_4] & 8) == 0)) {
    ejError(param_1,"Conditional must be numeric",pbVar4);
    uVar5 = 0;
  }
  else {
    uVar2 = atoi((char *)param_2);
    uVar3 = atoi((char *)param_4);
    if (param_3 == 1) {
      uVar5 = 0;
      if (uVar2 != 0) {
        uVar5 = uVar3 == 0 ^ 1;
      }
    }
    else {
      if (param_3 != 2) {
        ejError(param_1,"Bad operator %d",param_3);
        return 0xffffffff;
      }
      uVar5 = ((uint)(byte)(((uVar3 | uVar2) == 0) << 1) << 0x1c) >> 0x1d ^ 1;
    }
  }
  stritoa(uVar5,auStack_28,0x10);
  setstring(param_1 + 0x14,auStack_28);
  return 0;
}


----------------------------------------
Function: ejSetGlobalFunctionDirect

/* WARNING: Control flow encountered bad instruction data */

void ejSetGlobalFunctionDirect(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  undefined in_vs33 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs44 [16];
  undefined auStack_38 [56];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs38,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  valueInteger(auStack_38,param_3);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ejSetGlobalFunction

undefined4 ejSetGlobalFunction(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    uVar2 = ejSetGlobalFunctionDirect(*(undefined4 *)(iVar1 + 4),param_2,param_3);
    return uVar2;
  }
  return 0xffffffff;
}


----------------------------------------
Function: ejRemoveGlobalFunction

undefined4 ejRemoveGlobalFunction(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    uVar2 = symDelete(*(undefined4 *)(iVar1 + 4),param_2);
    return uVar2;
  }
  return 0xffffffff;
}


----------------------------------------
Function: ejGetGlobalFunction

undefined4 ejGetGlobalFunction(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if ((iVar1 == 0) || (iVar1 = symLookup(*(undefined4 *)(iVar1 + 4),param_2), iVar1 == 0)) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0x12);
  }
  return uVar2;
}


----------------------------------------
Function: ejArgs

int ejArgs(undefined4 param_1,int param_2,int param_3,undefined4 param_4,undefined4 param_5,
          undefined4 param_6,undefined4 param_7,undefined4 param_8)

{
  char *pcVar1;
  int *piVar2;
  uint uVar3;
  int ***pppiVar4;
  int **ppiVar5;
  char *pcVar6;
  int iVar7;
  byte local_48;
  int ***local_44;
  int ***local_40 [4];
  undefined4 local_30;
  undefined4 local_2c;
  undefined4 local_28;
  undefined4 local_24;
  
  local_28 = param_7;
  local_48 = 3;
  local_44 = (int ***)&stack0x00000008;
  local_40[3] = (int ***)param_4;
  local_30 = param_5;
  local_2c = param_6;
  local_24 = param_8;
  local_40[0] = (int ***)local_40;
  if (param_2 == 0) {
    iVar7 = 0;
  }
  else {
    iVar7 = 0;
    pcVar1 = (char *)(param_3 + -1);
    while (pcVar6 = pcVar1, pcVar6 != (char *)0xffffffff) {
      pcVar1 = pcVar6 + 1;
      if (*pcVar1 == '\0') {
        return iVar7;
      }
      piVar2 = *(int **)(param_2 + iVar7 * 4);
      if (piVar2 == (int *)0x0) {
        return iVar7;
      }
      if (*pcVar1 == '%') {
        if (pcVar6[2] == 'd') {
          uVar3 = (uint)local_48;
          if (uVar3 < 8) {
            local_48 = local_48 + 1;
            pppiVar4 = (int ***)(local_40 + uVar3);
          }
          else {
            pppiVar4 = local_44;
            local_44 = local_44 + 1;
          }
          ppiVar5 = *pppiVar4;
          piVar2 = (int *)atoi((char *)piVar2);
          *ppiVar5 = piVar2;
        }
        else if (pcVar6[2] == 's') {
          uVar3 = (uint)local_48;
          if (uVar3 < 8) {
            local_48 = local_48 + 1;
            pppiVar4 = (int ***)(local_40 + uVar3);
          }
          else {
            pppiVar4 = local_44;
            local_44 = local_44 + 1;
          }
          **pppiVar4 = piVar2;
        }
        iVar7 = iVar7 + 1;
      }
    }
  }
  return iVar7;
}


----------------------------------------
Function: ejSetUserHandle

void ejSetUserHandle(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    *(undefined4 *)(iVar1 + 0x2c) = param_2;
  }
  return;
}


----------------------------------------
Function: ejGetUserHandle

undefined4 ejGetUserHandle(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0x2c);
  }
  return uVar2;
}


----------------------------------------
Function: ejGetLineNumber

undefined4 ejGetLineNumber(void)

{
  int *piVar1;
  undefined4 uVar2;
  
  piVar1 = (int *)ejPtr();
  if (piVar1 == (int *)0x0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = *(undefined4 *)(*piVar1 + 0x48);
  }
  return uVar2;
}


----------------------------------------
Function: ejSetResult

void ejSetResult(undefined4 param_1,undefined4 param_2)

{
  int iVar1;
  
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    setstring(iVar1 + 0x14,param_2);
    return;
  }
  return;
}


----------------------------------------
Function: ejGetResult

undefined4 ejGetResult(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 0x14);
  }
  return uVar2;
}


----------------------------------------
Function: ejSetVar

/* WARNING: Control flow encountered bad instruction data */

void ejSetVar(undefined4 param_1,undefined4 param_2,int param_3)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs44 [16];
  undefined auStack_48 [72];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    iVar1 = 0;
    if (param_3 != 0) {
      iVar1 = param_3;
    }
                    /* WARNING: Subroutine does not return */
    valueString(auStack_48,iVar1,param_3 != 0);
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ejSetLocalVar

/* WARNING: Control flow encountered bad instruction data */

void ejSetLocalVar(undefined4 param_1,undefined4 param_2,int param_3)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs44 [16];
  undefined auStack_48 [72];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    iVar1 = 0;
    if (param_3 != 0) {
      iVar1 = param_3;
    }
                    /* WARNING: Subroutine does not return */
    valueString(auStack_48,iVar1,param_3 != 0);
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ejSetGlobalVar

/* WARNING: Control flow encountered bad instruction data */

void ejSetGlobalVar(undefined4 param_1,undefined4 param_2,int param_3)

{
  int iVar1;
  undefined in_vs33 [16];
  undefined in_vs39 [16];
  undefined in_vs40 [16];
  undefined in_vs41 [16];
  undefined in_vs44 [16];
  undefined auStack_48 [72];
  
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs40,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs33,in_vs41,in_vs44);
  iVar1 = ejPtr();
  if (iVar1 != 0) {
    iVar1 = 0;
    if (param_3 != 0) {
      iVar1 = param_3;
    }
                    /* WARNING: Subroutine does not return */
    valueString(auStack_48,iVar1,param_3 != 0);
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ejOpenEngine

undefined4 ejOpenEngine(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  undefined4 uVar3;
  int iVar4;
  int iVar5;
  
  iVar1 = hAllocEntry(&ejHandles,&ejMax,0x30);
  if (-1 < iVar1) {
    iVar5 = *(int *)(ejHandles + iVar1 * 4);
    *(int *)(iVar5 + 0x24) = iVar1;
    iVar1 = hAlloc(iVar5 + 8);
    if (-1 < iVar1) {
      if (*(int *)(iVar5 + 0xc) <= iVar1) {
        *(int *)(iVar5 + 0xc) = iVar1 + 1;
      }
      iVar4 = *(int *)(iVar5 + 8);
      if (param_1 == -1) {
        iVar2 = symOpen(0x40);
        *(int *)(iVar4 + iVar1 * 4) = iVar2 + 1;
        *(uint *)(iVar5 + 0x28) = *(uint *)(iVar5 + 0x28) | 2;
      }
      else {
        *(int *)(iVar4 + iVar1 * 4) = param_1 + 1;
      }
      if (param_2 == -1) {
        uVar3 = symOpen(0x40);
        *(undefined4 *)(iVar5 + 4) = uVar3;
        *(uint *)(iVar5 + 0x28) = *(uint *)(iVar5 + 0x28) | 4;
      }
      else {
        *(int *)(iVar5 + 4) = param_2;
      }
      ejLexOpen(iVar5);
      ejSetGlobalVar(*(undefined4 *)(iVar5 + 0x24),&DAT_10024580,0);
      return *(undefined4 *)(iVar5 + 0x24);
    }
    ejMax = hFree(&ejHandles,*(undefined4 *)(iVar5 + 0x24));
  }
  return 0xffffffff;
}


----------------------------------------
Function: ejGetVar

int ejGetVar(undefined4 param_1,undefined4 param_2,undefined4 *param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
LAB_1001cfe0:
    iVar2 = -1;
  }
  else {
    iVar2 = *(int *)(iVar1 + 0xc) + -1;
    iVar3 = symLookup(*(int *)(*(int *)(iVar1 + 8) + iVar2 * 4) + -1,param_2);
    if (iVar3 == 0) {
      iVar3 = symLookup(**(int **)(iVar1 + 8) + -1,param_2);
      if (iVar3 == 0) goto LAB_1001cfe0;
      iVar2 = 0;
    }
    *param_3 = *(undefined4 *)(iVar3 + 0x12);
  }
  return iVar2;
}


----------------------------------------
Function: parseStmt

/* WARNING: Control flow encountered bad instruction data */

void parseStmt(int param_1,int param_2,uint param_3)

{
  bool bVar1;
  byte bVar2;
  int iVar3;
  undefined4 uVar4;
  int iVar5;
  char *pcVar6;
  int iVar7;
  undefined4 uVar8;
  uint uVar9;
  uint uVar10;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  undefined in_vs32 [16];
  undefined in_vs33 [16];
  undefined in_vs34 [16];
  undefined in_vs35 [16];
  undefined in_vs36 [16];
  undefined in_vs37 [16];
  undefined in_vs38 [16];
  undefined in_vs39 [16];
  undefined in_vs43 [16];
  undefined in_vs44 [16];
  undefined auStack_1a8 [56];
  undefined4 local_170;
  undefined auStack_158 [56];
  undefined4 local_120;
  undefined auStack_108 [56];
  undefined4 local_d0;
  undefined auStack_b8 [56];
  undefined4 local_80;
  undefined4 local_5c;
  undefined4 local_58 [21];
  uint local_4;
  
  local_4 = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
            (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
            (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4 |
            (uint)(in_cr7 & 0xf);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs32,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs33,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs34,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs35,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs37,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs38,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs39,in_vs44);
  vectorMultiplyHighRoundAndAddSignedHalfWordSaturate(in_vs43,in_vs36,in_vs44);
  local_d0 = 0;
  local_120 = 0;
  local_170 = 0;
  local_80 = 0;
  bVar1 = (param_3 & 1) != 0;
switchD_1001d100_caseD_c:
  iVar3 = ejLexGetToken(param_1,param_2);
  switch(iVar3) {
  default:
    iVar7 = 8;
    break;
  case 1:
    if (param_2 == 6) {
      iVar3 = parse(param_1,4,param_3);
      if (iVar3 != 5) {
        return;
      }
      ejLexGetToken(param_1,6);
      return;
    }
    goto LAB_1001d7fc;
  case 2:
    ejLexPutbackToken(param_1,2,*(undefined4 *)(param_1 + 0x1c));
    return;
  case 3:
    if (param_2 != 8) {
      return;
    }
    iVar3 = ejLexGetToken(param_1,8);
    if (iVar3 != 1) {
      return;
    }
    iVar3 = parse(param_1,2,param_3);
    if (iVar3 != 3) {
      return;
    }
    iVar3 = ejLexGetToken(param_1,8);
    if (iVar3 != 2) {
      return;
    }
    uVar10 = param_3 & 0xfffffffe;
    uVar9 = param_3;
    if (**(char **)(param_1 + 0x14) == '1') {
      uVar9 = uVar10;
      uVar10 = param_3;
    }
    iVar3 = parse(param_1,8,uVar10);
    if (iVar3 != 9) {
      return;
    }
    ejRemoveNewlines(param_1,8);
    iVar7 = ejLexGetToken(param_1,8);
    iVar3 = iVar7;
    if (iVar7 == 4) {
      parse(param_1,8,uVar9);
      return;
    }
    break;
  case 5:
    if (param_2 != 8) {
      return;
    }
    do {
      iVar3 = parse(param_1,8,param_3);
    } while (iVar3 == 9);
    if (iVar3 == 0x14) {
      return;
    }
    ejLexGetToken(param_1,iVar3);
    return;
  case 6:
    if (param_2 != 8) {
      return;
    }
    ejLexPutbackToken(param_1,6,*(undefined4 *)(param_1 + 0x1c));
    return;
  case 9:
    if (param_2 == 8) goto LAB_1001d7fc;
    iVar7 = 9;
    break;
  case 10:
    setstring(param_1 + 0x14,*(undefined4 *)(param_1 + 0x1c));
    goto LAB_1001d414;
  case 0xb:
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  case 0xd:
    local_5c = 0;
    setstring(&local_5c,*(undefined4 *)(param_1 + 0x1c));
    iVar3 = ejLexGetToken(param_1,param_2);
    if (iVar3 == 0x11) {
      iVar7 = parse(param_1,4,param_3);
      if (iVar7 != 5) {
        clearString(&local_5c);
        return;
      }
      if ((param_3 & 1) != 0) {
        uVar4 = *(undefined4 *)(param_1 + 0x24);
        if (param_2 == 0x12) {
          uVar8 = *(undefined4 *)(param_1 + 0x14);
        }
        else {
          iVar7 = ejGetVar(uVar4,local_5c,local_58);
          uVar8 = *(undefined4 *)(param_1 + 0x14);
          uVar4 = *(undefined4 *)(param_1 + 0x24);
          if (iVar7 < 1) {
LAB_1001d22c:
            ejSetGlobalVar(uVar4,local_5c,uVar8);
            goto LAB_1001d2e4;
          }
        }
LAB_1001d224:
        ejSetLocalVar(uVar4,local_5c,uVar8);
      }
    }
    else if (iVar3 == 0x13) {
      local_58[0] = 0;
      if (bVar1) {
        iVar7 = ejGetVar(*(undefined4 *)(param_1 + 0x24),local_5c,local_58);
        if (iVar7 < 0) {
          ejError(param_1,"Undefined variable %s\n",local_5c);
          return;
        }
        setstring(param_1 + 0x14,local_58[0]);
        iVar5 = evalExpr(param_1,local_58[0],**(undefined **)(param_1 + 0x1c),&DAT_10023cd4);
        if (-1 < iVar5) {
          uVar4 = *(undefined4 *)(param_1 + 0x24);
          uVar8 = *(undefined4 *)(param_1 + 0x14);
          if (iVar7 == 0) goto LAB_1001d22c;
          goto LAB_1001d224;
        }
        param_2 = -1;
        goto switchD_1001d100_caseD_c;
      }
    }
    else {
      local_58[0] = 0;
      if (param_2 == 0x12) {
        iVar7 = ejGetVar(*(undefined4 *)(param_1 + 0x24),local_5c,local_58);
        if (0 < iVar7) {
          pcVar6 = "Variable already declared";
LAB_1001d2b4:
          ejError(param_1,pcVar6,local_5c);
          clearString(&local_5c);
          goto LAB_1001d7fc;
        }
        ejSetLocalVar(*(undefined4 *)(param_1 + 0x24),local_5c,0);
      }
      else if (((param_3 & 1) != 0) &&
              (iVar7 = ejGetVar(*(undefined4 *)(param_1 + 0x24),local_5c,local_58), iVar7 < 0)) {
        pcVar6 = "Undefined variable %s\n";
        goto LAB_1001d2b4;
      }
      setstring(param_1 + 0x14,local_58[0]);
      ejLexPutbackToken(param_1,iVar3,*(undefined4 *)(param_1 + 0x1c));
    }
LAB_1001d2e4:
    clearString(&local_5c);
LAB_1001d414:
    if ((param_2 == 8) && ((iVar3 = ejLexGetToken(param_1,8), iVar3 == 9 || (iVar3 == 0xc)))) {
      ejRemoveNewlines(param_1,8);
    }
    goto LAB_1001d7fc;
  case 0xe:
    goto LAB_1001d7fc;
  case 0x10:
    iVar7 = parse(param_1,0x10,param_3);
    if (iVar7 != 0x11) {
      return;
    }
    goto LAB_1001d7fc;
  case 0x12:
    if ((((param_2 != 8) || (iVar7 = ejLexGetToken(param_1,8), iVar7 != 1)) ||
        (iVar7 = parse(param_1,6,param_3), iVar7 != 7)) ||
       (iVar7 = ejLexGetToken(param_1,8), iVar7 != 9)) goto LAB_1001d804;
    ejLexSaveInputState(param_1,auStack_b8);
    iVar7 = parse(param_1,2,param_3);
    if (iVar7 != 3) goto LAB_1001d804;
    bVar2 = **(byte **)(param_1 + 0x14);
    iVar7 = ejLexGetToken(param_1,8);
    if (iVar7 != 9) goto LAB_1001d804;
    ejLexSaveInputState(param_1,auStack_1a8);
    iVar7 = parse(param_1,6,param_3 & 0xfffffffe);
    if ((iVar7 != 7) || (iVar7 = ejLexGetToken(param_1,8), iVar7 != 2)) goto LAB_1001d804;
    ejLexSaveInputState(param_1,auStack_158);
    iVar7 = parse(param_1,8,param_3 & 0xfffffffe);
    if (iVar7 != 9) goto LAB_1001d804;
    ejLexSaveInputState(param_1,auStack_108);
    goto LAB_1001d600;
  case 0x14:
    goto switchD_1001d100_caseD_14;
  case -1:
    goto LAB_1001d7fc;
  }
  ejLexPutbackToken(param_1,iVar7,*(undefined4 *)(param_1 + 0x1c));
  goto LAB_1001d7fc;
switchD_1001d100_caseD_14:
  iVar3 = parse(param_1,4,param_3);
  if (iVar3 != 5) {
    return;
  }
  if (bVar1) {
    do {
      iVar3 = ejLexGetToken(param_1,param_2);
    } while (iVar3 != 0xe);
    return;
  }
  goto switchD_1001d100_caseD_c;
LAB_1001d600:
  if ((-1 < (int)-(bVar2 ^ 0x30)) || ((param_3 & 1) == 0)) {
    ejLexRestoreInputState(param_1,auStack_108);
LAB_1001d7fc:
    if (iVar3 == 0x12) {
LAB_1001d804:
      ejLexFreeInputState(param_1,auStack_b8);
      ejLexFreeInputState(param_1,auStack_1a8);
      ejLexFreeInputState(param_1,auStack_108);
      ejLexFreeInputState(param_1,auStack_158);
    }
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  ejLexRestoreInputState(param_1,auStack_158);
  iVar7 = parse(param_1,8,param_3);
  if (iVar7 != 9) {
    if (iVar7 == 0x14) {
      return;
    }
    goto LAB_1001d804;
  }
  ejLexRestoreInputState(param_1,auStack_1a8);
  iVar7 = parse(param_1,6,param_3);
  if (iVar7 != 7) goto LAB_1001d804;
  ejLexRestoreInputState(param_1,auStack_b8);
  iVar7 = parse(param_1,2,param_3);
  if (iVar7 != 3) goto LAB_1001d804;
  bVar2 = **(byte **)(param_1 + 0x14);
  goto LAB_1001d600;
}


----------------------------------------
Function: parse

int parse(int param_1,int param_2,undefined4 param_3)

{
  bool bVar1;
  int iVar2;
  int iVar3;
  undefined4 uVar4;
  int iVar5;
  char cVar6;
  byte in_cr0;
  byte in_cr1;
  byte unaff_cr2;
  byte unaff_cr3;
  byte unaff_cr4;
  byte in_cr5;
  byte in_cr6;
  byte in_cr7;
  int local_28;
  int local_24 [3];
  uint local_18;
  
  local_18 = (uint)(in_cr0 & 0xf) << 0x1c | (uint)(in_cr1 & 0xf) << 0x18 |
             (uint)(unaff_cr2 & 0xf) << 0x14 | (uint)(unaff_cr3 & 0xf) << 0x10 |
             (uint)(unaff_cr4 & 0xf) << 0xc | (uint)(in_cr5 & 0xf) << 8 | (uint)(in_cr6 & 0xf) << 4
             | (uint)(in_cr7 & 0xf);
  switch(param_2) {
  case 2:
    setstring(param_1 + 0x14,&DAT_10023fc4);
    local_24[0] = 0;
    cVar6 = '\0';
    local_28 = 0;
    while (iVar2 = parse(param_1,4,param_3), iVar2 == 5) {
      if (cVar6 != '\0') {
        setstring(&local_28,*(undefined4 *)(param_1 + 0x14));
        iVar2 = evalCond(param_1,local_24[0],cVar6,local_28);
        if (iVar2 < 0) break;
      }
      setstring(local_24,*(undefined4 *)(param_1 + 0x14));
      iVar2 = ejLexGetToken(param_1,5);
      if (iVar2 == 7) {
        cVar6 = **(char **)(param_1 + 0x1c);
      }
      else {
        if ((iVar2 == 2) || (iVar2 == 9)) {
          ejLexPutbackToken(param_1);
          param_2 = 3;
          goto LAB_1001db40;
        }
        ejLexPutbackToken(param_1);
      }
    }
    param_2 = -1;
LAB_1001db40:
    iVar2 = local_28;
    if (local_24[0] != 0) {
      bfree();
      iVar2 = local_28;
    }
    goto LAB_1001dc70;
  default:
    goto switchD_1001d900_caseD_3;
  case 4:
    setstring(param_1 + 0x14,&DAT_10023fc4);
    local_24[0] = 0;
    iVar2 = 0;
    local_28 = 0;
    cVar6 = '\0';
    do {
      if (iVar2 != 7) {
        iVar3 = parse(param_1,6,param_3);
        if (iVar3 == 7) {
          param_2 = 7;
          goto LAB_1001dbc8;
        }
LAB_1001dba0:
        param_2 = -1;
        break;
      }
      iVar3 = parse(param_1,4,param_3);
      if (iVar3 != 5) goto LAB_1001dba0;
      param_2 = 5;
LAB_1001dbc8:
      if (cVar6 != '\0') {
        setstring(&local_28,*(undefined4 *)(param_1 + 0x14));
        if (iVar2 != 7) {
          iVar2 = evalExpr(param_1,local_24[0],cVar6,local_28);
        }
        else {
          iVar2 = evalCond();
        }
        if (iVar2 < 0) goto LAB_1001dba0;
      }
      setstring(local_24,*(undefined4 *)(param_1 + 0x14));
      iVar2 = ejLexGetToken(param_1,param_2);
      if ((iVar2 != 0x13) && (1 < iVar2 - 7U)) {
        param_2 = 5;
        ejLexPutbackToken(param_1);
        break;
      }
      cVar6 = **(char **)(param_1 + 0x1c);
    } while (param_2 == 7);
    iVar2 = local_24[0];
    if (local_28 != 0) {
      bfree();
      iVar2 = local_24[0];
    }
LAB_1001dc70:
    if (iVar2 != 0) {
      bfree();
    }
switchD_1001d900_caseD_3:
    if (param_2 != -1) {
      return param_2;
    }
    break;
  case 6:
    iVar2 = parseStmt(param_1,6);
    bVar1 = iVar2 == 7;
    goto LAB_1001d958;
  case 8:
    iVar2 = parseStmt(param_1,8);
    if (iVar2 == 9) {
      return 9;
    }
    if (iVar2 == 1) {
      return 1;
    }
    if (iVar2 == 10) {
      return 10;
    }
    if (iVar2 == 0x14) {
      return 0x14;
    }
    break;
  case 0xb:
    do {
      iVar2 = parse(param_1,4,param_3);
      if (iVar2 == 1) {
        return 1;
      }
      if (iVar2 == -1) goto LAB_1001dc84;
      if (iVar2 == 5) {
        iVar3 = hAlloc(*(int *)(param_1 + 0x10) + 4);
        iVar5 = *(int *)(*(int *)(param_1 + 0x10) + 4);
        uVar4 = bstrdup(*(undefined4 *)(param_1 + 0x14));
        *(undefined4 *)(iVar5 + iVar3 * 4) = uVar4;
        *(int *)(*(int *)(param_1 + 0x10) + 8) = *(int *)(*(int *)(param_1 + 0x10) + 8) + 1;
      }
      iVar3 = ejLexGetToken(param_1,iVar2);
    } while (iVar3 == 0xf);
    ejLexPutbackToken(param_1,iVar3,*(undefined4 *)(param_1 + 0x1c));
    if (iVar3 == 2) {
      return 0xc;
    }
    if (iVar2 == 5) {
      return 0xc;
    }
    break;
  case 0x10:
    do {
      iVar2 = ejLexGetToken(param_1,0x10);
      if (iVar2 != 0xd) break;
      ejLexPutbackToken(param_1,0xd,*(undefined4 *)(param_1 + 0x1c));
      iVar2 = parse(param_1,0x12,param_3);
      if (iVar2 != 0x13) break;
      iVar2 = ejLexGetToken(param_1,0x10);
      if (iVar2 == 9) {
        return 0x11;
      }
    } while (iVar2 == 0xf);
    break;
  case 0x12:
    iVar2 = parseStmt(param_1,0x12);
    bVar1 = iVar2 == 0x13;
LAB_1001d958:
    if (bVar1) {
      return iVar2;
    }
    if (iVar2 == 1) {
      return 1;
    }
  }
LAB_1001dc84:
  if (*(int *)(param_1 + 0x18) == 0) {
    ejError(param_1,"Syntax error");
  }
  return -1;
}


----------------------------------------
Function: ejEval

/* WARNING: Control flow encountered bad instruction data */

undefined4 ejEval(undefined4 param_1,undefined4 param_2,undefined4 *param_3)

{
  int iVar1;
  
  if (param_3 != (undefined4 *)0x0) {
    *param_3 = 0;
  }
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    return 0;
  }
  setstring(iVar1 + 0x14,&DAT_10023fc4);
  ejLexOpenScript(iVar1,param_2);
  parse(iVar1,8,1);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ejEvalBlock

undefined4 ejEvalBlock(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  undefined4 uVar1;
  undefined4 uVar2;
  
  uVar1 = ejOpenBlock();
  uVar2 = ejEval(param_1,param_2,param_3);
  ejCloseBlock(param_1,uVar1);
  return uVar2;
}


----------------------------------------
Function: ejEvalFile

undefined4 ejEvalFile(char *param_1,char *param_2,undefined4 *param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  void *__buf;
  undefined4 uVar4;
  char *pcVar5;
  stat sStack_78;
  
  if (param_3 != (undefined4 *)0x0) {
    *param_3 = 0;
  }
  iVar1 = ejPtr(param_1);
  if (iVar1 != 0) {
    iVar2 = open(param_2,0,0x1b6);
    if (iVar2 < 0) {
      pcVar5 = "Bad handle %d";
      param_2 = param_1;
    }
    else {
      iVar3 = stat(param_2,&sStack_78);
      if (iVar3 < 0) {
        close(iVar2);
        pcVar5 = "Cant stat %s";
      }
      else {
        __buf = (void *)balloc((char *)(sStack_78.st_size + 1));
        if (__buf == (void *)0x0) {
          close(iVar2);
          pcVar5 = "Cant malloc %d";
          param_2 = (char *)sStack_78.st_size;
        }
        else {
          pcVar5 = (char *)read(iVar2,__buf,sStack_78.st_size);
          if (pcVar5 == (char *)sStack_78.st_size) {
            *(char *)((int)__buf + (int)pcVar5) = '\0';
            close(iVar2);
            iVar2 = ballocAscToUni(__buf,sStack_78.st_size);
            if (iVar2 != 0) {
              bfree(__buf);
              uVar4 = ejEvalBlock(param_1,iVar2,param_3);
              bfree(iVar2);
              return uVar4;
            }
            bfree(__buf);
            pcVar5 = "Cant malloc %d";
            param_2 = (char *)(sStack_78.st_size + 1);
          }
          else {
            close(iVar2);
            bfree(__buf);
            pcVar5 = "Error reading %s";
          }
        }
      }
    }
    ejError(iVar1,pcVar5,param_2);
  }
  return 0;
}


----------------------------------------
Function: ejGetVariableTable

undefined4 ejGetVariableTable(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = **(undefined4 **)(iVar1 + 8);
  }
  return uVar2;
}


----------------------------------------
Function: ejGetFunctionTable

undefined4 ejGetFunctionTable(void)

{
  int iVar1;
  undefined4 uVar2;
  
  iVar1 = ejPtr();
  if (iVar1 == 0) {
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = *(undefined4 *)(iVar1 + 4);
  }
  return uVar2;
}


----------------------------------------
Function: ringqOpen

undefined4 ringqOpen(undefined4 *param_1,int param_2,undefined4 param_3)

{
  undefined *puVar1;
  undefined4 uVar2;
  int iVar3;
  
  iVar3 = 0;
  for (param_2 = param_2 >> 4; param_2 != 0; param_2 = param_2 >> 1) {
    iVar3 = iVar3 + 1;
  }
  iVar3 = 1 << (iVar3 + 4U & 0x3f);
  puVar1 = (undefined *)balloc(iVar3);
  *param_1 = puVar1;
  if (puVar1 == (undefined *)0x0) {
    uVar2 = 0xffffffff;
  }
  else {
    param_1[4] = iVar3;
    param_1[6] = iVar3;
    param_1[1] = puVar1;
    param_1[2] = puVar1;
    param_1[5] = param_3;
    param_1[3] = puVar1 + iVar3;
    *puVar1 = 0;
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: ringqLen

int ringqLen(int param_1)

{
  uint uVar1;
  
  uVar1 = *(uint *)(param_1 + 8);
  if (uVar1 < *(uint *)(param_1 + 4)) {
    uVar1 = uVar1 + *(int *)(param_1 + 0x10);
  }
  return uVar1 - *(uint *)(param_1 + 4);
}


----------------------------------------
Function: ringqGetc

uint ringqGetc(undefined4 *param_1)

{
  byte bVar1;
  byte *pbVar2;
  
  pbVar2 = (byte *)param_1[1];
  if (pbVar2 != (byte *)param_1[2]) {
    bVar1 = *pbVar2;
    param_1[1] = pbVar2 + 1;
    if ((byte *)param_1[3] <= pbVar2 + 1) {
      param_1[1] = *param_1;
    }
    return (uint)bVar1;
  }
  return 0xffffffff;
}


----------------------------------------
Function: ringqAddNull

void ringqAddNull(int param_1)

{
  **(undefined **)(param_1 + 8) = 0;
  return;
}


----------------------------------------
Function: ringqPutBlkMax

/* WARNING: Control flow encountered bad instruction data */

void ringqPutBlkMax(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ringqGetBlkMax

/* WARNING: Control flow encountered bad instruction data */

void ringqGetBlkMax(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ringqGetBlk

/* WARNING: Control flow encountered bad instruction data */

undefined4 ringqGetBlk(undefined4 param_1,undefined4 param_2,int param_3)

{
  if (0 < param_3) {
    ringqGetBlkMax(param_1);
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  return 0;
}


----------------------------------------
Function: ringqGrow

undefined4 ringqGrow(int *param_1)

{
  undefined4 uVar1;
  undefined4 uVar2;
  int iVar3;
  int iVar4;
  
  iVar4 = param_1[4];
  if ((param_1[5] < 0) || (uVar2 = 0, iVar4 < param_1[5])) {
    uVar1 = ringqLen(param_1);
    iVar4 = balloc(iVar4 + param_1[6]);
    uVar2 = 0;
    if (iVar4 != 0) {
      uVar2 = ringqLen(param_1);
      ringqGetBlk(param_1,iVar4,uVar2);
      bfree(*param_1);
      iVar3 = param_1[4];
      param_1[2] = iVar4;
      param_1[1] = iVar4;
      *param_1 = iVar4;
      param_1[4] = iVar3 + param_1[6];
      param_1[3] = iVar4 + iVar3 + param_1[6];
      ringqPutBlk(param_1,iVar4,uVar1);
      iVar4 = 0;
      for (iVar3 = (int)(param_1[6] << 1 | (uint)param_1[6] >> 0x1f) >> 4; iVar3 != 0;
          iVar3 = iVar3 >> 1) {
        iVar4 = iVar4 + 1;
      }
      param_1[6] = 1 << (iVar4 + 4U & 0x3f);
      uVar2 = 1;
    }
  }
  return uVar2;
}


----------------------------------------
Function: ringqPutc

undefined4 ringqPutc(undefined4 *param_1,undefined param_2)

{
  int iVar1;
  undefined4 uVar2;
  undefined *puVar3;
  
  iVar1 = ringqPutBlkMax();
  if ((iVar1 < 1) && (iVar1 = ringqGrow(param_1), iVar1 == 0)) {
    uVar2 = 0xffffffff;
  }
  else {
    puVar3 = (undefined *)param_1[2];
    *puVar3 = param_2;
    puVar3 = puVar3 + 1;
    param_1[2] = puVar3;
    if ((undefined *)param_1[3] <= puVar3) {
      param_1[2] = *param_1;
    }
    uVar2 = 0;
  }
  return uVar2;
}


----------------------------------------
Function: ringqInsertc

undefined4 ringqInsertc(uint *param_1,undefined param_2)

{
  int iVar1;
  undefined4 uVar2;
  uint uVar3;
  
  iVar1 = ringqPutBlkMax();
  if ((iVar1 < 1) && (iVar1 = ringqGrow(param_1), iVar1 == 0)) {
    uVar2 = 0xffffffff;
  }
  else {
    if (param_1[1] <= *param_1) {
      param_1[1] = param_1[3];
    }
    uVar3 = param_1[1];
    uVar2 = 0;
    *(undefined *)(uVar3 - 1) = param_2;
    param_1[1] = (uint)(undefined *)(uVar3 - 1);
  }
  return uVar2;
}


----------------------------------------
Function: ringqPutBlk

/* WARNING: Control flow encountered bad instruction data */

int ringqPutBlk(undefined4 *param_1,void *param_2,size_t param_3)

{
  size_t sVar1;
  int iVar2;
  void *pvVar3;
  int iVar4;
  size_t __n;
  
  iVar4 = 0;
  while( true ) {
    if ((int)param_3 < 1) {
      return iVar4;
    }
    sVar1 = ringqPutBlkMax(param_1);
    __n = param_3;
    if (((int)sVar1 < (int)param_3) && (__n = sVar1, (int)sVar1 < 1)) break;
    pvVar3 = (void *)((int)param_2 + __n);
    param_3 = param_3 - __n;
    memcpy((void *)param_1[2],param_2,__n);
    iVar2 = param_1[2];
    iVar4 = iVar4 + __n;
    param_1[2] = iVar2 + __n;
    param_2 = pvVar3;
    if ((uint)param_1[3] <= iVar2 + __n) {
      param_1[2] = *param_1;
    }
  }
  iVar2 = ringqGrow(param_1);
  if (iVar2 == 0) {
    return iVar4;
  }
  ringqPutBlkMax(param_1);
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: ringqPutStr

void ringqPutStr(undefined4 param_1,char *param_2)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_2);
}


----------------------------------------
Function: ringqFlush

void ringqFlush(undefined4 *param_1)

{
  undefined *puVar1;
  
  puVar1 = (undefined *)*param_1;
  param_1[1] = puVar1;
  param_1[2] = puVar1;
  if (puVar1 == (undefined *)0x0) {
    return;
  }
  *puVar1 = 0;
  return;
}


----------------------------------------
Function: ringqClose

void ringqClose(undefined4 *param_1)

{
  if (param_1 != (undefined4 *)0x0) {
    ringqFlush();
    bfree(*param_1);
    *param_1 = 0;
  }
  return;
}


----------------------------------------
Function: ringqPutBlkAdj

void ringqPutBlkAdj(int param_1,int param_2)

{
  uint uVar1;
  
  uVar1 = *(int *)(param_1 + 8) + param_2;
  *(uint *)(param_1 + 8) = uVar1;
  if (*(uint *)(param_1 + 0xc) <= uVar1) {
    *(uint *)(param_1 + 8) = uVar1 - *(int *)(param_1 + 0x10);
  }
  if (*(uint *)(param_1 + 0xc) <= *(uint *)(param_1 + 8)) {
    error("../Libs/ringq.c",0x1dc,2,"Bad end pointer");
    ringqFlush(param_1);
    return;
  }
  return;
}


----------------------------------------
Function: ringqGetBlkAdj

void ringqGetBlkAdj(int param_1,int param_2)

{
  uint uVar1;
  
  uVar1 = *(int *)(param_1 + 4) + param_2;
  *(uint *)(param_1 + 4) = uVar1;
  if (*(uint *)(param_1 + 0xc) <= uVar1) {
    *(uint *)(param_1 + 4) = uVar1 - *(int *)(param_1 + 0x10);
  }
  if (*(uint *)(param_1 + 0xc) <= *(uint *)(param_1 + 4)) {
    error("../Libs/ringq.c",500,2,"Bad serv pointer");
    ringqFlush(param_1);
    return;
  }
  return;
}


----------------------------------------
Function: websUrlParse

void websUrlParse(char *param_1)

{
                    /* WARNING: Subroutine does not return */
  strlen(param_1);
}


----------------------------------------
Function: websUrlType

char * websUrlType(char *param_1,char *param_2,size_t param_3)

{
  int iVar1;
  undefined4 local_20;
  undefined4 local_1c [5];
  
  if (((param_1 != (char *)0x0) && (*param_1 != '\0')) &&
     (iVar1 = websUrlParse(param_1,&local_20,0,0,0,0,0,0,local_1c), -1 < iVar1)) {
    strlower(local_1c[0]);
    iVar1 = symLookup(websMime,local_1c[0]);
    if (iVar1 == 0) {
      strcpy(param_2,"text/plain");
    }
    else {
      strncpy(param_2,*(char **)(iVar1 + 0x12),param_3);
    }
    bfree(local_20);
    return param_2;
  }
  strcpy(param_2,"text/plain");
  return param_2;
}


----------------------------------------
Function: websMD5binary

char * websMD5binary(undefined4 param_1,undefined4 param_2)

{
  byte bVar1;
  char cVar2;
  int iVar3;
  char *__dest;
  int iVar4;
  int iVar5;
  undefined auStack_98 [92];
  char local_3c [32];
  undefined local_1c;
  byte local_18 [16];
  
  psMd5Init(auStack_98);
  psMd5Update(auStack_98,param_1,param_2);
  psMd5Final(auStack_98,local_18);
  iVar4 = 0;
  iVar5 = 0x10;
  do {
    bVar1 = local_18[iVar4];
    iVar3 = iVar4 * 2;
    iVar4 = iVar4 + 1;
    cVar2 = "0123456789abcdef"[bVar1 & 0xf];
    local_3c[iVar3] = "0123456789abcdef"[bVar1 >> 4];
    local_3c[iVar3 + 1] = cVar2;
    iVar5 = iVar5 + -1;
  } while (iVar5 != 0);
  local_1c = 0;
  __dest = (char *)balloc(0x21);
  strncpy(__dest,local_3c,0x21);
  return __dest;
}


----------------------------------------
Function: websMD5

undefined4 websMD5(char *param_1)

{
  if ((param_1 != (char *)0x0) && (*param_1 != '\0')) {
                    /* WARNING: Subroutine does not return */
    strlen(param_1);
  }
  return 0;
}


----------------------------------------
Function: websCalcNonce

undefined4 websCalcNonce(int param_1)

{
  tm *__tp;
  char *pcVar1;
  undefined4 uVar2;
  time_t tStack_18;
  undefined4 local_14 [3];
  
  time(&tStack_18);
  __tp = localtime(&tStack_18);
  local_14[0] = 0;
  pcVar1 = asctime(__tp);
  fmtAlloc(local_14,0x100,"%s:%s:%s","onceuponatimeinparadise",pcVar1,
           *(undefined4 *)(param_1 + 0x128));
  uVar2 = websMD5(local_14[0]);
  bfreeSafe(local_14[0]);
  return uVar2;
}


----------------------------------------
Function: websCalcOpaque

void websCalcOpaque(void)

{
  bstrdup("5ccc069c403ebaf9f0171e9517f40e41");
  return;
}


----------------------------------------
Function: websCalcDigest

undefined4 websCalcDigest(int param_1)

{
  undefined4 uVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  undefined4 local_30;
  undefined4 local_2c;
  undefined4 local_28 [5];
  
  local_28[0] = 0;
  fmtAlloc(local_28,0xff,"%s:%s:%s",*(undefined4 *)(param_1 + 0xd4),*(undefined4 *)(param_1 + 0x128)
           ,*(undefined4 *)(param_1 + 0xd0));
  uVar1 = websMD5(local_28[0]);
  bfreeSafe(local_28[0]);
  uVar2 = websGetVar(param_1,"REQUEST_METHOD",0);
  local_2c = 0;
  fmtAlloc(&local_2c,0xff,"%s:%s",uVar2,*(undefined4 *)(param_1 + 0x134));
  uVar2 = websMD5(local_2c);
  bfreeSafe(local_2c);
  local_30 = 0;
  if (*(int *)(param_1 + 0x144) == 0) {
    fmtAlloc(&local_30,0xff,"%s:%s:%s",uVar1,*(undefined4 *)(param_1 + 300),uVar2);
  }
  else {
    fmtAlloc(&local_30,0xff,"%s:%s:%s:%s:%s:%s",uVar1,*(undefined4 *)(param_1 + 300),
             *(undefined4 *)(param_1 + 0x13c),*(undefined4 *)(param_1 + 0x140),
             *(int *)(param_1 + 0x144),uVar2);
  }
  uVar3 = websMD5(local_30);
  bfreeSafe(uVar1);
  bfreeSafe(uVar2);
  bfreeSafe(local_30);
  return uVar3;
}


----------------------------------------
Function: websCalcUrlDigest

void websCalcUrlDigest(int param_1)

{
  char *__s;
  undefined4 local_2c [5];
  
  local_2c[0] = 0;
  fmtAlloc(local_2c,0xff,"%s:%s:%s",*(undefined4 *)(param_1 + 0xd4),*(undefined4 *)(param_1 + 0x128)
           ,*(undefined4 *)(param_1 + 0xd0));
  websMD5(local_2c[0]);
  bfreeSafe(local_2c[0]);
  __s = (char *)websGetVar(param_1,"REQUEST_METHOD",0);
                    /* WARNING: Subroutine does not return */
  strlen(__s);
}


----------------------------------------
Function: psBurnStack

/* WARNING: Control flow encountered bad instruction data */

void psBurnStack(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}


----------------------------------------
Function: psMd5Init

void psMd5Init(undefined4 *param_1)

{
  param_1[2] = 0x67452301;
  param_1[3] = 0xefcdab89;
  param_1[4] = 0x98badcfe;
  param_1[5] = 0x10325476;
  param_1[6] = 0;
  *param_1 = 0;
  param_1[1] = 0;
  return;
}


----------------------------------------
Function: psMd5Update

/* WARNING: Control flow encountered bad instruction data */

void psMd5Update(undefined4 param_1,undefined4 param_2,int param_3)

{
  if (param_3 != 0) {
                    /* WARNING: Bad instruction - Truncating control flow here */
    halt_baddata();
  }
  return;
}


----------------------------------------
Function: psMd5Final

undefined4 psMd5Final(int *param_1,undefined *param_2)

{
  undefined4 uVar1;
  uint uVar2;
  uint uVar3;
  int iVar4;
  int iVar5;
  undefined *puVar6;
  
  if (param_2 == (undefined *)0x0) {
    uVar1 = 0xffffffff;
  }
  else {
    uVar3 = param_1[6];
    uVar2 = uVar3 * 8 + param_1[1];
    if (uVar2 < (uint)param_1[1]) {
      *param_1 = *param_1 + 1;
    }
    param_1[1] = uVar2;
    *param_1 = *param_1 + (uVar3 >> 0x1d);
    param_1[6] = uVar3 + 1;
    *(undefined *)((int)param_1 + uVar3 + 0x1c) = 0x80;
    if (0x38 < uVar3 + 1) {
      while (uVar2 = param_1[6], uVar2 < 0x40) {
        param_1[6] = uVar2 + 1;
        *(undefined *)((int)param_1 + uVar2 + 0x1c) = 0;
      }
      _md5_compress(param_1);
      psBurnStack(0x54);
      param_1[6] = 0;
    }
    while (uVar2 = param_1[6], uVar2 < 0x38) {
      param_1[6] = uVar2 + 1;
      *(undefined *)((int)param_1 + uVar2 + 0x1c) = 0;
    }
    iVar4 = param_1[1];
    *(char *)(param_1 + 0x15) = (char)iVar4;
    *(char *)((int)param_1 + 0x57) = (char)((uint)iVar4 >> 0x18);
    *(char *)((int)param_1 + 0x56) = (char)((uint)iVar4 >> 0x10);
    iVar5 = *param_1;
    *(char *)((int)param_1 + 0x55) = (char)((uint)iVar4 >> 8);
    *(char *)(param_1 + 0x16) = (char)iVar5;
    *(char *)((int)param_1 + 0x5b) = (char)((uint)iVar5 >> 0x18);
    *(char *)((int)param_1 + 0x5a) = (char)((uint)iVar5 >> 0x10);
    *(char *)((int)param_1 + 0x59) = (char)((uint)iVar5 >> 8);
    _md5_compress(param_1);
    psBurnStack(0x54);
    iVar5 = 4;
    iVar4 = 0;
    do {
      param_2[3] = *(undefined *)((int)param_1 + iVar4 + 8);
      param_2[2] = (char)*(undefined2 *)((int)param_1 + iVar4 + 8);
      param_2[1] = (char)((uint)*(undefined4 *)((int)param_1 + iVar4 + 8) >> 8);
      *param_2 = (char)*(undefined4 *)((int)param_1 + iVar4 + 8);
      iVar5 = iVar5 + -1;
      param_2 = param_2 + 4;
      iVar4 = iVar4 + 4;
    } while (iVar5 != 0);
    puVar6 = (undefined *)((int)param_1 + -1);
    iVar4 = 0x5d;
    while (iVar4 = iVar4 + -1, iVar4 != 0) {
      puVar6 = puVar6 + 1;
      *puVar6 = 0;
    }
    uVar1 = 0x10;
  }
  return uVar1;
}


----------------------------------------
Function: tokenAddChar

undefined4 tokenAddChar(int *param_1,undefined param_2)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  
  iVar3 = *param_1;
  iVar1 = ringqPutc(iVar3,param_2);
  if (iVar1 < 0) {
    ejError(param_1,"Token too big");
    uVar2 = 0xffffffff;
  }
  else {
    uVar2 = 0;
    **(undefined **)(iVar3 + 8) = 0;
    param_1[7] = *(int *)(iVar3 + 4);
  }
  return uVar2;
}


----------------------------------------
Function: inputGetc.isra.0

int inputGetc_isra_0(int param_1)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  
  iVar1 = ringqLen(param_1 + 0x1c);
  if (iVar1 == 0) {
    iVar1 = -1;
  }
  else {
    iVar1 = ringqGetc(param_1 + 0x1c);
    if (iVar1 == 10) {
      iVar1 = 10;
      *(int *)(param_1 + 0x48) = *(int *)(param_1 + 0x48) + 1;
      *(undefined4 *)(param_1 + 0x4c) = 0;
    }
    else {
      if (*(int *)(param_1 + 0x44) <= *(int *)(param_1 + 0x4c) + 2) {
        *(int *)(param_1 + 0x44) = *(int *)(param_1 + 0x44) + 0x6e;
        uVar2 = brealloc(*(undefined4 *)(param_1 + 0x40));
        *(undefined4 *)(param_1 + 0x40) = uVar2;
      }
      iVar3 = *(int *)(param_1 + 0x4c);
      *(int *)(param_1 + 0x4c) = iVar3 + 1;
      *(char *)(*(int *)(param_1 + 0x40) + iVar3) = (char)iVar1;
      *(undefined *)(*(int *)(param_1 + 0x40) + *(int *)(param_1 + 0x4c)) = 0;
    }
  }
  return iVar1;
}


----------------------------------------
Function: inputPutback.isra.1

void inputPutback_isra_1(int param_1,undefined param_2)

{
  ringqInsertc(param_1 + 0x1c,param_2);
  if (0 < *(int *)(param_1 + 0x4c)) {
    *(int *)(param_1 + 0x4c) = *(int *)(param_1 + 0x4c) + -1;
  }
  *(undefined *)(*(int *)(param_1 + 0x40) + *(int *)(param_1 + 0x4c)) = 0;
  return;
}


----------------------------------------
Function: charConvert

int charConvert(undefined4 *param_1,int param_2,int param_3)

{
  int iVar1;
  ushort **ppuVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  iVar5 = 0;
  iVar4 = 0;
  while( true ) {
    if (param_3 <= iVar4) {
      return iVar5;
    }
    iVar1 = inputGetc_isra_0(*param_1);
    if (iVar1 < 0) {
      return iVar5;
    }
    ppuVar2 = __ctype_b_loc();
    if (((*ppuVar2)[iVar1] & 8) == 0) {
      if (iVar1 - 0x61U < 6) {
        iVar3 = iVar1 + -0x57;
      }
      else {
        if (5 < iVar1 - 0x41U) break;
        iVar3 = iVar1 + -0x37;
      }
    }
    else {
      iVar3 = iVar1 + -0x30;
    }
    if (param_2 <= iVar3) break;
    iVar4 = iVar4 + 1;
    iVar5 = iVar5 * param_2 + iVar3;
  }
  inputPutback_isra_1(*param_1,iVar1);
  return iVar5;
}


----------------------------------------
Function: ejLexOpen

undefined4 ejLexOpen(void)

{
  return 0;
}


----------------------------------------
Function: ejLexClose

void ejLexClose(void)

{
  return;
}


----------------------------------------
Function: ejLexOpenScript

undefined4 ejLexOpenScript(void **param_1,undefined4 param_2)

{
  void *__s;
  int iVar1;
  
  __s = (void *)balloc(0x50);
  *param_1 = __s;
  if (__s != (void *)0x0) {
    memset(__s,0,0x50);
    iVar1 = ringqOpen(__s,0x6e,0xffffffff);
    if (-1 < iVar1) {
      iVar1 = ringqOpen((int)__s + 0x1c,0x3ff,0xffffffff);
      if (-1 < iVar1) {
        ringqPutStr((int)__s + 0x1c,param_2);
        *(undefined4 *)((int)__s + 0x48) = 1;
        *(undefined4 *)((int)__s + 0x44) = 0;
        *(undefined4 *)((int)__s + 0x4c) = 0;
        *(undefined4 *)((int)__s + 0x40) = 0;
        return 0;
      }
    }
  }
  return 0xffffffff;
}


----------------------------------------
Function: ejLexCloseScript

void ejLexCloseScript(int *param_1)

{
  int iVar1;
  
  iVar1 = *param_1;
  if (*(int *)(iVar1 + 0x38) != 0) {
    bfree();
    *(undefined4 *)(iVar1 + 0x38) = 0;
  }
  *(undefined4 *)(iVar1 + 0x3c) = 0;
  if (*(int *)(iVar1 + 0x40) != 0) {
    bfree();
    *(undefined4 *)(iVar1 + 0x40) = 0;
  }
  ringqClose(iVar1);
  ringqClose(iVar1 + 0x1c);
  bfree(iVar1);
  return;
}


----------------------------------------
Function: ejLexSaveInputState

void ejLexSaveInputState(void **param_1,void *param_2)

{
  undefined4 uVar1;
  void *__src;
  
  __src = *param_1;
  memcpy(param_2,__src,0x50);
  if (*(int *)((int)__src + 0x38) != 0) {
    uVar1 = bstrdup();
    *(undefined4 *)((int)param_2 + 0x38) = uVar1;
  }
  return;
}


----------------------------------------
Function: ejLexRestoreInputState

void ejLexRestoreInputState(undefined4 *param_1,undefined4 *param_2)

{
  undefined4 uVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  
  uVar1 = param_2[1];
  uVar2 = param_2[2];
  uVar3 = param_2[3];
  param_1 = (undefined4 *)*param_1;
  *param_1 = *param_2;
  param_1[1] = uVar1;
  param_1[2] = uVar2;
  param_1[3] = uVar3;
  uVar1 = param_2[5];
  uVar2 = param_2[6];
  param_1[4] = param_2[4];
  param_1[5] = uVar1;
  param_1[6] = uVar2;
  uVar2 = param_2[9];
  uVar3 = param_2[10];
  uVar1 = param_2[8];
  param_1[7] = param_2[7];
  param_1[9] = uVar2;
  param_1[8] = uVar1;
  param_1[10] = uVar3;
  uVar1 = param_2[0xc];
  uVar2 = param_2[0xd];
  param_1[0xb] = param_2[0xb];
  param_1[0xc] = uVar1;
  param_1[0xd] = uVar2;
  param_1[0xf] = param_2[0xf];
  if (param_1[0xe] != 0) {
    bfree();
  }
  if (param_2[0xe] != 0) {
    uVar1 = bstrdup();
    param_1[0xe] = uVar1;
  }
  return;
}


----------------------------------------
Function: ejLexFreeInputState

void ejLexFreeInputState(undefined4 param_1,int param_2)

{
  if (*(int *)(param_2 + 0x38) != 0) {
    bfree();
    *(undefined4 *)(param_2 + 0x38) = 0;
  }
  return;
}


----------------------------------------
Function: ejLexGetToken

/* WARNING: Control flow encountered bad instruction data */

void ejLexGetToken(int *param_1,int param_2)

{
  bool bVar1;
  int iVar2;
  int iVar3;
  uint uVar4;
  ushort **ppuVar5;
  char *pcVar6;
  undefined4 uVar7;
  undefined4 uVar8;
  uint uVar9;
  int iVar10;
  
  param_1[8] = -1;
  iVar10 = *param_1;
  param_1[7] = (int)&DAT_10023fc4;
  ringqFlush(iVar10);
  if (*(int *)(iVar10 + 0x3c) < 1) {
    while (uVar4 = inputGetc_isra_0(*param_1), -1 < (int)uVar4) {
LAB_10020050:
      if (uVar4 == 0x2a) {
        uVar7 = 0xd;
        goto LAB_10020258;
      }
      if ((int)uVar4 < 0x2b) {
        if (uVar4 == 0x21) {
          iVar10 = inputGetc_isra_0(*param_1);
          if (iVar10 < 0) goto LAB_100201f8;
          if (iVar10 == 0x3d) {
            uVar7 = 6;
          }
          else {
            inputPutback_isra_1(*param_1);
            uVar7 = 0x11;
          }
          goto LAB_10020258;
        }
        if (0x21 < (int)uVar4) {
          if (uVar4 == 0x26) {
            iVar10 = inputGetc_isra_0(*param_1);
            if (iVar10 != 0x26) goto LAB_100201f8;
            uVar7 = 1;
            goto LAB_100203f4;
          }
          if ((int)uVar4 < 0x27) {
            if (uVar4 != 0x22) {
              uVar7 = 10;
              if (uVar4 != 0x25) goto LAB_10020610;
              goto LAB_10020258;
            }
          }
          else {
            if (uVar4 == 0x28) {
              tokenAddChar(param_1,0x28);
              iVar2 = 1;
              goto LAB_1002079c;
            }
            if (0x28 < (int)uVar4) {
              tokenAddChar(param_1,0x29);
              iVar2 = 2;
              goto LAB_1002079c;
            }
          }
          uVar9 = inputGetc_isra_0(*param_1);
          if ((int)uVar9 < 0) goto LAB_100201f8;
          goto LAB_10020450;
        }
        if (uVar4 == 10) {
          iVar2 = 0xc;
          goto LAB_1002079c;
        }
        if ((int)uVar4 < 0xb) {
          if (uVar4 == 0xffffffff) break;
          bVar1 = uVar4 == 9;
LAB_1002003c:
          if (!bVar1) goto LAB_10020610;
        }
        else if (uVar4 != 0xd) {
          bVar1 = uVar4 == 0x20;
          goto LAB_1002003c;
        }
        do {
          uVar4 = inputGetc_isra_0(*param_1);
          if ((int)uVar4 < 0) break;
        } while ((uVar4 == 0x20) || ((uVar4 & 0xfffffffb) == 9));
        goto LAB_10020050;
      }
      if (uVar4 == 0x3b) {
        tokenAddChar(param_1,0x3b);
        iVar2 = 9;
        goto LAB_1002079c;
      }
      if (0x3b < (int)uVar4) {
        if (uVar4 == 0x3e) {
          iVar10 = inputGetc_isra_0(*param_1);
          if (-1 < iVar10) {
            uVar7 = 0xc;
            if ((iVar10 == 0x3e) || (uVar7 = 4, iVar10 == 0x3d)) goto LAB_10020258;
            uVar7 = 3;
LAB_1002032c:
            tokenAddChar(param_1,uVar7);
            inputPutback_isra_1(*param_1,iVar10);
LAB_1002025c:
            iVar2 = 8;
            goto LAB_1002079c;
          }
        }
        else if ((int)uVar4 < 0x3f) {
          if (uVar4 == 0x3c) {
            iVar10 = inputGetc_isra_0(*param_1);
            if (-1 < iVar10) {
              uVar7 = 0xb;
              if ((iVar10 != 0x3c) && (uVar7 = 2, iVar10 != 0x3d)) {
                uVar7 = 1;
                goto LAB_1002032c;
              }
              goto LAB_10020258;
            }
          }
          else {
            if (uVar4 != 0x3d) goto LAB_10020610;
            iVar10 = inputGetc_isra_0(*param_1);
            if (-1 < iVar10) {
              if (iVar10 == 0x3d) {
                uVar7 = 5;
LAB_10020258:
                tokenAddChar(param_1,uVar7);
                goto LAB_1002025c;
              }
              inputPutback_isra_1(*param_1);
              iVar2 = 0x11;
              goto LAB_1002079c;
            }
          }
        }
        else {
          if (uVar4 != 0x7c) {
            if (uVar4 == 0x7d) {
              tokenAddChar(param_1,0x7d);
              iVar2 = 6;
            }
            else {
              if (uVar4 != 0x7b) {
LAB_10020610:
                if (uVar4 != 0x5c) goto LAB_100205d4;
LAB_100205e8:
                while( true ) {
                  uVar4 = inputGetc_isra_0(*param_1);
                  if ((int)uVar4 < 0) goto LAB_1002062c;
                  ppuVar5 = __ctype_b_loc();
                  if (((*ppuVar5)[uVar4] & 0x800) != 0) break;
                  if ((uVar4 != 0x24) && (uVar4 != 0x5f)) goto code_r0x10020624;
LAB_100205d4:
                  iVar2 = tokenAddChar(param_1,uVar4);
                  if (iVar2 < 0) goto LAB_1002062c;
                }
                goto LAB_10020610;
              }
              tokenAddChar(param_1,0x7b);
              iVar2 = 5;
            }
            goto LAB_1002079c;
          }
          iVar10 = inputGetc_isra_0(*param_1);
          if (iVar10 == 0x7c) {
            uVar7 = 2;
LAB_100203f4:
            tokenAddChar(param_1,uVar7);
            iVar2 = 7;
            goto LAB_1002079c;
          }
        }
LAB_100201f8:
        pcVar6 = "Syntax Error";
        goto LAB_10020440;
      }
      if (uVar4 == 0x2d) {
        iVar10 = inputGetc_isra_0(*param_1);
        if (iVar10 < 0) goto LAB_100201f8;
        if (iVar10 != 0x2d) {
          inputPutback_isra_1(*param_1);
          uVar7 = 8;
          goto LAB_10020258;
        }
        uVar7 = 0x10;
LAB_1002026c:
        tokenAddChar(param_1,uVar7);
        iVar2 = 0x13;
        goto LAB_1002079c;
      }
      if ((int)uVar4 < 0x2e) {
        if (uVar4 == 0x2b) {
          iVar10 = inputGetc_isra_0(*param_1);
          if (-1 < iVar10) {
            if (iVar10 == 0x2b) {
              uVar7 = 0xf;
              goto LAB_1002026c;
            }
            inputPutback_isra_1(*param_1);
            uVar7 = 7;
            goto LAB_10020258;
          }
          goto LAB_100201f8;
        }
        if (uVar4 != 0x2c) goto LAB_10020610;
        tokenAddChar(param_1,0x2c);
        iVar2 = 0xf;
        goto LAB_1002079c;
      }
      if (uVar4 != 0x2f) {
        if (((int)uVar4 < 0x2f) || (0x39 < (int)uVar4)) goto LAB_10020610;
        goto LAB_100205a0;
      }
      iVar2 = inputGetc_isra_0(*param_1);
      if (iVar2 < 0) goto LAB_100201f8;
      if ((iVar2 != 0x2a) && (iVar2 != 0x2f)) {
        inputPutback_isra_1(*param_1);
        uVar7 = 9;
        goto LAB_10020258;
      }
LAB_10020098:
      do {
        iVar3 = inputGetc_isra_0(*param_1);
        if (iVar3 < 0) goto LAB_100201f8;
        bVar1 = iVar2 != 0x2f;
        if (iVar3 != 10) {
          if (iVar3 != 0x2a) goto LAB_10020098;
          iVar3 = inputGetc_isra_0(*param_1);
          if (iVar2 != 0x2f) {
            bVar1 = iVar3 == 0x2f;
          }
          else {
            bVar1 = iVar3 == 10;
          }
        }
      } while (!bVar1);
    }
    iVar2 = 0xe;
  }
  else {
    ringqPutStr(iVar10,*(undefined4 *)(iVar10 + 0x38));
    iVar2 = *(int *)(iVar10 + 0x3c);
    *(undefined4 *)(iVar10 + 0x3c) = 0;
    param_1[7] = *(int *)(iVar10 + 4);
  }
  goto LAB_1002079c;
LAB_10020450:
  do {
    if (uVar9 == uVar4) goto LAB_100205c4;
    if (uVar9 == 0x5c) {
      uVar9 = inputGetc_isra_0(*param_1);
      ppuVar5 = __ctype_b_loc();
      if (((*ppuVar5)[uVar9] & 8) == 0) {
        if (uVar9 == 0x66) {
          uVar9 = 0xc;
        }
        else if ((int)uVar9 < 0x67) {
          if (uVar9 != 0x27) {
            if ((int)uVar9 < 0x28) {
              if (uVar9 != 0x22) {
LAB_10020434:
                pcVar6 = "Invalid Escape Sequence";
                goto LAB_10020440;
              }
            }
            else if (uVar9 != 0x5c) {
              if (uVar9 != 0x62) goto LAB_10020434;
              uVar9 = 8;
            }
          }
        }
        else if (uVar9 == 0x74) {
          uVar9 = 9;
        }
        else if ((int)uVar9 < 0x75) {
          if (uVar9 == 0x6e) {
            uVar9 = 10;
          }
          else {
            if (uVar9 != 0x72) goto LAB_10020434;
            uVar9 = 0xd;
          }
        }
        else {
          if (uVar9 != 0x75) {
            if (uVar9 == 0x78) {
              uVar7 = 0x10;
              uVar8 = 2;
              goto LAB_1002050c;
            }
            goto LAB_10020434;
          }
          iVar10 = charConvert(param_1,0x10,2);
          iVar2 = charConvert(param_1,0x10,2);
          uVar9 = iVar10 * 0x10 + iVar2;
        }
      }
      else {
        inputPutback_isra_1(*param_1);
        uVar7 = 8;
        uVar8 = 3;
LAB_1002050c:
        uVar9 = charConvert(param_1,uVar7,uVar8);
      }
    }
    iVar10 = tokenAddChar(param_1,uVar9);
    if (iVar10 < 0) goto LAB_10020448;
    uVar9 = inputGetc_isra_0(*param_1);
  } while (-1 < (int)uVar9);
  pcVar6 = "Unmatched Quote";
LAB_10020440:
  ejError(param_1,pcVar6);
LAB_10020448:
  iVar2 = -1;
  goto LAB_1002079c;
code_r0x10020624:
  if (uVar4 != 0x5c) {
LAB_1002062c:
    ppuVar5 = __ctype_b_loc();
    uVar9 = (uint)**(byte **)(iVar10 + 4);
    if (((((*ppuVar5)[uVar9] & 4) == 0) && (uVar9 != 0x24)) && (uVar9 != 0x5f)) {
      ejError(param_1,"Invalid identifier %s");
      goto LAB_10020448;
    }
    if (param_2 != 8) goto LAB_10020720;
    pcVar6 = (char *)param_1[7];
    iVar10 = strcmp(pcVar6,"if");
    if (iVar10 == 0) {
      iVar2 = 3;
    }
    else {
      iVar10 = strcmp(pcVar6,"else");
      if (iVar10 == 0) {
        iVar2 = 4;
      }
      else {
        iVar10 = strcmp(pcVar6,"var");
        if (iVar10 == 0) {
          iVar2 = 0x10;
        }
        else {
          iVar10 = strcmp(pcVar6,"for");
          if (iVar10 == 0) {
            iVar2 = 0x12;
          }
          else {
            iVar10 = strcmp(pcVar6,"return");
            if (iVar10 == 0) {
              if ((uVar4 == 0x3b) || (iVar2 = 0x14, uVar4 == 0x28)) {
                inputPutback_isra_1(*param_1,uVar4);
                iVar2 = 0x14;
              }
            }
            else {
LAB_10020720:
              do {
                if (((uVar4 != 0x20) && (1 < uVar4 - 9)) && (uVar4 != 0xd)) {
                    /* WARNING: Bad instruction - Truncating control flow here */
                  halt_baddata();
                }
                uVar4 = inputGetc_isra_0(*param_1);
              } while (-1 < (int)uVar4);
              inputPutback_isra_1(*param_1,uVar4);
              iVar2 = 0xd;
            }
          }
        }
      }
    }
    goto LAB_1002079c;
  }
  goto LAB_100205e8;
  while ((uVar4 = inputGetc_isra_0(*param_1), -1 < (int)uVar4 &&
         (ppuVar5 = __ctype_b_loc(), ((*ppuVar5)[uVar4] & 8) != 0))) {
LAB_100205a0:
    iVar10 = tokenAddChar(param_1,uVar4);
    if (iVar10 < 0) goto LAB_10020448;
  }
  inputPutback_isra_1(*param_1,uVar4);
LAB_100205c4:
  iVar2 = 10;
LAB_1002079c:
  param_1[8] = iVar2;
  return;
}


----------------------------------------
Function: ejLexPutbackToken

void ejLexPutbackToken(int *param_1,undefined4 param_2,undefined4 param_3)

{
  undefined4 uVar1;
  int iVar2;
  
  iVar2 = *param_1;
  if (*(int *)(iVar2 + 0x38) != 0) {
    bfree();
  }
  *(undefined4 *)(iVar2 + 0x3c) = param_2;
  uVar1 = bstrdup(param_3);
  *(undefined4 *)(iVar2 + 0x38) = uVar1;
  return;
}


----------------------------------------
Function: stat

int stat(char *__file,stat *__buf)

{
  int iVar1;
  
  iVar1 = __xstat(3,__file,__buf);
  return iVar1;
}


----------------------------------------
Function: fstat

int fstat(int __fd,stat *__buf)

{
  int iVar1;
  
  iVar1 = __fxstat(3,__fd,__buf);
  return iVar1;
}


----------------------------------------
Function: call___do_global_ctors_aux

void call___do_global_ctors_aux(void)

{
  return;
}


----------------------------------------
Function: dup2

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int dup2(int __fd,int __fd2)

{
  int iVar1;
  
  iVar1 = dup2(__fd,__fd2);
  return iVar1;
}


----------------------------------------
Function: strstr

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strstr(char *__haystack,char *__needle)

{
  char *pcVar1;
  
  pcVar1 = strstr(__haystack,__needle);
  return pcVar1;
}


----------------------------------------
Function: inet_aton

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int inet_aton(char *__cp,in_addr *__inp)

{
  int iVar1;
  
  iVar1 = inet_aton(__cp,__inp);
  return iVar1;
}


----------------------------------------
Function: strcmp

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int strcmp(char *__s1,char *__s2)

{
  int iVar1;
  
  iVar1 = strcmp(__s1,__s2);
  return iVar1;
}


----------------------------------------
Function: tempnam

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * tempnam(char *__dir,char *__pfx)

{
  char *pcVar1;
  
  pcVar1 = tempnam(__dir,__pfx);
  return pcVar1;
}


----------------------------------------
Function: read

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t read(int __fd,void *__buf,size_t __nbytes)

{
  ssize_t sVar1;
  
  sVar1 = read(__fd,__buf,__nbytes);
  return sVar1;
}


----------------------------------------
Function: printf

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int printf(char *__format,...)

{
  int iVar1;
  
  iVar1 = printf(__format);
  return iVar1;
}


----------------------------------------
Function: dup

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int dup(int __fd)

{
  int iVar1;
  
  iVar1 = dup(__fd);
  return iVar1;
}


----------------------------------------
Function: free

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void free(void *__ptr)

{
  free(__ptr);
  return;
}


----------------------------------------
Function: inet_pton

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int inet_pton(int __af,char *__cp,void *__buf)

{
  int iVar1;
  
  iVar1 = inet_pton(__af,__cp,__buf);
  return iVar1;
}


----------------------------------------
Function: memcpy

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * memcpy(void *__dest,void *__src,size_t __n)

{
  void *pvVar1;
  
  pvVar1 = memcpy(__dest,__src,__n);
  return pvVar1;
}


----------------------------------------
Function: fgets

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * fgets(char *__s,int __n,FILE *__stream)

{
  char *pcVar1;
  
  pcVar1 = fgets(__s,__n,__stream);
  return pcVar1;
}


----------------------------------------
Function: shmget

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int shmget(key_t __key,size_t __size,int __shmflg)

{
  int iVar1;
  
  iVar1 = shmget(__key,__size,__shmflg);
  return iVar1;
}


----------------------------------------
Function: fclose

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fclose(FILE *__stream)

{
  int iVar1;
  
  iVar1 = fclose(__stream);
  return iVar1;
}


----------------------------------------
Function: time

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

time_t time(time_t *__timer)

{
  time_t tVar1;
  
  tVar1 = time(__timer);
  return tVar1;
}


----------------------------------------
Function: inet_ntoa

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * inet_ntoa(in_addr __in)

{
  char *pcVar1;
  
  pcVar1 = inet_ntoa(__in);
  return pcVar1;
}


----------------------------------------
Function: signal

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__sighandler_t signal(int __sig,__sighandler_t __handler)

{
  __sighandler_t p_Var1;
  
  p_Var1 = signal(__sig,__handler);
  return p_Var1;
}


----------------------------------------
Function: lseek

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__off_t lseek(int __fd,__off_t __offset,int __whence)

{
  __off_t _Var1;
  
  _Var1 = lseek(__fd,__offset,__whence);
  return _Var1;
}


----------------------------------------
Function: memcmp

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int memcmp(void *__s1,void *__s2,size_t __n)

{
  int iVar1;
  
  iVar1 = memcmp(__s1,__s2,__n);
  return iVar1;
}


----------------------------------------
Function: sleep

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

uint sleep(uint __seconds)

{
  uint uVar1;
  
  uVar1 = sleep(__seconds);
  return uVar1;
}


----------------------------------------
Function: select

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int select(int __nfds,fd_set *__readfds,fd_set *__writefds,fd_set *__exceptfds,timeval *__timeout)

{
  int iVar1;
  
  iVar1 = select(__nfds,__readfds,__writefds,__exceptfds,__timeout);
  return iVar1;
}


----------------------------------------
Function: chdir

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int chdir(char *__path)

{
  int iVar1;
  
  iVar1 = chdir(__path);
  return iVar1;
}


----------------------------------------
Function: ctime

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * ctime(time_t *__timer)

{
  char *pcVar1;
  
  pcVar1 = ctime(__timer);
  return pcVar1;
}


----------------------------------------
Function: recvfrom

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t recvfrom(int __fd,void *__buf,size_t __n,int __flags,sockaddr *__addr,socklen_t *__addr_len)

{
  ssize_t sVar1;
  
  sVar1 = recvfrom(__fd,__buf,__n,__flags,__addr,__addr_len);
  return sVar1;
}


----------------------------------------
Function: popen

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

FILE * popen(char *__command,char *__modes)

{
  FILE *pFVar1;
  
  pFVar1 = popen(__command,__modes);
  return pFVar1;
}


----------------------------------------
Function: shmat

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * shmat(int __shmid,void *__shmaddr,int __shmflg)

{
  void *pvVar1;
  
  pvVar1 = shmat(__shmid,__shmaddr,__shmflg);
  return pvVar1;
}


----------------------------------------
Function: unlink

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int unlink(char *__name)

{
  int iVar1;
  
  iVar1 = unlink(__name);
  return iVar1;
}


----------------------------------------
Function: localtime_r

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * localtime_r(time_t *__timer,tm *__tp)

{
  tm *ptVar1;
  
  ptVar1 = localtime_r(__timer,__tp);
  return ptVar1;
}


----------------------------------------
Function: asctime

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * asctime(tm *__tp)

{
  char *pcVar1;
  
  pcVar1 = asctime(__tp);
  return pcVar1;
}


----------------------------------------
Function: fseek

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fseek(FILE *__stream,long __off,int __whence)

{
  int iVar1;
  
  iVar1 = fseek(__stream,__off,__whence);
  return iVar1;
}


----------------------------------------
Function: ioctl

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int ioctl(int __fd,ulong __request,...)

{
  int iVar1;
  
  iVar1 = ioctl(__fd,__request);
  return iVar1;
}


----------------------------------------
Function: perror

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void perror(char *__s)

{
  perror(__s);
  return;
}


----------------------------------------
Function: fwrite

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)

{
  size_t sVar1;
  
  sVar1 = fwrite(__ptr,__size,__n,__s);
  return sVar1;
}


----------------------------------------
Function: waitpid

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)

{
  __pid_t _Var1;
  
  _Var1 = waitpid(__pid,__stat_loc,__options);
  return _Var1;
}


----------------------------------------
Function: usleep

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int usleep(__useconds_t __useconds)

{
  int iVar1;
  
  iVar1 = usleep(__useconds);
  return iVar1;
}


----------------------------------------
Function: strcat

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strcat(char *__dest,char *__src)

{
  char *pcVar1;
  
  pcVar1 = strcat(__dest,__src);
  return pcVar1;
}


----------------------------------------
Function: fread

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)

{
  size_t sVar1;
  
  sVar1 = fread(__ptr,__size,__n,__stream);
  return sVar1;
}


----------------------------------------
Function: strcpy

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strcpy(char *__dest,char *__src)

{
  char *pcVar1;
  
  pcVar1 = strcpy(__dest,__src);
  return pcVar1;
}


----------------------------------------
Function: getenv

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * getenv(char *__name)

{
  char *pcVar1;
  
  pcVar1 = getenv(__name);
  return pcVar1;
}


----------------------------------------
Function: malloc

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * malloc(size_t __size)

{
  void *pvVar1;
  
  pvVar1 = malloc(__size);
  return pvVar1;
}


----------------------------------------
Function: puts

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int puts(char *__s)

{
  int iVar1;
  
  iVar1 = puts(__s);
  return iVar1;
}


----------------------------------------
Function: system

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int system(char *__command)

{
  int iVar1;
  
  iVar1 = system(__command);
  return iVar1;
}


----------------------------------------
Function: strerror

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strerror(int __errnum)

{
  char *pcVar1;
  
  pcVar1 = strerror(__errnum);
  return pcVar1;
}


----------------------------------------
Function: exit

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void exit(int __status)

{
                    /* WARNING: Subroutine does not return */
  exit(__status);
}


----------------------------------------
Function: kill

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int kill(__pid_t __pid,int __sig)

{
  int iVar1;
  
  iVar1 = kill(__pid,__sig);
  return iVar1;
}


----------------------------------------
Function: open

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int open(char *__file,int __oflag,...)

{
  int iVar1;
  
  iVar1 = open(__file,__oflag);
  return iVar1;
}


----------------------------------------
Function: flock

void flock(void)

{
  flock();
  return;
}


----------------------------------------
Function: pclose

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int pclose(FILE *__stream)

{
  int iVar1;
  
  iVar1 = pclose(__stream);
  return iVar1;
}


----------------------------------------
Function: feof

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int feof(FILE *__stream)

{
  int iVar1;
  
  iVar1 = feof(__stream);
  return iVar1;
}


----------------------------------------
Function: strftime

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)

{
  size_t sVar1;
  
  sVar1 = strftime(__s,__maxsize,__format,__tp);
  return sVar1;
}


----------------------------------------
Function: localtime

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * localtime(time_t *__timer)

{
  tm *ptVar1;
  
  ptVar1 = localtime(__timer);
  return ptVar1;
}


----------------------------------------
Function: strchr

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strchr(char *__s,int __c)

{
  char *pcVar1;
  
  pcVar1 = strchr(__s,__c);
  return pcVar1;
}


----------------------------------------
Function: getcwd

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * getcwd(char *__buf,size_t __size)

{
  char *pcVar1;
  
  pcVar1 = getcwd(__buf,__size);
  return pcVar1;
}


----------------------------------------
Function: strlen

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strlen(char *__s)

{
                    /* WARNING: Subroutine does not return */
  strlen(__s);
}


----------------------------------------
Function: execve

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int execve(char *__path,char **__argv,char **__envp)

{
  int iVar1;
  
  iVar1 = execve(__path,__argv,__envp);
  return iVar1;
}


----------------------------------------
Function: write

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t write(int __fd,void *__buf,size_t __n)

{
  ssize_t sVar1;
  
  sVar1 = write(__fd,__buf,__n);
  return sVar1;
}


----------------------------------------
Function: fprintf

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fprintf(FILE *__stream,char *__format,...)

{
  int iVar1;
  
  iVar1 = fprintf(__stream,__format);
  return iVar1;
}


----------------------------------------
Function: fcntl

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fcntl(int __fd,int __cmd,...)

{
  int iVar1;
  
  iVar1 = fcntl(__fd,__cmd);
  return iVar1;
}


----------------------------------------
Function: ftell

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

long ftell(FILE *__stream)

{
  long lVar1;
  
  lVar1 = ftell(__stream);
  return lVar1;
}


----------------------------------------
Function: snprintf

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int snprintf(char *__s,size_t __maxlen,char *__format,...)

{
  int iVar1;
  
  iVar1 = snprintf(__s,__maxlen,__format);
  return iVar1;
}


----------------------------------------
Function: fopen

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

FILE * fopen(char *__filename,char *__modes)

{
  FILE *pFVar1;
  
  pFVar1 = fopen(__filename,__modes);
  return pFVar1;
}


----------------------------------------
Function: gmtime

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * gmtime(time_t *__timer)

{
  tm *ptVar1;
  
  ptVar1 = gmtime(__timer);
  return ptVar1;
}


----------------------------------------
Function: memset

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * memset(void *__s,int __c,size_t __n)

{
  void *pvVar1;
  
  pvVar1 = memset(__s,__c,__n);
  return pvVar1;
}


----------------------------------------
Function: strncpy

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strncpy(char *__dest,char *__src,size_t __n)

{
  char *pcVar1;
  
  pcVar1 = strncpy(__dest,__src,__n);
  return pcVar1;
}


----------------------------------------
Function: fileno

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fileno(FILE *__stream)

{
  int iVar1;
  
  iVar1 = fileno(__stream);
  return iVar1;
}


----------------------------------------
Function: access

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int access(char *__name,int __type)

{
  int iVar1;
  
  iVar1 = access(__name,__type);
  return iVar1;
}


----------------------------------------
Function: sendto

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t sendto(int __fd,void *__buf,size_t __n,int __flags,sockaddr *__addr,socklen_t __addr_len)

{
  ssize_t sVar1;
  
  sVar1 = sendto(__fd,__buf,__n,__flags,__addr,__addr_len);
  return sVar1;
}


----------------------------------------
Function: strtok

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strtok(char *__s,char *__delim)

{
  char *pcVar1;
  
  pcVar1 = strtok(__s,__delim);
  return pcVar1;
}


----------------------------------------
Function: fork

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__pid_t fork(void)

{
  __pid_t _Var1;
  
  _Var1 = fork();
  return _Var1;
}


----------------------------------------
Function: readdir

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

dirent * readdir(DIR *__dirp)

{
  dirent *pdVar1;
  
  pdVar1 = readdir(__dirp);
  return pdVar1;
}


----------------------------------------
Function: strrchr

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strrchr(char *__s,int __c)

{
  char *pcVar1;
  
  pcVar1 = strrchr(__s,__c);
  return pcVar1;
}


----------------------------------------
Function: fputc

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fputc(int __c,FILE *__stream)

{
  int iVar1;
  
  iVar1 = fputc(__c,__stream);
  return iVar1;
}


----------------------------------------
Function: sprintf

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int sprintf(char *__s,char *__format,...)

{
  int iVar1;
  
  iVar1 = sprintf(__s,__format);
  return iVar1;
}


----------------------------------------
Function: remove

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int remove(char *__filename)

{
  int iVar1;
  
  iVar1 = remove(__filename);
  return iVar1;
}


----------------------------------------
Function: atoi

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int atoi(char *__nptr)

{
  int iVar1;
  
  iVar1 = atoi(__nptr);
  return iVar1;
}


----------------------------------------
Function: socket

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int socket(int __domain,int __type,int __protocol)

{
  int iVar1;
  
  iVar1 = socket(__domain,__type,__protocol);
  return iVar1;
}


----------------------------------------
Function: inet_addr

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

in_addr_t inet_addr(char *__cp)

{
  in_addr_t iVar1;
  
  iVar1 = inet_addr(__cp);
  return iVar1;
}


----------------------------------------
Function: strncmp

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int strncmp(char *__s1,char *__s2,size_t __n)

{
  int iVar1;
  
  iVar1 = strncmp(__s1,__s2,__n);
  return iVar1;
}


----------------------------------------
Function: shutdown

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int shutdown(int __fd,int __how)

{
  int iVar1;
  
  iVar1 = shutdown(__fd,__how);
  return iVar1;
}


----------------------------------------
Function: fputs

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fputs(char *__s,FILE *__stream)

{
  int iVar1;
  
  iVar1 = fputs(__s,__stream);
  return iVar1;
}


----------------------------------------
Function: recv

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t recv(int __fd,void *__buf,size_t __n,int __flags)

{
  ssize_t sVar1;
  
  sVar1 = recv(__fd,__buf,__n,__flags);
  return sVar1;
}


----------------------------------------
Function: close

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int close(int __fd)

{
  int iVar1;
  
  iVar1 = close(__fd);
  return iVar1;
}


----------------------------------------
Function: opendir

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

DIR * opendir(char *__name)

{
  DIR *pDVar1;
  
  pDVar1 = opendir(__name);
  return pDVar1;
}


----------------------------------------
Function: send

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t send(int __fd,void *__buf,size_t __n,int __flags)

{
  ssize_t sVar1;
  
  sVar1 = send(__fd,__buf,__n,__flags);
  return sVar1;
}


----------------------------------------
Function: setsockopt

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int setsockopt(int __fd,int __level,int __optname,void *__optval,socklen_t __optlen)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* setsockopt@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: dup2

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int dup2(int __fd,int __fd2)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* dup2@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strstr

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strstr(char *__haystack,char *__needle)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strstr@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: inet_aton

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int inet_aton(char *__cp,in_addr *__inp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* inet_aton@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strcmp

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int strcmp(char *__s1,char *__s2)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strcmp@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: tempnam

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * tempnam(char *__dir,char *__pfx)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* tempnam@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: read

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t read(int __fd,void *__buf,size_t __nbytes)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* read@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: printf

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int printf(char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* printf@@GLIBC_2.4 */
  halt_baddata();
}


----------------------------------------
Function: strcspn

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strcspn(char *__s,char *__reject)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strcspn@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: dup

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int dup(int __fd)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* dup@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: free

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void free(void *__ptr)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* free@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: inet_pton

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int inet_pton(int __af,char *__cp,void *__buf)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* inet_pton@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: memcpy

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * memcpy(void *__dest,void *__src,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* memcpy@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fgets

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * fgets(char *__s,int __n,FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fgets@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: shmget

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int shmget(key_t __key,size_t __size,int __shmflg)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* shmget@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fclose

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fclose(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fclose@@GLIBC_2.1 */
  halt_baddata();
}


----------------------------------------
Function: time

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

time_t time(time_t *__timer)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* time@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: inet_ntoa

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * inet_ntoa(in_addr __in)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* inet_ntoa@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: signal

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__sighandler_t signal(int __sig,__sighandler_t __handler)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* signal@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: lseek

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__off_t lseek(int __fd,__off_t __offset,int __whence)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* lseek@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: memcmp

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int memcmp(void *__s1,void *__s2,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* memcmp@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: sleep

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

uint sleep(uint __seconds)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* sleep@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: select

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int select(int __nfds,fd_set *__readfds,fd_set *__writefds,fd_set *__exceptfds,timeval *__timeout)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* select@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: chdir

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int chdir(char *__path)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* chdir@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: ctime

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * ctime(time_t *__timer)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* ctime@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: recvfrom

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t recvfrom(int __fd,void *__buf,size_t __n,int __flags,sockaddr *__addr,socklen_t *__addr_len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* recvfrom@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: popen

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

FILE * popen(char *__command,char *__modes)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* popen@@GLIBC_2.1 */
  halt_baddata();
}


----------------------------------------
Function: shmat

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * shmat(int __shmid,void *__shmaddr,int __shmflg)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* shmat@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: unlink

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int unlink(char *__name)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* unlink@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: localtime_r

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * localtime_r(time_t *__timer,tm *__tp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* localtime_r@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: asctime

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * asctime(tm *__tp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* asctime@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fseek

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fseek(FILE *__stream,long __off,int __whence)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fseek@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: ioctl

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int ioctl(int __fd,ulong __request,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* ioctl@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: perror

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void perror(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* perror@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: accept

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int accept(int __fd,sockaddr *__addr,socklen_t *__addr_len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* accept@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fwrite

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fwrite@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: waitpid

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* waitpid@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: usleep

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int usleep(__useconds_t __useconds)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* usleep@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strcat

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strcat(char *__dest,char *__src)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strcat@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fread

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fread@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strcpy

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strcpy(char *__dest,char *__src)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strcpy@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: getenv

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * getenv(char *__name)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* getenv@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: malloc

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * malloc(size_t __size)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* malloc@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: puts

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int puts(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* puts@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: system

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int system(char *__command)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* system@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strerror

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strerror(int __errnum)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strerror@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: exit

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void exit(int __status)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* exit@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: kill

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int kill(__pid_t __pid,int __sig)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* kill@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: open

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int open(char *__file,int __oflag,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* open@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: flock

/* WARNING: Control flow encountered bad instruction data */

void flock(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* flock@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: pclose

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int pclose(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* pclose@@GLIBC_2.1 */
  halt_baddata();
}


----------------------------------------
Function: feof

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int feof(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* feof@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strftime

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strftime@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: localtime

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * localtime(time_t *__timer)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* localtime@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strchr

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strchr(char *__s,int __c)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strchr@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: getcwd

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * getcwd(char *__buf,size_t __size)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* getcwd@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strlen

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strlen(char *__s)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strlen@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: execve

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int execve(char *__path,char **__argv,char **__envp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* execve@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: write

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t write(int __fd,void *__buf,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* write@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fprintf

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fprintf(FILE *__stream,char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fprintf@@GLIBC_2.4 */
  halt_baddata();
}


----------------------------------------
Function: fcntl

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fcntl(int __fd,int __cmd,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fcntl@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: bind

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int bind(int __fd,sockaddr *__addr,socklen_t __len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* bind@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: ftell

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

long ftell(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* ftell@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: snprintf

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int snprintf(char *__s,size_t __maxlen,char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* snprintf@@GLIBC_2.4 */
  halt_baddata();
}


----------------------------------------
Function: fopen

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

FILE * fopen(char *__filename,char *__modes)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fopen@@GLIBC_2.1 */
  halt_baddata();
}


----------------------------------------
Function: gmtime

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

tm * gmtime(time_t *__timer)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* gmtime@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: memset

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void * memset(void *__s,int __c,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* memset@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strncpy

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strncpy(char *__dest,char *__src,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strncpy@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fileno

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fileno(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fileno@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fgetc

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fgetc(FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fgetc@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: access

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int access(char *__name,int __type)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* access@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: sendto

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t sendto(int __fd,void *__buf,size_t __n,int __flags,sockaddr *__addr,socklen_t __addr_len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* sendto@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strtok

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strtok(char *__s,char *__delim)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strtok@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fork

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

__pid_t fork(void)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fork@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: readdir

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

dirent * readdir(DIR *__dirp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* readdir@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: listen

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int listen(int __fd,int __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* listen@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strrchr

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strrchr(char *__s,int __c)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strrchr@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fputc

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fputc(int __c,FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fputc@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: sprintf

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int sprintf(char *__s,char *__format,...)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* sprintf@@GLIBC_2.4 */
  halt_baddata();
}


----------------------------------------
Function: getsockname

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int getsockname(int __fd,sockaddr *__addr,socklen_t *__len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* getsockname@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: remove

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int remove(char *__filename)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* remove@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: atoi

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int atoi(char *__nptr)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* atoi@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: qsort

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* qsort@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: socket

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int socket(int __domain,int __type,int __protocol)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* socket@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: inet_addr

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

in_addr_t inet_addr(char *__cp)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* inet_addr@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strncmp

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int strncmp(char *__s1,char *__s2,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strncmp@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: gethostbyname

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

hostent * gethostbyname(char *__name)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* gethostbyname@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: shutdown

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int shutdown(int __fd,int __how)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* shutdown@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: fputs

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int fputs(char *__s,FILE *__stream)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* fputs@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: connect

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int connect(int __fd,sockaddr *__addr,socklen_t __len)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* connect@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: recv

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t recv(int __fd,void *__buf,size_t __n,int __flags)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* recv@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: close

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

int close(int __fd)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* close@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strspn

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

size_t strspn(char *__s,char *__accept)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strspn@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: opendir

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

DIR * opendir(char *__name)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* opendir@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: send

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

ssize_t send(int __fd,void *__buf,size_t __n,int __flags)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* send@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
Function: strncat

/* WARNING: Control flow encountered bad instruction data */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

char * strncat(char *__dest,char *__src,size_t __n)

{
                    /* WARNING: Bad instruction - Truncating control flow here */
                    /* strncat@@GLIBC_2.0 */
  halt_baddata();
}


----------------------------------------
